
HCSR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080040f8  080040f8  000140f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004394  08004394  00014394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000000  08004398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000130  200001e0  08004578  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000310  08004578  00020310  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   000104c1  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002051  00000000  00000000  000306ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004f37  00000000  00000000  0003271b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006b8  00000000  00000000  00037658  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a98  00000000  00000000  00037d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004e0c  00000000  00000000  000387a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b8b  00000000  00000000  0003d5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004013f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001db8  00000000  00000000  000401bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080040e0 	.word	0x080040e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080040e0 	.word	0x080040e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_frsub>:
 8000b20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	e002      	b.n	8000b2c <__addsf3>
 8000b26:	bf00      	nop

08000b28 <__aeabi_fsub>:
 8000b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b2c <__addsf3>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	bf1f      	itttt	ne
 8000b30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b34:	ea92 0f03 	teqne	r2, r3
 8000b38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b40:	d06a      	beq.n	8000c18 <__addsf3+0xec>
 8000b42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4a:	bfc1      	itttt	gt
 8000b4c:	18d2      	addgt	r2, r2, r3
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	4048      	eorgt	r0, r1
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	bf88      	it	hi
 8000b5c:	4770      	bxhi	lr
 8000b5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4249      	negne	r1, r1
 8000b7e:	ea92 0f03 	teq	r2, r3
 8000b82:	d03f      	beq.n	8000c04 <__addsf3+0xd8>
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	fa41 fc03 	asr.w	ip, r1, r3
 8000b8c:	eb10 000c 	adds.w	r0, r0, ip
 8000b90:	f1c3 0320 	rsb	r3, r3, #32
 8000b94:	fa01 f103 	lsl.w	r1, r1, r3
 8000b98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9c:	d502      	bpl.n	8000ba4 <__addsf3+0x78>
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba8:	d313      	bcc.n	8000bd2 <__addsf3+0xa6>
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bae:	d306      	bcc.n	8000bbe <__addsf3+0x92>
 8000bb0:	0840      	lsrs	r0, r0, #1
 8000bb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb6:	f102 0201 	add.w	r2, r2, #1
 8000bba:	2afe      	cmp	r2, #254	; 0xfe
 8000bbc:	d251      	bcs.n	8000c62 <__addsf3+0x136>
 8000bbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	ea40 0003 	orr.w	r0, r0, r3
 8000bd0:	4770      	bx	lr
 8000bd2:	0049      	lsls	r1, r1, #1
 8000bd4:	eb40 0000 	adc.w	r0, r0, r0
 8000bd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	d1ed      	bne.n	8000bbe <__addsf3+0x92>
 8000be2:	fab0 fc80 	clz	ip, r0
 8000be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bea:	ebb2 020c 	subs.w	r2, r2, ip
 8000bee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf2:	bfaa      	itet	ge
 8000bf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf8:	4252      	neglt	r2, r2
 8000bfa:	4318      	orrge	r0, r3
 8000bfc:	bfbc      	itt	lt
 8000bfe:	40d0      	lsrlt	r0, r2
 8000c00:	4318      	orrlt	r0, r3
 8000c02:	4770      	bx	lr
 8000c04:	f092 0f00 	teq	r2, #0
 8000c08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c0c:	bf06      	itte	eq
 8000c0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c12:	3201      	addeq	r2, #1
 8000c14:	3b01      	subne	r3, #1
 8000c16:	e7b5      	b.n	8000b84 <__addsf3+0x58>
 8000c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	bf18      	it	ne
 8000c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c26:	d021      	beq.n	8000c6c <__addsf3+0x140>
 8000c28:	ea92 0f03 	teq	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__addsf3+0x10c>
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	bf08      	it	eq
 8000c34:	4608      	moveq	r0, r1
 8000c36:	4770      	bx	lr
 8000c38:	ea90 0f01 	teq	r0, r1
 8000c3c:	bf1c      	itt	ne
 8000c3e:	2000      	movne	r0, #0
 8000c40:	4770      	bxne	lr
 8000c42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c46:	d104      	bne.n	8000c52 <__addsf3+0x126>
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c56:	bf3c      	itt	cc
 8000c58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bxcc	lr
 8000c5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	4770      	bx	lr
 8000c6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c70:	bf16      	itet	ne
 8000c72:	4608      	movne	r0, r1
 8000c74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c78:	4601      	movne	r1, r0
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	bf06      	itte	eq
 8000c7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c82:	ea90 0f01 	teqeq	r0, r1
 8000c86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_ui2f>:
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e004      	b.n	8000c9c <__aeabi_i2f+0x8>
 8000c92:	bf00      	nop

08000c94 <__aeabi_i2f>:
 8000c94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	bf48      	it	mi
 8000c9a:	4240      	negmi	r0, r0
 8000c9c:	ea5f 0c00 	movs.w	ip, r0
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca8:	4601      	mov	r1, r0
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	e01c      	b.n	8000cea <__aeabi_l2f+0x2a>

08000cb0 <__aeabi_ul2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e00a      	b.n	8000cd4 <__aeabi_l2f+0x14>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_l2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_l2f+0x14>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	ea5f 0c01 	movs.w	ip, r1
 8000cd8:	bf02      	ittt	eq
 8000cda:	4684      	moveq	ip, r0
 8000cdc:	4601      	moveq	r1, r0
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce4:	bf08      	it	eq
 8000ce6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cee:	fabc f28c 	clz	r2, ip
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf8:	db10      	blt.n	8000d1c <__aeabi_l2f+0x5c>
 8000cfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	f020 0001 	biceq.w	r0, r0, #1
 8000d1a:	4770      	bx	lr
 8000d1c:	f102 0220 	add.w	r2, r2, #32
 8000d20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3a:	4770      	bx	lr

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_InitTick+0x3c>)
{
 8000d40:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d42:	7818      	ldrb	r0, [r3, #0]
 8000d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d48:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d4c:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <HAL_InitTick+0x40>)
 8000d4e:	6810      	ldr	r0, [r2, #0]
 8000d50:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d54:	f000 f892 	bl	8000e7c <HAL_SYSTICK_Config>
 8000d58:	4604      	mov	r4, r0
 8000d5a:	b958      	cbnz	r0, 8000d74 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5c:	2d0f      	cmp	r5, #15
 8000d5e:	d809      	bhi.n	8000d74 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	4602      	mov	r2, r0
 8000d62:	4629      	mov	r1, r5
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f854 	bl	8000e14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <HAL_InitTick+0x44>)
 8000d6e:	4620      	mov	r0, r4
 8000d70:	601d      	str	r5, [r3, #0]
 8000d72:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d74:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d76:	bd38      	pop	{r3, r4, r5, pc}
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	2000000c 	.word	0x2000000c
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x20>)
{
 8000d86:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d92:	f000 f82d 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f7ff ffd0 	bl	8000d3c <HAL_InitTick>
  HAL_MspInit();
 8000d9c:	f000 ffe4 	bl	8001d68 <HAL_MspInit>
}
 8000da0:	2000      	movs	r0, #0
 8000da2:	bd08      	pop	{r3, pc}
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000da8:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <HAL_IncTick+0x10>)
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <HAL_IncTick+0x14>)
 8000dac:	6811      	ldr	r1, [r2, #0]
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	440b      	add	r3, r1
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000208 	.word	0x20000208
 8000dbc:	20000000 	.word	0x20000000

08000dc0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dc0:	4b01      	ldr	r3, [pc, #4]	; (8000dc8 <HAL_GetTick+0x8>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000208 	.word	0x20000208

08000dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dcc:	b538      	push	{r3, r4, r5, lr}
 8000dce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff fff6 	bl	8000dc0 <HAL_GetTick>
 8000dd4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000dd8:	bf1e      	ittt	ne
 8000dda:	4b04      	ldrne	r3, [pc, #16]	; (8000dec <HAL_Delay+0x20>)
 8000ddc:	781b      	ldrbne	r3, [r3, #0]
 8000dde:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	1b40      	subs	r0, r0, r5
 8000de6:	4284      	cmp	r4, r0
 8000de8:	d8fa      	bhi.n	8000de0 <HAL_Delay+0x14>
  {
  }
}
 8000dea:	bd38      	pop	{r3, r4, r5, pc}
 8000dec:	20000000 	.word	0x20000000

08000df0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000df2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000df6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dfe:	041b      	lsls	r3, r3, #16
 8000e00:	0c1b      	lsrs	r3, r3, #16
 8000e02:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000e0a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000e0c:	60d3      	str	r3, [r2, #12]
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e16:	b530      	push	{r4, r5, lr}
 8000e18:	68dc      	ldr	r4, [r3, #12]
 8000e1a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	bf28      	it	cs
 8000e28:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e30:	bf98      	it	ls
 8000e32:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	fa05 f303 	lsl.w	r3, r5, r3
 8000e38:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e3c:	bf88      	it	hi
 8000e3e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4019      	ands	r1, r3
 8000e42:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	fa05 f404 	lsl.w	r4, r5, r4
 8000e48:	3c01      	subs	r4, #1
 8000e4a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000e4c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4e:	ea42 0201 	orr.w	r2, r2, r1
 8000e52:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	bfaf      	iteee	ge
 8000e58:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	4b06      	ldrlt	r3, [pc, #24]	; (8000e78 <HAL_NVIC_SetPriority+0x64>)
 8000e5e:	f000 000f 	andlt.w	r0, r0, #15
 8000e62:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	bfa5      	ittet	ge
 8000e66:	b2d2      	uxtbge	r2, r2
 8000e68:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000e72:	bd30      	pop	{r4, r5, pc}
 8000e74:	e000ed00 	.word	0xe000ed00
 8000e78:	e000ed14 	.word	0xe000ed14

08000e7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000e82:	d20a      	bcs.n	8000e9a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000e9a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e010 	.word	0xe000e010
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000eaa:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	bf0c      	ite	eq
 8000eb0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000eb4:	f022 0204 	bicne.w	r2, r2, #4
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	4770      	bx	lr
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000ec0:	4770      	bx	lr

08000ec2 <HAL_SYSTICK_IRQHandler>:
{
 8000ec2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000ec4:	f7ff fffc 	bl	8000ec0 <HAL_SYSTICK_Callback>
 8000ec8:	bd08      	pop	{r3, pc}
	...

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000ed0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	4616      	mov	r6, r2
 8000ed4:	4b65      	ldr	r3, [pc, #404]	; (800106c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ed6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800107c <HAL_GPIO_Init+0x1b0>
 8000eda:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001080 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000ede:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000ee4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000eec:	45a0      	cmp	r8, r4
 8000eee:	d17f      	bne.n	8000ff0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000ef0:	684d      	ldr	r5, [r1, #4]
 8000ef2:	2d12      	cmp	r5, #18
 8000ef4:	f000 80af 	beq.w	8001056 <HAL_GPIO_Init+0x18a>
 8000ef8:	f200 8088 	bhi.w	800100c <HAL_GPIO_Init+0x140>
 8000efc:	2d02      	cmp	r5, #2
 8000efe:	f000 80a7 	beq.w	8001050 <HAL_GPIO_Init+0x184>
 8000f02:	d87c      	bhi.n	8000ffe <HAL_GPIO_Init+0x132>
 8000f04:	2d00      	cmp	r5, #0
 8000f06:	f000 808e 	beq.w	8001026 <HAL_GPIO_Init+0x15a>
 8000f0a:	2d01      	cmp	r5, #1
 8000f0c:	f000 809e 	beq.w	800104c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f10:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f14:	2cff      	cmp	r4, #255	; 0xff
 8000f16:	bf93      	iteet	ls
 8000f18:	4682      	movls	sl, r0
 8000f1a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000f1e:	3d08      	subhi	r5, #8
 8000f20:	f8d0 b000 	ldrls.w	fp, [r0]
 8000f24:	bf92      	itee	ls
 8000f26:	00b5      	lslls	r5, r6, #2
 8000f28:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000f2c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f2e:	fa09 f805 	lsl.w	r8, r9, r5
 8000f32:	ea2b 0808 	bic.w	r8, fp, r8
 8000f36:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f3a:	bf88      	it	hi
 8000f3c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f40:	ea48 0505 	orr.w	r5, r8, r5
 8000f44:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f48:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000f4c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000f50:	d04e      	beq.n	8000ff0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f52:	4d47      	ldr	r5, [pc, #284]	; (8001070 <HAL_GPIO_Init+0x1a4>)
 8000f54:	4f46      	ldr	r7, [pc, #280]	; (8001070 <HAL_GPIO_Init+0x1a4>)
 8000f56:	69ad      	ldr	r5, [r5, #24]
 8000f58:	f026 0803 	bic.w	r8, r6, #3
 8000f5c:	f045 0501 	orr.w	r5, r5, #1
 8000f60:	61bd      	str	r5, [r7, #24]
 8000f62:	69bd      	ldr	r5, [r7, #24]
 8000f64:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000f68:	f005 0501 	and.w	r5, r5, #1
 8000f6c:	9501      	str	r5, [sp, #4]
 8000f6e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f72:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f76:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f78:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000f7c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f80:	fa09 f90b 	lsl.w	r9, r9, fp
 8000f84:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f88:	4d3a      	ldr	r5, [pc, #232]	; (8001074 <HAL_GPIO_Init+0x1a8>)
 8000f8a:	42a8      	cmp	r0, r5
 8000f8c:	d068      	beq.n	8001060 <HAL_GPIO_Init+0x194>
 8000f8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f92:	42a8      	cmp	r0, r5
 8000f94:	d066      	beq.n	8001064 <HAL_GPIO_Init+0x198>
 8000f96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f9a:	42a8      	cmp	r0, r5
 8000f9c:	d064      	beq.n	8001068 <HAL_GPIO_Init+0x19c>
 8000f9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa2:	42a8      	cmp	r0, r5
 8000fa4:	bf0c      	ite	eq
 8000fa6:	2503      	moveq	r5, #3
 8000fa8:	2504      	movne	r5, #4
 8000faa:	fa05 f50b 	lsl.w	r5, r5, fp
 8000fae:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000fb2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fb6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000fbc:	bf14      	ite	ne
 8000fbe:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fc0:	43a5      	biceq	r5, r4
 8000fc2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fc4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000fca:	bf14      	ite	ne
 8000fcc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fce:	43a5      	biceq	r5, r4
 8000fd0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd8:	bf14      	ite	ne
 8000fda:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fdc:	43a5      	biceq	r5, r4
 8000fde:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fe0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fe6:	bf14      	ite	ne
 8000fe8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fea:	ea25 0404 	biceq.w	r4, r5, r4
 8000fee:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ff0:	3601      	adds	r6, #1
 8000ff2:	2e10      	cmp	r6, #16
 8000ff4:	f47f af73 	bne.w	8000ede <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000ff8:	b003      	add	sp, #12
 8000ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000ffe:	2d03      	cmp	r5, #3
 8001000:	d022      	beq.n	8001048 <HAL_GPIO_Init+0x17c>
 8001002:	2d11      	cmp	r5, #17
 8001004:	d184      	bne.n	8000f10 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001006:	68ca      	ldr	r2, [r1, #12]
 8001008:	3204      	adds	r2, #4
          break;
 800100a:	e781      	b.n	8000f10 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800100c:	4f1a      	ldr	r7, [pc, #104]	; (8001078 <HAL_GPIO_Init+0x1ac>)
 800100e:	42bd      	cmp	r5, r7
 8001010:	d009      	beq.n	8001026 <HAL_GPIO_Init+0x15a>
 8001012:	d812      	bhi.n	800103a <HAL_GPIO_Init+0x16e>
 8001014:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001084 <HAL_GPIO_Init+0x1b8>
 8001018:	454d      	cmp	r5, r9
 800101a:	d004      	beq.n	8001026 <HAL_GPIO_Init+0x15a>
 800101c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001020:	454d      	cmp	r5, r9
 8001022:	f47f af75 	bne.w	8000f10 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001026:	688a      	ldr	r2, [r1, #8]
 8001028:	b1c2      	cbz	r2, 800105c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800102a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800102c:	bf0c      	ite	eq
 800102e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001032:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001036:	2208      	movs	r2, #8
 8001038:	e76a      	b.n	8000f10 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800103a:	4575      	cmp	r5, lr
 800103c:	d0f3      	beq.n	8001026 <HAL_GPIO_Init+0x15a>
 800103e:	4565      	cmp	r5, ip
 8001040:	d0f1      	beq.n	8001026 <HAL_GPIO_Init+0x15a>
 8001042:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001088 <HAL_GPIO_Init+0x1bc>
 8001046:	e7eb      	b.n	8001020 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001048:	2200      	movs	r2, #0
 800104a:	e761      	b.n	8000f10 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800104c:	68ca      	ldr	r2, [r1, #12]
          break;
 800104e:	e75f      	b.n	8000f10 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001050:	68ca      	ldr	r2, [r1, #12]
 8001052:	3208      	adds	r2, #8
          break;
 8001054:	e75c      	b.n	8000f10 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001056:	68ca      	ldr	r2, [r1, #12]
 8001058:	320c      	adds	r2, #12
          break;
 800105a:	e759      	b.n	8000f10 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800105c:	2204      	movs	r2, #4
 800105e:	e757      	b.n	8000f10 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001060:	2500      	movs	r5, #0
 8001062:	e7a2      	b.n	8000faa <HAL_GPIO_Init+0xde>
 8001064:	2501      	movs	r5, #1
 8001066:	e7a0      	b.n	8000faa <HAL_GPIO_Init+0xde>
 8001068:	2502      	movs	r5, #2
 800106a:	e79e      	b.n	8000faa <HAL_GPIO_Init+0xde>
 800106c:	40010400 	.word	0x40010400
 8001070:	40021000 	.word	0x40021000
 8001074:	40010800 	.word	0x40010800
 8001078:	10210000 	.word	0x10210000
 800107c:	10310000 	.word	0x10310000
 8001080:	10320000 	.word	0x10320000
 8001084:	10110000 	.word	0x10110000
 8001088:	10220000 	.word	0x10220000

0800108c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800108c:	6883      	ldr	r3, [r0, #8]
 800108e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001090:	bf14      	ite	ne
 8001092:	2001      	movne	r0, #1
 8001094:	2000      	moveq	r0, #0
 8001096:	4770      	bx	lr

08001098 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001098:	b10a      	cbz	r2, 800109e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800109a:	6101      	str	r1, [r0, #16]
 800109c:	4770      	bx	lr
 800109e:	0409      	lsls	r1, r1, #16
 80010a0:	e7fb      	b.n	800109a <HAL_GPIO_WritePin+0x2>
	...

080010a4 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010a4:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 80010a6:	4604      	mov	r4, r0
 80010a8:	b908      	cbnz	r0, 80010ae <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80010aa:	2001      	movs	r0, #1
 80010ac:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 80010ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80010b2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010b6:	b91b      	cbnz	r3, 80010c0 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010b8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80010bc:	f000 fe9a 	bl	8001df4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c0:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010c2:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80010c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80010c8:	6813      	ldr	r3, [r2, #0]
 80010ca:	f023 0301 	bic.w	r3, r3, #1
 80010ce:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80010d0:	f000 fada 	bl	8001688 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80010d4:	6863      	ldr	r3, [r4, #4]
 80010d6:	4a2f      	ldr	r2, [pc, #188]	; (8001194 <HAL_I2C_Init+0xf0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d830      	bhi.n	800113e <HAL_I2C_Init+0x9a>
 80010dc:	4a2e      	ldr	r2, [pc, #184]	; (8001198 <HAL_I2C_Init+0xf4>)
 80010de:	4290      	cmp	r0, r2
 80010e0:	d9e3      	bls.n	80010aa <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010e2:	4a2e      	ldr	r2, [pc, #184]	; (800119c <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80010e4:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80010e6:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 80010ea:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80010ec:	3201      	adds	r2, #1
 80010ee:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80010f0:	4a28      	ldr	r2, [pc, #160]	; (8001194 <HAL_I2C_Init+0xf0>)
 80010f2:	3801      	subs	r0, #1
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d832      	bhi.n	800115e <HAL_I2C_Init+0xba>
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80010fe:	1c43      	adds	r3, r0, #1
 8001100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001104:	2b04      	cmp	r3, #4
 8001106:	bf38      	it	cc
 8001108:	2304      	movcc	r3, #4
 800110a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800110c:	6a22      	ldr	r2, [r4, #32]
 800110e:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001110:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001112:	4313      	orrs	r3, r2
 8001114:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001116:	68e2      	ldr	r2, [r4, #12]
 8001118:	6923      	ldr	r3, [r4, #16]
 800111a:	4313      	orrs	r3, r2
 800111c:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800111e:	69a2      	ldr	r2, [r4, #24]
 8001120:	6963      	ldr	r3, [r4, #20]
 8001122:	4313      	orrs	r3, r2
 8001124:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001126:	680b      	ldr	r3, [r1, #0]
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800112e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001130:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001132:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001136:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001138:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 800113c:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <HAL_I2C_Init+0xfc>)
 8001140:	4290      	cmp	r0, r2
 8001142:	d9b2      	bls.n	80010aa <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001144:	4d15      	ldr	r5, [pc, #84]	; (800119c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001146:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800114a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 800114e:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001150:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8001152:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001154:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001158:	fbb2 f2f5 	udiv	r2, r2, r5
 800115c:	e7c6      	b.n	80010ec <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800115e:	68a2      	ldr	r2, [r4, #8]
 8001160:	b952      	cbnz	r2, 8001178 <HAL_I2C_Init+0xd4>
 8001162:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001166:	fbb0 f0f3 	udiv	r0, r0, r3
 800116a:	1c43      	adds	r3, r0, #1
 800116c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001170:	b16b      	cbz	r3, 800118e <HAL_I2C_Init+0xea>
 8001172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001176:	e7c8      	b.n	800110a <HAL_I2C_Init+0x66>
 8001178:	2219      	movs	r2, #25
 800117a:	4353      	muls	r3, r2
 800117c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001180:	1c43      	adds	r3, r0, #1
 8001182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001186:	b113      	cbz	r3, 800118e <HAL_I2C_Init+0xea>
 8001188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118c:	e7bd      	b.n	800110a <HAL_I2C_Init+0x66>
 800118e:	2301      	movs	r3, #1
 8001190:	e7bb      	b.n	800110a <HAL_I2C_Init+0x66>
 8001192:	bf00      	nop
 8001194:	000186a0 	.word	0x000186a0
 8001198:	001e847f 	.word	0x001e847f
 800119c:	000f4240 	.word	0x000f4240
 80011a0:	003d08ff 	.word	0x003d08ff

080011a4 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a4:	6803      	ldr	r3, [r0, #0]
{
 80011a6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011aa:	07db      	lsls	r3, r3, #31
{
 80011ac:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ae:	d410      	bmi.n	80011d2 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b0:	682b      	ldr	r3, [r5, #0]
 80011b2:	079f      	lsls	r7, r3, #30
 80011b4:	d45e      	bmi.n	8001274 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011b6:	682b      	ldr	r3, [r5, #0]
 80011b8:	0719      	lsls	r1, r3, #28
 80011ba:	f100 8095 	bmi.w	80012e8 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	075a      	lsls	r2, r3, #29
 80011c2:	f100 80bf 	bmi.w	8001344 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c6:	69ea      	ldr	r2, [r5, #28]
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	f040 812d 	bne.w	8001428 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80011ce:	2000      	movs	r0, #0
 80011d0:	e014      	b.n	80011fc <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011d2:	4c90      	ldr	r4, [pc, #576]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 80011d4:	6863      	ldr	r3, [r4, #4]
 80011d6:	f003 030c 	and.w	r3, r3, #12
 80011da:	2b04      	cmp	r3, #4
 80011dc:	d007      	beq.n	80011ee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011de:	6863      	ldr	r3, [r4, #4]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d10c      	bne.n	8001202 <HAL_RCC_OscConfig+0x5e>
 80011e8:	6863      	ldr	r3, [r4, #4]
 80011ea:	03de      	lsls	r6, r3, #15
 80011ec:	d509      	bpl.n	8001202 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	039c      	lsls	r4, r3, #14
 80011f2:	d5dd      	bpl.n	80011b0 <HAL_RCC_OscConfig+0xc>
 80011f4:	686b      	ldr	r3, [r5, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1da      	bne.n	80011b0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
}
 80011fc:	b002      	add	sp, #8
 80011fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001202:	686b      	ldr	r3, [r5, #4]
 8001204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001208:	d110      	bne.n	800122c <HAL_RCC_OscConfig+0x88>
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001212:	f7ff fdd5 	bl	8000dc0 <HAL_GetTick>
 8001216:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	0398      	lsls	r0, r3, #14
 800121c:	d4c8      	bmi.n	80011b0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121e:	f7ff fdcf 	bl	8000dc0 <HAL_GetTick>
 8001222:	1b80      	subs	r0, r0, r6
 8001224:	2864      	cmp	r0, #100	; 0x64
 8001226:	d9f7      	bls.n	8001218 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001228:	2003      	movs	r0, #3
 800122a:	e7e7      	b.n	80011fc <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	b99b      	cbnz	r3, 8001256 <HAL_RCC_OscConfig+0xb2>
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001234:	6023      	str	r3, [r4, #0]
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800123e:	f7ff fdbf 	bl	8000dc0 <HAL_GetTick>
 8001242:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001244:	6823      	ldr	r3, [r4, #0]
 8001246:	0399      	lsls	r1, r3, #14
 8001248:	d5b2      	bpl.n	80011b0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124a:	f7ff fdb9 	bl	8000dc0 <HAL_GetTick>
 800124e:	1b80      	subs	r0, r0, r6
 8001250:	2864      	cmp	r0, #100	; 0x64
 8001252:	d9f7      	bls.n	8001244 <HAL_RCC_OscConfig+0xa0>
 8001254:	e7e8      	b.n	8001228 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001256:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	d103      	bne.n	8001266 <HAL_RCC_OscConfig+0xc2>
 800125e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001262:	6023      	str	r3, [r4, #0]
 8001264:	e7d1      	b.n	800120a <HAL_RCC_OscConfig+0x66>
 8001266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126a:	6023      	str	r3, [r4, #0]
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001272:	e7cd      	b.n	8001210 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001274:	4c67      	ldr	r4, [pc, #412]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001276:	6863      	ldr	r3, [r4, #4]
 8001278:	f013 0f0c 	tst.w	r3, #12
 800127c:	d007      	beq.n	800128e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800127e:	6863      	ldr	r3, [r4, #4]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b08      	cmp	r3, #8
 8001286:	d110      	bne.n	80012aa <HAL_RCC_OscConfig+0x106>
 8001288:	6863      	ldr	r3, [r4, #4]
 800128a:	03da      	lsls	r2, r3, #15
 800128c:	d40d      	bmi.n	80012aa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	079b      	lsls	r3, r3, #30
 8001292:	d502      	bpl.n	800129a <HAL_RCC_OscConfig+0xf6>
 8001294:	692b      	ldr	r3, [r5, #16]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d1af      	bne.n	80011fa <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129a:	6823      	ldr	r3, [r4, #0]
 800129c:	696a      	ldr	r2, [r5, #20]
 800129e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80012a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012a6:	6023      	str	r3, [r4, #0]
 80012a8:	e785      	b.n	80011b6 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012aa:	692a      	ldr	r2, [r5, #16]
 80012ac:	4b5a      	ldr	r3, [pc, #360]	; (8001418 <HAL_RCC_OscConfig+0x274>)
 80012ae:	b16a      	cbz	r2, 80012cc <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80012b0:	2201      	movs	r2, #1
 80012b2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012b4:	f7ff fd84 	bl	8000dc0 <HAL_GetTick>
 80012b8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ba:	6823      	ldr	r3, [r4, #0]
 80012bc:	079f      	lsls	r7, r3, #30
 80012be:	d4ec      	bmi.n	800129a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c0:	f7ff fd7e 	bl	8000dc0 <HAL_GetTick>
 80012c4:	1b80      	subs	r0, r0, r6
 80012c6:	2802      	cmp	r0, #2
 80012c8:	d9f7      	bls.n	80012ba <HAL_RCC_OscConfig+0x116>
 80012ca:	e7ad      	b.n	8001228 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80012cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012ce:	f7ff fd77 	bl	8000dc0 <HAL_GetTick>
 80012d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	0798      	lsls	r0, r3, #30
 80012d8:	f57f af6d 	bpl.w	80011b6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012dc:	f7ff fd70 	bl	8000dc0 <HAL_GetTick>
 80012e0:	1b80      	subs	r0, r0, r6
 80012e2:	2802      	cmp	r0, #2
 80012e4:	d9f6      	bls.n	80012d4 <HAL_RCC_OscConfig+0x130>
 80012e6:	e79f      	b.n	8001228 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e8:	69aa      	ldr	r2, [r5, #24]
 80012ea:	4c4a      	ldr	r4, [pc, #296]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 80012ec:	4b4b      	ldr	r3, [pc, #300]	; (800141c <HAL_RCC_OscConfig+0x278>)
 80012ee:	b1da      	cbz	r2, 8001328 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80012f0:	2201      	movs	r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80012f4:	f7ff fd64 	bl	8000dc0 <HAL_GetTick>
 80012f8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012fc:	079b      	lsls	r3, r3, #30
 80012fe:	d50d      	bpl.n	800131c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001300:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001304:	4b46      	ldr	r3, [pc, #280]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	fbb3 f3f2 	udiv	r3, r3, r2
 800130c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800130e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001310:	9b01      	ldr	r3, [sp, #4]
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	9201      	str	r2, [sp, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f9      	bne.n	800130e <HAL_RCC_OscConfig+0x16a>
 800131a:	e750      	b.n	80011be <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131c:	f7ff fd50 	bl	8000dc0 <HAL_GetTick>
 8001320:	1b80      	subs	r0, r0, r6
 8001322:	2802      	cmp	r0, #2
 8001324:	d9e9      	bls.n	80012fa <HAL_RCC_OscConfig+0x156>
 8001326:	e77f      	b.n	8001228 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001328:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800132a:	f7ff fd49 	bl	8000dc0 <HAL_GetTick>
 800132e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001332:	079f      	lsls	r7, r3, #30
 8001334:	f57f af43 	bpl.w	80011be <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001338:	f7ff fd42 	bl	8000dc0 <HAL_GetTick>
 800133c:	1b80      	subs	r0, r0, r6
 800133e:	2802      	cmp	r0, #2
 8001340:	d9f6      	bls.n	8001330 <HAL_RCC_OscConfig+0x18c>
 8001342:	e771      	b.n	8001228 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001344:	4c33      	ldr	r4, [pc, #204]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 8001346:	69e3      	ldr	r3, [r4, #28]
 8001348:	00d8      	lsls	r0, r3, #3
 800134a:	d424      	bmi.n	8001396 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 800134c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	69e3      	ldr	r3, [r4, #28]
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	61e3      	str	r3, [r4, #28]
 8001356:	69e3      	ldr	r3, [r4, #28]
 8001358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	4e30      	ldr	r6, [pc, #192]	; (8001424 <HAL_RCC_OscConfig+0x280>)
 8001362:	6833      	ldr	r3, [r6, #0]
 8001364:	05d9      	lsls	r1, r3, #23
 8001366:	d518      	bpl.n	800139a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001368:	68eb      	ldr	r3, [r5, #12]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d126      	bne.n	80013bc <HAL_RCC_OscConfig+0x218>
 800136e:	6a23      	ldr	r3, [r4, #32]
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001376:	f7ff fd23 	bl	8000dc0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800137a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800137e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001380:	6a23      	ldr	r3, [r4, #32]
 8001382:	079b      	lsls	r3, r3, #30
 8001384:	d53f      	bpl.n	8001406 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001386:	2f00      	cmp	r7, #0
 8001388:	f43f af1d 	beq.w	80011c6 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800138c:	69e3      	ldr	r3, [r4, #28]
 800138e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001392:	61e3      	str	r3, [r4, #28]
 8001394:	e717      	b.n	80011c6 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001396:	2700      	movs	r7, #0
 8001398:	e7e2      	b.n	8001360 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800139a:	6833      	ldr	r3, [r6, #0]
 800139c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013a2:	f7ff fd0d 	bl	8000dc0 <HAL_GetTick>
 80013a6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	6833      	ldr	r3, [r6, #0]
 80013aa:	05da      	lsls	r2, r3, #23
 80013ac:	d4dc      	bmi.n	8001368 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ae:	f7ff fd07 	bl	8000dc0 <HAL_GetTick>
 80013b2:	eba0 0008 	sub.w	r0, r0, r8
 80013b6:	2864      	cmp	r0, #100	; 0x64
 80013b8:	d9f6      	bls.n	80013a8 <HAL_RCC_OscConfig+0x204>
 80013ba:	e735      	b.n	8001228 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013bc:	b9ab      	cbnz	r3, 80013ea <HAL_RCC_OscConfig+0x246>
 80013be:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c4:	f023 0301 	bic.w	r3, r3, #1
 80013c8:	6223      	str	r3, [r4, #32]
 80013ca:	6a23      	ldr	r3, [r4, #32]
 80013cc:	f023 0304 	bic.w	r3, r3, #4
 80013d0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80013d2:	f7ff fcf5 	bl	8000dc0 <HAL_GetTick>
 80013d6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d8:	6a23      	ldr	r3, [r4, #32]
 80013da:	0798      	lsls	r0, r3, #30
 80013dc:	d5d3      	bpl.n	8001386 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013de:	f7ff fcef 	bl	8000dc0 <HAL_GetTick>
 80013e2:	1b80      	subs	r0, r0, r6
 80013e4:	4540      	cmp	r0, r8
 80013e6:	d9f7      	bls.n	80013d8 <HAL_RCC_OscConfig+0x234>
 80013e8:	e71e      	b.n	8001228 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ea:	2b05      	cmp	r3, #5
 80013ec:	6a23      	ldr	r3, [r4, #32]
 80013ee:	d103      	bne.n	80013f8 <HAL_RCC_OscConfig+0x254>
 80013f0:	f043 0304 	orr.w	r3, r3, #4
 80013f4:	6223      	str	r3, [r4, #32]
 80013f6:	e7ba      	b.n	800136e <HAL_RCC_OscConfig+0x1ca>
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6223      	str	r3, [r4, #32]
 80013fe:	6a23      	ldr	r3, [r4, #32]
 8001400:	f023 0304 	bic.w	r3, r3, #4
 8001404:	e7b6      	b.n	8001374 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001406:	f7ff fcdb 	bl	8000dc0 <HAL_GetTick>
 800140a:	eba0 0008 	sub.w	r0, r0, r8
 800140e:	42b0      	cmp	r0, r6
 8001410:	d9b6      	bls.n	8001380 <HAL_RCC_OscConfig+0x1dc>
 8001412:	e709      	b.n	8001228 <HAL_RCC_OscConfig+0x84>
 8001414:	40021000 	.word	0x40021000
 8001418:	42420000 	.word	0x42420000
 800141c:	42420480 	.word	0x42420480
 8001420:	2000000c 	.word	0x2000000c
 8001424:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001428:	4c22      	ldr	r4, [pc, #136]	; (80014b4 <HAL_RCC_OscConfig+0x310>)
 800142a:	6863      	ldr	r3, [r4, #4]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b08      	cmp	r3, #8
 8001432:	f43f aee2 	beq.w	80011fa <HAL_RCC_OscConfig+0x56>
 8001436:	2300      	movs	r3, #0
 8001438:	4e1f      	ldr	r6, [pc, #124]	; (80014b8 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800143a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800143c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800143e:	d12b      	bne.n	8001498 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001440:	f7ff fcbe 	bl	8000dc0 <HAL_GetTick>
 8001444:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001446:	6823      	ldr	r3, [r4, #0]
 8001448:	0199      	lsls	r1, r3, #6
 800144a:	d41f      	bmi.n	800148c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800144c:	6a2b      	ldr	r3, [r5, #32]
 800144e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001452:	d105      	bne.n	8001460 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001454:	6862      	ldr	r2, [r4, #4]
 8001456:	68a9      	ldr	r1, [r5, #8]
 8001458:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800145c:	430a      	orrs	r2, r1
 800145e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001460:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001462:	6862      	ldr	r2, [r4, #4]
 8001464:	430b      	orrs	r3, r1
 8001466:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800146a:	4313      	orrs	r3, r2
 800146c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800146e:	2301      	movs	r3, #1
 8001470:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001472:	f7ff fca5 	bl	8000dc0 <HAL_GetTick>
 8001476:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	019a      	lsls	r2, r3, #6
 800147c:	f53f aea7 	bmi.w	80011ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001480:	f7ff fc9e 	bl	8000dc0 <HAL_GetTick>
 8001484:	1b40      	subs	r0, r0, r5
 8001486:	2802      	cmp	r0, #2
 8001488:	d9f6      	bls.n	8001478 <HAL_RCC_OscConfig+0x2d4>
 800148a:	e6cd      	b.n	8001228 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff fc98 	bl	8000dc0 <HAL_GetTick>
 8001490:	1bc0      	subs	r0, r0, r7
 8001492:	2802      	cmp	r0, #2
 8001494:	d9d7      	bls.n	8001446 <HAL_RCC_OscConfig+0x2a2>
 8001496:	e6c7      	b.n	8001228 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001498:	f7ff fc92 	bl	8000dc0 <HAL_GetTick>
 800149c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	019b      	lsls	r3, r3, #6
 80014a2:	f57f ae94 	bpl.w	80011ce <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fc8b 	bl	8000dc0 <HAL_GetTick>
 80014aa:	1b40      	subs	r0, r0, r5
 80014ac:	2802      	cmp	r0, #2
 80014ae:	d9f6      	bls.n	800149e <HAL_RCC_OscConfig+0x2fa>
 80014b0:	e6ba      	b.n	8001228 <HAL_RCC_OscConfig+0x84>
 80014b2:	bf00      	nop
 80014b4:	40021000 	.word	0x40021000
 80014b8:	42420060 	.word	0x42420060

080014bc <HAL_RCC_GetSysClockFreq>:
{
 80014bc:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <HAL_RCC_GetSysClockFreq+0x68>)
{
 80014c0:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014c2:	ac02      	add	r4, sp, #8
 80014c4:	f103 0510 	add.w	r5, r3, #16
 80014c8:	4622      	mov	r2, r4
 80014ca:	6818      	ldr	r0, [r3, #0]
 80014cc:	6859      	ldr	r1, [r3, #4]
 80014ce:	3308      	adds	r3, #8
 80014d0:	c203      	stmia	r2!, {r0, r1}
 80014d2:	42ab      	cmp	r3, r5
 80014d4:	4614      	mov	r4, r2
 80014d6:	d1f7      	bne.n	80014c8 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014d8:	2301      	movs	r3, #1
 80014da:	f88d 3004 	strb.w	r3, [sp, #4]
 80014de:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80014e0:	4911      	ldr	r1, [pc, #68]	; (8001528 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014e2:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80014e6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80014e8:	f003 020c 	and.w	r2, r3, #12
 80014ec:	2a08      	cmp	r2, #8
 80014ee:	d117      	bne.n	8001520 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014f0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80014f4:	a806      	add	r0, sp, #24
 80014f6:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014f8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014fa:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014fe:	d50c      	bpl.n	800151a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001500:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001502:	480a      	ldr	r0, [pc, #40]	; (800152c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001504:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001508:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800150a:	aa06      	add	r2, sp, #24
 800150c:	4413      	add	r3, r2
 800150e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001512:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001516:	b007      	add	sp, #28
 8001518:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <HAL_RCC_GetSysClockFreq+0x74>)
 800151c:	4350      	muls	r0, r2
 800151e:	e7fa      	b.n	8001516 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001522:	e7f8      	b.n	8001516 <HAL_RCC_GetSysClockFreq+0x5a>
 8001524:	080040f8 	.word	0x080040f8
 8001528:	40021000 	.word	0x40021000
 800152c:	007a1200 	.word	0x007a1200
 8001530:	003d0900 	.word	0x003d0900

08001534 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001534:	4a4d      	ldr	r2, [pc, #308]	; (800166c <HAL_RCC_ClockConfig+0x138>)
{
 8001536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800153a:	6813      	ldr	r3, [r2, #0]
{
 800153c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	428b      	cmp	r3, r1
{
 8001544:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001546:	d328      	bcc.n	800159a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001548:	682a      	ldr	r2, [r5, #0]
 800154a:	0791      	lsls	r1, r2, #30
 800154c:	d432      	bmi.n	80015b4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154e:	07d2      	lsls	r2, r2, #31
 8001550:	d438      	bmi.n	80015c4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001552:	4a46      	ldr	r2, [pc, #280]	; (800166c <HAL_RCC_ClockConfig+0x138>)
 8001554:	6813      	ldr	r3, [r2, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	429e      	cmp	r6, r3
 800155c:	d373      	bcc.n	8001646 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800155e:	682a      	ldr	r2, [r5, #0]
 8001560:	4c43      	ldr	r4, [pc, #268]	; (8001670 <HAL_RCC_ClockConfig+0x13c>)
 8001562:	f012 0f04 	tst.w	r2, #4
 8001566:	d179      	bne.n	800165c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001568:	0713      	lsls	r3, r2, #28
 800156a:	d506      	bpl.n	800157a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800156c:	6863      	ldr	r3, [r4, #4]
 800156e:	692a      	ldr	r2, [r5, #16]
 8001570:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001574:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001578:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800157a:	f7ff ff9f 	bl	80014bc <HAL_RCC_GetSysClockFreq>
 800157e:	6863      	ldr	r3, [r4, #4]
 8001580:	4a3c      	ldr	r2, [pc, #240]	; (8001674 <HAL_RCC_ClockConfig+0x140>)
 8001582:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001586:	5cd3      	ldrb	r3, [r2, r3]
 8001588:	40d8      	lsrs	r0, r3
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <HAL_RCC_ClockConfig+0x144>)
 800158c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800158e:	2000      	movs	r0, #0
 8001590:	f7ff fbd4 	bl	8000d3c <HAL_InitTick>
  return HAL_OK;
 8001594:	2000      	movs	r0, #0
}
 8001596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	6813      	ldr	r3, [r2, #0]
 800159c:	f023 0307 	bic.w	r3, r3, #7
 80015a0:	430b      	orrs	r3, r1
 80015a2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015a4:	6813      	ldr	r3, [r2, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	4299      	cmp	r1, r3
 80015ac:	d0cc      	beq.n	8001548 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80015ae:	2001      	movs	r0, #1
 80015b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b4:	492e      	ldr	r1, [pc, #184]	; (8001670 <HAL_RCC_ClockConfig+0x13c>)
 80015b6:	68a8      	ldr	r0, [r5, #8]
 80015b8:	684b      	ldr	r3, [r1, #4]
 80015ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015be:	4303      	orrs	r3, r0
 80015c0:	604b      	str	r3, [r1, #4]
 80015c2:	e7c4      	b.n	800154e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c4:	686a      	ldr	r2, [r5, #4]
 80015c6:	4c2a      	ldr	r4, [pc, #168]	; (8001670 <HAL_RCC_ClockConfig+0x13c>)
 80015c8:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015cc:	d11c      	bne.n	8001608 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d2:	d0ec      	beq.n	80015ae <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d4:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015da:	f023 0303 	bic.w	r3, r3, #3
 80015de:	4313      	orrs	r3, r2
 80015e0:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80015e2:	f7ff fbed 	bl	8000dc0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80015e8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d114      	bne.n	8001618 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ee:	6863      	ldr	r3, [r4, #4]
 80015f0:	f003 030c 	and.w	r3, r3, #12
 80015f4:	2b04      	cmp	r3, #4
 80015f6:	d0ac      	beq.n	8001552 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f8:	f7ff fbe2 	bl	8000dc0 <HAL_GetTick>
 80015fc:	1bc0      	subs	r0, r0, r7
 80015fe:	4540      	cmp	r0, r8
 8001600:	d9f5      	bls.n	80015ee <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001602:	2003      	movs	r0, #3
 8001604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001608:	2a02      	cmp	r2, #2
 800160a:	d102      	bne.n	8001612 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001610:	e7df      	b.n	80015d2 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001612:	f013 0f02 	tst.w	r3, #2
 8001616:	e7dc      	b.n	80015d2 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001618:	2b02      	cmp	r3, #2
 800161a:	d10f      	bne.n	800163c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800161c:	6863      	ldr	r3, [r4, #4]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b08      	cmp	r3, #8
 8001624:	d095      	beq.n	8001552 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001626:	f7ff fbcb 	bl	8000dc0 <HAL_GetTick>
 800162a:	1bc0      	subs	r0, r0, r7
 800162c:	4540      	cmp	r0, r8
 800162e:	d9f5      	bls.n	800161c <HAL_RCC_ClockConfig+0xe8>
 8001630:	e7e7      	b.n	8001602 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001632:	f7ff fbc5 	bl	8000dc0 <HAL_GetTick>
 8001636:	1bc0      	subs	r0, r0, r7
 8001638:	4540      	cmp	r0, r8
 800163a:	d8e2      	bhi.n	8001602 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800163c:	6863      	ldr	r3, [r4, #4]
 800163e:	f013 0f0c 	tst.w	r3, #12
 8001642:	d1f6      	bne.n	8001632 <HAL_RCC_ClockConfig+0xfe>
 8001644:	e785      	b.n	8001552 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	6813      	ldr	r3, [r2, #0]
 8001648:	f023 0307 	bic.w	r3, r3, #7
 800164c:	4333      	orrs	r3, r6
 800164e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001650:	6813      	ldr	r3, [r2, #0]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	429e      	cmp	r6, r3
 8001658:	d1a9      	bne.n	80015ae <HAL_RCC_ClockConfig+0x7a>
 800165a:	e780      	b.n	800155e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800165c:	6863      	ldr	r3, [r4, #4]
 800165e:	68e9      	ldr	r1, [r5, #12]
 8001660:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001664:	430b      	orrs	r3, r1
 8001666:	6063      	str	r3, [r4, #4]
 8001668:	e77e      	b.n	8001568 <HAL_RCC_ClockConfig+0x34>
 800166a:	bf00      	nop
 800166c:	40022000 	.word	0x40022000
 8001670:	40021000 	.word	0x40021000
 8001674:	0800411c 	.word	0x0800411c
 8001678:	2000000c 	.word	0x2000000c

0800167c <HAL_RCC_GetHCLKFreq>:
}
 800167c:	4b01      	ldr	r3, [pc, #4]	; (8001684 <HAL_RCC_GetHCLKFreq+0x8>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	2000000c 	.word	0x2000000c

08001688 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001688:	4b04      	ldr	r3, [pc, #16]	; (800169c <HAL_RCC_GetPCLK1Freq+0x14>)
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001696:	6810      	ldr	r0, [r2, #0]
}    
 8001698:	40d8      	lsrs	r0, r3
 800169a:	4770      	bx	lr
 800169c:	40021000 	.word	0x40021000
 80016a0:	0800412c 	.word	0x0800412c
 80016a4:	2000000c 	.word	0x2000000c

080016a8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <HAL_RCC_GetPCLK2Freq+0x14>)
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	4a03      	ldr	r2, [pc, #12]	; (80016c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016b6:	6810      	ldr	r0, [r2, #0]
} 
 80016b8:	40d8      	lsrs	r0, r3
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000
 80016c0:	0800412c 	.word	0x0800412c
 80016c4:	2000000c 	.word	0x2000000c

080016c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80016c8:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80016ca:	4604      	mov	r4, r0
 80016cc:	2800      	cmp	r0, #0
 80016ce:	d034      	beq.n	800173a <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80016d4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80016d8:	b90b      	cbnz	r3, 80016de <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016da:	f000 fbad 	bl	8001e38 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80016de:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016e0:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80016e2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80016e6:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80016e8:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80016ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016ee:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80016f0:	6863      	ldr	r3, [r4, #4]
 80016f2:	69a2      	ldr	r2, [r4, #24]
 80016f4:	4303      	orrs	r3, r0
 80016f6:	68e0      	ldr	r0, [r4, #12]
 80016f8:	4303      	orrs	r3, r0
 80016fa:	6920      	ldr	r0, [r4, #16]
 80016fc:	4303      	orrs	r3, r0
 80016fe:	6960      	ldr	r0, [r4, #20]
 8001700:	4303      	orrs	r3, r0
 8001702:	69e0      	ldr	r0, [r4, #28]
 8001704:	4303      	orrs	r3, r0
 8001706:	6a20      	ldr	r0, [r4, #32]
 8001708:	4303      	orrs	r3, r0
 800170a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800170c:	4303      	orrs	r3, r0
 800170e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001712:	4303      	orrs	r3, r0
 8001714:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001716:	0c12      	lsrs	r2, r2, #16
 8001718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800171a:	f002 0204 	and.w	r2, r2, #4
 800171e:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001720:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001722:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001724:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001726:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001728:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800172a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800172e:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8001730:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001732:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001734:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001738:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800173a:	2001      	movs	r0, #1
}
 800173c:	bd10      	pop	{r4, pc}
	...

08001740 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001744:	6805      	ldr	r5, [r0, #0]
 8001746:	68c2      	ldr	r2, [r0, #12]
 8001748:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800174a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800174c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001750:	4313      	orrs	r3, r2
 8001752:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001754:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001756:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001758:	430b      	orrs	r3, r1
 800175a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800175c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001760:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001764:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001766:	4313      	orrs	r3, r2
 8001768:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800176a:	696b      	ldr	r3, [r5, #20]
 800176c:	6982      	ldr	r2, [r0, #24]
 800176e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001772:	4313      	orrs	r3, r2
 8001774:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001776:	4b40      	ldr	r3, [pc, #256]	; (8001878 <UART_SetConfig+0x138>)
{
 8001778:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800177a:	429d      	cmp	r5, r3
 800177c:	f04f 0419 	mov.w	r4, #25
 8001780:	d146      	bne.n	8001810 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001782:	f7ff ff91 	bl	80016a8 <HAL_RCC_GetPCLK2Freq>
 8001786:	fb04 f300 	mul.w	r3, r4, r0
 800178a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800178e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001792:	00b6      	lsls	r6, r6, #2
 8001794:	fbb3 f3f6 	udiv	r3, r3, r6
 8001798:	fbb3 f3f8 	udiv	r3, r3, r8
 800179c:	011e      	lsls	r6, r3, #4
 800179e:	f7ff ff83 	bl	80016a8 <HAL_RCC_GetPCLK2Freq>
 80017a2:	4360      	muls	r0, r4
 80017a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	fbb0 f7f3 	udiv	r7, r0, r3
 80017ae:	f7ff ff7b 	bl	80016a8 <HAL_RCC_GetPCLK2Freq>
 80017b2:	4360      	muls	r0, r4
 80017b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80017be:	fbb3 f3f8 	udiv	r3, r3, r8
 80017c2:	fb08 7313 	mls	r3, r8, r3, r7
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	3332      	adds	r3, #50	; 0x32
 80017ca:	fbb3 f3f8 	udiv	r3, r3, r8
 80017ce:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80017d2:	f7ff ff69 	bl	80016a8 <HAL_RCC_GetPCLK2Freq>
 80017d6:	4360      	muls	r0, r4
 80017d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	fbb0 faf2 	udiv	sl, r0, r2
 80017e2:	f7ff ff61 	bl	80016a8 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80017e6:	4360      	muls	r0, r4
 80017e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80017f2:	fbb3 f3f8 	udiv	r3, r3, r8
 80017f6:	fb08 a313 	mls	r3, r8, r3, sl
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	3332      	adds	r3, #50	; 0x32
 80017fe:	fbb3 f3f8 	udiv	r3, r3, r8
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	433b      	orrs	r3, r7
 8001808:	4433      	add	r3, r6
 800180a:	60ab      	str	r3, [r5, #8]
 800180c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001810:	f7ff ff3a 	bl	8001688 <HAL_RCC_GetPCLK1Freq>
 8001814:	fb04 f300 	mul.w	r3, r4, r0
 8001818:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800181c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001820:	00b6      	lsls	r6, r6, #2
 8001822:	fbb3 f3f6 	udiv	r3, r3, r6
 8001826:	fbb3 f3f8 	udiv	r3, r3, r8
 800182a:	011e      	lsls	r6, r3, #4
 800182c:	f7ff ff2c 	bl	8001688 <HAL_RCC_GetPCLK1Freq>
 8001830:	4360      	muls	r0, r4
 8001832:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fbb0 f7f3 	udiv	r7, r0, r3
 800183c:	f7ff ff24 	bl	8001688 <HAL_RCC_GetPCLK1Freq>
 8001840:	4360      	muls	r0, r4
 8001842:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	fbb0 f3f3 	udiv	r3, r0, r3
 800184c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001850:	fb08 7313 	mls	r3, r8, r3, r7
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	3332      	adds	r3, #50	; 0x32
 8001858:	fbb3 f3f8 	udiv	r3, r3, r8
 800185c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001860:	f7ff ff12 	bl	8001688 <HAL_RCC_GetPCLK1Freq>
 8001864:	4360      	muls	r0, r4
 8001866:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	fbb0 faf2 	udiv	sl, r0, r2
 8001870:	f7ff ff0a 	bl	8001688 <HAL_RCC_GetPCLK1Freq>
 8001874:	e7b7      	b.n	80017e6 <UART_SetConfig+0xa6>
 8001876:	bf00      	nop
 8001878:	40013800 	.word	0x40013800

0800187c <HAL_UART_Init>:
{
 800187c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800187e:	4604      	mov	r4, r0
 8001880:	b340      	cbz	r0, 80018d4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001882:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001886:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800188a:	b91b      	cbnz	r3, 8001894 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800188c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001890:	f000 fafc 	bl	8001e8c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001894:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001896:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001898:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800189c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800189e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80018a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018a4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80018a6:	f7ff ff4b 	bl	8001740 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018aa:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018ac:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018bc:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80018be:	68da      	ldr	r2, [r3, #12]
 80018c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018c4:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80018c6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80018ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80018ce:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80018d2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018d4:	2001      	movs	r0, #1
}
 80018d6:	bd10      	pop	{r4, pc}

080018d8 <DWT_Delay_Init>:
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80018d8:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <DWT_Delay_Init+0x38>)
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80018e0:	60da      	str	r2, [r3, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80018e8:	60da      	str	r2, [r3, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <DWT_Delay_Init+0x3c>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	f042 0201 	orr.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80018fc:	2200      	movs	r2, #0
 80018fe:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001900:	bf00      	nop
     __ASM volatile ("NOP");
 8001902:	bf00      	nop
  __ASM volatile ("NOP");
 8001904:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001906:	6858      	ldr	r0, [r3, #4]
     }
     else
  {
    return 1; /*clock cycle counter not started*/
  }
}
 8001908:	fab0 f080 	clz	r0, r0
 800190c:	0940      	lsrs	r0, r0, #5
 800190e:	4770      	bx	lr
 8001910:	e000edf0 	.word	0xe000edf0
 8001914:	e0001000 	.word	0xe0001000

08001918 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001918:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800191a:	4c09      	ldr	r4, [pc, #36]	; (8001940 <DWT_Delay_us+0x28>)
{
 800191c:	9001      	str	r0, [sp, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800191e:	6865      	ldr	r5, [r4, #4]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001920:	f7ff feac 	bl	800167c <HAL_RCC_GetHCLKFreq>
 8001924:	4a07      	ldr	r2, [pc, #28]	; (8001944 <DWT_Delay_us+0x2c>)
 8001926:	9b01      	ldr	r3, [sp, #4]
 8001928:	fbb0 f0f2 	udiv	r0, r0, r2
 800192c:	4343      	muls	r3, r0
 800192e:	9301      	str	r3, [sp, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001930:	6863      	ldr	r3, [r4, #4]
 8001932:	9a01      	ldr	r2, [sp, #4]
 8001934:	1b5b      	subs	r3, r3, r5
 8001936:	4293      	cmp	r3, r2
 8001938:	d3fa      	bcc.n	8001930 <DWT_Delay_us+0x18>
}
 800193a:	b003      	add	sp, #12
 800193c:	bd30      	pop	{r4, r5, pc}
 800193e:	bf00      	nop
 8001940:	e0001000 	.word	0xe0001000
 8001944:	000f4240 	.word	0x000f4240

08001948 <write_lcd>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void write_lcd (uint8_t data, uint8_t cmd_data)
{
 8001948:	b510      	push	{r4, lr}
	// identifica comando ou dado
	if (cmd_data) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 800194a:	460a      	mov	r2, r1
{
 800194c:	4604      	mov	r4, r0
	if (cmd_data) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 800194e:	b101      	cbz	r1, 8001952 <write_lcd+0xa>
 8001950:	2201      	movs	r2, #1
	else 					HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8001952:	2120      	movs	r1, #32
 8001954:	4832      	ldr	r0, [pc, #200]	; (8001a20 <write_lcd+0xd8>)
 8001956:	f7ff fb9f 	bl	8001098 <HAL_GPIO_WritePin>

	// 4 bits high
	if (data & 0x80) HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 800195a:	0623      	lsls	r3, r4, #24
 800195c:	bf4c      	ite	mi
 800195e:	2201      	movmi	r2, #1
	else						 HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movpl	r2, #0
 8001962:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001966:	482f      	ldr	r0, [pc, #188]	; (8001a24 <write_lcd+0xdc>)
 8001968:	f7ff fb96 	bl	8001098 <HAL_GPIO_WritePin>
	if (data & 0x40) HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 800196c:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 8001970:	bf18      	it	ne
 8001972:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8001974:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001978:	482a      	ldr	r0, [pc, #168]	; (8001a24 <write_lcd+0xdc>)
 800197a:	f7ff fb8d 	bl	8001098 <HAL_GPIO_WritePin>
	if (data & 0x20) HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 800197e:	f014 0220 	ands.w	r2, r4, #32
 8001982:	bf18      	it	ne
 8001984:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8001986:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198a:	4826      	ldr	r0, [pc, #152]	; (8001a24 <write_lcd+0xdc>)
 800198c:	f7ff fb84 	bl	8001098 <HAL_GPIO_WritePin>
	if (data & 0x10) HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8001990:	f014 0210 	ands.w	r2, r4, #16
 8001994:	bf18      	it	ne
 8001996:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8001998:	2108      	movs	r1, #8
 800199a:	4821      	ldr	r0, [pc, #132]	; (8001a20 <write_lcd+0xd8>)
 800199c:	f7ff fb7c 	bl	8001098 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	2110      	movs	r1, #16
 80019a4:	481e      	ldr	r0, [pc, #120]	; (8001a20 <write_lcd+0xd8>)
 80019a6:	f7ff fb77 	bl	8001098 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80019aa:	2002      	movs	r0, #2
 80019ac:	f7ff fa0e 	bl	8000dcc <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2110      	movs	r1, #16
 80019b4:	481a      	ldr	r0, [pc, #104]	; (8001a20 <write_lcd+0xd8>)
 80019b6:	f7ff fb6f 	bl	8001098 <HAL_GPIO_WritePin>

	// 4 bits Low
	if (data & 0x08) HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80019ba:	f014 0208 	ands.w	r2, r4, #8
 80019be:	bf18      	it	ne
 80019c0:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80019c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019c6:	4817      	ldr	r0, [pc, #92]	; (8001a24 <write_lcd+0xdc>)
 80019c8:	f7ff fb66 	bl	8001098 <HAL_GPIO_WritePin>
	if (data & 0x04) HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80019cc:	f014 0204 	ands.w	r2, r4, #4
 80019d0:	bf18      	it	ne
 80019d2:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80019d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d8:	4812      	ldr	r0, [pc, #72]	; (8001a24 <write_lcd+0xdc>)
 80019da:	f7ff fb5d 	bl	8001098 <HAL_GPIO_WritePin>
	if (data & 0x02) HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80019de:	f014 0202 	ands.w	r2, r4, #2
 80019e2:	bf18      	it	ne
 80019e4:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80019e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ea:	480e      	ldr	r0, [pc, #56]	; (8001a24 <write_lcd+0xdc>)
 80019ec:	f7ff fb54 	bl	8001098 <HAL_GPIO_WritePin>
	if (data & 0x01) HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80019f0:	f014 0201 	ands.w	r2, r4, #1
 80019f4:	bf18      	it	ne
 80019f6:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 80019f8:	2108      	movs	r1, #8
 80019fa:	4809      	ldr	r0, [pc, #36]	; (8001a20 <write_lcd+0xd8>)
 80019fc:	f7ff fb4c 	bl	8001098 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	2110      	movs	r1, #16
 8001a04:	4806      	ldr	r0, [pc, #24]	; (8001a20 <write_lcd+0xd8>)
 8001a06:	f7ff fb47 	bl	8001098 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f7ff f9de 	bl	8000dcc <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
}
 8001a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2110      	movs	r1, #16
 8001a18:	4801      	ldr	r0, [pc, #4]	; (8001a20 <write_lcd+0xd8>)
 8001a1a:	f7ff bb3d 	b.w	8001098 <HAL_GPIO_WritePin>
 8001a1e:	bf00      	nop
 8001a20:	40010c00 	.word	0x40010c00
 8001a24:	40010800 	.word	0x40010800

08001a28 <init_lcd>:

/* init_LCD - Inicializa o display em 4bits */
void init_lcd(void)
{
 8001a28:	b508      	push	{r3, lr}
	write_lcd(0x33, 0);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2033      	movs	r0, #51	; 0x33
 8001a2e:	f7ff ff8b 	bl	8001948 <write_lcd>
	write_lcd(0x32, 0);
 8001a32:	2100      	movs	r1, #0
 8001a34:	2032      	movs	r0, #50	; 0x32
 8001a36:	f7ff ff87 	bl	8001948 <write_lcd>
	write_lcd(0x28, 0);
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2028      	movs	r0, #40	; 0x28
 8001a3e:	f7ff ff83 	bl	8001948 <write_lcd>
	write_lcd(0x06, 0);
 8001a42:	2100      	movs	r1, #0
 8001a44:	2006      	movs	r0, #6
 8001a46:	f7ff ff7f 	bl	8001948 <write_lcd>
	write_lcd(0x0C, 0);
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	200c      	movs	r0, #12
 8001a4e:	f7ff ff7b 	bl	8001948 <write_lcd>
	write_lcd(0x01, 0);
}
 8001a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	write_lcd(0x01, 0);
 8001a56:	2100      	movs	r1, #0
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff bf75 	b.w	8001948 <write_lcd>

08001a5e <string_lcd>:

/* string_lcd - escreve string no LCD */
void string_lcd (char *string)
{
 8001a5e:	b510      	push	{r4, lr}
 8001a60:	1e44      	subs	r4, r0, #1
	while(*string) write_lcd(*string++, 1);
 8001a62:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001a66:	b900      	cbnz	r0, 8001a6a <string_lcd+0xc>
}
 8001a68:	bd10      	pop	{r4, pc}
	while(*string) write_lcd(*string++, 1);
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	f7ff ff6c 	bl	8001948 <write_lcd>
 8001a70:	e7f7      	b.n	8001a62 <string_lcd+0x4>

08001a72 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a72:	2302      	movs	r3, #2
{
 8001a74:	b510      	push	{r4, lr}
 8001a76:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a78:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001a7e:	2310      	movs	r3, #16
 8001a80:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a82:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a84:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a86:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a88:	f7ff fb8c 	bl	80011a4 <HAL_RCC_OscConfig>
 8001a8c:	4601      	mov	r1, r0
 8001a8e:	b100      	cbz	r0, 8001a92 <SystemClock_Config+0x20>
 8001a90:	e7fe      	b.n	8001a90 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a92:	230f      	movs	r3, #15
 8001a94:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001a96:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a9a:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a9e:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001aa0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001aa2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001aa4:	f7ff fd46 	bl	8001534 <HAL_RCC_ClockConfig>
 8001aa8:	4604      	mov	r4, r0
 8001aaa:	b100      	cbz	r0, 8001aae <SystemClock_Config+0x3c>
 8001aac:	e7fe      	b.n	8001aac <SystemClock_Config+0x3a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001aae:	f7ff fde5 	bl	800167c <HAL_RCC_GetHCLKFreq>
 8001ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ab6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001aba:	f7ff f9df 	bl	8000e7c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001abe:	2004      	movs	r0, #4
 8001ac0:	f7ff f9f2 	bl	8000ea8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001ac4:	4622      	mov	r2, r4
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff f9a2 	bl	8000e14 <HAL_NVIC_SetPriority>
}
 8001ad0:	b010      	add	sp, #64	; 0x40
 8001ad2:	bd10      	pop	{r4, pc}
 8001ad4:	0000      	movs	r0, r0
	...

08001ad8 <main>:
{
 8001ad8:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
  HAL_Init();
 8001ada:	f7ff f953 	bl	8000d84 <HAL_Init>
  SystemClock_Config();
 8001ade:	f7ff ffc8 	bl	8001a72 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b8d      	ldr	r3, [pc, #564]	; (8001d18 <main+0x240>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 8001ae4:	f649 0180 	movw	r1, #39040	; 0x9880
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 8001aea:	488c      	ldr	r0, [pc, #560]	; (8001d1c <main+0x244>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	f042 0204 	orr.w	r2, r2, #4
 8001af0:	619a      	str	r2, [r3, #24]
 8001af2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|TRIG_Pin 
                          |D4_Pin|EN_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS1_Pin D7_Pin D6_Pin D5_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|D7_Pin|D6_Pin|D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af4:	2401      	movs	r4, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	f002 0204 	and.w	r2, r2, #4
 8001afa:	9200      	str	r2, [sp, #0]
 8001afc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afe:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2502      	movs	r5, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	f042 0208 	orr.w	r2, r2, #8
 8001b06:	619a      	str	r2, [r3, #24]
 8001b08:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 8001b14:	f7ff fac0 	bl	8001098 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|TRIG_Pin 
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f641 013b 	movw	r1, #6203	; 0x183b
 8001b1e:	4880      	ldr	r0, [pc, #512]	; (8001d20 <main+0x248>)
 8001b20:	f7ff faba 	bl	8001098 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CS1_Pin|D7_Pin|D6_Pin|D5_Pin;
 8001b24:	f649 0380 	movw	r3, #39040	; 0x9880
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	a902      	add	r1, sp, #8
 8001b2a:	487c      	ldr	r0, [pc, #496]	; (8001d1c <main+0x244>)
  GPIO_InitStruct.Pin = CS1_Pin|D7_Pin|D6_Pin|D5_Pin;
 8001b2c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f7ff f9cb 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin LD3_Pin D4_Pin 
                           EN_Pin RS_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|D4_Pin 
 8001b36:	f640 033b 	movw	r3, #2107	; 0x83b
                          |EN_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3a:	a902      	add	r1, sp, #8
 8001b3c:	4878      	ldr	r0, [pc, #480]	; (8001d20 <main+0x248>)
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|D4_Pin 
 8001b3e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b44:	f7ff f9c2 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b4e:	2303      	movs	r3, #3
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001b50:	a902      	add	r1, sp, #8
 8001b52:	4873      	ldr	r0, [pc, #460]	; (8001d20 <main+0x248>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b56:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pins : ECHO_Pin S3_Pin S2_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin|S3_Pin|S2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b58:	2400      	movs	r4, #0
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f7ff f9b7 	bl	8000ecc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ECHO_Pin|S3_Pin|S2_Pin;
 8001b5e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	a902      	add	r1, sp, #8
 8001b64:	486e      	ldr	r0, [pc, #440]	; (8001d20 <main+0x248>)
  GPIO_InitStruct.Pin = ECHO_Pin|S3_Pin|S2_Pin;
 8001b66:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b68:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f7ff f9ae 	bl	8000ecc <HAL_GPIO_Init>

  /*Configure GPIO pin : S1_Pin */
  GPIO_InitStruct.Pin = S1_Pin;
 8001b70:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8001b74:	4869      	ldr	r0, [pc, #420]	; (8001d1c <main+0x244>)
 8001b76:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = S1_Pin;
 8001b78:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	9404      	str	r4, [sp, #16]
  hi2c1.Init.ClockSpeed = 100000;
 8001b7e:	4e69      	ldr	r6, [pc, #420]	; (8001d24 <main+0x24c>)
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f7ff f9a4 	bl	8000ecc <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001b84:	4868      	ldr	r0, [pc, #416]	; (8001d28 <main+0x250>)
  hi2c1.Init.ClockSpeed = 100000;
 8001b86:	4b69      	ldr	r3, [pc, #420]	; (8001d2c <main+0x254>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b88:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8001b8a:	e880 0048 	stmia.w	r0, {r3, r6}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001b92:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b94:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b96:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b98:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b9a:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b9c:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b9e:	f7ff fa81 	bl	80010a4 <HAL_I2C_Init>
 8001ba2:	b100      	cbz	r0, 8001ba6 <main+0xce>
 8001ba4:	e7fe      	b.n	8001ba4 <main+0xcc>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001ba6:	f44f 7482 	mov.w	r4, #260	; 0x104
 8001baa:	f44f 6580 	mov.w	r5, #1024	; 0x400
  hspi1.Instance = SPI1;
 8001bae:	4b60      	ldr	r3, [pc, #384]	; (8001d30 <main+0x258>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001bb0:	4a60      	ldr	r2, [pc, #384]	; (8001d34 <main+0x25c>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb2:	60d8      	str	r0, [r3, #12]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001bb4:	e883 0034 	stmia.w	r3, {r2, r4, r5}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 8001bbe:	220a      	movs	r2, #10
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bc0:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc2:	6158      	str	r0, [r3, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bc4:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc6:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bc8:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bca:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bcc:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bd0:	f7ff fd7a 	bl	80016c8 <HAL_SPI_Init>
 8001bd4:	b100      	cbz	r0, 8001bd8 <main+0x100>
 8001bd6:	e7fe      	b.n	8001bd6 <main+0xfe>
  huart1.Init.BaudRate = 9600;
 8001bd8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart1.Instance = USART1;
 8001bdc:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <main+0x260>)
  huart1.Init.BaudRate = 9600;
 8001bde:	4957      	ldr	r1, [pc, #348]	; (8001d3c <main+0x264>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be0:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 9600;
 8001be2:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001be6:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be8:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bea:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bec:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bee:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bf0:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf2:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bf4:	f7ff fe42 	bl	800187c <HAL_UART_Init>
 8001bf8:	4606      	mov	r6, r0
 8001bfa:	b100      	cbz	r0, 8001bfe <main+0x126>
 8001bfc:	e7fe      	b.n	8001bfc <main+0x124>
  init_lcd();
 8001bfe:	f7ff ff13 	bl	8001a28 <init_lcd>
  write_lcd(0x80,0);
 8001c02:	4631      	mov	r1, r6
 8001c04:	2080      	movs	r0, #128	; 0x80
 8001c06:	f7ff fe9f 	bl	8001948 <write_lcd>
  string_lcd("CNPEM");
 8001c0a:	484d      	ldr	r0, [pc, #308]	; (8001d40 <main+0x268>)
 8001c0c:	f7ff ff27 	bl	8001a5e <string_lcd>
  sprintf(buffer,"%.2f",metro);
 8001c10:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <main+0x26c>)
	  HAL_GPIO_WritePin(TRIG_GPIO_Port,TRIG_Pin,GPIO_PIN_SET);
 8001c12:	4c43      	ldr	r4, [pc, #268]	; (8001d20 <main+0x248>)
  sprintf(buffer,"%.2f",metro);
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	f7fe fc07 	bl	8000428 <__aeabi_f2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	484a      	ldr	r0, [pc, #296]	; (8001d48 <main+0x270>)
 8001c20:	494a      	ldr	r1, [pc, #296]	; (8001d4c <main+0x274>)
 8001c22:	f000 fe49 	bl	80028b8 <siprintf>
  write_lcd(0xC0,0);
 8001c26:	4631      	mov	r1, r6
 8001c28:	20c0      	movs	r0, #192	; 0xc0
 8001c2a:	f7ff fe8d 	bl	8001948 <write_lcd>
  string_lcd(buffer);
 8001c2e:	4846      	ldr	r0, [pc, #280]	; (8001d48 <main+0x270>)
 8001c30:	f7ff ff15 	bl	8001a5e <string_lcd>
  DWT_Delay_Init ();
 8001c34:	f7ff fe50 	bl	80018d8 <DWT_Delay_Init>
	  time=0;
 8001c38:	4f45      	ldr	r7, [pc, #276]	; (8001d50 <main+0x278>)
	  HAL_GPIO_WritePin(TRIG_GPIO_Port,TRIG_Pin,GPIO_PIN_SET);
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	46b8      	mov	r8, r7
 8001c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c42:	4620      	mov	r0, r4
 8001c44:	f7ff fa28 	bl	8001098 <HAL_GPIO_WritePin>
	  DWT_Delay_us(2);
 8001c48:	2002      	movs	r0, #2
 8001c4a:	f7ff fe65 	bl	8001918 <DWT_Delay_us>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port,TRIG_Pin,GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c54:	4620      	mov	r0, r4
 8001c56:	f7ff fa1f 	bl	8001098 <HAL_GPIO_WritePin>
	  DWT_Delay_us(11);
 8001c5a:	200b      	movs	r0, #11
 8001c5c:	f7ff fe5c 	bl	8001918 <DWT_Delay_us>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port,TRIG_Pin,GPIO_PIN_SET);
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c66:	4620      	mov	r0, r4
 8001c68:	f7ff fa16 	bl	8001098 <HAL_GPIO_WritePin>
	  time=0;
 8001c6c:	803e      	strh	r6, [r7, #0]
	  while(!HAL_GPIO_ReadPin(ECHO_GPIO_Port,ECHO_Pin));
 8001c6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c72:	4620      	mov	r0, r4
 8001c74:	f7ff fa0a 	bl	800108c <HAL_GPIO_ReadPin>
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	d0f8      	beq.n	8001c6e <main+0x196>
	  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4611      	mov	r1, r2
 8001c82:	f7ff fa09 	bl	8001098 <HAL_GPIO_WritePin>
	  while(HAL_GPIO_ReadPin(ECHO_GPIO_Port,ECHO_Pin))
 8001c86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f7ff f9fe 	bl	800108c <HAL_GPIO_ReadPin>
 8001c90:	4605      	mov	r5, r0
 8001c92:	bb88      	cbnz	r0, 8001cf8 <main+0x220>
	  time_copy=time;
 8001c94:	8838      	ldrh	r0, [r7, #0]
 8001c96:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <main+0x27c>)
 8001c98:	8018      	strh	r0, [r3, #0]
	  distance_cm=(float)time_copy*0.182;
 8001c9a:	f7fe fff7 	bl	8000c8c <__aeabi_ui2f>
 8001c9e:	f7fe fbc3 	bl	8000428 <__aeabi_f2d>
 8001ca2:	a31b      	add	r3, pc, #108	; (adr r3, 8001d10 <main+0x238>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fc12 	bl	80004d0 <__aeabi_dmul>
 8001cac:	f7fe fee8 	bl	8000a80 <__aeabi_d2f>
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <main+0x280>)
 8001cb2:	6018      	str	r0, [r3, #0]
	  sprintf(buffer,"%2.1f",distance_cm);
 8001cb4:	f7fe fbb8 	bl	8000428 <__aeabi_f2d>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4822      	ldr	r0, [pc, #136]	; (8001d48 <main+0x270>)
 8001cbe:	4927      	ldr	r1, [pc, #156]	; (8001d5c <main+0x284>)
 8001cc0:	f000 fdfa 	bl	80028b8 <siprintf>
	  write_lcd(0xC0,0);
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	20c0      	movs	r0, #192	; 0xc0
 8001cc8:	f7ff fe3e 	bl	8001948 <write_lcd>
	  string_lcd(buffer);
 8001ccc:	481e      	ldr	r0, [pc, #120]	; (8001d48 <main+0x270>)
 8001cce:	f7ff fec6 	bl	8001a5e <string_lcd>
	  write_lcd(0xC4,0);
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	20c4      	movs	r0, #196	; 0xc4
 8001cd6:	f7ff fe37 	bl	8001948 <write_lcd>
	  string_lcd(" ");
 8001cda:	4821      	ldr	r0, [pc, #132]	; (8001d60 <main+0x288>)
 8001cdc:	f7ff febf 	bl	8001a5e <string_lcd>
	  write_lcd(0xC5,0);
 8001ce0:	4629      	mov	r1, r5
 8001ce2:	20c5      	movs	r0, #197	; 0xc5
 8001ce4:	f7ff fe30 	bl	8001948 <write_lcd>
	  string_lcd("CM");
 8001ce8:	481e      	ldr	r0, [pc, #120]	; (8001d64 <main+0x28c>)
 8001cea:	f7ff feb8 	bl	8001a5e <string_lcd>
	  HAL_Delay(1000);
 8001cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cf2:	f7ff f86b 	bl	8000dcc <HAL_Delay>
	  HAL_GPIO_WritePin(TRIG_GPIO_Port,TRIG_Pin,GPIO_PIN_SET);
 8001cf6:	e79f      	b.n	8001c38 <main+0x160>
		  time++;
 8001cf8:	f8b8 3000 	ldrh.w	r3, [r8]
		  DWT_Delay_us(1);
 8001cfc:	2001      	movs	r0, #1
		  time++;
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f8a8 3000 	strh.w	r3, [r8]
		  DWT_Delay_us(1);
 8001d04:	f7ff fe08 	bl	8001918 <DWT_Delay_us>
 8001d08:	e7bd      	b.n	8001c86 <main+0x1ae>
 8001d0a:	bf00      	nop
 8001d0c:	f3af 8000 	nop.w
 8001d10:	a7ef9db2 	.word	0xa7ef9db2
 8001d14:	3fc74bc6 	.word	0x3fc74bc6
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010800 	.word	0x40010800
 8001d20:	40010c00 	.word	0x40010c00
 8001d24:	000186a0 	.word	0x000186a0
 8001d28:	2000020c 	.word	0x2000020c
 8001d2c:	40005400 	.word	0x40005400
 8001d30:	200002b0 	.word	0x200002b0
 8001d34:	40013000 	.word	0x40013000
 8001d38:	20000264 	.word	0x20000264
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	08004108 	.word	0x08004108
 8001d44:	20000008 	.word	0x20000008
 8001d48:	200002a4 	.word	0x200002a4
 8001d4c:	0800410e 	.word	0x0800410e
 8001d50:	200002ae 	.word	0x200002ae
 8001d54:	20000260 	.word	0x20000260
 8001d58:	20000308 	.word	0x20000308
 8001d5c:	08004113 	.word	0x08004113
 8001d60:	08004278 	.word	0x08004278
 8001d64:	08004119 	.word	0x08004119

08001d68 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d68:	4b20      	ldr	r3, [pc, #128]	; (8001dec <HAL_MspInit+0x84>)
{
 8001d6a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d6c:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6e:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	619a      	str	r2, [r3, #24]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d80:	f7ff f836 	bl	8000df0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	f06f 000b 	mvn.w	r0, #11
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	f7ff f842 	bl	8000e14 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	f06f 000a 	mvn.w	r0, #10
 8001d96:	4611      	mov	r1, r2
 8001d98:	f7ff f83c 	bl	8000e14 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f06f 0009 	mvn.w	r0, #9
 8001da2:	4611      	mov	r1, r2
 8001da4:	f7ff f836 	bl	8000e14 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001da8:	2200      	movs	r2, #0
 8001daa:	f06f 0004 	mvn.w	r0, #4
 8001dae:	4611      	mov	r1, r2
 8001db0:	f7ff f830 	bl	8000e14 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	f06f 0003 	mvn.w	r0, #3
 8001dba:	4611      	mov	r1, r2
 8001dbc:	f7ff f82a 	bl	8000e14 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f06f 0001 	mvn.w	r0, #1
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	f7ff f824 	bl	8000e14 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	f7ff f81e 	bl	8000e14 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dd8:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <HAL_MspInit+0x88>)
 8001dda:	6853      	ldr	r3, [r2, #4]
 8001ddc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001de0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001de4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	b003      	add	sp, #12
 8001de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dec:	40021000 	.word	0x40021000
 8001df0:	40010000 	.word	0x40010000

08001df4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001df6:	6802      	ldr	r2, [r0, #0]
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <HAL_I2C_MspInit+0x38>)
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d113      	bne.n	8001e26 <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dfe:	23c0      	movs	r3, #192	; 0xc0
 8001e00:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e02:	2312      	movs	r3, #18
 8001e04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e06:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e08:	a902      	add	r1, sp, #8
 8001e0a:	4809      	ldr	r0, [pc, #36]	; (8001e30 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e0c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f7ff f85d 	bl	8000ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_I2C_MspInit+0x40>)
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001e1a:	61da      	str	r2, [r3, #28]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e26:	b007      	add	sp, #28
 8001e28:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e2c:	40005400 	.word	0x40005400
 8001e30:	40010c00 	.word	0x40010c00
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001e3a:	6802      	ldr	r2, [r0, #0]
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <HAL_SPI_MspInit+0x4c>)
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d11d      	bne.n	8001e7e <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e42:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001e46:	699a      	ldr	r2, [r3, #24]
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e4e:	619a      	str	r2, [r3, #24]
 8001e50:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	480d      	ldr	r0, [pc, #52]	; (8001e88 <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e58:	9301      	str	r3, [sp, #4]
 8001e5a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e5c:	2320      	movs	r3, #32
 8001e5e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f7ff f830 	bl	8000ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e6c:	2340      	movs	r3, #64	; 0x40
 8001e6e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e70:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e72:	a902      	add	r1, sp, #8
 8001e74:	4804      	ldr	r0, [pc, #16]	; (8001e88 <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f7ff f827 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e7e:	b007      	add	sp, #28
 8001e80:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e84:	40013000 	.word	0x40013000
 8001e88:	40010800 	.word	0x40010800

08001e8c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001e8e:	6802      	ldr	r2, [r0, #0]
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_UART_MspInit+0x50>)
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d11f      	bne.n	8001ed6 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e96:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001e9a:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ea2:	619a      	str	r2, [r3, #24]
 8001ea4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	480e      	ldr	r0, [pc, #56]	; (8001ee0 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f7ff f805 	bl	8000ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ec2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ec6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	a902      	add	r1, sp, #8
 8001ecc:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ece:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f7fe fffb 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ed6:	b007      	add	sp, #28
 8001ed8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001edc:	40013800 	.word	0x40013800
 8001ee0:	40010800 	.word	0x40010800

08001ee4 <NMI_Handler>:
 8001ee4:	4770      	bx	lr

08001ee6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001ee6:	e7fe      	b.n	8001ee6 <HardFault_Handler>

08001ee8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001ee8:	e7fe      	b.n	8001ee8 <MemManage_Handler>

08001eea <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler>

08001eec <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001eec:	e7fe      	b.n	8001eec <UsageFault_Handler>

08001eee <SVC_Handler>:
 8001eee:	4770      	bx	lr

08001ef0 <DebugMon_Handler>:
 8001ef0:	4770      	bx	lr

08001ef2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001ef2:	4770      	bx	lr

08001ef4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001ef4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ef6:	f7fe ff57 	bl	8000da8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001efe:	f7fe bfe0 	b.w	8000ec2 <HAL_SYSTICK_IRQHandler>
	...

08001f04 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <SystemInit+0x40>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001f0e:	6859      	ldr	r1, [r3, #4]
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <SystemInit+0x44>)
 8001f12:	400a      	ands	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001f1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f20:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f28:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001f30:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001f32:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001f36:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001f38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <SystemInit+0x48>)
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	f8ff0000 	.word	0xf8ff0000
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f50:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f52:	e003      	b.n	8001f5c <LoopCopyDataInit>

08001f54 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f54:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f56:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f58:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f5a:	3104      	adds	r1, #4

08001f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f5c:	480a      	ldr	r0, [pc, #40]	; (8001f88 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f60:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f62:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f64:	d3f6      	bcc.n	8001f54 <CopyDataInit>
  ldr r2, =_sbss
 8001f66:	4a0a      	ldr	r2, [pc, #40]	; (8001f90 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f68:	e002      	b.n	8001f70 <LoopFillZerobss>

08001f6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f6c:	f842 3b04 	str.w	r3, [r2], #4

08001f70 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f72:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f74:	d3f9      	bcc.n	8001f6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f76:	f7ff ffc5 	bl	8001f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f000 f80f 	bl	8001f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f7e:	f7ff fdab 	bl	8001ad8 <main>
  bx lr
 8001f82:	4770      	bx	lr
  ldr r3, =_sidata
 8001f84:	08004398 	.word	0x08004398
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f8c:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8001f90:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8001f94:	20000310 	.word	0x20000310

08001f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f98:	e7fe      	b.n	8001f98 <ADC1_2_IRQHandler>
	...

08001f9c <__libc_init_array>:
 8001f9c:	b570      	push	{r4, r5, r6, lr}
 8001f9e:	2500      	movs	r5, #0
 8001fa0:	4e0c      	ldr	r6, [pc, #48]	; (8001fd4 <__libc_init_array+0x38>)
 8001fa2:	4c0d      	ldr	r4, [pc, #52]	; (8001fd8 <__libc_init_array+0x3c>)
 8001fa4:	1ba4      	subs	r4, r4, r6
 8001fa6:	10a4      	asrs	r4, r4, #2
 8001fa8:	42a5      	cmp	r5, r4
 8001faa:	d109      	bne.n	8001fc0 <__libc_init_array+0x24>
 8001fac:	f002 f898 	bl	80040e0 <_init>
 8001fb0:	2500      	movs	r5, #0
 8001fb2:	4e0a      	ldr	r6, [pc, #40]	; (8001fdc <__libc_init_array+0x40>)
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <__libc_init_array+0x44>)
 8001fb6:	1ba4      	subs	r4, r4, r6
 8001fb8:	10a4      	asrs	r4, r4, #2
 8001fba:	42a5      	cmp	r5, r4
 8001fbc:	d105      	bne.n	8001fca <__libc_init_array+0x2e>
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
 8001fc0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fc4:	4798      	blx	r3
 8001fc6:	3501      	adds	r5, #1
 8001fc8:	e7ee      	b.n	8001fa8 <__libc_init_array+0xc>
 8001fca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001fce:	4798      	blx	r3
 8001fd0:	3501      	adds	r5, #1
 8001fd2:	e7f2      	b.n	8001fba <__libc_init_array+0x1e>
 8001fd4:	08004390 	.word	0x08004390
 8001fd8:	08004390 	.word	0x08004390
 8001fdc:	08004390 	.word	0x08004390
 8001fe0:	08004394 	.word	0x08004394

08001fe4 <memset>:
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	4402      	add	r2, r0
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d100      	bne.n	8001fee <memset+0xa>
 8001fec:	4770      	bx	lr
 8001fee:	f803 1b01 	strb.w	r1, [r3], #1
 8001ff2:	e7f9      	b.n	8001fe8 <memset+0x4>

08001ff4 <__cvt>:
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ffa:	461e      	mov	r6, r3
 8001ffc:	bfbb      	ittet	lt
 8001ffe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002002:	461e      	movlt	r6, r3
 8002004:	2300      	movge	r3, #0
 8002006:	232d      	movlt	r3, #45	; 0x2d
 8002008:	b088      	sub	sp, #32
 800200a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800200c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800200e:	f027 0720 	bic.w	r7, r7, #32
 8002012:	2f46      	cmp	r7, #70	; 0x46
 8002014:	4614      	mov	r4, r2
 8002016:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002018:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800201c:	700b      	strb	r3, [r1, #0]
 800201e:	d004      	beq.n	800202a <__cvt+0x36>
 8002020:	2f45      	cmp	r7, #69	; 0x45
 8002022:	d100      	bne.n	8002026 <__cvt+0x32>
 8002024:	3501      	adds	r5, #1
 8002026:	2302      	movs	r3, #2
 8002028:	e000      	b.n	800202c <__cvt+0x38>
 800202a:	2303      	movs	r3, #3
 800202c:	aa07      	add	r2, sp, #28
 800202e:	9204      	str	r2, [sp, #16]
 8002030:	aa06      	add	r2, sp, #24
 8002032:	9203      	str	r2, [sp, #12]
 8002034:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8002038:	4622      	mov	r2, r4
 800203a:	4633      	mov	r3, r6
 800203c:	f000 fcec 	bl	8002a18 <_dtoa_r>
 8002040:	2f47      	cmp	r7, #71	; 0x47
 8002042:	4680      	mov	r8, r0
 8002044:	d102      	bne.n	800204c <__cvt+0x58>
 8002046:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002048:	07db      	lsls	r3, r3, #31
 800204a:	d526      	bpl.n	800209a <__cvt+0xa6>
 800204c:	2f46      	cmp	r7, #70	; 0x46
 800204e:	eb08 0905 	add.w	r9, r8, r5
 8002052:	d111      	bne.n	8002078 <__cvt+0x84>
 8002054:	f898 3000 	ldrb.w	r3, [r8]
 8002058:	2b30      	cmp	r3, #48	; 0x30
 800205a:	d10a      	bne.n	8002072 <__cvt+0x7e>
 800205c:	2200      	movs	r2, #0
 800205e:	2300      	movs	r3, #0
 8002060:	4620      	mov	r0, r4
 8002062:	4631      	mov	r1, r6
 8002064:	f7fe fc9c 	bl	80009a0 <__aeabi_dcmpeq>
 8002068:	b918      	cbnz	r0, 8002072 <__cvt+0x7e>
 800206a:	f1c5 0501 	rsb	r5, r5, #1
 800206e:	f8ca 5000 	str.w	r5, [sl]
 8002072:	f8da 3000 	ldr.w	r3, [sl]
 8002076:	4499      	add	r9, r3
 8002078:	2200      	movs	r2, #0
 800207a:	2300      	movs	r3, #0
 800207c:	4620      	mov	r0, r4
 800207e:	4631      	mov	r1, r6
 8002080:	f7fe fc8e 	bl	80009a0 <__aeabi_dcmpeq>
 8002084:	b938      	cbnz	r0, 8002096 <__cvt+0xa2>
 8002086:	2230      	movs	r2, #48	; 0x30
 8002088:	9b07      	ldr	r3, [sp, #28]
 800208a:	4599      	cmp	r9, r3
 800208c:	d905      	bls.n	800209a <__cvt+0xa6>
 800208e:	1c59      	adds	r1, r3, #1
 8002090:	9107      	str	r1, [sp, #28]
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e7f8      	b.n	8002088 <__cvt+0x94>
 8002096:	f8cd 901c 	str.w	r9, [sp, #28]
 800209a:	4640      	mov	r0, r8
 800209c:	9b07      	ldr	r3, [sp, #28]
 800209e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80020a0:	eba3 0308 	sub.w	r3, r3, r8
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	b008      	add	sp, #32
 80020a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080020ac <__exponent>:
 80020ac:	4603      	mov	r3, r0
 80020ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020b0:	2900      	cmp	r1, #0
 80020b2:	f803 2b02 	strb.w	r2, [r3], #2
 80020b6:	bfb6      	itet	lt
 80020b8:	222d      	movlt	r2, #45	; 0x2d
 80020ba:	222b      	movge	r2, #43	; 0x2b
 80020bc:	4249      	neglt	r1, r1
 80020be:	2909      	cmp	r1, #9
 80020c0:	7042      	strb	r2, [r0, #1]
 80020c2:	dd21      	ble.n	8002108 <__exponent+0x5c>
 80020c4:	f10d 0207 	add.w	r2, sp, #7
 80020c8:	4617      	mov	r7, r2
 80020ca:	260a      	movs	r6, #10
 80020cc:	fb91 f5f6 	sdiv	r5, r1, r6
 80020d0:	fb06 1115 	mls	r1, r6, r5, r1
 80020d4:	2d09      	cmp	r5, #9
 80020d6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80020da:	f802 1c01 	strb.w	r1, [r2, #-1]
 80020de:	f102 34ff 	add.w	r4, r2, #4294967295
 80020e2:	4629      	mov	r1, r5
 80020e4:	dc09      	bgt.n	80020fa <__exponent+0x4e>
 80020e6:	3130      	adds	r1, #48	; 0x30
 80020e8:	3a02      	subs	r2, #2
 80020ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80020ee:	42ba      	cmp	r2, r7
 80020f0:	461c      	mov	r4, r3
 80020f2:	d304      	bcc.n	80020fe <__exponent+0x52>
 80020f4:	1a20      	subs	r0, r4, r0
 80020f6:	b003      	add	sp, #12
 80020f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020fa:	4622      	mov	r2, r4
 80020fc:	e7e6      	b.n	80020cc <__exponent+0x20>
 80020fe:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002102:	f803 1b01 	strb.w	r1, [r3], #1
 8002106:	e7f2      	b.n	80020ee <__exponent+0x42>
 8002108:	2230      	movs	r2, #48	; 0x30
 800210a:	461c      	mov	r4, r3
 800210c:	4411      	add	r1, r2
 800210e:	f804 2b02 	strb.w	r2, [r4], #2
 8002112:	7059      	strb	r1, [r3, #1]
 8002114:	e7ee      	b.n	80020f4 <__exponent+0x48>
	...

08002118 <_printf_float>:
 8002118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800211c:	b091      	sub	sp, #68	; 0x44
 800211e:	460c      	mov	r4, r1
 8002120:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002122:	4693      	mov	fp, r2
 8002124:	461e      	mov	r6, r3
 8002126:	4605      	mov	r5, r0
 8002128:	f001 fa4a 	bl	80035c0 <_localeconv_r>
 800212c:	6803      	ldr	r3, [r0, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	9309      	str	r3, [sp, #36]	; 0x24
 8002132:	f7fe f80d 	bl	8000150 <strlen>
 8002136:	2300      	movs	r3, #0
 8002138:	930e      	str	r3, [sp, #56]	; 0x38
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	900a      	str	r0, [sp, #40]	; 0x28
 800213e:	3307      	adds	r3, #7
 8002140:	f023 0307 	bic.w	r3, r3, #7
 8002144:	f103 0208 	add.w	r2, r3, #8
 8002148:	f894 8018 	ldrb.w	r8, [r4, #24]
 800214c:	f8d4 a000 	ldr.w	sl, [r4]
 8002150:	603a      	str	r2, [r7, #0]
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800215a:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 800215e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8002160:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002164:	930b      	str	r3, [sp, #44]	; 0x2c
 8002166:	f04f 32ff 	mov.w	r2, #4294967295
 800216a:	4ba6      	ldr	r3, [pc, #664]	; (8002404 <_printf_float+0x2ec>)
 800216c:	4638      	mov	r0, r7
 800216e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002170:	f7fe fc48 	bl	8000a04 <__aeabi_dcmpun>
 8002174:	2800      	cmp	r0, #0
 8002176:	f040 81f7 	bne.w	8002568 <_printf_float+0x450>
 800217a:	f04f 32ff 	mov.w	r2, #4294967295
 800217e:	4ba1      	ldr	r3, [pc, #644]	; (8002404 <_printf_float+0x2ec>)
 8002180:	4638      	mov	r0, r7
 8002182:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002184:	f7fe fc20 	bl	80009c8 <__aeabi_dcmple>
 8002188:	2800      	cmp	r0, #0
 800218a:	f040 81ed 	bne.w	8002568 <_printf_float+0x450>
 800218e:	2200      	movs	r2, #0
 8002190:	2300      	movs	r3, #0
 8002192:	4638      	mov	r0, r7
 8002194:	4649      	mov	r1, r9
 8002196:	f7fe fc0d 	bl	80009b4 <__aeabi_dcmplt>
 800219a:	b110      	cbz	r0, 80021a2 <_printf_float+0x8a>
 800219c:	232d      	movs	r3, #45	; 0x2d
 800219e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021a2:	4b99      	ldr	r3, [pc, #612]	; (8002408 <_printf_float+0x2f0>)
 80021a4:	4f99      	ldr	r7, [pc, #612]	; (800240c <_printf_float+0x2f4>)
 80021a6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80021aa:	bf98      	it	ls
 80021ac:	461f      	movls	r7, r3
 80021ae:	2303      	movs	r3, #3
 80021b0:	f04f 0900 	mov.w	r9, #0
 80021b4:	6123      	str	r3, [r4, #16]
 80021b6:	f02a 0304 	bic.w	r3, sl, #4
 80021ba:	6023      	str	r3, [r4, #0]
 80021bc:	9600      	str	r6, [sp, #0]
 80021be:	465b      	mov	r3, fp
 80021c0:	aa0f      	add	r2, sp, #60	; 0x3c
 80021c2:	4621      	mov	r1, r4
 80021c4:	4628      	mov	r0, r5
 80021c6:	f000 f9df 	bl	8002588 <_printf_common>
 80021ca:	3001      	adds	r0, #1
 80021cc:	f040 809a 	bne.w	8002304 <_printf_float+0x1ec>
 80021d0:	f04f 30ff 	mov.w	r0, #4294967295
 80021d4:	b011      	add	sp, #68	; 0x44
 80021d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021da:	6862      	ldr	r2, [r4, #4]
 80021dc:	a80e      	add	r0, sp, #56	; 0x38
 80021de:	1c53      	adds	r3, r2, #1
 80021e0:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 80021e4:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 80021e8:	d141      	bne.n	800226e <_printf_float+0x156>
 80021ea:	2206      	movs	r2, #6
 80021ec:	6062      	str	r2, [r4, #4]
 80021ee:	2100      	movs	r1, #0
 80021f0:	6023      	str	r3, [r4, #0]
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	6863      	ldr	r3, [r4, #4]
 80021f6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80021fa:	9005      	str	r0, [sp, #20]
 80021fc:	9202      	str	r2, [sp, #8]
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	463a      	mov	r2, r7
 8002202:	464b      	mov	r3, r9
 8002204:	9106      	str	r1, [sp, #24]
 8002206:	f8cd 8010 	str.w	r8, [sp, #16]
 800220a:	f8cd e00c 	str.w	lr, [sp, #12]
 800220e:	4628      	mov	r0, r5
 8002210:	f7ff fef0 	bl	8001ff4 <__cvt>
 8002214:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8002218:	2b47      	cmp	r3, #71	; 0x47
 800221a:	4607      	mov	r7, r0
 800221c:	d109      	bne.n	8002232 <_printf_float+0x11a>
 800221e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002220:	1cd8      	adds	r0, r3, #3
 8002222:	db02      	blt.n	800222a <_printf_float+0x112>
 8002224:	6862      	ldr	r2, [r4, #4]
 8002226:	4293      	cmp	r3, r2
 8002228:	dd59      	ble.n	80022de <_printf_float+0x1c6>
 800222a:	f1a8 0802 	sub.w	r8, r8, #2
 800222e:	fa5f f888 	uxtb.w	r8, r8
 8002232:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002236:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002238:	d836      	bhi.n	80022a8 <_printf_float+0x190>
 800223a:	3901      	subs	r1, #1
 800223c:	4642      	mov	r2, r8
 800223e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002242:	910d      	str	r1, [sp, #52]	; 0x34
 8002244:	f7ff ff32 	bl	80020ac <__exponent>
 8002248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800224a:	4681      	mov	r9, r0
 800224c:	1883      	adds	r3, r0, r2
 800224e:	2a01      	cmp	r2, #1
 8002250:	6123      	str	r3, [r4, #16]
 8002252:	dc02      	bgt.n	800225a <_printf_float+0x142>
 8002254:	6822      	ldr	r2, [r4, #0]
 8002256:	07d1      	lsls	r1, r2, #31
 8002258:	d501      	bpl.n	800225e <_printf_float+0x146>
 800225a:	3301      	adds	r3, #1
 800225c:	6123      	str	r3, [r4, #16]
 800225e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0aa      	beq.n	80021bc <_printf_float+0xa4>
 8002266:	232d      	movs	r3, #45	; 0x2d
 8002268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800226c:	e7a6      	b.n	80021bc <_printf_float+0xa4>
 800226e:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002272:	d002      	beq.n	800227a <_printf_float+0x162>
 8002274:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002278:	d1b9      	bne.n	80021ee <_printf_float+0xd6>
 800227a:	b19a      	cbz	r2, 80022a4 <_printf_float+0x18c>
 800227c:	2100      	movs	r1, #0
 800227e:	9106      	str	r1, [sp, #24]
 8002280:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002284:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002288:	6023      	str	r3, [r4, #0]
 800228a:	9005      	str	r0, [sp, #20]
 800228c:	463a      	mov	r2, r7
 800228e:	f8cd 8010 	str.w	r8, [sp, #16]
 8002292:	f8cd e00c 	str.w	lr, [sp, #12]
 8002296:	9102      	str	r1, [sp, #8]
 8002298:	464b      	mov	r3, r9
 800229a:	4628      	mov	r0, r5
 800229c:	f7ff feaa 	bl	8001ff4 <__cvt>
 80022a0:	4607      	mov	r7, r0
 80022a2:	e7bc      	b.n	800221e <_printf_float+0x106>
 80022a4:	2201      	movs	r2, #1
 80022a6:	e7a1      	b.n	80021ec <_printf_float+0xd4>
 80022a8:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80022ac:	d119      	bne.n	80022e2 <_printf_float+0x1ca>
 80022ae:	2900      	cmp	r1, #0
 80022b0:	6863      	ldr	r3, [r4, #4]
 80022b2:	dd0c      	ble.n	80022ce <_printf_float+0x1b6>
 80022b4:	6121      	str	r1, [r4, #16]
 80022b6:	b913      	cbnz	r3, 80022be <_printf_float+0x1a6>
 80022b8:	6822      	ldr	r2, [r4, #0]
 80022ba:	07d2      	lsls	r2, r2, #31
 80022bc:	d502      	bpl.n	80022c4 <_printf_float+0x1ac>
 80022be:	3301      	adds	r3, #1
 80022c0:	440b      	add	r3, r1
 80022c2:	6123      	str	r3, [r4, #16]
 80022c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80022c6:	f04f 0900 	mov.w	r9, #0
 80022ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80022cc:	e7c7      	b.n	800225e <_printf_float+0x146>
 80022ce:	b913      	cbnz	r3, 80022d6 <_printf_float+0x1be>
 80022d0:	6822      	ldr	r2, [r4, #0]
 80022d2:	07d0      	lsls	r0, r2, #31
 80022d4:	d501      	bpl.n	80022da <_printf_float+0x1c2>
 80022d6:	3302      	adds	r3, #2
 80022d8:	e7f3      	b.n	80022c2 <_printf_float+0x1aa>
 80022da:	2301      	movs	r3, #1
 80022dc:	e7f1      	b.n	80022c2 <_printf_float+0x1aa>
 80022de:	f04f 0867 	mov.w	r8, #103	; 0x67
 80022e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80022e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80022e6:	4293      	cmp	r3, r2
 80022e8:	db05      	blt.n	80022f6 <_printf_float+0x1de>
 80022ea:	6822      	ldr	r2, [r4, #0]
 80022ec:	6123      	str	r3, [r4, #16]
 80022ee:	07d1      	lsls	r1, r2, #31
 80022f0:	d5e8      	bpl.n	80022c4 <_printf_float+0x1ac>
 80022f2:	3301      	adds	r3, #1
 80022f4:	e7e5      	b.n	80022c2 <_printf_float+0x1aa>
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	bfcc      	ite	gt
 80022fa:	2301      	movgt	r3, #1
 80022fc:	f1c3 0302 	rsble	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	e7de      	b.n	80022c2 <_printf_float+0x1aa>
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	055a      	lsls	r2, r3, #21
 8002308:	d407      	bmi.n	800231a <_printf_float+0x202>
 800230a:	6923      	ldr	r3, [r4, #16]
 800230c:	463a      	mov	r2, r7
 800230e:	4659      	mov	r1, fp
 8002310:	4628      	mov	r0, r5
 8002312:	47b0      	blx	r6
 8002314:	3001      	adds	r0, #1
 8002316:	d12a      	bne.n	800236e <_printf_float+0x256>
 8002318:	e75a      	b.n	80021d0 <_printf_float+0xb8>
 800231a:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800231e:	f240 80dc 	bls.w	80024da <_printf_float+0x3c2>
 8002322:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002326:	2200      	movs	r2, #0
 8002328:	2300      	movs	r3, #0
 800232a:	f7fe fb39 	bl	80009a0 <__aeabi_dcmpeq>
 800232e:	2800      	cmp	r0, #0
 8002330:	d039      	beq.n	80023a6 <_printf_float+0x28e>
 8002332:	2301      	movs	r3, #1
 8002334:	4a36      	ldr	r2, [pc, #216]	; (8002410 <_printf_float+0x2f8>)
 8002336:	4659      	mov	r1, fp
 8002338:	4628      	mov	r0, r5
 800233a:	47b0      	blx	r6
 800233c:	3001      	adds	r0, #1
 800233e:	f43f af47 	beq.w	80021d0 <_printf_float+0xb8>
 8002342:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002344:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002346:	429a      	cmp	r2, r3
 8002348:	db02      	blt.n	8002350 <_printf_float+0x238>
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	07d8      	lsls	r0, r3, #31
 800234e:	d50e      	bpl.n	800236e <_printf_float+0x256>
 8002350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002354:	4659      	mov	r1, fp
 8002356:	4628      	mov	r0, r5
 8002358:	47b0      	blx	r6
 800235a:	3001      	adds	r0, #1
 800235c:	f43f af38 	beq.w	80021d0 <_printf_float+0xb8>
 8002360:	2700      	movs	r7, #0
 8002362:	f104 081a 	add.w	r8, r4, #26
 8002366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002368:	3b01      	subs	r3, #1
 800236a:	429f      	cmp	r7, r3
 800236c:	db11      	blt.n	8002392 <_printf_float+0x27a>
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	079f      	lsls	r7, r3, #30
 8002372:	d508      	bpl.n	8002386 <_printf_float+0x26e>
 8002374:	2700      	movs	r7, #0
 8002376:	f104 0819 	add.w	r8, r4, #25
 800237a:	68e3      	ldr	r3, [r4, #12]
 800237c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	429f      	cmp	r7, r3
 8002382:	f2c0 80e7 	blt.w	8002554 <_printf_float+0x43c>
 8002386:	68e0      	ldr	r0, [r4, #12]
 8002388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800238a:	4298      	cmp	r0, r3
 800238c:	bfb8      	it	lt
 800238e:	4618      	movlt	r0, r3
 8002390:	e720      	b.n	80021d4 <_printf_float+0xbc>
 8002392:	2301      	movs	r3, #1
 8002394:	4642      	mov	r2, r8
 8002396:	4659      	mov	r1, fp
 8002398:	4628      	mov	r0, r5
 800239a:	47b0      	blx	r6
 800239c:	3001      	adds	r0, #1
 800239e:	f43f af17 	beq.w	80021d0 <_printf_float+0xb8>
 80023a2:	3701      	adds	r7, #1
 80023a4:	e7df      	b.n	8002366 <_printf_float+0x24e>
 80023a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	dc33      	bgt.n	8002414 <_printf_float+0x2fc>
 80023ac:	2301      	movs	r3, #1
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <_printf_float+0x2f8>)
 80023b0:	4659      	mov	r1, fp
 80023b2:	4628      	mov	r0, r5
 80023b4:	47b0      	blx	r6
 80023b6:	3001      	adds	r0, #1
 80023b8:	f43f af0a 	beq.w	80021d0 <_printf_float+0xb8>
 80023bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023be:	b923      	cbnz	r3, 80023ca <_printf_float+0x2b2>
 80023c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023c2:	b913      	cbnz	r3, 80023ca <_printf_float+0x2b2>
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	07d9      	lsls	r1, r3, #31
 80023c8:	d5d1      	bpl.n	800236e <_printf_float+0x256>
 80023ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023ce:	4659      	mov	r1, fp
 80023d0:	4628      	mov	r0, r5
 80023d2:	47b0      	blx	r6
 80023d4:	3001      	adds	r0, #1
 80023d6:	f43f aefb 	beq.w	80021d0 <_printf_float+0xb8>
 80023da:	f04f 0800 	mov.w	r8, #0
 80023de:	f104 091a 	add.w	r9, r4, #26
 80023e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023e4:	425b      	negs	r3, r3
 80023e6:	4598      	cmp	r8, r3
 80023e8:	db01      	blt.n	80023ee <_printf_float+0x2d6>
 80023ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023ec:	e78e      	b.n	800230c <_printf_float+0x1f4>
 80023ee:	2301      	movs	r3, #1
 80023f0:	464a      	mov	r2, r9
 80023f2:	4659      	mov	r1, fp
 80023f4:	4628      	mov	r0, r5
 80023f6:	47b0      	blx	r6
 80023f8:	3001      	adds	r0, #1
 80023fa:	f43f aee9 	beq.w	80021d0 <_printf_float+0xb8>
 80023fe:	f108 0801 	add.w	r8, r8, #1
 8002402:	e7ee      	b.n	80023e2 <_printf_float+0x2ca>
 8002404:	7fefffff 	.word	0x7fefffff
 8002408:	08004134 	.word	0x08004134
 800240c:	08004138 	.word	0x08004138
 8002410:	08004144 	.word	0x08004144
 8002414:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002416:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002418:	429a      	cmp	r2, r3
 800241a:	bfa8      	it	ge
 800241c:	461a      	movge	r2, r3
 800241e:	2a00      	cmp	r2, #0
 8002420:	4690      	mov	r8, r2
 8002422:	dc36      	bgt.n	8002492 <_printf_float+0x37a>
 8002424:	f04f 0a00 	mov.w	sl, #0
 8002428:	f104 031a 	add.w	r3, r4, #26
 800242c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002430:	930b      	str	r3, [sp, #44]	; 0x2c
 8002432:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002436:	eba9 0308 	sub.w	r3, r9, r8
 800243a:	459a      	cmp	sl, r3
 800243c:	db31      	blt.n	80024a2 <_printf_float+0x38a>
 800243e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002440:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002442:	429a      	cmp	r2, r3
 8002444:	db38      	blt.n	80024b8 <_printf_float+0x3a0>
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	07da      	lsls	r2, r3, #31
 800244a:	d435      	bmi.n	80024b8 <_printf_float+0x3a0>
 800244c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800244e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002450:	eba3 0209 	sub.w	r2, r3, r9
 8002454:	eba3 0801 	sub.w	r8, r3, r1
 8002458:	4590      	cmp	r8, r2
 800245a:	bfa8      	it	ge
 800245c:	4690      	movge	r8, r2
 800245e:	f1b8 0f00 	cmp.w	r8, #0
 8002462:	dc31      	bgt.n	80024c8 <_printf_float+0x3b0>
 8002464:	2700      	movs	r7, #0
 8002466:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800246a:	f104 091a 	add.w	r9, r4, #26
 800246e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002470:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	eba3 0308 	sub.w	r3, r3, r8
 8002478:	429f      	cmp	r7, r3
 800247a:	f6bf af78 	bge.w	800236e <_printf_float+0x256>
 800247e:	2301      	movs	r3, #1
 8002480:	464a      	mov	r2, r9
 8002482:	4659      	mov	r1, fp
 8002484:	4628      	mov	r0, r5
 8002486:	47b0      	blx	r6
 8002488:	3001      	adds	r0, #1
 800248a:	f43f aea1 	beq.w	80021d0 <_printf_float+0xb8>
 800248e:	3701      	adds	r7, #1
 8002490:	e7ed      	b.n	800246e <_printf_float+0x356>
 8002492:	4613      	mov	r3, r2
 8002494:	4659      	mov	r1, fp
 8002496:	463a      	mov	r2, r7
 8002498:	4628      	mov	r0, r5
 800249a:	47b0      	blx	r6
 800249c:	3001      	adds	r0, #1
 800249e:	d1c1      	bne.n	8002424 <_printf_float+0x30c>
 80024a0:	e696      	b.n	80021d0 <_printf_float+0xb8>
 80024a2:	2301      	movs	r3, #1
 80024a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80024a6:	4659      	mov	r1, fp
 80024a8:	4628      	mov	r0, r5
 80024aa:	47b0      	blx	r6
 80024ac:	3001      	adds	r0, #1
 80024ae:	f43f ae8f 	beq.w	80021d0 <_printf_float+0xb8>
 80024b2:	f10a 0a01 	add.w	sl, sl, #1
 80024b6:	e7bc      	b.n	8002432 <_printf_float+0x31a>
 80024b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024bc:	4659      	mov	r1, fp
 80024be:	4628      	mov	r0, r5
 80024c0:	47b0      	blx	r6
 80024c2:	3001      	adds	r0, #1
 80024c4:	d1c2      	bne.n	800244c <_printf_float+0x334>
 80024c6:	e683      	b.n	80021d0 <_printf_float+0xb8>
 80024c8:	4643      	mov	r3, r8
 80024ca:	eb07 0209 	add.w	r2, r7, r9
 80024ce:	4659      	mov	r1, fp
 80024d0:	4628      	mov	r0, r5
 80024d2:	47b0      	blx	r6
 80024d4:	3001      	adds	r0, #1
 80024d6:	d1c5      	bne.n	8002464 <_printf_float+0x34c>
 80024d8:	e67a      	b.n	80021d0 <_printf_float+0xb8>
 80024da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80024dc:	2a01      	cmp	r2, #1
 80024de:	dc01      	bgt.n	80024e4 <_printf_float+0x3cc>
 80024e0:	07db      	lsls	r3, r3, #31
 80024e2:	d534      	bpl.n	800254e <_printf_float+0x436>
 80024e4:	2301      	movs	r3, #1
 80024e6:	463a      	mov	r2, r7
 80024e8:	4659      	mov	r1, fp
 80024ea:	4628      	mov	r0, r5
 80024ec:	47b0      	blx	r6
 80024ee:	3001      	adds	r0, #1
 80024f0:	f43f ae6e 	beq.w	80021d0 <_printf_float+0xb8>
 80024f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024f8:	4659      	mov	r1, fp
 80024fa:	4628      	mov	r0, r5
 80024fc:	47b0      	blx	r6
 80024fe:	3001      	adds	r0, #1
 8002500:	f43f ae66 	beq.w	80021d0 <_printf_float+0xb8>
 8002504:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002508:	2200      	movs	r2, #0
 800250a:	2300      	movs	r3, #0
 800250c:	f7fe fa48 	bl	80009a0 <__aeabi_dcmpeq>
 8002510:	b150      	cbz	r0, 8002528 <_printf_float+0x410>
 8002512:	2700      	movs	r7, #0
 8002514:	f104 081a 	add.w	r8, r4, #26
 8002518:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800251a:	3b01      	subs	r3, #1
 800251c:	429f      	cmp	r7, r3
 800251e:	db0c      	blt.n	800253a <_printf_float+0x422>
 8002520:	464b      	mov	r3, r9
 8002522:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002526:	e6f2      	b.n	800230e <_printf_float+0x1f6>
 8002528:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800252a:	1c7a      	adds	r2, r7, #1
 800252c:	3b01      	subs	r3, #1
 800252e:	4659      	mov	r1, fp
 8002530:	4628      	mov	r0, r5
 8002532:	47b0      	blx	r6
 8002534:	3001      	adds	r0, #1
 8002536:	d1f3      	bne.n	8002520 <_printf_float+0x408>
 8002538:	e64a      	b.n	80021d0 <_printf_float+0xb8>
 800253a:	2301      	movs	r3, #1
 800253c:	4642      	mov	r2, r8
 800253e:	4659      	mov	r1, fp
 8002540:	4628      	mov	r0, r5
 8002542:	47b0      	blx	r6
 8002544:	3001      	adds	r0, #1
 8002546:	f43f ae43 	beq.w	80021d0 <_printf_float+0xb8>
 800254a:	3701      	adds	r7, #1
 800254c:	e7e4      	b.n	8002518 <_printf_float+0x400>
 800254e:	2301      	movs	r3, #1
 8002550:	463a      	mov	r2, r7
 8002552:	e7ec      	b.n	800252e <_printf_float+0x416>
 8002554:	2301      	movs	r3, #1
 8002556:	4642      	mov	r2, r8
 8002558:	4659      	mov	r1, fp
 800255a:	4628      	mov	r0, r5
 800255c:	47b0      	blx	r6
 800255e:	3001      	adds	r0, #1
 8002560:	f43f ae36 	beq.w	80021d0 <_printf_float+0xb8>
 8002564:	3701      	adds	r7, #1
 8002566:	e708      	b.n	800237a <_printf_float+0x262>
 8002568:	463a      	mov	r2, r7
 800256a:	464b      	mov	r3, r9
 800256c:	4638      	mov	r0, r7
 800256e:	4649      	mov	r1, r9
 8002570:	f7fe fa48 	bl	8000a04 <__aeabi_dcmpun>
 8002574:	2800      	cmp	r0, #0
 8002576:	f43f ae30 	beq.w	80021da <_printf_float+0xc2>
 800257a:	4b01      	ldr	r3, [pc, #4]	; (8002580 <_printf_float+0x468>)
 800257c:	4f01      	ldr	r7, [pc, #4]	; (8002584 <_printf_float+0x46c>)
 800257e:	e612      	b.n	80021a6 <_printf_float+0x8e>
 8002580:	0800413c 	.word	0x0800413c
 8002584:	08004140 	.word	0x08004140

08002588 <_printf_common>:
 8002588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800258c:	4691      	mov	r9, r2
 800258e:	461f      	mov	r7, r3
 8002590:	688a      	ldr	r2, [r1, #8]
 8002592:	690b      	ldr	r3, [r1, #16]
 8002594:	4606      	mov	r6, r0
 8002596:	4293      	cmp	r3, r2
 8002598:	bfb8      	it	lt
 800259a:	4613      	movlt	r3, r2
 800259c:	f8c9 3000 	str.w	r3, [r9]
 80025a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025a4:	460c      	mov	r4, r1
 80025a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025aa:	b112      	cbz	r2, 80025b2 <_printf_common+0x2a>
 80025ac:	3301      	adds	r3, #1
 80025ae:	f8c9 3000 	str.w	r3, [r9]
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	0699      	lsls	r1, r3, #26
 80025b6:	bf42      	ittt	mi
 80025b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80025bc:	3302      	addmi	r3, #2
 80025be:	f8c9 3000 	strmi.w	r3, [r9]
 80025c2:	6825      	ldr	r5, [r4, #0]
 80025c4:	f015 0506 	ands.w	r5, r5, #6
 80025c8:	d107      	bne.n	80025da <_printf_common+0x52>
 80025ca:	f104 0a19 	add.w	sl, r4, #25
 80025ce:	68e3      	ldr	r3, [r4, #12]
 80025d0:	f8d9 2000 	ldr.w	r2, [r9]
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	429d      	cmp	r5, r3
 80025d8:	db2a      	blt.n	8002630 <_printf_common+0xa8>
 80025da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80025de:	6822      	ldr	r2, [r4, #0]
 80025e0:	3300      	adds	r3, #0
 80025e2:	bf18      	it	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	0692      	lsls	r2, r2, #26
 80025e8:	d42f      	bmi.n	800264a <_printf_common+0xc2>
 80025ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025ee:	4639      	mov	r1, r7
 80025f0:	4630      	mov	r0, r6
 80025f2:	47c0      	blx	r8
 80025f4:	3001      	adds	r0, #1
 80025f6:	d022      	beq.n	800263e <_printf_common+0xb6>
 80025f8:	6823      	ldr	r3, [r4, #0]
 80025fa:	68e5      	ldr	r5, [r4, #12]
 80025fc:	f003 0306 	and.w	r3, r3, #6
 8002600:	2b04      	cmp	r3, #4
 8002602:	bf18      	it	ne
 8002604:	2500      	movne	r5, #0
 8002606:	f8d9 2000 	ldr.w	r2, [r9]
 800260a:	f04f 0900 	mov.w	r9, #0
 800260e:	bf08      	it	eq
 8002610:	1aad      	subeq	r5, r5, r2
 8002612:	68a3      	ldr	r3, [r4, #8]
 8002614:	6922      	ldr	r2, [r4, #16]
 8002616:	bf08      	it	eq
 8002618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800261c:	4293      	cmp	r3, r2
 800261e:	bfc4      	itt	gt
 8002620:	1a9b      	subgt	r3, r3, r2
 8002622:	18ed      	addgt	r5, r5, r3
 8002624:	341a      	adds	r4, #26
 8002626:	454d      	cmp	r5, r9
 8002628:	d11b      	bne.n	8002662 <_printf_common+0xda>
 800262a:	2000      	movs	r0, #0
 800262c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002630:	2301      	movs	r3, #1
 8002632:	4652      	mov	r2, sl
 8002634:	4639      	mov	r1, r7
 8002636:	4630      	mov	r0, r6
 8002638:	47c0      	blx	r8
 800263a:	3001      	adds	r0, #1
 800263c:	d103      	bne.n	8002646 <_printf_common+0xbe>
 800263e:	f04f 30ff 	mov.w	r0, #4294967295
 8002642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002646:	3501      	adds	r5, #1
 8002648:	e7c1      	b.n	80025ce <_printf_common+0x46>
 800264a:	2030      	movs	r0, #48	; 0x30
 800264c:	18e1      	adds	r1, r4, r3
 800264e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002652:	1c5a      	adds	r2, r3, #1
 8002654:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002658:	4422      	add	r2, r4
 800265a:	3302      	adds	r3, #2
 800265c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002660:	e7c3      	b.n	80025ea <_printf_common+0x62>
 8002662:	2301      	movs	r3, #1
 8002664:	4622      	mov	r2, r4
 8002666:	4639      	mov	r1, r7
 8002668:	4630      	mov	r0, r6
 800266a:	47c0      	blx	r8
 800266c:	3001      	adds	r0, #1
 800266e:	d0e6      	beq.n	800263e <_printf_common+0xb6>
 8002670:	f109 0901 	add.w	r9, r9, #1
 8002674:	e7d7      	b.n	8002626 <_printf_common+0x9e>
	...

08002678 <_printf_i>:
 8002678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800267c:	4617      	mov	r7, r2
 800267e:	7e0a      	ldrb	r2, [r1, #24]
 8002680:	b085      	sub	sp, #20
 8002682:	2a6e      	cmp	r2, #110	; 0x6e
 8002684:	4698      	mov	r8, r3
 8002686:	4606      	mov	r6, r0
 8002688:	460c      	mov	r4, r1
 800268a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800268c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002690:	f000 80bc 	beq.w	800280c <_printf_i+0x194>
 8002694:	d81a      	bhi.n	80026cc <_printf_i+0x54>
 8002696:	2a63      	cmp	r2, #99	; 0x63
 8002698:	d02e      	beq.n	80026f8 <_printf_i+0x80>
 800269a:	d80a      	bhi.n	80026b2 <_printf_i+0x3a>
 800269c:	2a00      	cmp	r2, #0
 800269e:	f000 80c8 	beq.w	8002832 <_printf_i+0x1ba>
 80026a2:	2a58      	cmp	r2, #88	; 0x58
 80026a4:	f000 808a 	beq.w	80027bc <_printf_i+0x144>
 80026a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026ac:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80026b0:	e02a      	b.n	8002708 <_printf_i+0x90>
 80026b2:	2a64      	cmp	r2, #100	; 0x64
 80026b4:	d001      	beq.n	80026ba <_printf_i+0x42>
 80026b6:	2a69      	cmp	r2, #105	; 0x69
 80026b8:	d1f6      	bne.n	80026a8 <_printf_i+0x30>
 80026ba:	6821      	ldr	r1, [r4, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	f011 0f80 	tst.w	r1, #128	; 0x80
 80026c2:	d023      	beq.n	800270c <_printf_i+0x94>
 80026c4:	1d11      	adds	r1, r2, #4
 80026c6:	6019      	str	r1, [r3, #0]
 80026c8:	6813      	ldr	r3, [r2, #0]
 80026ca:	e027      	b.n	800271c <_printf_i+0xa4>
 80026cc:	2a73      	cmp	r2, #115	; 0x73
 80026ce:	f000 80b4 	beq.w	800283a <_printf_i+0x1c2>
 80026d2:	d808      	bhi.n	80026e6 <_printf_i+0x6e>
 80026d4:	2a6f      	cmp	r2, #111	; 0x6f
 80026d6:	d02a      	beq.n	800272e <_printf_i+0xb6>
 80026d8:	2a70      	cmp	r2, #112	; 0x70
 80026da:	d1e5      	bne.n	80026a8 <_printf_i+0x30>
 80026dc:	680a      	ldr	r2, [r1, #0]
 80026de:	f042 0220 	orr.w	r2, r2, #32
 80026e2:	600a      	str	r2, [r1, #0]
 80026e4:	e003      	b.n	80026ee <_printf_i+0x76>
 80026e6:	2a75      	cmp	r2, #117	; 0x75
 80026e8:	d021      	beq.n	800272e <_printf_i+0xb6>
 80026ea:	2a78      	cmp	r2, #120	; 0x78
 80026ec:	d1dc      	bne.n	80026a8 <_printf_i+0x30>
 80026ee:	2278      	movs	r2, #120	; 0x78
 80026f0:	496f      	ldr	r1, [pc, #444]	; (80028b0 <_printf_i+0x238>)
 80026f2:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80026f6:	e064      	b.n	80027c2 <_printf_i+0x14a>
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80026fe:	1d11      	adds	r1, r2, #4
 8002700:	6019      	str	r1, [r3, #0]
 8002702:	6813      	ldr	r3, [r2, #0]
 8002704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002708:	2301      	movs	r3, #1
 800270a:	e0a3      	b.n	8002854 <_printf_i+0x1dc>
 800270c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002710:	f102 0104 	add.w	r1, r2, #4
 8002714:	6019      	str	r1, [r3, #0]
 8002716:	d0d7      	beq.n	80026c8 <_printf_i+0x50>
 8002718:	f9b2 3000 	ldrsh.w	r3, [r2]
 800271c:	2b00      	cmp	r3, #0
 800271e:	da03      	bge.n	8002728 <_printf_i+0xb0>
 8002720:	222d      	movs	r2, #45	; 0x2d
 8002722:	425b      	negs	r3, r3
 8002724:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002728:	4962      	ldr	r1, [pc, #392]	; (80028b4 <_printf_i+0x23c>)
 800272a:	220a      	movs	r2, #10
 800272c:	e017      	b.n	800275e <_printf_i+0xe6>
 800272e:	6820      	ldr	r0, [r4, #0]
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002736:	d003      	beq.n	8002740 <_printf_i+0xc8>
 8002738:	1d08      	adds	r0, r1, #4
 800273a:	6018      	str	r0, [r3, #0]
 800273c:	680b      	ldr	r3, [r1, #0]
 800273e:	e006      	b.n	800274e <_printf_i+0xd6>
 8002740:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002744:	f101 0004 	add.w	r0, r1, #4
 8002748:	6018      	str	r0, [r3, #0]
 800274a:	d0f7      	beq.n	800273c <_printf_i+0xc4>
 800274c:	880b      	ldrh	r3, [r1, #0]
 800274e:	2a6f      	cmp	r2, #111	; 0x6f
 8002750:	bf14      	ite	ne
 8002752:	220a      	movne	r2, #10
 8002754:	2208      	moveq	r2, #8
 8002756:	4957      	ldr	r1, [pc, #348]	; (80028b4 <_printf_i+0x23c>)
 8002758:	2000      	movs	r0, #0
 800275a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800275e:	6865      	ldr	r5, [r4, #4]
 8002760:	2d00      	cmp	r5, #0
 8002762:	60a5      	str	r5, [r4, #8]
 8002764:	f2c0 809c 	blt.w	80028a0 <_printf_i+0x228>
 8002768:	6820      	ldr	r0, [r4, #0]
 800276a:	f020 0004 	bic.w	r0, r0, #4
 800276e:	6020      	str	r0, [r4, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d13f      	bne.n	80027f4 <_printf_i+0x17c>
 8002774:	2d00      	cmp	r5, #0
 8002776:	f040 8095 	bne.w	80028a4 <_printf_i+0x22c>
 800277a:	4675      	mov	r5, lr
 800277c:	2a08      	cmp	r2, #8
 800277e:	d10b      	bne.n	8002798 <_printf_i+0x120>
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	07da      	lsls	r2, r3, #31
 8002784:	d508      	bpl.n	8002798 <_printf_i+0x120>
 8002786:	6923      	ldr	r3, [r4, #16]
 8002788:	6862      	ldr	r2, [r4, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	bfde      	ittt	le
 800278e:	2330      	movle	r3, #48	; 0x30
 8002790:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002794:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002798:	ebae 0305 	sub.w	r3, lr, r5
 800279c:	6123      	str	r3, [r4, #16]
 800279e:	f8cd 8000 	str.w	r8, [sp]
 80027a2:	463b      	mov	r3, r7
 80027a4:	aa03      	add	r2, sp, #12
 80027a6:	4621      	mov	r1, r4
 80027a8:	4630      	mov	r0, r6
 80027aa:	f7ff feed 	bl	8002588 <_printf_common>
 80027ae:	3001      	adds	r0, #1
 80027b0:	d155      	bne.n	800285e <_printf_i+0x1e6>
 80027b2:	f04f 30ff 	mov.w	r0, #4294967295
 80027b6:	b005      	add	sp, #20
 80027b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027bc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80027c0:	493c      	ldr	r1, [pc, #240]	; (80028b4 <_printf_i+0x23c>)
 80027c2:	6822      	ldr	r2, [r4, #0]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027ca:	f100 0504 	add.w	r5, r0, #4
 80027ce:	601d      	str	r5, [r3, #0]
 80027d0:	d001      	beq.n	80027d6 <_printf_i+0x15e>
 80027d2:	6803      	ldr	r3, [r0, #0]
 80027d4:	e002      	b.n	80027dc <_printf_i+0x164>
 80027d6:	0655      	lsls	r5, r2, #25
 80027d8:	d5fb      	bpl.n	80027d2 <_printf_i+0x15a>
 80027da:	8803      	ldrh	r3, [r0, #0]
 80027dc:	07d0      	lsls	r0, r2, #31
 80027de:	bf44      	itt	mi
 80027e0:	f042 0220 	orrmi.w	r2, r2, #32
 80027e4:	6022      	strmi	r2, [r4, #0]
 80027e6:	b91b      	cbnz	r3, 80027f0 <_printf_i+0x178>
 80027e8:	6822      	ldr	r2, [r4, #0]
 80027ea:	f022 0220 	bic.w	r2, r2, #32
 80027ee:	6022      	str	r2, [r4, #0]
 80027f0:	2210      	movs	r2, #16
 80027f2:	e7b1      	b.n	8002758 <_printf_i+0xe0>
 80027f4:	4675      	mov	r5, lr
 80027f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80027fa:	fb02 3310 	mls	r3, r2, r0, r3
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002804:	4603      	mov	r3, r0
 8002806:	2800      	cmp	r0, #0
 8002808:	d1f5      	bne.n	80027f6 <_printf_i+0x17e>
 800280a:	e7b7      	b.n	800277c <_printf_i+0x104>
 800280c:	6808      	ldr	r0, [r1, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002814:	6949      	ldr	r1, [r1, #20]
 8002816:	d004      	beq.n	8002822 <_printf_i+0x1aa>
 8002818:	1d10      	adds	r0, r2, #4
 800281a:	6018      	str	r0, [r3, #0]
 800281c:	6813      	ldr	r3, [r2, #0]
 800281e:	6019      	str	r1, [r3, #0]
 8002820:	e007      	b.n	8002832 <_printf_i+0x1ba>
 8002822:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002826:	f102 0004 	add.w	r0, r2, #4
 800282a:	6018      	str	r0, [r3, #0]
 800282c:	6813      	ldr	r3, [r2, #0]
 800282e:	d0f6      	beq.n	800281e <_printf_i+0x1a6>
 8002830:	8019      	strh	r1, [r3, #0]
 8002832:	2300      	movs	r3, #0
 8002834:	4675      	mov	r5, lr
 8002836:	6123      	str	r3, [r4, #16]
 8002838:	e7b1      	b.n	800279e <_printf_i+0x126>
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	1d11      	adds	r1, r2, #4
 800283e:	6019      	str	r1, [r3, #0]
 8002840:	6815      	ldr	r5, [r2, #0]
 8002842:	2100      	movs	r1, #0
 8002844:	6862      	ldr	r2, [r4, #4]
 8002846:	4628      	mov	r0, r5
 8002848:	f000 fed0 	bl	80035ec <memchr>
 800284c:	b108      	cbz	r0, 8002852 <_printf_i+0x1da>
 800284e:	1b40      	subs	r0, r0, r5
 8002850:	6060      	str	r0, [r4, #4]
 8002852:	6863      	ldr	r3, [r4, #4]
 8002854:	6123      	str	r3, [r4, #16]
 8002856:	2300      	movs	r3, #0
 8002858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800285c:	e79f      	b.n	800279e <_printf_i+0x126>
 800285e:	6923      	ldr	r3, [r4, #16]
 8002860:	462a      	mov	r2, r5
 8002862:	4639      	mov	r1, r7
 8002864:	4630      	mov	r0, r6
 8002866:	47c0      	blx	r8
 8002868:	3001      	adds	r0, #1
 800286a:	d0a2      	beq.n	80027b2 <_printf_i+0x13a>
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	079b      	lsls	r3, r3, #30
 8002870:	d507      	bpl.n	8002882 <_printf_i+0x20a>
 8002872:	2500      	movs	r5, #0
 8002874:	f104 0919 	add.w	r9, r4, #25
 8002878:	68e3      	ldr	r3, [r4, #12]
 800287a:	9a03      	ldr	r2, [sp, #12]
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	429d      	cmp	r5, r3
 8002880:	db05      	blt.n	800288e <_printf_i+0x216>
 8002882:	68e0      	ldr	r0, [r4, #12]
 8002884:	9b03      	ldr	r3, [sp, #12]
 8002886:	4298      	cmp	r0, r3
 8002888:	bfb8      	it	lt
 800288a:	4618      	movlt	r0, r3
 800288c:	e793      	b.n	80027b6 <_printf_i+0x13e>
 800288e:	2301      	movs	r3, #1
 8002890:	464a      	mov	r2, r9
 8002892:	4639      	mov	r1, r7
 8002894:	4630      	mov	r0, r6
 8002896:	47c0      	blx	r8
 8002898:	3001      	adds	r0, #1
 800289a:	d08a      	beq.n	80027b2 <_printf_i+0x13a>
 800289c:	3501      	adds	r5, #1
 800289e:	e7eb      	b.n	8002878 <_printf_i+0x200>
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1a7      	bne.n	80027f4 <_printf_i+0x17c>
 80028a4:	780b      	ldrb	r3, [r1, #0]
 80028a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028ae:	e765      	b.n	800277c <_printf_i+0x104>
 80028b0:	08004157 	.word	0x08004157
 80028b4:	08004146 	.word	0x08004146

080028b8 <siprintf>:
 80028b8:	b40e      	push	{r1, r2, r3}
 80028ba:	f44f 7102 	mov.w	r1, #520	; 0x208
 80028be:	b500      	push	{lr}
 80028c0:	b09c      	sub	sp, #112	; 0x70
 80028c2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80028c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028ca:	9104      	str	r1, [sp, #16]
 80028cc:	9107      	str	r1, [sp, #28]
 80028ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028d2:	ab1d      	add	r3, sp, #116	; 0x74
 80028d4:	9002      	str	r0, [sp, #8]
 80028d6:	9006      	str	r0, [sp, #24]
 80028d8:	4808      	ldr	r0, [pc, #32]	; (80028fc <siprintf+0x44>)
 80028da:	f853 2b04 	ldr.w	r2, [r3], #4
 80028de:	f8ad 1016 	strh.w	r1, [sp, #22]
 80028e2:	6800      	ldr	r0, [r0, #0]
 80028e4:	a902      	add	r1, sp, #8
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	f001 fa7e 	bl	8003de8 <_svfiprintf_r>
 80028ec:	2200      	movs	r2, #0
 80028ee:	9b02      	ldr	r3, [sp, #8]
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	b01c      	add	sp, #112	; 0x70
 80028f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80028f8:	b003      	add	sp, #12
 80028fa:	4770      	bx	lr
 80028fc:	20000010 	.word	0x20000010

08002900 <quorem>:
 8002900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002904:	6903      	ldr	r3, [r0, #16]
 8002906:	690c      	ldr	r4, [r1, #16]
 8002908:	4680      	mov	r8, r0
 800290a:	429c      	cmp	r4, r3
 800290c:	f300 8082 	bgt.w	8002a14 <quorem+0x114>
 8002910:	3c01      	subs	r4, #1
 8002912:	f101 0714 	add.w	r7, r1, #20
 8002916:	f100 0614 	add.w	r6, r0, #20
 800291a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800291e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002922:	3501      	adds	r5, #1
 8002924:	fbb0 f5f5 	udiv	r5, r0, r5
 8002928:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800292c:	eb06 030e 	add.w	r3, r6, lr
 8002930:	eb07 090e 	add.w	r9, r7, lr
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	b38d      	cbz	r5, 800299c <quorem+0x9c>
 8002938:	f04f 0a00 	mov.w	sl, #0
 800293c:	4638      	mov	r0, r7
 800293e:	46b4      	mov	ip, r6
 8002940:	46d3      	mov	fp, sl
 8002942:	f850 2b04 	ldr.w	r2, [r0], #4
 8002946:	b293      	uxth	r3, r2
 8002948:	fb05 a303 	mla	r3, r5, r3, sl
 800294c:	0c12      	lsrs	r2, r2, #16
 800294e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002952:	fb05 a202 	mla	r2, r5, r2, sl
 8002956:	b29b      	uxth	r3, r3
 8002958:	ebab 0303 	sub.w	r3, fp, r3
 800295c:	f8bc b000 	ldrh.w	fp, [ip]
 8002960:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002964:	445b      	add	r3, fp
 8002966:	fa1f fb82 	uxth.w	fp, r2
 800296a:	f8dc 2000 	ldr.w	r2, [ip]
 800296e:	4581      	cmp	r9, r0
 8002970:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002974:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002978:	b29b      	uxth	r3, r3
 800297a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800297e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002982:	f84c 3b04 	str.w	r3, [ip], #4
 8002986:	d2dc      	bcs.n	8002942 <quorem+0x42>
 8002988:	f856 300e 	ldr.w	r3, [r6, lr]
 800298c:	b933      	cbnz	r3, 800299c <quorem+0x9c>
 800298e:	9b01      	ldr	r3, [sp, #4]
 8002990:	3b04      	subs	r3, #4
 8002992:	429e      	cmp	r6, r3
 8002994:	461a      	mov	r2, r3
 8002996:	d331      	bcc.n	80029fc <quorem+0xfc>
 8002998:	f8c8 4010 	str.w	r4, [r8, #16]
 800299c:	4640      	mov	r0, r8
 800299e:	f001 f846 	bl	8003a2e <__mcmp>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	db26      	blt.n	80029f4 <quorem+0xf4>
 80029a6:	4630      	mov	r0, r6
 80029a8:	f04f 0e00 	mov.w	lr, #0
 80029ac:	3501      	adds	r5, #1
 80029ae:	f857 1b04 	ldr.w	r1, [r7], #4
 80029b2:	f8d0 c000 	ldr.w	ip, [r0]
 80029b6:	b28b      	uxth	r3, r1
 80029b8:	ebae 0303 	sub.w	r3, lr, r3
 80029bc:	fa1f f28c 	uxth.w	r2, ip
 80029c0:	4413      	add	r3, r2
 80029c2:	0c0a      	lsrs	r2, r1, #16
 80029c4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80029c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80029d2:	45b9      	cmp	r9, r7
 80029d4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80029d8:	f840 3b04 	str.w	r3, [r0], #4
 80029dc:	d2e7      	bcs.n	80029ae <quorem+0xae>
 80029de:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80029e2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80029e6:	b92a      	cbnz	r2, 80029f4 <quorem+0xf4>
 80029e8:	3b04      	subs	r3, #4
 80029ea:	429e      	cmp	r6, r3
 80029ec:	461a      	mov	r2, r3
 80029ee:	d30b      	bcc.n	8002a08 <quorem+0x108>
 80029f0:	f8c8 4010 	str.w	r4, [r8, #16]
 80029f4:	4628      	mov	r0, r5
 80029f6:	b003      	add	sp, #12
 80029f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	3b04      	subs	r3, #4
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	d1c9      	bne.n	8002998 <quorem+0x98>
 8002a04:	3c01      	subs	r4, #1
 8002a06:	e7c4      	b.n	8002992 <quorem+0x92>
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	3b04      	subs	r3, #4
 8002a0c:	2a00      	cmp	r2, #0
 8002a0e:	d1ef      	bne.n	80029f0 <quorem+0xf0>
 8002a10:	3c01      	subs	r4, #1
 8002a12:	e7ea      	b.n	80029ea <quorem+0xea>
 8002a14:	2000      	movs	r0, #0
 8002a16:	e7ee      	b.n	80029f6 <quorem+0xf6>

08002a18 <_dtoa_r>:
 8002a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a1c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002a1e:	b095      	sub	sp, #84	; 0x54
 8002a20:	4604      	mov	r4, r0
 8002a22:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002a24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a28:	b93e      	cbnz	r6, 8002a3a <_dtoa_r+0x22>
 8002a2a:	2010      	movs	r0, #16
 8002a2c:	f000 fdd6 	bl	80035dc <malloc>
 8002a30:	6260      	str	r0, [r4, #36]	; 0x24
 8002a32:	6046      	str	r6, [r0, #4]
 8002a34:	6086      	str	r6, [r0, #8]
 8002a36:	6006      	str	r6, [r0, #0]
 8002a38:	60c6      	str	r6, [r0, #12]
 8002a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	b151      	cbz	r1, 8002a56 <_dtoa_r+0x3e>
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	2301      	movs	r3, #1
 8002a44:	4093      	lsls	r3, r2
 8002a46:	604a      	str	r2, [r1, #4]
 8002a48:	608b      	str	r3, [r1, #8]
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f000 fe1b 	bl	8003686 <_Bfree>
 8002a50:	2200      	movs	r2, #0
 8002a52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	9b03      	ldr	r3, [sp, #12]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bfb7      	itett	lt
 8002a5c:	2301      	movlt	r3, #1
 8002a5e:	2300      	movge	r3, #0
 8002a60:	602b      	strlt	r3, [r5, #0]
 8002a62:	9b03      	ldrlt	r3, [sp, #12]
 8002a64:	bfae      	itee	ge
 8002a66:	602b      	strge	r3, [r5, #0]
 8002a68:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002a6c:	9303      	strlt	r3, [sp, #12]
 8002a6e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002a72:	4bab      	ldr	r3, [pc, #684]	; (8002d20 <_dtoa_r+0x308>)
 8002a74:	ea33 0309 	bics.w	r3, r3, r9
 8002a78:	d11b      	bne.n	8002ab2 <_dtoa_r+0x9a>
 8002a7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8002a7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	9b02      	ldr	r3, [sp, #8]
 8002a84:	b923      	cbnz	r3, 8002a90 <_dtoa_r+0x78>
 8002a86:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	f000 8583 	beq.w	8003596 <_dtoa_r+0xb7e>
 8002a90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002a92:	b953      	cbnz	r3, 8002aaa <_dtoa_r+0x92>
 8002a94:	4ba3      	ldr	r3, [pc, #652]	; (8002d24 <_dtoa_r+0x30c>)
 8002a96:	e021      	b.n	8002adc <_dtoa_r+0xc4>
 8002a98:	4ba3      	ldr	r3, [pc, #652]	; (8002d28 <_dtoa_r+0x310>)
 8002a9a:	9306      	str	r3, [sp, #24]
 8002a9c:	3308      	adds	r3, #8
 8002a9e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	9806      	ldr	r0, [sp, #24]
 8002aa4:	b015      	add	sp, #84	; 0x54
 8002aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002aaa:	4b9e      	ldr	r3, [pc, #632]	; (8002d24 <_dtoa_r+0x30c>)
 8002aac:	9306      	str	r3, [sp, #24]
 8002aae:	3303      	adds	r3, #3
 8002ab0:	e7f5      	b.n	8002a9e <_dtoa_r+0x86>
 8002ab2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2300      	movs	r3, #0
 8002aba:	4630      	mov	r0, r6
 8002abc:	4639      	mov	r1, r7
 8002abe:	f7fd ff6f 	bl	80009a0 <__aeabi_dcmpeq>
 8002ac2:	4680      	mov	r8, r0
 8002ac4:	b160      	cbz	r0, 8002ae0 <_dtoa_r+0xc8>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 855e 	beq.w	8003590 <_dtoa_r+0xb78>
 8002ad4:	4b95      	ldr	r3, [pc, #596]	; (8002d2c <_dtoa_r+0x314>)
 8002ad6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	3b01      	subs	r3, #1
 8002adc:	9306      	str	r3, [sp, #24]
 8002ade:	e7e0      	b.n	8002aa2 <_dtoa_r+0x8a>
 8002ae0:	ab12      	add	r3, sp, #72	; 0x48
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	ab13      	add	r3, sp, #76	; 0x4c
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	4632      	mov	r2, r6
 8002aea:	463b      	mov	r3, r7
 8002aec:	4620      	mov	r0, r4
 8002aee:	f001 f817 	bl	8003b20 <__d2b>
 8002af2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8002af6:	4682      	mov	sl, r0
 8002af8:	2d00      	cmp	r5, #0
 8002afa:	d07d      	beq.n	8002bf8 <_dtoa_r+0x1e0>
 8002afc:	4630      	mov	r0, r6
 8002afe:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002b02:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002b06:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002b0a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002b0e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002b12:	2200      	movs	r2, #0
 8002b14:	4b86      	ldr	r3, [pc, #536]	; (8002d30 <_dtoa_r+0x318>)
 8002b16:	f7fd fb27 	bl	8000168 <__aeabi_dsub>
 8002b1a:	a37b      	add	r3, pc, #492	; (adr r3, 8002d08 <_dtoa_r+0x2f0>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd fcd6 	bl	80004d0 <__aeabi_dmul>
 8002b24:	a37a      	add	r3, pc, #488	; (adr r3, 8002d10 <_dtoa_r+0x2f8>)
 8002b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2a:	f7fd fb1f 	bl	800016c <__adddf3>
 8002b2e:	4606      	mov	r6, r0
 8002b30:	4628      	mov	r0, r5
 8002b32:	460f      	mov	r7, r1
 8002b34:	f7fd fc66 	bl	8000404 <__aeabi_i2d>
 8002b38:	a377      	add	r3, pc, #476	; (adr r3, 8002d18 <_dtoa_r+0x300>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd fcc7 	bl	80004d0 <__aeabi_dmul>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4630      	mov	r0, r6
 8002b48:	4639      	mov	r1, r7
 8002b4a:	f7fd fb0f 	bl	800016c <__adddf3>
 8002b4e:	4606      	mov	r6, r0
 8002b50:	460f      	mov	r7, r1
 8002b52:	f7fd ff6d 	bl	8000a30 <__aeabi_d2iz>
 8002b56:	2200      	movs	r2, #0
 8002b58:	4683      	mov	fp, r0
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	4639      	mov	r1, r7
 8002b60:	f7fd ff28 	bl	80009b4 <__aeabi_dcmplt>
 8002b64:	b158      	cbz	r0, 8002b7e <_dtoa_r+0x166>
 8002b66:	4658      	mov	r0, fp
 8002b68:	f7fd fc4c 	bl	8000404 <__aeabi_i2d>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4630      	mov	r0, r6
 8002b72:	4639      	mov	r1, r7
 8002b74:	f7fd ff14 	bl	80009a0 <__aeabi_dcmpeq>
 8002b78:	b908      	cbnz	r0, 8002b7e <_dtoa_r+0x166>
 8002b7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002b7e:	f1bb 0f16 	cmp.w	fp, #22
 8002b82:	d858      	bhi.n	8002c36 <_dtoa_r+0x21e>
 8002b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b88:	496a      	ldr	r1, [pc, #424]	; (8002d34 <_dtoa_r+0x31c>)
 8002b8a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8002b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b92:	f7fd ff2d 	bl	80009f0 <__aeabi_dcmpgt>
 8002b96:	2800      	cmp	r0, #0
 8002b98:	d04f      	beq.n	8002c3a <_dtoa_r+0x222>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002ba0:	930d      	str	r3, [sp, #52]	; 0x34
 8002ba2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002ba4:	1b5d      	subs	r5, r3, r5
 8002ba6:	1e6b      	subs	r3, r5, #1
 8002ba8:	9307      	str	r3, [sp, #28]
 8002baa:	bf43      	ittte	mi
 8002bac:	2300      	movmi	r3, #0
 8002bae:	f1c5 0801 	rsbmi	r8, r5, #1
 8002bb2:	9307      	strmi	r3, [sp, #28]
 8002bb4:	f04f 0800 	movpl.w	r8, #0
 8002bb8:	f1bb 0f00 	cmp.w	fp, #0
 8002bbc:	db3f      	blt.n	8002c3e <_dtoa_r+0x226>
 8002bbe:	9b07      	ldr	r3, [sp, #28]
 8002bc0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8002bc4:	445b      	add	r3, fp
 8002bc6:	9307      	str	r3, [sp, #28]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9308      	str	r3, [sp, #32]
 8002bcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002bce:	2b09      	cmp	r3, #9
 8002bd0:	f200 80b4 	bhi.w	8002d3c <_dtoa_r+0x324>
 8002bd4:	2b05      	cmp	r3, #5
 8002bd6:	bfc4      	itt	gt
 8002bd8:	3b04      	subgt	r3, #4
 8002bda:	931e      	strgt	r3, [sp, #120]	; 0x78
 8002bdc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002bde:	bfc8      	it	gt
 8002be0:	2600      	movgt	r6, #0
 8002be2:	f1a3 0302 	sub.w	r3, r3, #2
 8002be6:	bfd8      	it	le
 8002be8:	2601      	movle	r6, #1
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	f200 80b2 	bhi.w	8002d54 <_dtoa_r+0x33c>
 8002bf0:	e8df f003 	tbb	[pc, r3]
 8002bf4:	782d8684 	.word	0x782d8684
 8002bf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002bfa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002bfc:	441d      	add	r5, r3
 8002bfe:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	dd11      	ble.n	8002c2a <_dtoa_r+0x212>
 8002c06:	9a02      	ldr	r2, [sp, #8]
 8002c08:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002c0c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002c10:	fa22 f000 	lsr.w	r0, r2, r0
 8002c14:	fa09 f303 	lsl.w	r3, r9, r3
 8002c18:	4318      	orrs	r0, r3
 8002c1a:	f7fd fbe3 	bl	80003e4 <__aeabi_ui2d>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002c24:	3d01      	subs	r5, #1
 8002c26:	9310      	str	r3, [sp, #64]	; 0x40
 8002c28:	e773      	b.n	8002b12 <_dtoa_r+0xfa>
 8002c2a:	f1c3 0020 	rsb	r0, r3, #32
 8002c2e:	9b02      	ldr	r3, [sp, #8]
 8002c30:	fa03 f000 	lsl.w	r0, r3, r0
 8002c34:	e7f1      	b.n	8002c1a <_dtoa_r+0x202>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e7b2      	b.n	8002ba0 <_dtoa_r+0x188>
 8002c3a:	900d      	str	r0, [sp, #52]	; 0x34
 8002c3c:	e7b1      	b.n	8002ba2 <_dtoa_r+0x18a>
 8002c3e:	f1cb 0300 	rsb	r3, fp, #0
 8002c42:	9308      	str	r3, [sp, #32]
 8002c44:	2300      	movs	r3, #0
 8002c46:	eba8 080b 	sub.w	r8, r8, fp
 8002c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8002c4c:	e7be      	b.n	8002bcc <_dtoa_r+0x1b4>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	9309      	str	r3, [sp, #36]	; 0x24
 8002c52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f340 8080 	ble.w	8002d5a <_dtoa_r+0x342>
 8002c5a:	4699      	mov	r9, r3
 8002c5c:	9304      	str	r3, [sp, #16]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	2104      	movs	r1, #4
 8002c62:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002c64:	606a      	str	r2, [r5, #4]
 8002c66:	f101 0214 	add.w	r2, r1, #20
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d97a      	bls.n	8002d64 <_dtoa_r+0x34c>
 8002c6e:	6869      	ldr	r1, [r5, #4]
 8002c70:	4620      	mov	r0, r4
 8002c72:	f000 fcd4 	bl	800361e <_Balloc>
 8002c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c78:	6028      	str	r0, [r5, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f1b9 0f0e 	cmp.w	r9, #14
 8002c80:	9306      	str	r3, [sp, #24]
 8002c82:	f200 80f0 	bhi.w	8002e66 <_dtoa_r+0x44e>
 8002c86:	2e00      	cmp	r6, #0
 8002c88:	f000 80ed 	beq.w	8002e66 <_dtoa_r+0x44e>
 8002c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002c90:	f1bb 0f00 	cmp.w	fp, #0
 8002c94:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002c98:	dd79      	ble.n	8002d8e <_dtoa_r+0x376>
 8002c9a:	4a26      	ldr	r2, [pc, #152]	; (8002d34 <_dtoa_r+0x31c>)
 8002c9c:	f00b 030f 	and.w	r3, fp, #15
 8002ca0:	ea4f 162b 	mov.w	r6, fp, asr #4
 8002ca4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002ca8:	06f0      	lsls	r0, r6, #27
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002cb2:	d55c      	bpl.n	8002d6e <_dtoa_r+0x356>
 8002cb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <_dtoa_r+0x320>)
 8002cba:	2503      	movs	r5, #3
 8002cbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002cc0:	f7fd fd30 	bl	8000724 <__aeabi_ddiv>
 8002cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002cc8:	f006 060f 	and.w	r6, r6, #15
 8002ccc:	4f1a      	ldr	r7, [pc, #104]	; (8002d38 <_dtoa_r+0x320>)
 8002cce:	2e00      	cmp	r6, #0
 8002cd0:	d14f      	bne.n	8002d72 <_dtoa_r+0x35a>
 8002cd2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002cda:	f7fd fd23 	bl	8000724 <__aeabi_ddiv>
 8002cde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ce2:	e06e      	b.n	8002dc2 <_dtoa_r+0x3aa>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ce8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002cea:	445b      	add	r3, fp
 8002cec:	f103 0901 	add.w	r9, r3, #1
 8002cf0:	9304      	str	r3, [sp, #16]
 8002cf2:	464b      	mov	r3, r9
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	bfb8      	it	lt
 8002cf8:	2301      	movlt	r3, #1
 8002cfa:	e7b0      	b.n	8002c5e <_dtoa_r+0x246>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e7a7      	b.n	8002c50 <_dtoa_r+0x238>
 8002d00:	2300      	movs	r3, #0
 8002d02:	e7f0      	b.n	8002ce6 <_dtoa_r+0x2ce>
 8002d04:	f3af 8000 	nop.w
 8002d08:	636f4361 	.word	0x636f4361
 8002d0c:	3fd287a7 	.word	0x3fd287a7
 8002d10:	8b60c8b3 	.word	0x8b60c8b3
 8002d14:	3fc68a28 	.word	0x3fc68a28
 8002d18:	509f79fb 	.word	0x509f79fb
 8002d1c:	3fd34413 	.word	0x3fd34413
 8002d20:	7ff00000 	.word	0x7ff00000
 8002d24:	08004171 	.word	0x08004171
 8002d28:	08004168 	.word	0x08004168
 8002d2c:	08004145 	.word	0x08004145
 8002d30:	3ff80000 	.word	0x3ff80000
 8002d34:	080041a0 	.word	0x080041a0
 8002d38:	08004178 	.word	0x08004178
 8002d3c:	2601      	movs	r6, #1
 8002d3e:	2300      	movs	r3, #0
 8002d40:	9609      	str	r6, [sp, #36]	; 0x24
 8002d42:	931e      	str	r3, [sp, #120]	; 0x78
 8002d44:	f04f 33ff 	mov.w	r3, #4294967295
 8002d48:	2200      	movs	r2, #0
 8002d4a:	9304      	str	r3, [sp, #16]
 8002d4c:	4699      	mov	r9, r3
 8002d4e:	2312      	movs	r3, #18
 8002d50:	921f      	str	r2, [sp, #124]	; 0x7c
 8002d52:	e784      	b.n	8002c5e <_dtoa_r+0x246>
 8002d54:	2301      	movs	r3, #1
 8002d56:	9309      	str	r3, [sp, #36]	; 0x24
 8002d58:	e7f4      	b.n	8002d44 <_dtoa_r+0x32c>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	9304      	str	r3, [sp, #16]
 8002d5e:	4699      	mov	r9, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	e7f5      	b.n	8002d50 <_dtoa_r+0x338>
 8002d64:	686a      	ldr	r2, [r5, #4]
 8002d66:	0049      	lsls	r1, r1, #1
 8002d68:	3201      	adds	r2, #1
 8002d6a:	606a      	str	r2, [r5, #4]
 8002d6c:	e77b      	b.n	8002c66 <_dtoa_r+0x24e>
 8002d6e:	2502      	movs	r5, #2
 8002d70:	e7ac      	b.n	8002ccc <_dtoa_r+0x2b4>
 8002d72:	07f1      	lsls	r1, r6, #31
 8002d74:	d508      	bpl.n	8002d88 <_dtoa_r+0x370>
 8002d76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d7e:	f7fd fba7 	bl	80004d0 <__aeabi_dmul>
 8002d82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002d86:	3501      	adds	r5, #1
 8002d88:	1076      	asrs	r6, r6, #1
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	e79f      	b.n	8002cce <_dtoa_r+0x2b6>
 8002d8e:	f000 80a5 	beq.w	8002edc <_dtoa_r+0x4c4>
 8002d92:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002d96:	f1cb 0600 	rsb	r6, fp, #0
 8002d9a:	4ba2      	ldr	r3, [pc, #648]	; (8003024 <_dtoa_r+0x60c>)
 8002d9c:	f006 020f 	and.w	r2, r6, #15
 8002da0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da8:	f7fd fb92 	bl	80004d0 <__aeabi_dmul>
 8002dac:	2502      	movs	r5, #2
 8002dae:	2300      	movs	r3, #0
 8002db0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002db4:	4f9c      	ldr	r7, [pc, #624]	; (8003028 <_dtoa_r+0x610>)
 8002db6:	1136      	asrs	r6, r6, #4
 8002db8:	2e00      	cmp	r6, #0
 8002dba:	f040 8084 	bne.w	8002ec6 <_dtoa_r+0x4ae>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d18d      	bne.n	8002cde <_dtoa_r+0x2c6>
 8002dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 808b 	beq.w	8002ee0 <_dtoa_r+0x4c8>
 8002dca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002dce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002dd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	4b94      	ldr	r3, [pc, #592]	; (800302c <_dtoa_r+0x614>)
 8002dda:	f7fd fdeb 	bl	80009b4 <__aeabi_dcmplt>
 8002dde:	2800      	cmp	r0, #0
 8002de0:	d07e      	beq.n	8002ee0 <_dtoa_r+0x4c8>
 8002de2:	f1b9 0f00 	cmp.w	r9, #0
 8002de6:	d07b      	beq.n	8002ee0 <_dtoa_r+0x4c8>
 8002de8:	9b04      	ldr	r3, [sp, #16]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	dd37      	ble.n	8002e5e <_dtoa_r+0x446>
 8002dee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002df2:	2200      	movs	r2, #0
 8002df4:	4b8e      	ldr	r3, [pc, #568]	; (8003030 <_dtoa_r+0x618>)
 8002df6:	f7fd fb6b 	bl	80004d0 <__aeabi_dmul>
 8002dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dfe:	9e04      	ldr	r6, [sp, #16]
 8002e00:	f10b 37ff 	add.w	r7, fp, #4294967295
 8002e04:	3501      	adds	r5, #1
 8002e06:	4628      	mov	r0, r5
 8002e08:	f7fd fafc 	bl	8000404 <__aeabi_i2d>
 8002e0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002e10:	f7fd fb5e 	bl	80004d0 <__aeabi_dmul>
 8002e14:	4b87      	ldr	r3, [pc, #540]	; (8003034 <_dtoa_r+0x61c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	f7fd f9a8 	bl	800016c <__adddf3>
 8002e1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e22:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8002e26:	950b      	str	r5, [sp, #44]	; 0x2c
 8002e28:	2e00      	cmp	r6, #0
 8002e2a:	d15c      	bne.n	8002ee6 <_dtoa_r+0x4ce>
 8002e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	4b81      	ldr	r3, [pc, #516]	; (8003038 <_dtoa_r+0x620>)
 8002e34:	f7fd f998 	bl	8000168 <__aeabi_dsub>
 8002e38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e3a:	462b      	mov	r3, r5
 8002e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e40:	f7fd fdd6 	bl	80009f0 <__aeabi_dcmpgt>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	f040 82f7 	bne.w	8003438 <_dtoa_r+0xa20>
 8002e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e50:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002e54:	f7fd fdae 	bl	80009b4 <__aeabi_dcmplt>
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	f040 82eb 	bne.w	8003434 <_dtoa_r+0xa1c>
 8002e5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002e62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f2c0 8150 	blt.w	800310e <_dtoa_r+0x6f6>
 8002e6e:	f1bb 0f0e 	cmp.w	fp, #14
 8002e72:	f300 814c 	bgt.w	800310e <_dtoa_r+0x6f6>
 8002e76:	4b6b      	ldr	r3, [pc, #428]	; (8003024 <_dtoa_r+0x60c>)
 8002e78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e80:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f280 80da 	bge.w	8003040 <_dtoa_r+0x628>
 8002e8c:	f1b9 0f00 	cmp.w	r9, #0
 8002e90:	f300 80d6 	bgt.w	8003040 <_dtoa_r+0x628>
 8002e94:	f040 82cd 	bne.w	8003432 <_dtoa_r+0xa1a>
 8002e98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	4b66      	ldr	r3, [pc, #408]	; (8003038 <_dtoa_r+0x620>)
 8002ea0:	f7fd fb16 	bl	80004d0 <__aeabi_dmul>
 8002ea4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ea8:	f7fd fd98 	bl	80009dc <__aeabi_dcmpge>
 8002eac:	464e      	mov	r6, r9
 8002eae:	464f      	mov	r7, r9
 8002eb0:	2800      	cmp	r0, #0
 8002eb2:	f040 82a4 	bne.w	80033fe <_dtoa_r+0x9e6>
 8002eb6:	9b06      	ldr	r3, [sp, #24]
 8002eb8:	9a06      	ldr	r2, [sp, #24]
 8002eba:	1c5d      	adds	r5, r3, #1
 8002ebc:	2331      	movs	r3, #49	; 0x31
 8002ebe:	f10b 0b01 	add.w	fp, fp, #1
 8002ec2:	7013      	strb	r3, [r2, #0]
 8002ec4:	e29f      	b.n	8003406 <_dtoa_r+0x9ee>
 8002ec6:	07f2      	lsls	r2, r6, #31
 8002ec8:	d505      	bpl.n	8002ed6 <_dtoa_r+0x4be>
 8002eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ece:	f7fd faff 	bl	80004d0 <__aeabi_dmul>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	3501      	adds	r5, #1
 8002ed6:	1076      	asrs	r6, r6, #1
 8002ed8:	3708      	adds	r7, #8
 8002eda:	e76d      	b.n	8002db8 <_dtoa_r+0x3a0>
 8002edc:	2502      	movs	r5, #2
 8002ede:	e770      	b.n	8002dc2 <_dtoa_r+0x3aa>
 8002ee0:	465f      	mov	r7, fp
 8002ee2:	464e      	mov	r6, r9
 8002ee4:	e78f      	b.n	8002e06 <_dtoa_r+0x3ee>
 8002ee6:	9a06      	ldr	r2, [sp, #24]
 8002ee8:	4b4e      	ldr	r3, [pc, #312]	; (8003024 <_dtoa_r+0x60c>)
 8002eea:	4432      	add	r2, r6
 8002eec:	9211      	str	r2, [sp, #68]	; 0x44
 8002eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ef0:	1e71      	subs	r1, r6, #1
 8002ef2:	2a00      	cmp	r2, #0
 8002ef4:	d048      	beq.n	8002f88 <_dtoa_r+0x570>
 8002ef6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8002efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efe:	2000      	movs	r0, #0
 8002f00:	494e      	ldr	r1, [pc, #312]	; (800303c <_dtoa_r+0x624>)
 8002f02:	f7fd fc0f 	bl	8000724 <__aeabi_ddiv>
 8002f06:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f0a:	f7fd f92d 	bl	8000168 <__aeabi_dsub>
 8002f0e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f12:	9d06      	ldr	r5, [sp, #24]
 8002f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f18:	f7fd fd8a 	bl	8000a30 <__aeabi_d2iz>
 8002f1c:	4606      	mov	r6, r0
 8002f1e:	f7fd fa71 	bl	8000404 <__aeabi_i2d>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f2a:	f7fd f91d 	bl	8000168 <__aeabi_dsub>
 8002f2e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f32:	3630      	adds	r6, #48	; 0x30
 8002f34:	f805 6b01 	strb.w	r6, [r5], #1
 8002f38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f3c:	f7fd fd3a 	bl	80009b4 <__aeabi_dcmplt>
 8002f40:	2800      	cmp	r0, #0
 8002f42:	d164      	bne.n	800300e <_dtoa_r+0x5f6>
 8002f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f48:	2000      	movs	r0, #0
 8002f4a:	4938      	ldr	r1, [pc, #224]	; (800302c <_dtoa_r+0x614>)
 8002f4c:	f7fd f90c 	bl	8000168 <__aeabi_dsub>
 8002f50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f54:	f7fd fd2e 	bl	80009b4 <__aeabi_dcmplt>
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	f040 80b9 	bne.w	80030d0 <_dtoa_r+0x6b8>
 8002f5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002f60:	429d      	cmp	r5, r3
 8002f62:	f43f af7c 	beq.w	8002e5e <_dtoa_r+0x446>
 8002f66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	4b30      	ldr	r3, [pc, #192]	; (8003030 <_dtoa_r+0x618>)
 8002f6e:	f7fd faaf 	bl	80004d0 <__aeabi_dmul>
 8002f72:	2200      	movs	r2, #0
 8002f74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f7c:	4b2c      	ldr	r3, [pc, #176]	; (8003030 <_dtoa_r+0x618>)
 8002f7e:	f7fd faa7 	bl	80004d0 <__aeabi_dmul>
 8002f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f86:	e7c5      	b.n	8002f14 <_dtoa_r+0x4fc>
 8002f88:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f90:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f94:	f7fd fa9c 	bl	80004d0 <__aeabi_dmul>
 8002f98:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f9c:	9d06      	ldr	r5, [sp, #24]
 8002f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002fa2:	f7fd fd45 	bl	8000a30 <__aeabi_d2iz>
 8002fa6:	4606      	mov	r6, r0
 8002fa8:	f7fd fa2c 	bl	8000404 <__aeabi_i2d>
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002fb4:	f7fd f8d8 	bl	8000168 <__aeabi_dsub>
 8002fb8:	3630      	adds	r6, #48	; 0x30
 8002fba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fbc:	f805 6b01 	strb.w	r6, [r5], #1
 8002fc0:	42ab      	cmp	r3, r5
 8002fc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	d124      	bne.n	8003016 <_dtoa_r+0x5fe>
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <_dtoa_r+0x624>)
 8002fce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002fd2:	f7fd f8cb 	bl	800016c <__adddf3>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002fde:	f7fd fd07 	bl	80009f0 <__aeabi_dcmpgt>
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d174      	bne.n	80030d0 <_dtoa_r+0x6b8>
 8002fe6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002fea:	2000      	movs	r0, #0
 8002fec:	4913      	ldr	r1, [pc, #76]	; (800303c <_dtoa_r+0x624>)
 8002fee:	f7fd f8bb 	bl	8000168 <__aeabi_dsub>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ffa:	f7fd fcdb 	bl	80009b4 <__aeabi_dcmplt>
 8002ffe:	2800      	cmp	r0, #0
 8003000:	f43f af2d 	beq.w	8002e5e <_dtoa_r+0x446>
 8003004:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003008:	1e6a      	subs	r2, r5, #1
 800300a:	2b30      	cmp	r3, #48	; 0x30
 800300c:	d001      	beq.n	8003012 <_dtoa_r+0x5fa>
 800300e:	46bb      	mov	fp, r7
 8003010:	e04d      	b.n	80030ae <_dtoa_r+0x696>
 8003012:	4615      	mov	r5, r2
 8003014:	e7f6      	b.n	8003004 <_dtoa_r+0x5ec>
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <_dtoa_r+0x618>)
 8003018:	f7fd fa5a 	bl	80004d0 <__aeabi_dmul>
 800301c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003020:	e7bd      	b.n	8002f9e <_dtoa_r+0x586>
 8003022:	bf00      	nop
 8003024:	080041a0 	.word	0x080041a0
 8003028:	08004178 	.word	0x08004178
 800302c:	3ff00000 	.word	0x3ff00000
 8003030:	40240000 	.word	0x40240000
 8003034:	401c0000 	.word	0x401c0000
 8003038:	40140000 	.word	0x40140000
 800303c:	3fe00000 	.word	0x3fe00000
 8003040:	9d06      	ldr	r5, [sp, #24]
 8003042:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800304a:	4630      	mov	r0, r6
 800304c:	4639      	mov	r1, r7
 800304e:	f7fd fb69 	bl	8000724 <__aeabi_ddiv>
 8003052:	f7fd fced 	bl	8000a30 <__aeabi_d2iz>
 8003056:	4680      	mov	r8, r0
 8003058:	f7fd f9d4 	bl	8000404 <__aeabi_i2d>
 800305c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003060:	f7fd fa36 	bl	80004d0 <__aeabi_dmul>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4630      	mov	r0, r6
 800306a:	4639      	mov	r1, r7
 800306c:	f7fd f87c 	bl	8000168 <__aeabi_dsub>
 8003070:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003074:	f805 6b01 	strb.w	r6, [r5], #1
 8003078:	9e06      	ldr	r6, [sp, #24]
 800307a:	4602      	mov	r2, r0
 800307c:	1bae      	subs	r6, r5, r6
 800307e:	45b1      	cmp	r9, r6
 8003080:	460b      	mov	r3, r1
 8003082:	d137      	bne.n	80030f4 <_dtoa_r+0x6dc>
 8003084:	f7fd f872 	bl	800016c <__adddf3>
 8003088:	4606      	mov	r6, r0
 800308a:	460f      	mov	r7, r1
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003094:	f7fd fc8e 	bl	80009b4 <__aeabi_dcmplt>
 8003098:	b9c8      	cbnz	r0, 80030ce <_dtoa_r+0x6b6>
 800309a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800309e:	4632      	mov	r2, r6
 80030a0:	463b      	mov	r3, r7
 80030a2:	f7fd fc7d 	bl	80009a0 <__aeabi_dcmpeq>
 80030a6:	b110      	cbz	r0, 80030ae <_dtoa_r+0x696>
 80030a8:	f018 0f01 	tst.w	r8, #1
 80030ac:	d10f      	bne.n	80030ce <_dtoa_r+0x6b6>
 80030ae:	4651      	mov	r1, sl
 80030b0:	4620      	mov	r0, r4
 80030b2:	f000 fae8 	bl	8003686 <_Bfree>
 80030b6:	2300      	movs	r3, #0
 80030b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80030ba:	702b      	strb	r3, [r5, #0]
 80030bc:	f10b 0301 	add.w	r3, fp, #1
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f43f acec 	beq.w	8002aa2 <_dtoa_r+0x8a>
 80030ca:	601d      	str	r5, [r3, #0]
 80030cc:	e4e9      	b.n	8002aa2 <_dtoa_r+0x8a>
 80030ce:	465f      	mov	r7, fp
 80030d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80030d4:	1e6b      	subs	r3, r5, #1
 80030d6:	2a39      	cmp	r2, #57	; 0x39
 80030d8:	d106      	bne.n	80030e8 <_dtoa_r+0x6d0>
 80030da:	9a06      	ldr	r2, [sp, #24]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d107      	bne.n	80030f0 <_dtoa_r+0x6d8>
 80030e0:	2330      	movs	r3, #48	; 0x30
 80030e2:	7013      	strb	r3, [r2, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	3701      	adds	r7, #1
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	3201      	adds	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	e78e      	b.n	800300e <_dtoa_r+0x5f6>
 80030f0:	461d      	mov	r5, r3
 80030f2:	e7ed      	b.n	80030d0 <_dtoa_r+0x6b8>
 80030f4:	2200      	movs	r2, #0
 80030f6:	4bb5      	ldr	r3, [pc, #724]	; (80033cc <_dtoa_r+0x9b4>)
 80030f8:	f7fd f9ea 	bl	80004d0 <__aeabi_dmul>
 80030fc:	2200      	movs	r2, #0
 80030fe:	2300      	movs	r3, #0
 8003100:	4606      	mov	r6, r0
 8003102:	460f      	mov	r7, r1
 8003104:	f7fd fc4c 	bl	80009a0 <__aeabi_dcmpeq>
 8003108:	2800      	cmp	r0, #0
 800310a:	d09c      	beq.n	8003046 <_dtoa_r+0x62e>
 800310c:	e7cf      	b.n	80030ae <_dtoa_r+0x696>
 800310e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003110:	2a00      	cmp	r2, #0
 8003112:	f000 8129 	beq.w	8003368 <_dtoa_r+0x950>
 8003116:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003118:	2a01      	cmp	r2, #1
 800311a:	f300 810e 	bgt.w	800333a <_dtoa_r+0x922>
 800311e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003120:	2a00      	cmp	r2, #0
 8003122:	f000 8106 	beq.w	8003332 <_dtoa_r+0x91a>
 8003126:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800312a:	4645      	mov	r5, r8
 800312c:	9e08      	ldr	r6, [sp, #32]
 800312e:	9a07      	ldr	r2, [sp, #28]
 8003130:	2101      	movs	r1, #1
 8003132:	441a      	add	r2, r3
 8003134:	4620      	mov	r0, r4
 8003136:	4498      	add	r8, r3
 8003138:	9207      	str	r2, [sp, #28]
 800313a:	f000 fb44 	bl	80037c6 <__i2b>
 800313e:	4607      	mov	r7, r0
 8003140:	2d00      	cmp	r5, #0
 8003142:	dd0b      	ble.n	800315c <_dtoa_r+0x744>
 8003144:	9b07      	ldr	r3, [sp, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	dd08      	ble.n	800315c <_dtoa_r+0x744>
 800314a:	42ab      	cmp	r3, r5
 800314c:	bfa8      	it	ge
 800314e:	462b      	movge	r3, r5
 8003150:	9a07      	ldr	r2, [sp, #28]
 8003152:	eba8 0803 	sub.w	r8, r8, r3
 8003156:	1aed      	subs	r5, r5, r3
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	9307      	str	r3, [sp, #28]
 800315c:	9b08      	ldr	r3, [sp, #32]
 800315e:	b1fb      	cbz	r3, 80031a0 <_dtoa_r+0x788>
 8003160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 8104 	beq.w	8003370 <_dtoa_r+0x958>
 8003168:	2e00      	cmp	r6, #0
 800316a:	dd11      	ble.n	8003190 <_dtoa_r+0x778>
 800316c:	4639      	mov	r1, r7
 800316e:	4632      	mov	r2, r6
 8003170:	4620      	mov	r0, r4
 8003172:	f000 fbbd 	bl	80038f0 <__pow5mult>
 8003176:	4652      	mov	r2, sl
 8003178:	4601      	mov	r1, r0
 800317a:	4607      	mov	r7, r0
 800317c:	4620      	mov	r0, r4
 800317e:	f000 fb2b 	bl	80037d8 <__multiply>
 8003182:	4651      	mov	r1, sl
 8003184:	900a      	str	r0, [sp, #40]	; 0x28
 8003186:	4620      	mov	r0, r4
 8003188:	f000 fa7d 	bl	8003686 <_Bfree>
 800318c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800318e:	469a      	mov	sl, r3
 8003190:	9b08      	ldr	r3, [sp, #32]
 8003192:	1b9a      	subs	r2, r3, r6
 8003194:	d004      	beq.n	80031a0 <_dtoa_r+0x788>
 8003196:	4651      	mov	r1, sl
 8003198:	4620      	mov	r0, r4
 800319a:	f000 fba9 	bl	80038f0 <__pow5mult>
 800319e:	4682      	mov	sl, r0
 80031a0:	2101      	movs	r1, #1
 80031a2:	4620      	mov	r0, r4
 80031a4:	f000 fb0f 	bl	80037c6 <__i2b>
 80031a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031aa:	4606      	mov	r6, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f340 80e1 	ble.w	8003374 <_dtoa_r+0x95c>
 80031b2:	461a      	mov	r2, r3
 80031b4:	4601      	mov	r1, r0
 80031b6:	4620      	mov	r0, r4
 80031b8:	f000 fb9a 	bl	80038f0 <__pow5mult>
 80031bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80031be:	4606      	mov	r6, r0
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f340 80da 	ble.w	800337a <_dtoa_r+0x962>
 80031c6:	2300      	movs	r3, #0
 80031c8:	9308      	str	r3, [sp, #32]
 80031ca:	6933      	ldr	r3, [r6, #16]
 80031cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80031d0:	6918      	ldr	r0, [r3, #16]
 80031d2:	f000 faaa 	bl	800372a <__hi0bits>
 80031d6:	f1c0 0020 	rsb	r0, r0, #32
 80031da:	9b07      	ldr	r3, [sp, #28]
 80031dc:	4418      	add	r0, r3
 80031de:	f010 001f 	ands.w	r0, r0, #31
 80031e2:	f000 80f0 	beq.w	80033c6 <_dtoa_r+0x9ae>
 80031e6:	f1c0 0320 	rsb	r3, r0, #32
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	f340 80e2 	ble.w	80033b4 <_dtoa_r+0x99c>
 80031f0:	9b07      	ldr	r3, [sp, #28]
 80031f2:	f1c0 001c 	rsb	r0, r0, #28
 80031f6:	4480      	add	r8, r0
 80031f8:	4405      	add	r5, r0
 80031fa:	4403      	add	r3, r0
 80031fc:	9307      	str	r3, [sp, #28]
 80031fe:	f1b8 0f00 	cmp.w	r8, #0
 8003202:	dd05      	ble.n	8003210 <_dtoa_r+0x7f8>
 8003204:	4651      	mov	r1, sl
 8003206:	4642      	mov	r2, r8
 8003208:	4620      	mov	r0, r4
 800320a:	f000 fbbf 	bl	800398c <__lshift>
 800320e:	4682      	mov	sl, r0
 8003210:	9b07      	ldr	r3, [sp, #28]
 8003212:	2b00      	cmp	r3, #0
 8003214:	dd05      	ble.n	8003222 <_dtoa_r+0x80a>
 8003216:	4631      	mov	r1, r6
 8003218:	461a      	mov	r2, r3
 800321a:	4620      	mov	r0, r4
 800321c:	f000 fbb6 	bl	800398c <__lshift>
 8003220:	4606      	mov	r6, r0
 8003222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80d3 	beq.w	80033d0 <_dtoa_r+0x9b8>
 800322a:	4631      	mov	r1, r6
 800322c:	4650      	mov	r0, sl
 800322e:	f000 fbfe 	bl	8003a2e <__mcmp>
 8003232:	2800      	cmp	r0, #0
 8003234:	f280 80cc 	bge.w	80033d0 <_dtoa_r+0x9b8>
 8003238:	2300      	movs	r3, #0
 800323a:	4651      	mov	r1, sl
 800323c:	220a      	movs	r2, #10
 800323e:	4620      	mov	r0, r4
 8003240:	f000 fa38 	bl	80036b4 <__multadd>
 8003244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003246:	f10b 3bff 	add.w	fp, fp, #4294967295
 800324a:	4682      	mov	sl, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 81a9 	beq.w	80035a4 <_dtoa_r+0xb8c>
 8003252:	2300      	movs	r3, #0
 8003254:	4639      	mov	r1, r7
 8003256:	220a      	movs	r2, #10
 8003258:	4620      	mov	r0, r4
 800325a:	f000 fa2b 	bl	80036b4 <__multadd>
 800325e:	9b04      	ldr	r3, [sp, #16]
 8003260:	4607      	mov	r7, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	dc03      	bgt.n	800326e <_dtoa_r+0x856>
 8003266:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003268:	2b02      	cmp	r3, #2
 800326a:	f300 80b9 	bgt.w	80033e0 <_dtoa_r+0x9c8>
 800326e:	2d00      	cmp	r5, #0
 8003270:	dd05      	ble.n	800327e <_dtoa_r+0x866>
 8003272:	4639      	mov	r1, r7
 8003274:	462a      	mov	r2, r5
 8003276:	4620      	mov	r0, r4
 8003278:	f000 fb88 	bl	800398c <__lshift>
 800327c:	4607      	mov	r7, r0
 800327e:	9b08      	ldr	r3, [sp, #32]
 8003280:	2b00      	cmp	r3, #0
 8003282:	f000 8110 	beq.w	80034a6 <_dtoa_r+0xa8e>
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4620      	mov	r0, r4
 800328a:	f000 f9c8 	bl	800361e <_Balloc>
 800328e:	4605      	mov	r5, r0
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	f107 010c 	add.w	r1, r7, #12
 8003296:	3202      	adds	r2, #2
 8003298:	0092      	lsls	r2, r2, #2
 800329a:	300c      	adds	r0, #12
 800329c:	f000 f9b4 	bl	8003608 <memcpy>
 80032a0:	2201      	movs	r2, #1
 80032a2:	4629      	mov	r1, r5
 80032a4:	4620      	mov	r0, r4
 80032a6:	f000 fb71 	bl	800398c <__lshift>
 80032aa:	9707      	str	r7, [sp, #28]
 80032ac:	4607      	mov	r7, r0
 80032ae:	9b02      	ldr	r3, [sp, #8]
 80032b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	9308      	str	r3, [sp, #32]
 80032ba:	4631      	mov	r1, r6
 80032bc:	4650      	mov	r0, sl
 80032be:	f7ff fb1f 	bl	8002900 <quorem>
 80032c2:	9907      	ldr	r1, [sp, #28]
 80032c4:	4605      	mov	r5, r0
 80032c6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80032ca:	4650      	mov	r0, sl
 80032cc:	f000 fbaf 	bl	8003a2e <__mcmp>
 80032d0:	463a      	mov	r2, r7
 80032d2:	9002      	str	r0, [sp, #8]
 80032d4:	4631      	mov	r1, r6
 80032d6:	4620      	mov	r0, r4
 80032d8:	f000 fbc3 	bl	8003a62 <__mdiff>
 80032dc:	68c3      	ldr	r3, [r0, #12]
 80032de:	4602      	mov	r2, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f040 80e2 	bne.w	80034aa <_dtoa_r+0xa92>
 80032e6:	4601      	mov	r1, r0
 80032e8:	9009      	str	r0, [sp, #36]	; 0x24
 80032ea:	4650      	mov	r0, sl
 80032ec:	f000 fb9f 	bl	8003a2e <__mcmp>
 80032f0:	4603      	mov	r3, r0
 80032f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032f4:	4611      	mov	r1, r2
 80032f6:	4620      	mov	r0, r4
 80032f8:	9309      	str	r3, [sp, #36]	; 0x24
 80032fa:	f000 f9c4 	bl	8003686 <_Bfree>
 80032fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003300:	2b00      	cmp	r3, #0
 8003302:	f040 80d4 	bne.w	80034ae <_dtoa_r+0xa96>
 8003306:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003308:	2a00      	cmp	r2, #0
 800330a:	f040 80d0 	bne.w	80034ae <_dtoa_r+0xa96>
 800330e:	9a08      	ldr	r2, [sp, #32]
 8003310:	2a00      	cmp	r2, #0
 8003312:	f040 80cc 	bne.w	80034ae <_dtoa_r+0xa96>
 8003316:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800331a:	f000 80e8 	beq.w	80034ee <_dtoa_r+0xad6>
 800331e:	9b02      	ldr	r3, [sp, #8]
 8003320:	2b00      	cmp	r3, #0
 8003322:	dd01      	ble.n	8003328 <_dtoa_r+0x910>
 8003324:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003328:	f108 0501 	add.w	r5, r8, #1
 800332c:	f888 9000 	strb.w	r9, [r8]
 8003330:	e06b      	b.n	800340a <_dtoa_r+0x9f2>
 8003332:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003334:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003338:	e6f7      	b.n	800312a <_dtoa_r+0x712>
 800333a:	9b08      	ldr	r3, [sp, #32]
 800333c:	f109 36ff 	add.w	r6, r9, #4294967295
 8003340:	42b3      	cmp	r3, r6
 8003342:	bfb7      	itett	lt
 8003344:	9b08      	ldrlt	r3, [sp, #32]
 8003346:	1b9e      	subge	r6, r3, r6
 8003348:	1af2      	sublt	r2, r6, r3
 800334a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800334c:	bfbf      	itttt	lt
 800334e:	9608      	strlt	r6, [sp, #32]
 8003350:	189b      	addlt	r3, r3, r2
 8003352:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003354:	2600      	movlt	r6, #0
 8003356:	f1b9 0f00 	cmp.w	r9, #0
 800335a:	bfb9      	ittee	lt
 800335c:	eba8 0509 	sublt.w	r5, r8, r9
 8003360:	2300      	movlt	r3, #0
 8003362:	4645      	movge	r5, r8
 8003364:	464b      	movge	r3, r9
 8003366:	e6e2      	b.n	800312e <_dtoa_r+0x716>
 8003368:	9e08      	ldr	r6, [sp, #32]
 800336a:	4645      	mov	r5, r8
 800336c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800336e:	e6e7      	b.n	8003140 <_dtoa_r+0x728>
 8003370:	9a08      	ldr	r2, [sp, #32]
 8003372:	e710      	b.n	8003196 <_dtoa_r+0x77e>
 8003374:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003376:	2b01      	cmp	r3, #1
 8003378:	dc18      	bgt.n	80033ac <_dtoa_r+0x994>
 800337a:	9b02      	ldr	r3, [sp, #8]
 800337c:	b9b3      	cbnz	r3, 80033ac <_dtoa_r+0x994>
 800337e:	9b03      	ldr	r3, [sp, #12]
 8003380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003384:	b9a3      	cbnz	r3, 80033b0 <_dtoa_r+0x998>
 8003386:	9b03      	ldr	r3, [sp, #12]
 8003388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800338c:	0d1b      	lsrs	r3, r3, #20
 800338e:	051b      	lsls	r3, r3, #20
 8003390:	b12b      	cbz	r3, 800339e <_dtoa_r+0x986>
 8003392:	9b07      	ldr	r3, [sp, #28]
 8003394:	f108 0801 	add.w	r8, r8, #1
 8003398:	3301      	adds	r3, #1
 800339a:	9307      	str	r3, [sp, #28]
 800339c:	2301      	movs	r3, #1
 800339e:	9308      	str	r3, [sp, #32]
 80033a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f47f af11 	bne.w	80031ca <_dtoa_r+0x7b2>
 80033a8:	2001      	movs	r0, #1
 80033aa:	e716      	b.n	80031da <_dtoa_r+0x7c2>
 80033ac:	2300      	movs	r3, #0
 80033ae:	e7f6      	b.n	800339e <_dtoa_r+0x986>
 80033b0:	9b02      	ldr	r3, [sp, #8]
 80033b2:	e7f4      	b.n	800339e <_dtoa_r+0x986>
 80033b4:	f43f af23 	beq.w	80031fe <_dtoa_r+0x7e6>
 80033b8:	9a07      	ldr	r2, [sp, #28]
 80033ba:	331c      	adds	r3, #28
 80033bc:	441a      	add	r2, r3
 80033be:	4498      	add	r8, r3
 80033c0:	441d      	add	r5, r3
 80033c2:	4613      	mov	r3, r2
 80033c4:	e71a      	b.n	80031fc <_dtoa_r+0x7e4>
 80033c6:	4603      	mov	r3, r0
 80033c8:	e7f6      	b.n	80033b8 <_dtoa_r+0x9a0>
 80033ca:	bf00      	nop
 80033cc:	40240000 	.word	0x40240000
 80033d0:	f1b9 0f00 	cmp.w	r9, #0
 80033d4:	dc33      	bgt.n	800343e <_dtoa_r+0xa26>
 80033d6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80033d8:	2b02      	cmp	r3, #2
 80033da:	dd30      	ble.n	800343e <_dtoa_r+0xa26>
 80033dc:	f8cd 9010 	str.w	r9, [sp, #16]
 80033e0:	9b04      	ldr	r3, [sp, #16]
 80033e2:	b963      	cbnz	r3, 80033fe <_dtoa_r+0x9e6>
 80033e4:	4631      	mov	r1, r6
 80033e6:	2205      	movs	r2, #5
 80033e8:	4620      	mov	r0, r4
 80033ea:	f000 f963 	bl	80036b4 <__multadd>
 80033ee:	4601      	mov	r1, r0
 80033f0:	4606      	mov	r6, r0
 80033f2:	4650      	mov	r0, sl
 80033f4:	f000 fb1b 	bl	8003a2e <__mcmp>
 80033f8:	2800      	cmp	r0, #0
 80033fa:	f73f ad5c 	bgt.w	8002eb6 <_dtoa_r+0x49e>
 80033fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003400:	9d06      	ldr	r5, [sp, #24]
 8003402:	ea6f 0b03 	mvn.w	fp, r3
 8003406:	2300      	movs	r3, #0
 8003408:	9307      	str	r3, [sp, #28]
 800340a:	4631      	mov	r1, r6
 800340c:	4620      	mov	r0, r4
 800340e:	f000 f93a 	bl	8003686 <_Bfree>
 8003412:	2f00      	cmp	r7, #0
 8003414:	f43f ae4b 	beq.w	80030ae <_dtoa_r+0x696>
 8003418:	9b07      	ldr	r3, [sp, #28]
 800341a:	b12b      	cbz	r3, 8003428 <_dtoa_r+0xa10>
 800341c:	42bb      	cmp	r3, r7
 800341e:	d003      	beq.n	8003428 <_dtoa_r+0xa10>
 8003420:	4619      	mov	r1, r3
 8003422:	4620      	mov	r0, r4
 8003424:	f000 f92f 	bl	8003686 <_Bfree>
 8003428:	4639      	mov	r1, r7
 800342a:	4620      	mov	r0, r4
 800342c:	f000 f92b 	bl	8003686 <_Bfree>
 8003430:	e63d      	b.n	80030ae <_dtoa_r+0x696>
 8003432:	2600      	movs	r6, #0
 8003434:	4637      	mov	r7, r6
 8003436:	e7e2      	b.n	80033fe <_dtoa_r+0x9e6>
 8003438:	46bb      	mov	fp, r7
 800343a:	4637      	mov	r7, r6
 800343c:	e53b      	b.n	8002eb6 <_dtoa_r+0x49e>
 800343e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003440:	f8cd 9010 	str.w	r9, [sp, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	f47f af12 	bne.w	800326e <_dtoa_r+0x856>
 800344a:	9d06      	ldr	r5, [sp, #24]
 800344c:	4631      	mov	r1, r6
 800344e:	4650      	mov	r0, sl
 8003450:	f7ff fa56 	bl	8002900 <quorem>
 8003454:	9b06      	ldr	r3, [sp, #24]
 8003456:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800345a:	f805 9b01 	strb.w	r9, [r5], #1
 800345e:	9a04      	ldr	r2, [sp, #16]
 8003460:	1aeb      	subs	r3, r5, r3
 8003462:	429a      	cmp	r2, r3
 8003464:	f300 8081 	bgt.w	800356a <_dtoa_r+0xb52>
 8003468:	9b06      	ldr	r3, [sp, #24]
 800346a:	2a01      	cmp	r2, #1
 800346c:	bfac      	ite	ge
 800346e:	189b      	addge	r3, r3, r2
 8003470:	3301      	addlt	r3, #1
 8003472:	4698      	mov	r8, r3
 8003474:	2300      	movs	r3, #0
 8003476:	9307      	str	r3, [sp, #28]
 8003478:	4651      	mov	r1, sl
 800347a:	2201      	movs	r2, #1
 800347c:	4620      	mov	r0, r4
 800347e:	f000 fa85 	bl	800398c <__lshift>
 8003482:	4631      	mov	r1, r6
 8003484:	4682      	mov	sl, r0
 8003486:	f000 fad2 	bl	8003a2e <__mcmp>
 800348a:	2800      	cmp	r0, #0
 800348c:	dc34      	bgt.n	80034f8 <_dtoa_r+0xae0>
 800348e:	d102      	bne.n	8003496 <_dtoa_r+0xa7e>
 8003490:	f019 0f01 	tst.w	r9, #1
 8003494:	d130      	bne.n	80034f8 <_dtoa_r+0xae0>
 8003496:	4645      	mov	r5, r8
 8003498:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800349c:	1e6a      	subs	r2, r5, #1
 800349e:	2b30      	cmp	r3, #48	; 0x30
 80034a0:	d1b3      	bne.n	800340a <_dtoa_r+0x9f2>
 80034a2:	4615      	mov	r5, r2
 80034a4:	e7f8      	b.n	8003498 <_dtoa_r+0xa80>
 80034a6:	4638      	mov	r0, r7
 80034a8:	e6ff      	b.n	80032aa <_dtoa_r+0x892>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e722      	b.n	80032f4 <_dtoa_r+0x8dc>
 80034ae:	9a02      	ldr	r2, [sp, #8]
 80034b0:	2a00      	cmp	r2, #0
 80034b2:	db04      	blt.n	80034be <_dtoa_r+0xaa6>
 80034b4:	d128      	bne.n	8003508 <_dtoa_r+0xaf0>
 80034b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80034b8:	bb32      	cbnz	r2, 8003508 <_dtoa_r+0xaf0>
 80034ba:	9a08      	ldr	r2, [sp, #32]
 80034bc:	bb22      	cbnz	r2, 8003508 <_dtoa_r+0xaf0>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f77f af32 	ble.w	8003328 <_dtoa_r+0x910>
 80034c4:	4651      	mov	r1, sl
 80034c6:	2201      	movs	r2, #1
 80034c8:	4620      	mov	r0, r4
 80034ca:	f000 fa5f 	bl	800398c <__lshift>
 80034ce:	4631      	mov	r1, r6
 80034d0:	4682      	mov	sl, r0
 80034d2:	f000 faac 	bl	8003a2e <__mcmp>
 80034d6:	2800      	cmp	r0, #0
 80034d8:	dc05      	bgt.n	80034e6 <_dtoa_r+0xace>
 80034da:	f47f af25 	bne.w	8003328 <_dtoa_r+0x910>
 80034de:	f019 0f01 	tst.w	r9, #1
 80034e2:	f43f af21 	beq.w	8003328 <_dtoa_r+0x910>
 80034e6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80034ea:	f47f af1b 	bne.w	8003324 <_dtoa_r+0x90c>
 80034ee:	2339      	movs	r3, #57	; 0x39
 80034f0:	f108 0801 	add.w	r8, r8, #1
 80034f4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80034f8:	4645      	mov	r5, r8
 80034fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80034fe:	1e6a      	subs	r2, r5, #1
 8003500:	2b39      	cmp	r3, #57	; 0x39
 8003502:	d03a      	beq.n	800357a <_dtoa_r+0xb62>
 8003504:	3301      	adds	r3, #1
 8003506:	e03f      	b.n	8003588 <_dtoa_r+0xb70>
 8003508:	2b00      	cmp	r3, #0
 800350a:	f108 0501 	add.w	r5, r8, #1
 800350e:	dd05      	ble.n	800351c <_dtoa_r+0xb04>
 8003510:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003514:	d0eb      	beq.n	80034ee <_dtoa_r+0xad6>
 8003516:	f109 0901 	add.w	r9, r9, #1
 800351a:	e707      	b.n	800332c <_dtoa_r+0x914>
 800351c:	9b06      	ldr	r3, [sp, #24]
 800351e:	9a04      	ldr	r2, [sp, #16]
 8003520:	1aeb      	subs	r3, r5, r3
 8003522:	4293      	cmp	r3, r2
 8003524:	46a8      	mov	r8, r5
 8003526:	f805 9c01 	strb.w	r9, [r5, #-1]
 800352a:	d0a5      	beq.n	8003478 <_dtoa_r+0xa60>
 800352c:	4651      	mov	r1, sl
 800352e:	2300      	movs	r3, #0
 8003530:	220a      	movs	r2, #10
 8003532:	4620      	mov	r0, r4
 8003534:	f000 f8be 	bl	80036b4 <__multadd>
 8003538:	9b07      	ldr	r3, [sp, #28]
 800353a:	4682      	mov	sl, r0
 800353c:	42bb      	cmp	r3, r7
 800353e:	f04f 020a 	mov.w	r2, #10
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	9907      	ldr	r1, [sp, #28]
 8003548:	4620      	mov	r0, r4
 800354a:	d104      	bne.n	8003556 <_dtoa_r+0xb3e>
 800354c:	f000 f8b2 	bl	80036b4 <__multadd>
 8003550:	9007      	str	r0, [sp, #28]
 8003552:	4607      	mov	r7, r0
 8003554:	e6b1      	b.n	80032ba <_dtoa_r+0x8a2>
 8003556:	f000 f8ad 	bl	80036b4 <__multadd>
 800355a:	2300      	movs	r3, #0
 800355c:	9007      	str	r0, [sp, #28]
 800355e:	220a      	movs	r2, #10
 8003560:	4639      	mov	r1, r7
 8003562:	4620      	mov	r0, r4
 8003564:	f000 f8a6 	bl	80036b4 <__multadd>
 8003568:	e7f3      	b.n	8003552 <_dtoa_r+0xb3a>
 800356a:	4651      	mov	r1, sl
 800356c:	2300      	movs	r3, #0
 800356e:	220a      	movs	r2, #10
 8003570:	4620      	mov	r0, r4
 8003572:	f000 f89f 	bl	80036b4 <__multadd>
 8003576:	4682      	mov	sl, r0
 8003578:	e768      	b.n	800344c <_dtoa_r+0xa34>
 800357a:	9b06      	ldr	r3, [sp, #24]
 800357c:	4293      	cmp	r3, r2
 800357e:	d105      	bne.n	800358c <_dtoa_r+0xb74>
 8003580:	2331      	movs	r3, #49	; 0x31
 8003582:	9a06      	ldr	r2, [sp, #24]
 8003584:	f10b 0b01 	add.w	fp, fp, #1
 8003588:	7013      	strb	r3, [r2, #0]
 800358a:	e73e      	b.n	800340a <_dtoa_r+0x9f2>
 800358c:	4615      	mov	r5, r2
 800358e:	e7b4      	b.n	80034fa <_dtoa_r+0xae2>
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <_dtoa_r+0xba0>)
 8003592:	f7ff baa3 	b.w	8002adc <_dtoa_r+0xc4>
 8003596:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003598:	2b00      	cmp	r3, #0
 800359a:	f47f aa7d 	bne.w	8002a98 <_dtoa_r+0x80>
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <_dtoa_r+0xba4>)
 80035a0:	f7ff ba9c 	b.w	8002adc <_dtoa_r+0xc4>
 80035a4:	9b04      	ldr	r3, [sp, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f73f af4f 	bgt.w	800344a <_dtoa_r+0xa32>
 80035ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	f77f af4b 	ble.w	800344a <_dtoa_r+0xa32>
 80035b4:	e714      	b.n	80033e0 <_dtoa_r+0x9c8>
 80035b6:	bf00      	nop
 80035b8:	08004144 	.word	0x08004144
 80035bc:	08004168 	.word	0x08004168

080035c0 <_localeconv_r>:
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <_localeconv_r+0x14>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6a18      	ldr	r0, [r3, #32]
 80035c6:	4b04      	ldr	r3, [pc, #16]	; (80035d8 <_localeconv_r+0x18>)
 80035c8:	2800      	cmp	r0, #0
 80035ca:	bf08      	it	eq
 80035cc:	4618      	moveq	r0, r3
 80035ce:	30f0      	adds	r0, #240	; 0xf0
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000010 	.word	0x20000010
 80035d8:	20000074 	.word	0x20000074

080035dc <malloc>:
 80035dc:	4b02      	ldr	r3, [pc, #8]	; (80035e8 <malloc+0xc>)
 80035de:	4601      	mov	r1, r0
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	f000 bb47 	b.w	8003c74 <_malloc_r>
 80035e6:	bf00      	nop
 80035e8:	20000010 	.word	0x20000010

080035ec <memchr>:
 80035ec:	b510      	push	{r4, lr}
 80035ee:	b2c9      	uxtb	r1, r1
 80035f0:	4402      	add	r2, r0
 80035f2:	4290      	cmp	r0, r2
 80035f4:	4603      	mov	r3, r0
 80035f6:	d101      	bne.n	80035fc <memchr+0x10>
 80035f8:	2000      	movs	r0, #0
 80035fa:	bd10      	pop	{r4, pc}
 80035fc:	781c      	ldrb	r4, [r3, #0]
 80035fe:	3001      	adds	r0, #1
 8003600:	428c      	cmp	r4, r1
 8003602:	d1f6      	bne.n	80035f2 <memchr+0x6>
 8003604:	4618      	mov	r0, r3
 8003606:	bd10      	pop	{r4, pc}

08003608 <memcpy>:
 8003608:	b510      	push	{r4, lr}
 800360a:	1e43      	subs	r3, r0, #1
 800360c:	440a      	add	r2, r1
 800360e:	4291      	cmp	r1, r2
 8003610:	d100      	bne.n	8003614 <memcpy+0xc>
 8003612:	bd10      	pop	{r4, pc}
 8003614:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800361c:	e7f7      	b.n	800360e <memcpy+0x6>

0800361e <_Balloc>:
 800361e:	b570      	push	{r4, r5, r6, lr}
 8003620:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003622:	4604      	mov	r4, r0
 8003624:	460e      	mov	r6, r1
 8003626:	b93d      	cbnz	r5, 8003638 <_Balloc+0x1a>
 8003628:	2010      	movs	r0, #16
 800362a:	f7ff ffd7 	bl	80035dc <malloc>
 800362e:	6260      	str	r0, [r4, #36]	; 0x24
 8003630:	6045      	str	r5, [r0, #4]
 8003632:	6085      	str	r5, [r0, #8]
 8003634:	6005      	str	r5, [r0, #0]
 8003636:	60c5      	str	r5, [r0, #12]
 8003638:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800363a:	68eb      	ldr	r3, [r5, #12]
 800363c:	b183      	cbz	r3, 8003660 <_Balloc+0x42>
 800363e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003646:	b9b8      	cbnz	r0, 8003678 <_Balloc+0x5a>
 8003648:	2101      	movs	r1, #1
 800364a:	fa01 f506 	lsl.w	r5, r1, r6
 800364e:	1d6a      	adds	r2, r5, #5
 8003650:	0092      	lsls	r2, r2, #2
 8003652:	4620      	mov	r0, r4
 8003654:	f000 fab3 	bl	8003bbe <_calloc_r>
 8003658:	b160      	cbz	r0, 8003674 <_Balloc+0x56>
 800365a:	6046      	str	r6, [r0, #4]
 800365c:	6085      	str	r5, [r0, #8]
 800365e:	e00e      	b.n	800367e <_Balloc+0x60>
 8003660:	2221      	movs	r2, #33	; 0x21
 8003662:	2104      	movs	r1, #4
 8003664:	4620      	mov	r0, r4
 8003666:	f000 faaa 	bl	8003bbe <_calloc_r>
 800366a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800366c:	60e8      	str	r0, [r5, #12]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e4      	bne.n	800363e <_Balloc+0x20>
 8003674:	2000      	movs	r0, #0
 8003676:	bd70      	pop	{r4, r5, r6, pc}
 8003678:	6802      	ldr	r2, [r0, #0]
 800367a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800367e:	2300      	movs	r3, #0
 8003680:	6103      	str	r3, [r0, #16]
 8003682:	60c3      	str	r3, [r0, #12]
 8003684:	bd70      	pop	{r4, r5, r6, pc}

08003686 <_Bfree>:
 8003686:	b570      	push	{r4, r5, r6, lr}
 8003688:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800368a:	4606      	mov	r6, r0
 800368c:	460d      	mov	r5, r1
 800368e:	b93c      	cbnz	r4, 80036a0 <_Bfree+0x1a>
 8003690:	2010      	movs	r0, #16
 8003692:	f7ff ffa3 	bl	80035dc <malloc>
 8003696:	6270      	str	r0, [r6, #36]	; 0x24
 8003698:	6044      	str	r4, [r0, #4]
 800369a:	6084      	str	r4, [r0, #8]
 800369c:	6004      	str	r4, [r0, #0]
 800369e:	60c4      	str	r4, [r0, #12]
 80036a0:	b13d      	cbz	r5, 80036b2 <_Bfree+0x2c>
 80036a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80036a4:	686a      	ldr	r2, [r5, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80036ac:	6029      	str	r1, [r5, #0]
 80036ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80036b2:	bd70      	pop	{r4, r5, r6, pc}

080036b4 <__multadd>:
 80036b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036b8:	461f      	mov	r7, r3
 80036ba:	4606      	mov	r6, r0
 80036bc:	460c      	mov	r4, r1
 80036be:	2300      	movs	r3, #0
 80036c0:	690d      	ldr	r5, [r1, #16]
 80036c2:	f101 0e14 	add.w	lr, r1, #20
 80036c6:	f8de 0000 	ldr.w	r0, [lr]
 80036ca:	3301      	adds	r3, #1
 80036cc:	b281      	uxth	r1, r0
 80036ce:	fb02 7101 	mla	r1, r2, r1, r7
 80036d2:	0c00      	lsrs	r0, r0, #16
 80036d4:	0c0f      	lsrs	r7, r1, #16
 80036d6:	fb02 7000 	mla	r0, r2, r0, r7
 80036da:	b289      	uxth	r1, r1
 80036dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80036e0:	429d      	cmp	r5, r3
 80036e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80036e6:	f84e 1b04 	str.w	r1, [lr], #4
 80036ea:	dcec      	bgt.n	80036c6 <__multadd+0x12>
 80036ec:	b1d7      	cbz	r7, 8003724 <__multadd+0x70>
 80036ee:	68a3      	ldr	r3, [r4, #8]
 80036f0:	429d      	cmp	r5, r3
 80036f2:	db12      	blt.n	800371a <__multadd+0x66>
 80036f4:	6861      	ldr	r1, [r4, #4]
 80036f6:	4630      	mov	r0, r6
 80036f8:	3101      	adds	r1, #1
 80036fa:	f7ff ff90 	bl	800361e <_Balloc>
 80036fe:	4680      	mov	r8, r0
 8003700:	6922      	ldr	r2, [r4, #16]
 8003702:	f104 010c 	add.w	r1, r4, #12
 8003706:	3202      	adds	r2, #2
 8003708:	0092      	lsls	r2, r2, #2
 800370a:	300c      	adds	r0, #12
 800370c:	f7ff ff7c 	bl	8003608 <memcpy>
 8003710:	4621      	mov	r1, r4
 8003712:	4630      	mov	r0, r6
 8003714:	f7ff ffb7 	bl	8003686 <_Bfree>
 8003718:	4644      	mov	r4, r8
 800371a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800371e:	3501      	adds	r5, #1
 8003720:	615f      	str	r7, [r3, #20]
 8003722:	6125      	str	r5, [r4, #16]
 8003724:	4620      	mov	r0, r4
 8003726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800372a <__hi0bits>:
 800372a:	0c02      	lsrs	r2, r0, #16
 800372c:	0412      	lsls	r2, r2, #16
 800372e:	4603      	mov	r3, r0
 8003730:	b9b2      	cbnz	r2, 8003760 <__hi0bits+0x36>
 8003732:	0403      	lsls	r3, r0, #16
 8003734:	2010      	movs	r0, #16
 8003736:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800373a:	bf04      	itt	eq
 800373c:	021b      	lsleq	r3, r3, #8
 800373e:	3008      	addeq	r0, #8
 8003740:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003744:	bf04      	itt	eq
 8003746:	011b      	lsleq	r3, r3, #4
 8003748:	3004      	addeq	r0, #4
 800374a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800374e:	bf04      	itt	eq
 8003750:	009b      	lsleq	r3, r3, #2
 8003752:	3002      	addeq	r0, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	db06      	blt.n	8003766 <__hi0bits+0x3c>
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	d503      	bpl.n	8003764 <__hi0bits+0x3a>
 800375c:	3001      	adds	r0, #1
 800375e:	4770      	bx	lr
 8003760:	2000      	movs	r0, #0
 8003762:	e7e8      	b.n	8003736 <__hi0bits+0xc>
 8003764:	2020      	movs	r0, #32
 8003766:	4770      	bx	lr

08003768 <__lo0bits>:
 8003768:	6803      	ldr	r3, [r0, #0]
 800376a:	4601      	mov	r1, r0
 800376c:	f013 0207 	ands.w	r2, r3, #7
 8003770:	d00b      	beq.n	800378a <__lo0bits+0x22>
 8003772:	07da      	lsls	r2, r3, #31
 8003774:	d423      	bmi.n	80037be <__lo0bits+0x56>
 8003776:	0798      	lsls	r0, r3, #30
 8003778:	bf49      	itett	mi
 800377a:	085b      	lsrmi	r3, r3, #1
 800377c:	089b      	lsrpl	r3, r3, #2
 800377e:	2001      	movmi	r0, #1
 8003780:	600b      	strmi	r3, [r1, #0]
 8003782:	bf5c      	itt	pl
 8003784:	600b      	strpl	r3, [r1, #0]
 8003786:	2002      	movpl	r0, #2
 8003788:	4770      	bx	lr
 800378a:	b298      	uxth	r0, r3
 800378c:	b9a8      	cbnz	r0, 80037ba <__lo0bits+0x52>
 800378e:	2010      	movs	r0, #16
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003796:	bf04      	itt	eq
 8003798:	0a1b      	lsreq	r3, r3, #8
 800379a:	3008      	addeq	r0, #8
 800379c:	071a      	lsls	r2, r3, #28
 800379e:	bf04      	itt	eq
 80037a0:	091b      	lsreq	r3, r3, #4
 80037a2:	3004      	addeq	r0, #4
 80037a4:	079a      	lsls	r2, r3, #30
 80037a6:	bf04      	itt	eq
 80037a8:	089b      	lsreq	r3, r3, #2
 80037aa:	3002      	addeq	r0, #2
 80037ac:	07da      	lsls	r2, r3, #31
 80037ae:	d402      	bmi.n	80037b6 <__lo0bits+0x4e>
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	d006      	beq.n	80037c2 <__lo0bits+0x5a>
 80037b4:	3001      	adds	r0, #1
 80037b6:	600b      	str	r3, [r1, #0]
 80037b8:	4770      	bx	lr
 80037ba:	4610      	mov	r0, r2
 80037bc:	e7e9      	b.n	8003792 <__lo0bits+0x2a>
 80037be:	2000      	movs	r0, #0
 80037c0:	4770      	bx	lr
 80037c2:	2020      	movs	r0, #32
 80037c4:	4770      	bx	lr

080037c6 <__i2b>:
 80037c6:	b510      	push	{r4, lr}
 80037c8:	460c      	mov	r4, r1
 80037ca:	2101      	movs	r1, #1
 80037cc:	f7ff ff27 	bl	800361e <_Balloc>
 80037d0:	2201      	movs	r2, #1
 80037d2:	6144      	str	r4, [r0, #20]
 80037d4:	6102      	str	r2, [r0, #16]
 80037d6:	bd10      	pop	{r4, pc}

080037d8 <__multiply>:
 80037d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037dc:	4614      	mov	r4, r2
 80037de:	690a      	ldr	r2, [r1, #16]
 80037e0:	6923      	ldr	r3, [r4, #16]
 80037e2:	4689      	mov	r9, r1
 80037e4:	429a      	cmp	r2, r3
 80037e6:	bfbe      	ittt	lt
 80037e8:	460b      	movlt	r3, r1
 80037ea:	46a1      	movlt	r9, r4
 80037ec:	461c      	movlt	r4, r3
 80037ee:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80037f2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80037f6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80037fa:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80037fe:	eb07 060a 	add.w	r6, r7, sl
 8003802:	429e      	cmp	r6, r3
 8003804:	bfc8      	it	gt
 8003806:	3101      	addgt	r1, #1
 8003808:	f7ff ff09 	bl	800361e <_Balloc>
 800380c:	f100 0514 	add.w	r5, r0, #20
 8003810:	462b      	mov	r3, r5
 8003812:	2200      	movs	r2, #0
 8003814:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003818:	4543      	cmp	r3, r8
 800381a:	d316      	bcc.n	800384a <__multiply+0x72>
 800381c:	f104 0214 	add.w	r2, r4, #20
 8003820:	f109 0114 	add.w	r1, r9, #20
 8003824:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8003828:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800382c:	9301      	str	r3, [sp, #4]
 800382e:	9c01      	ldr	r4, [sp, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	4294      	cmp	r4, r2
 8003834:	d80c      	bhi.n	8003850 <__multiply+0x78>
 8003836:	2e00      	cmp	r6, #0
 8003838:	dd03      	ble.n	8003842 <__multiply+0x6a>
 800383a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800383e:	2b00      	cmp	r3, #0
 8003840:	d054      	beq.n	80038ec <__multiply+0x114>
 8003842:	6106      	str	r6, [r0, #16]
 8003844:	b003      	add	sp, #12
 8003846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800384a:	f843 2b04 	str.w	r2, [r3], #4
 800384e:	e7e3      	b.n	8003818 <__multiply+0x40>
 8003850:	f8b3 a000 	ldrh.w	sl, [r3]
 8003854:	3204      	adds	r2, #4
 8003856:	f1ba 0f00 	cmp.w	sl, #0
 800385a:	d020      	beq.n	800389e <__multiply+0xc6>
 800385c:	46ae      	mov	lr, r5
 800385e:	4689      	mov	r9, r1
 8003860:	f04f 0c00 	mov.w	ip, #0
 8003864:	f859 4b04 	ldr.w	r4, [r9], #4
 8003868:	f8be b000 	ldrh.w	fp, [lr]
 800386c:	b2a3      	uxth	r3, r4
 800386e:	fb0a b303 	mla	r3, sl, r3, fp
 8003872:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8003876:	f8de 4000 	ldr.w	r4, [lr]
 800387a:	4463      	add	r3, ip
 800387c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003880:	fb0a c40b 	mla	r4, sl, fp, ip
 8003884:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003888:	b29b      	uxth	r3, r3
 800388a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800388e:	454f      	cmp	r7, r9
 8003890:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003894:	f84e 3b04 	str.w	r3, [lr], #4
 8003898:	d8e4      	bhi.n	8003864 <__multiply+0x8c>
 800389a:	f8ce c000 	str.w	ip, [lr]
 800389e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80038a2:	f1b9 0f00 	cmp.w	r9, #0
 80038a6:	d01f      	beq.n	80038e8 <__multiply+0x110>
 80038a8:	46ae      	mov	lr, r5
 80038aa:	468c      	mov	ip, r1
 80038ac:	f04f 0a00 	mov.w	sl, #0
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	f8bc 4000 	ldrh.w	r4, [ip]
 80038b6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	fb09 b404 	mla	r4, r9, r4, fp
 80038c0:	44a2      	add	sl, r4
 80038c2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80038c6:	f84e 3b04 	str.w	r3, [lr], #4
 80038ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 80038ce:	f8be 4000 	ldrh.w	r4, [lr]
 80038d2:	0c1b      	lsrs	r3, r3, #16
 80038d4:	fb09 4303 	mla	r3, r9, r3, r4
 80038d8:	4567      	cmp	r7, ip
 80038da:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80038de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80038e2:	d8e6      	bhi.n	80038b2 <__multiply+0xda>
 80038e4:	f8ce 3000 	str.w	r3, [lr]
 80038e8:	3504      	adds	r5, #4
 80038ea:	e7a0      	b.n	800382e <__multiply+0x56>
 80038ec:	3e01      	subs	r6, #1
 80038ee:	e7a2      	b.n	8003836 <__multiply+0x5e>

080038f0 <__pow5mult>:
 80038f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038f4:	4615      	mov	r5, r2
 80038f6:	f012 0203 	ands.w	r2, r2, #3
 80038fa:	4606      	mov	r6, r0
 80038fc:	460f      	mov	r7, r1
 80038fe:	d007      	beq.n	8003910 <__pow5mult+0x20>
 8003900:	4c21      	ldr	r4, [pc, #132]	; (8003988 <__pow5mult+0x98>)
 8003902:	3a01      	subs	r2, #1
 8003904:	2300      	movs	r3, #0
 8003906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800390a:	f7ff fed3 	bl	80036b4 <__multadd>
 800390e:	4607      	mov	r7, r0
 8003910:	10ad      	asrs	r5, r5, #2
 8003912:	d035      	beq.n	8003980 <__pow5mult+0x90>
 8003914:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003916:	b93c      	cbnz	r4, 8003928 <__pow5mult+0x38>
 8003918:	2010      	movs	r0, #16
 800391a:	f7ff fe5f 	bl	80035dc <malloc>
 800391e:	6270      	str	r0, [r6, #36]	; 0x24
 8003920:	6044      	str	r4, [r0, #4]
 8003922:	6084      	str	r4, [r0, #8]
 8003924:	6004      	str	r4, [r0, #0]
 8003926:	60c4      	str	r4, [r0, #12]
 8003928:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800392c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003930:	b94c      	cbnz	r4, 8003946 <__pow5mult+0x56>
 8003932:	f240 2171 	movw	r1, #625	; 0x271
 8003936:	4630      	mov	r0, r6
 8003938:	f7ff ff45 	bl	80037c6 <__i2b>
 800393c:	2300      	movs	r3, #0
 800393e:	4604      	mov	r4, r0
 8003940:	f8c8 0008 	str.w	r0, [r8, #8]
 8003944:	6003      	str	r3, [r0, #0]
 8003946:	f04f 0800 	mov.w	r8, #0
 800394a:	07eb      	lsls	r3, r5, #31
 800394c:	d50a      	bpl.n	8003964 <__pow5mult+0x74>
 800394e:	4639      	mov	r1, r7
 8003950:	4622      	mov	r2, r4
 8003952:	4630      	mov	r0, r6
 8003954:	f7ff ff40 	bl	80037d8 <__multiply>
 8003958:	4681      	mov	r9, r0
 800395a:	4639      	mov	r1, r7
 800395c:	4630      	mov	r0, r6
 800395e:	f7ff fe92 	bl	8003686 <_Bfree>
 8003962:	464f      	mov	r7, r9
 8003964:	106d      	asrs	r5, r5, #1
 8003966:	d00b      	beq.n	8003980 <__pow5mult+0x90>
 8003968:	6820      	ldr	r0, [r4, #0]
 800396a:	b938      	cbnz	r0, 800397c <__pow5mult+0x8c>
 800396c:	4622      	mov	r2, r4
 800396e:	4621      	mov	r1, r4
 8003970:	4630      	mov	r0, r6
 8003972:	f7ff ff31 	bl	80037d8 <__multiply>
 8003976:	6020      	str	r0, [r4, #0]
 8003978:	f8c0 8000 	str.w	r8, [r0]
 800397c:	4604      	mov	r4, r0
 800397e:	e7e4      	b.n	800394a <__pow5mult+0x5a>
 8003980:	4638      	mov	r0, r7
 8003982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003986:	bf00      	nop
 8003988:	08004268 	.word	0x08004268

0800398c <__lshift>:
 800398c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003990:	460c      	mov	r4, r1
 8003992:	4607      	mov	r7, r0
 8003994:	4616      	mov	r6, r2
 8003996:	6923      	ldr	r3, [r4, #16]
 8003998:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800399c:	eb0a 0903 	add.w	r9, sl, r3
 80039a0:	6849      	ldr	r1, [r1, #4]
 80039a2:	68a3      	ldr	r3, [r4, #8]
 80039a4:	f109 0501 	add.w	r5, r9, #1
 80039a8:	42ab      	cmp	r3, r5
 80039aa:	db31      	blt.n	8003a10 <__lshift+0x84>
 80039ac:	4638      	mov	r0, r7
 80039ae:	f7ff fe36 	bl	800361e <_Balloc>
 80039b2:	2200      	movs	r2, #0
 80039b4:	4680      	mov	r8, r0
 80039b6:	4611      	mov	r1, r2
 80039b8:	f100 0314 	add.w	r3, r0, #20
 80039bc:	4552      	cmp	r2, sl
 80039be:	db2a      	blt.n	8003a16 <__lshift+0x8a>
 80039c0:	6920      	ldr	r0, [r4, #16]
 80039c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80039c6:	f104 0114 	add.w	r1, r4, #20
 80039ca:	f016 021f 	ands.w	r2, r6, #31
 80039ce:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80039d2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80039d6:	d022      	beq.n	8003a1e <__lshift+0x92>
 80039d8:	2000      	movs	r0, #0
 80039da:	f1c2 0c20 	rsb	ip, r2, #32
 80039de:	680e      	ldr	r6, [r1, #0]
 80039e0:	4096      	lsls	r6, r2
 80039e2:	4330      	orrs	r0, r6
 80039e4:	f843 0b04 	str.w	r0, [r3], #4
 80039e8:	f851 0b04 	ldr.w	r0, [r1], #4
 80039ec:	458e      	cmp	lr, r1
 80039ee:	fa20 f00c 	lsr.w	r0, r0, ip
 80039f2:	d8f4      	bhi.n	80039de <__lshift+0x52>
 80039f4:	6018      	str	r0, [r3, #0]
 80039f6:	b108      	cbz	r0, 80039fc <__lshift+0x70>
 80039f8:	f109 0502 	add.w	r5, r9, #2
 80039fc:	3d01      	subs	r5, #1
 80039fe:	4638      	mov	r0, r7
 8003a00:	f8c8 5010 	str.w	r5, [r8, #16]
 8003a04:	4621      	mov	r1, r4
 8003a06:	f7ff fe3e 	bl	8003686 <_Bfree>
 8003a0a:	4640      	mov	r0, r8
 8003a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a10:	3101      	adds	r1, #1
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	e7c8      	b.n	80039a8 <__lshift+0x1c>
 8003a16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003a1a:	3201      	adds	r2, #1
 8003a1c:	e7ce      	b.n	80039bc <__lshift+0x30>
 8003a1e:	3b04      	subs	r3, #4
 8003a20:	f851 2b04 	ldr.w	r2, [r1], #4
 8003a24:	458e      	cmp	lr, r1
 8003a26:	f843 2f04 	str.w	r2, [r3, #4]!
 8003a2a:	d8f9      	bhi.n	8003a20 <__lshift+0x94>
 8003a2c:	e7e6      	b.n	80039fc <__lshift+0x70>

08003a2e <__mcmp>:
 8003a2e:	6903      	ldr	r3, [r0, #16]
 8003a30:	690a      	ldr	r2, [r1, #16]
 8003a32:	b530      	push	{r4, r5, lr}
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	d10c      	bne.n	8003a52 <__mcmp+0x24>
 8003a38:	0092      	lsls	r2, r2, #2
 8003a3a:	3014      	adds	r0, #20
 8003a3c:	3114      	adds	r1, #20
 8003a3e:	1884      	adds	r4, r0, r2
 8003a40:	4411      	add	r1, r2
 8003a42:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003a46:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003a4a:	4295      	cmp	r5, r2
 8003a4c:	d003      	beq.n	8003a56 <__mcmp+0x28>
 8003a4e:	d305      	bcc.n	8003a5c <__mcmp+0x2e>
 8003a50:	2301      	movs	r3, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	bd30      	pop	{r4, r5, pc}
 8003a56:	42a0      	cmp	r0, r4
 8003a58:	d3f3      	bcc.n	8003a42 <__mcmp+0x14>
 8003a5a:	e7fa      	b.n	8003a52 <__mcmp+0x24>
 8003a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a60:	e7f7      	b.n	8003a52 <__mcmp+0x24>

08003a62 <__mdiff>:
 8003a62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a66:	460d      	mov	r5, r1
 8003a68:	4607      	mov	r7, r0
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	4614      	mov	r4, r2
 8003a70:	f7ff ffdd 	bl	8003a2e <__mcmp>
 8003a74:	1e06      	subs	r6, r0, #0
 8003a76:	d108      	bne.n	8003a8a <__mdiff+0x28>
 8003a78:	4631      	mov	r1, r6
 8003a7a:	4638      	mov	r0, r7
 8003a7c:	f7ff fdcf 	bl	800361e <_Balloc>
 8003a80:	2301      	movs	r3, #1
 8003a82:	6146      	str	r6, [r0, #20]
 8003a84:	6103      	str	r3, [r0, #16]
 8003a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a8a:	bfa4      	itt	ge
 8003a8c:	4623      	movge	r3, r4
 8003a8e:	462c      	movge	r4, r5
 8003a90:	4638      	mov	r0, r7
 8003a92:	6861      	ldr	r1, [r4, #4]
 8003a94:	bfa6      	itte	ge
 8003a96:	461d      	movge	r5, r3
 8003a98:	2600      	movge	r6, #0
 8003a9a:	2601      	movlt	r6, #1
 8003a9c:	f7ff fdbf 	bl	800361e <_Balloc>
 8003aa0:	f04f 0c00 	mov.w	ip, #0
 8003aa4:	60c6      	str	r6, [r0, #12]
 8003aa6:	692b      	ldr	r3, [r5, #16]
 8003aa8:	6926      	ldr	r6, [r4, #16]
 8003aaa:	f104 0214 	add.w	r2, r4, #20
 8003aae:	f105 0914 	add.w	r9, r5, #20
 8003ab2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003ab6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003aba:	f100 0114 	add.w	r1, r0, #20
 8003abe:	f852 ab04 	ldr.w	sl, [r2], #4
 8003ac2:	f859 5b04 	ldr.w	r5, [r9], #4
 8003ac6:	fa1f f38a 	uxth.w	r3, sl
 8003aca:	4463      	add	r3, ip
 8003acc:	b2ac      	uxth	r4, r5
 8003ace:	1b1b      	subs	r3, r3, r4
 8003ad0:	0c2c      	lsrs	r4, r5, #16
 8003ad2:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003ad6:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003ae0:	45c8      	cmp	r8, r9
 8003ae2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003ae6:	4696      	mov	lr, r2
 8003ae8:	f841 4b04 	str.w	r4, [r1], #4
 8003aec:	d8e7      	bhi.n	8003abe <__mdiff+0x5c>
 8003aee:	45be      	cmp	lr, r7
 8003af0:	d305      	bcc.n	8003afe <__mdiff+0x9c>
 8003af2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003af6:	b18b      	cbz	r3, 8003b1c <__mdiff+0xba>
 8003af8:	6106      	str	r6, [r0, #16]
 8003afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afe:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003b02:	b2a2      	uxth	r2, r4
 8003b04:	4462      	add	r2, ip
 8003b06:	1413      	asrs	r3, r2, #16
 8003b08:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003b0c:	b292      	uxth	r2, r2
 8003b0e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003b12:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003b16:	f841 2b04 	str.w	r2, [r1], #4
 8003b1a:	e7e8      	b.n	8003aee <__mdiff+0x8c>
 8003b1c:	3e01      	subs	r6, #1
 8003b1e:	e7e8      	b.n	8003af2 <__mdiff+0x90>

08003b20 <__d2b>:
 8003b20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003b24:	461c      	mov	r4, r3
 8003b26:	2101      	movs	r1, #1
 8003b28:	4690      	mov	r8, r2
 8003b2a:	9e08      	ldr	r6, [sp, #32]
 8003b2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003b2e:	f7ff fd76 	bl	800361e <_Balloc>
 8003b32:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003b36:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003b3a:	4607      	mov	r7, r0
 8003b3c:	bb34      	cbnz	r4, 8003b8c <__d2b+0x6c>
 8003b3e:	9201      	str	r2, [sp, #4]
 8003b40:	f1b8 0f00 	cmp.w	r8, #0
 8003b44:	d027      	beq.n	8003b96 <__d2b+0x76>
 8003b46:	a802      	add	r0, sp, #8
 8003b48:	f840 8d08 	str.w	r8, [r0, #-8]!
 8003b4c:	f7ff fe0c 	bl	8003768 <__lo0bits>
 8003b50:	9900      	ldr	r1, [sp, #0]
 8003b52:	b1f0      	cbz	r0, 8003b92 <__d2b+0x72>
 8003b54:	9a01      	ldr	r2, [sp, #4]
 8003b56:	f1c0 0320 	rsb	r3, r0, #32
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	40c2      	lsrs	r2, r0
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	9201      	str	r2, [sp, #4]
 8003b66:	9b01      	ldr	r3, [sp, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf14      	ite	ne
 8003b6c:	2102      	movne	r1, #2
 8003b6e:	2101      	moveq	r1, #1
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	6139      	str	r1, [r7, #16]
 8003b74:	b1c4      	cbz	r4, 8003ba8 <__d2b+0x88>
 8003b76:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003b7a:	4404      	add	r4, r0
 8003b7c:	6034      	str	r4, [r6, #0]
 8003b7e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003b82:	6028      	str	r0, [r5, #0]
 8003b84:	4638      	mov	r0, r7
 8003b86:	b002      	add	sp, #8
 8003b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b8c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b90:	e7d5      	b.n	8003b3e <__d2b+0x1e>
 8003b92:	6179      	str	r1, [r7, #20]
 8003b94:	e7e7      	b.n	8003b66 <__d2b+0x46>
 8003b96:	a801      	add	r0, sp, #4
 8003b98:	f7ff fde6 	bl	8003768 <__lo0bits>
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	9b01      	ldr	r3, [sp, #4]
 8003ba0:	6139      	str	r1, [r7, #16]
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	3020      	adds	r0, #32
 8003ba6:	e7e5      	b.n	8003b74 <__d2b+0x54>
 8003ba8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003bac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003bb0:	6030      	str	r0, [r6, #0]
 8003bb2:	6918      	ldr	r0, [r3, #16]
 8003bb4:	f7ff fdb9 	bl	800372a <__hi0bits>
 8003bb8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003bbc:	e7e1      	b.n	8003b82 <__d2b+0x62>

08003bbe <_calloc_r>:
 8003bbe:	b538      	push	{r3, r4, r5, lr}
 8003bc0:	fb02 f401 	mul.w	r4, r2, r1
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	f000 f855 	bl	8003c74 <_malloc_r>
 8003bca:	4605      	mov	r5, r0
 8003bcc:	b118      	cbz	r0, 8003bd6 <_calloc_r+0x18>
 8003bce:	4622      	mov	r2, r4
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	f7fe fa07 	bl	8001fe4 <memset>
 8003bd6:	4628      	mov	r0, r5
 8003bd8:	bd38      	pop	{r3, r4, r5, pc}
	...

08003bdc <_free_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4605      	mov	r5, r0
 8003be0:	2900      	cmp	r1, #0
 8003be2:	d043      	beq.n	8003c6c <_free_r+0x90>
 8003be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003be8:	1f0c      	subs	r4, r1, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bfb8      	it	lt
 8003bee:	18e4      	addlt	r4, r4, r3
 8003bf0:	f000 fa2a 	bl	8004048 <__malloc_lock>
 8003bf4:	4a1e      	ldr	r2, [pc, #120]	; (8003c70 <_free_r+0x94>)
 8003bf6:	6813      	ldr	r3, [r2, #0]
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	b933      	cbnz	r3, 8003c0a <_free_r+0x2e>
 8003bfc:	6063      	str	r3, [r4, #4]
 8003bfe:	6014      	str	r4, [r2, #0]
 8003c00:	4628      	mov	r0, r5
 8003c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c06:	f000 ba20 	b.w	800404a <__malloc_unlock>
 8003c0a:	42a3      	cmp	r3, r4
 8003c0c:	d90b      	bls.n	8003c26 <_free_r+0x4a>
 8003c0e:	6821      	ldr	r1, [r4, #0]
 8003c10:	1862      	adds	r2, r4, r1
 8003c12:	4293      	cmp	r3, r2
 8003c14:	bf01      	itttt	eq
 8003c16:	681a      	ldreq	r2, [r3, #0]
 8003c18:	685b      	ldreq	r3, [r3, #4]
 8003c1a:	1852      	addeq	r2, r2, r1
 8003c1c:	6022      	streq	r2, [r4, #0]
 8003c1e:	6063      	str	r3, [r4, #4]
 8003c20:	6004      	str	r4, [r0, #0]
 8003c22:	e7ed      	b.n	8003c00 <_free_r+0x24>
 8003c24:	4613      	mov	r3, r2
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	b10a      	cbz	r2, 8003c2e <_free_r+0x52>
 8003c2a:	42a2      	cmp	r2, r4
 8003c2c:	d9fa      	bls.n	8003c24 <_free_r+0x48>
 8003c2e:	6819      	ldr	r1, [r3, #0]
 8003c30:	1858      	adds	r0, r3, r1
 8003c32:	42a0      	cmp	r0, r4
 8003c34:	d10b      	bne.n	8003c4e <_free_r+0x72>
 8003c36:	6820      	ldr	r0, [r4, #0]
 8003c38:	4401      	add	r1, r0
 8003c3a:	1858      	adds	r0, r3, r1
 8003c3c:	4282      	cmp	r2, r0
 8003c3e:	6019      	str	r1, [r3, #0]
 8003c40:	d1de      	bne.n	8003c00 <_free_r+0x24>
 8003c42:	6810      	ldr	r0, [r2, #0]
 8003c44:	6852      	ldr	r2, [r2, #4]
 8003c46:	4401      	add	r1, r0
 8003c48:	6019      	str	r1, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	e7d8      	b.n	8003c00 <_free_r+0x24>
 8003c4e:	d902      	bls.n	8003c56 <_free_r+0x7a>
 8003c50:	230c      	movs	r3, #12
 8003c52:	602b      	str	r3, [r5, #0]
 8003c54:	e7d4      	b.n	8003c00 <_free_r+0x24>
 8003c56:	6820      	ldr	r0, [r4, #0]
 8003c58:	1821      	adds	r1, r4, r0
 8003c5a:	428a      	cmp	r2, r1
 8003c5c:	bf01      	itttt	eq
 8003c5e:	6811      	ldreq	r1, [r2, #0]
 8003c60:	6852      	ldreq	r2, [r2, #4]
 8003c62:	1809      	addeq	r1, r1, r0
 8003c64:	6021      	streq	r1, [r4, #0]
 8003c66:	6062      	str	r2, [r4, #4]
 8003c68:	605c      	str	r4, [r3, #4]
 8003c6a:	e7c9      	b.n	8003c00 <_free_r+0x24>
 8003c6c:	bd38      	pop	{r3, r4, r5, pc}
 8003c6e:	bf00      	nop
 8003c70:	200001fc 	.word	0x200001fc

08003c74 <_malloc_r>:
 8003c74:	b570      	push	{r4, r5, r6, lr}
 8003c76:	1ccd      	adds	r5, r1, #3
 8003c78:	f025 0503 	bic.w	r5, r5, #3
 8003c7c:	3508      	adds	r5, #8
 8003c7e:	2d0c      	cmp	r5, #12
 8003c80:	bf38      	it	cc
 8003c82:	250c      	movcc	r5, #12
 8003c84:	2d00      	cmp	r5, #0
 8003c86:	4606      	mov	r6, r0
 8003c88:	db01      	blt.n	8003c8e <_malloc_r+0x1a>
 8003c8a:	42a9      	cmp	r1, r5
 8003c8c:	d903      	bls.n	8003c96 <_malloc_r+0x22>
 8003c8e:	230c      	movs	r3, #12
 8003c90:	6033      	str	r3, [r6, #0]
 8003c92:	2000      	movs	r0, #0
 8003c94:	bd70      	pop	{r4, r5, r6, pc}
 8003c96:	f000 f9d7 	bl	8004048 <__malloc_lock>
 8003c9a:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <_malloc_r+0xb4>)
 8003c9c:	6814      	ldr	r4, [r2, #0]
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	b991      	cbnz	r1, 8003cc8 <_malloc_r+0x54>
 8003ca2:	4c22      	ldr	r4, [pc, #136]	; (8003d2c <_malloc_r+0xb8>)
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	b91b      	cbnz	r3, 8003cb0 <_malloc_r+0x3c>
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f000 f991 	bl	8003fd0 <_sbrk_r>
 8003cae:	6020      	str	r0, [r4, #0]
 8003cb0:	4629      	mov	r1, r5
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	f000 f98c 	bl	8003fd0 <_sbrk_r>
 8003cb8:	1c43      	adds	r3, r0, #1
 8003cba:	d126      	bne.n	8003d0a <_malloc_r+0x96>
 8003cbc:	230c      	movs	r3, #12
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	6033      	str	r3, [r6, #0]
 8003cc2:	f000 f9c2 	bl	800404a <__malloc_unlock>
 8003cc6:	e7e4      	b.n	8003c92 <_malloc_r+0x1e>
 8003cc8:	680b      	ldr	r3, [r1, #0]
 8003cca:	1b5b      	subs	r3, r3, r5
 8003ccc:	d41a      	bmi.n	8003d04 <_malloc_r+0x90>
 8003cce:	2b0b      	cmp	r3, #11
 8003cd0:	d90f      	bls.n	8003cf2 <_malloc_r+0x7e>
 8003cd2:	600b      	str	r3, [r1, #0]
 8003cd4:	18cc      	adds	r4, r1, r3
 8003cd6:	50cd      	str	r5, [r1, r3]
 8003cd8:	4630      	mov	r0, r6
 8003cda:	f000 f9b6 	bl	800404a <__malloc_unlock>
 8003cde:	f104 000b 	add.w	r0, r4, #11
 8003ce2:	1d23      	adds	r3, r4, #4
 8003ce4:	f020 0007 	bic.w	r0, r0, #7
 8003ce8:	1ac3      	subs	r3, r0, r3
 8003cea:	d01b      	beq.n	8003d24 <_malloc_r+0xb0>
 8003cec:	425a      	negs	r2, r3
 8003cee:	50e2      	str	r2, [r4, r3]
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
 8003cf2:	428c      	cmp	r4, r1
 8003cf4:	bf0b      	itete	eq
 8003cf6:	6863      	ldreq	r3, [r4, #4]
 8003cf8:	684b      	ldrne	r3, [r1, #4]
 8003cfa:	6013      	streq	r3, [r2, #0]
 8003cfc:	6063      	strne	r3, [r4, #4]
 8003cfe:	bf18      	it	ne
 8003d00:	460c      	movne	r4, r1
 8003d02:	e7e9      	b.n	8003cd8 <_malloc_r+0x64>
 8003d04:	460c      	mov	r4, r1
 8003d06:	6849      	ldr	r1, [r1, #4]
 8003d08:	e7ca      	b.n	8003ca0 <_malloc_r+0x2c>
 8003d0a:	1cc4      	adds	r4, r0, #3
 8003d0c:	f024 0403 	bic.w	r4, r4, #3
 8003d10:	42a0      	cmp	r0, r4
 8003d12:	d005      	beq.n	8003d20 <_malloc_r+0xac>
 8003d14:	1a21      	subs	r1, r4, r0
 8003d16:	4630      	mov	r0, r6
 8003d18:	f000 f95a 	bl	8003fd0 <_sbrk_r>
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d0cd      	beq.n	8003cbc <_malloc_r+0x48>
 8003d20:	6025      	str	r5, [r4, #0]
 8003d22:	e7d9      	b.n	8003cd8 <_malloc_r+0x64>
 8003d24:	bd70      	pop	{r4, r5, r6, pc}
 8003d26:	bf00      	nop
 8003d28:	200001fc 	.word	0x200001fc
 8003d2c:	20000200 	.word	0x20000200

08003d30 <__ssputs_r>:
 8003d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d34:	688e      	ldr	r6, [r1, #8]
 8003d36:	4682      	mov	sl, r0
 8003d38:	429e      	cmp	r6, r3
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	4691      	mov	r9, r2
 8003d3e:	4698      	mov	r8, r3
 8003d40:	d835      	bhi.n	8003dae <__ssputs_r+0x7e>
 8003d42:	898a      	ldrh	r2, [r1, #12]
 8003d44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d48:	d031      	beq.n	8003dae <__ssputs_r+0x7e>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	6825      	ldr	r5, [r4, #0]
 8003d4e:	6909      	ldr	r1, [r1, #16]
 8003d50:	1a6f      	subs	r7, r5, r1
 8003d52:	6965      	ldr	r5, [r4, #20]
 8003d54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d58:	fb95 f5f3 	sdiv	r5, r5, r3
 8003d5c:	f108 0301 	add.w	r3, r8, #1
 8003d60:	443b      	add	r3, r7
 8003d62:	429d      	cmp	r5, r3
 8003d64:	bf38      	it	cc
 8003d66:	461d      	movcc	r5, r3
 8003d68:	0553      	lsls	r3, r2, #21
 8003d6a:	d531      	bpl.n	8003dd0 <__ssputs_r+0xa0>
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	f7ff ff81 	bl	8003c74 <_malloc_r>
 8003d72:	4606      	mov	r6, r0
 8003d74:	b950      	cbnz	r0, 8003d8c <__ssputs_r+0x5c>
 8003d76:	230c      	movs	r3, #12
 8003d78:	f8ca 3000 	str.w	r3, [sl]
 8003d7c:	89a3      	ldrh	r3, [r4, #12]
 8003d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d86:	81a3      	strh	r3, [r4, #12]
 8003d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8c:	463a      	mov	r2, r7
 8003d8e:	6921      	ldr	r1, [r4, #16]
 8003d90:	f7ff fc3a 	bl	8003608 <memcpy>
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9e:	81a3      	strh	r3, [r4, #12]
 8003da0:	6126      	str	r6, [r4, #16]
 8003da2:	443e      	add	r6, r7
 8003da4:	6026      	str	r6, [r4, #0]
 8003da6:	4646      	mov	r6, r8
 8003da8:	6165      	str	r5, [r4, #20]
 8003daa:	1bed      	subs	r5, r5, r7
 8003dac:	60a5      	str	r5, [r4, #8]
 8003dae:	4546      	cmp	r6, r8
 8003db0:	bf28      	it	cs
 8003db2:	4646      	movcs	r6, r8
 8003db4:	4649      	mov	r1, r9
 8003db6:	4632      	mov	r2, r6
 8003db8:	6820      	ldr	r0, [r4, #0]
 8003dba:	f000 f92b 	bl	8004014 <memmove>
 8003dbe:	68a3      	ldr	r3, [r4, #8]
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	1b9b      	subs	r3, r3, r6
 8003dc4:	60a3      	str	r3, [r4, #8]
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	441e      	add	r6, r3
 8003dca:	6026      	str	r6, [r4, #0]
 8003dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dd0:	462a      	mov	r2, r5
 8003dd2:	f000 f93b 	bl	800404c <_realloc_r>
 8003dd6:	4606      	mov	r6, r0
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d1e1      	bne.n	8003da0 <__ssputs_r+0x70>
 8003ddc:	6921      	ldr	r1, [r4, #16]
 8003dde:	4650      	mov	r0, sl
 8003de0:	f7ff fefc 	bl	8003bdc <_free_r>
 8003de4:	e7c7      	b.n	8003d76 <__ssputs_r+0x46>
	...

08003de8 <_svfiprintf_r>:
 8003de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dec:	b09d      	sub	sp, #116	; 0x74
 8003dee:	9303      	str	r3, [sp, #12]
 8003df0:	898b      	ldrh	r3, [r1, #12]
 8003df2:	4680      	mov	r8, r0
 8003df4:	061c      	lsls	r4, r3, #24
 8003df6:	460d      	mov	r5, r1
 8003df8:	4616      	mov	r6, r2
 8003dfa:	d50f      	bpl.n	8003e1c <_svfiprintf_r+0x34>
 8003dfc:	690b      	ldr	r3, [r1, #16]
 8003dfe:	b96b      	cbnz	r3, 8003e1c <_svfiprintf_r+0x34>
 8003e00:	2140      	movs	r1, #64	; 0x40
 8003e02:	f7ff ff37 	bl	8003c74 <_malloc_r>
 8003e06:	6028      	str	r0, [r5, #0]
 8003e08:	6128      	str	r0, [r5, #16]
 8003e0a:	b928      	cbnz	r0, 8003e18 <_svfiprintf_r+0x30>
 8003e0c:	230c      	movs	r3, #12
 8003e0e:	f8c8 3000 	str.w	r3, [r8]
 8003e12:	f04f 30ff 	mov.w	r0, #4294967295
 8003e16:	e0c4      	b.n	8003fa2 <_svfiprintf_r+0x1ba>
 8003e18:	2340      	movs	r3, #64	; 0x40
 8003e1a:	616b      	str	r3, [r5, #20]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e20:	2320      	movs	r3, #32
 8003e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e26:	2330      	movs	r3, #48	; 0x30
 8003e28:	f04f 0b01 	mov.w	fp, #1
 8003e2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e30:	4637      	mov	r7, r6
 8003e32:	463c      	mov	r4, r7
 8003e34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d13c      	bne.n	8003eb6 <_svfiprintf_r+0xce>
 8003e3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e40:	d00b      	beq.n	8003e5a <_svfiprintf_r+0x72>
 8003e42:	4653      	mov	r3, sl
 8003e44:	4632      	mov	r2, r6
 8003e46:	4629      	mov	r1, r5
 8003e48:	4640      	mov	r0, r8
 8003e4a:	f7ff ff71 	bl	8003d30 <__ssputs_r>
 8003e4e:	3001      	adds	r0, #1
 8003e50:	f000 80a2 	beq.w	8003f98 <_svfiprintf_r+0x1b0>
 8003e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e56:	4453      	add	r3, sl
 8003e58:	9309      	str	r3, [sp, #36]	; 0x24
 8003e5a:	783b      	ldrb	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 809b 	beq.w	8003f98 <_svfiprintf_r+0x1b0>
 8003e62:	2300      	movs	r3, #0
 8003e64:	f04f 32ff 	mov.w	r2, #4294967295
 8003e68:	9304      	str	r3, [sp, #16]
 8003e6a:	9307      	str	r3, [sp, #28]
 8003e6c:	9205      	str	r2, [sp, #20]
 8003e6e:	9306      	str	r3, [sp, #24]
 8003e70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e74:	931a      	str	r3, [sp, #104]	; 0x68
 8003e76:	2205      	movs	r2, #5
 8003e78:	7821      	ldrb	r1, [r4, #0]
 8003e7a:	4850      	ldr	r0, [pc, #320]	; (8003fbc <_svfiprintf_r+0x1d4>)
 8003e7c:	f7ff fbb6 	bl	80035ec <memchr>
 8003e80:	1c67      	adds	r7, r4, #1
 8003e82:	9b04      	ldr	r3, [sp, #16]
 8003e84:	b9d8      	cbnz	r0, 8003ebe <_svfiprintf_r+0xd6>
 8003e86:	06d9      	lsls	r1, r3, #27
 8003e88:	bf44      	itt	mi
 8003e8a:	2220      	movmi	r2, #32
 8003e8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e90:	071a      	lsls	r2, r3, #28
 8003e92:	bf44      	itt	mi
 8003e94:	222b      	movmi	r2, #43	; 0x2b
 8003e96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e9a:	7822      	ldrb	r2, [r4, #0]
 8003e9c:	2a2a      	cmp	r2, #42	; 0x2a
 8003e9e:	d016      	beq.n	8003ece <_svfiprintf_r+0xe6>
 8003ea0:	2100      	movs	r1, #0
 8003ea2:	200a      	movs	r0, #10
 8003ea4:	9a07      	ldr	r2, [sp, #28]
 8003ea6:	4627      	mov	r7, r4
 8003ea8:	783b      	ldrb	r3, [r7, #0]
 8003eaa:	3401      	adds	r4, #1
 8003eac:	3b30      	subs	r3, #48	; 0x30
 8003eae:	2b09      	cmp	r3, #9
 8003eb0:	d950      	bls.n	8003f54 <_svfiprintf_r+0x16c>
 8003eb2:	b1c9      	cbz	r1, 8003ee8 <_svfiprintf_r+0x100>
 8003eb4:	e011      	b.n	8003eda <_svfiprintf_r+0xf2>
 8003eb6:	2b25      	cmp	r3, #37	; 0x25
 8003eb8:	d0c0      	beq.n	8003e3c <_svfiprintf_r+0x54>
 8003eba:	4627      	mov	r7, r4
 8003ebc:	e7b9      	b.n	8003e32 <_svfiprintf_r+0x4a>
 8003ebe:	4a3f      	ldr	r2, [pc, #252]	; (8003fbc <_svfiprintf_r+0x1d4>)
 8003ec0:	463c      	mov	r4, r7
 8003ec2:	1a80      	subs	r0, r0, r2
 8003ec4:	fa0b f000 	lsl.w	r0, fp, r0
 8003ec8:	4318      	orrs	r0, r3
 8003eca:	9004      	str	r0, [sp, #16]
 8003ecc:	e7d3      	b.n	8003e76 <_svfiprintf_r+0x8e>
 8003ece:	9a03      	ldr	r2, [sp, #12]
 8003ed0:	1d11      	adds	r1, r2, #4
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	9103      	str	r1, [sp, #12]
 8003ed6:	2a00      	cmp	r2, #0
 8003ed8:	db01      	blt.n	8003ede <_svfiprintf_r+0xf6>
 8003eda:	9207      	str	r2, [sp, #28]
 8003edc:	e004      	b.n	8003ee8 <_svfiprintf_r+0x100>
 8003ede:	4252      	negs	r2, r2
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	9207      	str	r2, [sp, #28]
 8003ee6:	9304      	str	r3, [sp, #16]
 8003ee8:	783b      	ldrb	r3, [r7, #0]
 8003eea:	2b2e      	cmp	r3, #46	; 0x2e
 8003eec:	d10d      	bne.n	8003f0a <_svfiprintf_r+0x122>
 8003eee:	787b      	ldrb	r3, [r7, #1]
 8003ef0:	1c79      	adds	r1, r7, #1
 8003ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef4:	d132      	bne.n	8003f5c <_svfiprintf_r+0x174>
 8003ef6:	9b03      	ldr	r3, [sp, #12]
 8003ef8:	3702      	adds	r7, #2
 8003efa:	1d1a      	adds	r2, r3, #4
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	9203      	str	r2, [sp, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bfb8      	it	lt
 8003f04:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f08:	9305      	str	r3, [sp, #20]
 8003f0a:	4c2d      	ldr	r4, [pc, #180]	; (8003fc0 <_svfiprintf_r+0x1d8>)
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	7839      	ldrb	r1, [r7, #0]
 8003f10:	4620      	mov	r0, r4
 8003f12:	f7ff fb6b 	bl	80035ec <memchr>
 8003f16:	b138      	cbz	r0, 8003f28 <_svfiprintf_r+0x140>
 8003f18:	2340      	movs	r3, #64	; 0x40
 8003f1a:	1b00      	subs	r0, r0, r4
 8003f1c:	fa03 f000 	lsl.w	r0, r3, r0
 8003f20:	9b04      	ldr	r3, [sp, #16]
 8003f22:	3701      	adds	r7, #1
 8003f24:	4303      	orrs	r3, r0
 8003f26:	9304      	str	r3, [sp, #16]
 8003f28:	7839      	ldrb	r1, [r7, #0]
 8003f2a:	2206      	movs	r2, #6
 8003f2c:	4825      	ldr	r0, [pc, #148]	; (8003fc4 <_svfiprintf_r+0x1dc>)
 8003f2e:	1c7e      	adds	r6, r7, #1
 8003f30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f34:	f7ff fb5a 	bl	80035ec <memchr>
 8003f38:	2800      	cmp	r0, #0
 8003f3a:	d035      	beq.n	8003fa8 <_svfiprintf_r+0x1c0>
 8003f3c:	4b22      	ldr	r3, [pc, #136]	; (8003fc8 <_svfiprintf_r+0x1e0>)
 8003f3e:	b9fb      	cbnz	r3, 8003f80 <_svfiprintf_r+0x198>
 8003f40:	9b03      	ldr	r3, [sp, #12]
 8003f42:	3307      	adds	r3, #7
 8003f44:	f023 0307 	bic.w	r3, r3, #7
 8003f48:	3308      	adds	r3, #8
 8003f4a:	9303      	str	r3, [sp, #12]
 8003f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f4e:	444b      	add	r3, r9
 8003f50:	9309      	str	r3, [sp, #36]	; 0x24
 8003f52:	e76d      	b.n	8003e30 <_svfiprintf_r+0x48>
 8003f54:	fb00 3202 	mla	r2, r0, r2, r3
 8003f58:	2101      	movs	r1, #1
 8003f5a:	e7a4      	b.n	8003ea6 <_svfiprintf_r+0xbe>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	240a      	movs	r4, #10
 8003f60:	4618      	mov	r0, r3
 8003f62:	9305      	str	r3, [sp, #20]
 8003f64:	460f      	mov	r7, r1
 8003f66:	783a      	ldrb	r2, [r7, #0]
 8003f68:	3101      	adds	r1, #1
 8003f6a:	3a30      	subs	r2, #48	; 0x30
 8003f6c:	2a09      	cmp	r2, #9
 8003f6e:	d903      	bls.n	8003f78 <_svfiprintf_r+0x190>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0ca      	beq.n	8003f0a <_svfiprintf_r+0x122>
 8003f74:	9005      	str	r0, [sp, #20]
 8003f76:	e7c8      	b.n	8003f0a <_svfiprintf_r+0x122>
 8003f78:	fb04 2000 	mla	r0, r4, r0, r2
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e7f1      	b.n	8003f64 <_svfiprintf_r+0x17c>
 8003f80:	ab03      	add	r3, sp, #12
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	462a      	mov	r2, r5
 8003f86:	4b11      	ldr	r3, [pc, #68]	; (8003fcc <_svfiprintf_r+0x1e4>)
 8003f88:	a904      	add	r1, sp, #16
 8003f8a:	4640      	mov	r0, r8
 8003f8c:	f7fe f8c4 	bl	8002118 <_printf_float>
 8003f90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f94:	4681      	mov	r9, r0
 8003f96:	d1d9      	bne.n	8003f4c <_svfiprintf_r+0x164>
 8003f98:	89ab      	ldrh	r3, [r5, #12]
 8003f9a:	065b      	lsls	r3, r3, #25
 8003f9c:	f53f af39 	bmi.w	8003e12 <_svfiprintf_r+0x2a>
 8003fa0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fa2:	b01d      	add	sp, #116	; 0x74
 8003fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa8:	ab03      	add	r3, sp, #12
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	462a      	mov	r2, r5
 8003fae:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <_svfiprintf_r+0x1e4>)
 8003fb0:	a904      	add	r1, sp, #16
 8003fb2:	4640      	mov	r0, r8
 8003fb4:	f7fe fb60 	bl	8002678 <_printf_i>
 8003fb8:	e7ea      	b.n	8003f90 <_svfiprintf_r+0x1a8>
 8003fba:	bf00      	nop
 8003fbc:	08004274 	.word	0x08004274
 8003fc0:	0800427a 	.word	0x0800427a
 8003fc4:	0800427e 	.word	0x0800427e
 8003fc8:	08002119 	.word	0x08002119
 8003fcc:	08003d31 	.word	0x08003d31

08003fd0 <_sbrk_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	4c05      	ldr	r4, [pc, #20]	; (8003fec <_sbrk_r+0x1c>)
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	4608      	mov	r0, r1
 8003fda:	6023      	str	r3, [r4, #0]
 8003fdc:	f000 f872 	bl	80040c4 <_sbrk>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_sbrk_r+0x1a>
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_sbrk_r+0x1a>
 8003fe8:	602b      	str	r3, [r5, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	2000030c 	.word	0x2000030c

08003ff0 <__ascii_mbtowc>:
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	b901      	cbnz	r1, 8003ff6 <__ascii_mbtowc+0x6>
 8003ff4:	a901      	add	r1, sp, #4
 8003ff6:	b142      	cbz	r2, 800400a <__ascii_mbtowc+0x1a>
 8003ff8:	b14b      	cbz	r3, 800400e <__ascii_mbtowc+0x1e>
 8003ffa:	7813      	ldrb	r3, [r2, #0]
 8003ffc:	600b      	str	r3, [r1, #0]
 8003ffe:	7812      	ldrb	r2, [r2, #0]
 8004000:	1c10      	adds	r0, r2, #0
 8004002:	bf18      	it	ne
 8004004:	2001      	movne	r0, #1
 8004006:	b002      	add	sp, #8
 8004008:	4770      	bx	lr
 800400a:	4610      	mov	r0, r2
 800400c:	e7fb      	b.n	8004006 <__ascii_mbtowc+0x16>
 800400e:	f06f 0001 	mvn.w	r0, #1
 8004012:	e7f8      	b.n	8004006 <__ascii_mbtowc+0x16>

08004014 <memmove>:
 8004014:	4288      	cmp	r0, r1
 8004016:	b510      	push	{r4, lr}
 8004018:	eb01 0302 	add.w	r3, r1, r2
 800401c:	d803      	bhi.n	8004026 <memmove+0x12>
 800401e:	1e42      	subs	r2, r0, #1
 8004020:	4299      	cmp	r1, r3
 8004022:	d10c      	bne.n	800403e <memmove+0x2a>
 8004024:	bd10      	pop	{r4, pc}
 8004026:	4298      	cmp	r0, r3
 8004028:	d2f9      	bcs.n	800401e <memmove+0xa>
 800402a:	1881      	adds	r1, r0, r2
 800402c:	1ad2      	subs	r2, r2, r3
 800402e:	42d3      	cmn	r3, r2
 8004030:	d100      	bne.n	8004034 <memmove+0x20>
 8004032:	bd10      	pop	{r4, pc}
 8004034:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004038:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800403c:	e7f7      	b.n	800402e <memmove+0x1a>
 800403e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004042:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004046:	e7eb      	b.n	8004020 <memmove+0xc>

08004048 <__malloc_lock>:
 8004048:	4770      	bx	lr

0800404a <__malloc_unlock>:
 800404a:	4770      	bx	lr

0800404c <_realloc_r>:
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	4607      	mov	r7, r0
 8004050:	4614      	mov	r4, r2
 8004052:	460e      	mov	r6, r1
 8004054:	b921      	cbnz	r1, 8004060 <_realloc_r+0x14>
 8004056:	4611      	mov	r1, r2
 8004058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800405c:	f7ff be0a 	b.w	8003c74 <_malloc_r>
 8004060:	b922      	cbnz	r2, 800406c <_realloc_r+0x20>
 8004062:	f7ff fdbb 	bl	8003bdc <_free_r>
 8004066:	4625      	mov	r5, r4
 8004068:	4628      	mov	r0, r5
 800406a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800406c:	f000 f821 	bl	80040b2 <_malloc_usable_size_r>
 8004070:	4284      	cmp	r4, r0
 8004072:	d90f      	bls.n	8004094 <_realloc_r+0x48>
 8004074:	4621      	mov	r1, r4
 8004076:	4638      	mov	r0, r7
 8004078:	f7ff fdfc 	bl	8003c74 <_malloc_r>
 800407c:	4605      	mov	r5, r0
 800407e:	2800      	cmp	r0, #0
 8004080:	d0f2      	beq.n	8004068 <_realloc_r+0x1c>
 8004082:	4631      	mov	r1, r6
 8004084:	4622      	mov	r2, r4
 8004086:	f7ff fabf 	bl	8003608 <memcpy>
 800408a:	4631      	mov	r1, r6
 800408c:	4638      	mov	r0, r7
 800408e:	f7ff fda5 	bl	8003bdc <_free_r>
 8004092:	e7e9      	b.n	8004068 <_realloc_r+0x1c>
 8004094:	4635      	mov	r5, r6
 8004096:	e7e7      	b.n	8004068 <_realloc_r+0x1c>

08004098 <__ascii_wctomb>:
 8004098:	b149      	cbz	r1, 80040ae <__ascii_wctomb+0x16>
 800409a:	2aff      	cmp	r2, #255	; 0xff
 800409c:	bf8b      	itete	hi
 800409e:	238a      	movhi	r3, #138	; 0x8a
 80040a0:	700a      	strbls	r2, [r1, #0]
 80040a2:	6003      	strhi	r3, [r0, #0]
 80040a4:	2001      	movls	r0, #1
 80040a6:	bf88      	it	hi
 80040a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80040ac:	4770      	bx	lr
 80040ae:	4608      	mov	r0, r1
 80040b0:	4770      	bx	lr

080040b2 <_malloc_usable_size_r>:
 80040b2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80040b6:	2800      	cmp	r0, #0
 80040b8:	f1a0 0004 	sub.w	r0, r0, #4
 80040bc:	bfbc      	itt	lt
 80040be:	580b      	ldrlt	r3, [r1, r0]
 80040c0:	18c0      	addlt	r0, r0, r3
 80040c2:	4770      	bx	lr

080040c4 <_sbrk>:
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <_sbrk+0x14>)
 80040c6:	4602      	mov	r2, r0
 80040c8:	6819      	ldr	r1, [r3, #0]
 80040ca:	b909      	cbnz	r1, 80040d0 <_sbrk+0xc>
 80040cc:	4903      	ldr	r1, [pc, #12]	; (80040dc <_sbrk+0x18>)
 80040ce:	6019      	str	r1, [r3, #0]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	4402      	add	r2, r0
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	4770      	bx	lr
 80040d8:	20000204 	.word	0x20000204
 80040dc:	20000310 	.word	0x20000310

080040e0 <_init>:
 80040e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e2:	bf00      	nop
 80040e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040e6:	bc08      	pop	{r3}
 80040e8:	469e      	mov	lr, r3
 80040ea:	4770      	bx	lr

080040ec <_fini>:
 80040ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ee:	bf00      	nop
 80040f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040f2:	bc08      	pop	{r3}
 80040f4:	469e      	mov	lr, r3
 80040f6:	4770      	bx	lr
