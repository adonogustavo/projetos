
Inversor_DCAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003308  08003308  00013308  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003384  08003384  00013384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000174  20000000  08003388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000288  20000174  080034fc  00020174  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200003fc  080034fc  000203fc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018383  00000000  00000000  0002019d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002c86  00000000  00000000  00038520  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009a3e  00000000  00000000  0003b1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b48  00000000  00000000  00044be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001020  00000000  00000000  00045730  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000075ee  00000000  00000000  00046750  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004508  00000000  00000000  0004dd3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00052246  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002780  00000000  00000000  000522c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000174 	.word	0x20000174
 8000128:	00000000 	.word	0x00000000
 800012c:	080032f0 	.word	0x080032f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000178 	.word	0x20000178
 8000148:	080032f0 	.word	0x080032f0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	bf14      	ite	ne
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800044c:	e720      	b.n	8000290 <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_ul2d>:
 8000450:	ea50 0201 	orrs.w	r2, r0, r1
 8000454:	bf08      	it	eq
 8000456:	4770      	bxeq	lr
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	f04f 0500 	mov.w	r5, #0
 800045e:	e00a      	b.n	8000476 <__aeabi_l2d+0x16>

08000460 <__aeabi_l2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800046e:	d502      	bpl.n	8000476 <__aeabi_l2d+0x16>
 8000470:	4240      	negs	r0, r0
 8000472:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000476:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800047e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000482:	f43f aedc 	beq.w	800023e <__adddf3+0xe6>
 8000486:	f04f 0203 	mov.w	r2, #3
 800048a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800048e:	bf18      	it	ne
 8000490:	3203      	addne	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800049e:	f1c2 0320 	rsb	r3, r2, #32
 80004a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ae:	ea40 000e 	orr.w	r0, r0, lr
 80004b2:	fa21 f102 	lsr.w	r1, r1, r2
 80004b6:	4414      	add	r4, r2
 80004b8:	e6c1      	b.n	800023e <__adddf3+0xe6>
 80004ba:	bf00      	nop

080004bc <__aeabi_dmul>:
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ca:	bf1d      	ittte	ne
 80004cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d0:	ea94 0f0c 	teqne	r4, ip
 80004d4:	ea95 0f0c 	teqne	r5, ip
 80004d8:	f000 f8de 	bleq	8000698 <__aeabi_dmul+0x1dc>
 80004dc:	442c      	add	r4, r5
 80004de:	ea81 0603 	eor.w	r6, r1, r3
 80004e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004ee:	bf18      	it	ne
 80004f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80004fc:	d038      	beq.n	8000570 <__aeabi_dmul+0xb4>
 80004fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800050e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000512:	f04f 0600 	mov.w	r6, #0
 8000516:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051a:	f09c 0f00 	teq	ip, #0
 800051e:	bf18      	it	ne
 8000520:	f04e 0e01 	orrne.w	lr, lr, #1
 8000524:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000528:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800052c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000530:	d204      	bcs.n	800053c <__aeabi_dmul+0x80>
 8000532:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000536:	416d      	adcs	r5, r5
 8000538:	eb46 0606 	adc.w	r6, r6, r6
 800053c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000540:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000544:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000548:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800054c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000550:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000554:	bf88      	it	hi
 8000556:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055a:	d81e      	bhi.n	800059a <__aeabi_dmul+0xde>
 800055c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000574:	ea46 0101 	orr.w	r1, r6, r1
 8000578:	ea40 0002 	orr.w	r0, r0, r2
 800057c:	ea81 0103 	eor.w	r1, r1, r3
 8000580:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000584:	bfc2      	ittt	gt
 8000586:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800058e:	bd70      	popgt	{r4, r5, r6, pc}
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f04f 0e00 	mov.w	lr, #0
 8000598:	3c01      	subs	r4, #1
 800059a:	f300 80ab 	bgt.w	80006f4 <__aeabi_dmul+0x238>
 800059e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a2:	bfde      	ittt	le
 80005a4:	2000      	movle	r0, #0
 80005a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd70      	pople	{r4, r5, r6, pc}
 80005ac:	f1c4 0400 	rsb	r4, r4, #0
 80005b0:	3c20      	subs	r4, #32
 80005b2:	da35      	bge.n	8000620 <__aeabi_dmul+0x164>
 80005b4:	340c      	adds	r4, #12
 80005b6:	dc1b      	bgt.n	80005f0 <__aeabi_dmul+0x134>
 80005b8:	f104 0414 	add.w	r4, r4, #20
 80005bc:	f1c4 0520 	rsb	r5, r4, #32
 80005c0:	fa00 f305 	lsl.w	r3, r0, r5
 80005c4:	fa20 f004 	lsr.w	r0, r0, r4
 80005c8:	fa01 f205 	lsl.w	r2, r1, r5
 80005cc:	ea40 0002 	orr.w	r0, r0, r2
 80005d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005dc:	fa21 f604 	lsr.w	r6, r1, r4
 80005e0:	eb42 0106 	adc.w	r1, r2, r6
 80005e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005e8:	bf08      	it	eq
 80005ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005ee:	bd70      	pop	{r4, r5, r6, pc}
 80005f0:	f1c4 040c 	rsb	r4, r4, #12
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f304 	lsl.w	r3, r0, r4
 80005fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000600:	fa01 f204 	lsl.w	r2, r1, r4
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800060c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000610:	f141 0100 	adc.w	r1, r1, #0
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f205 	lsl.w	r2, r0, r5
 8000628:	ea4e 0e02 	orr.w	lr, lr, r2
 800062c:	fa20 f304 	lsr.w	r3, r0, r4
 8000630:	fa01 f205 	lsl.w	r2, r1, r5
 8000634:	ea43 0302 	orr.w	r3, r3, r2
 8000638:	fa21 f004 	lsr.w	r0, r1, r4
 800063c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000640:	fa21 f204 	lsr.w	r2, r1, r4
 8000644:	ea20 0002 	bic.w	r0, r0, r2
 8000648:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f094 0f00 	teq	r4, #0
 800065c:	d10f      	bne.n	800067e <__aeabi_dmul+0x1c2>
 800065e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000662:	0040      	lsls	r0, r0, #1
 8000664:	eb41 0101 	adc.w	r1, r1, r1
 8000668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800066c:	bf08      	it	eq
 800066e:	3c01      	subeq	r4, #1
 8000670:	d0f7      	beq.n	8000662 <__aeabi_dmul+0x1a6>
 8000672:	ea41 0106 	orr.w	r1, r1, r6
 8000676:	f095 0f00 	teq	r5, #0
 800067a:	bf18      	it	ne
 800067c:	4770      	bxne	lr
 800067e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000682:	0052      	lsls	r2, r2, #1
 8000684:	eb43 0303 	adc.w	r3, r3, r3
 8000688:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3d01      	subeq	r5, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1c6>
 8000692:	ea43 0306 	orr.w	r3, r3, r6
 8000696:	4770      	bx	lr
 8000698:	ea94 0f0c 	teq	r4, ip
 800069c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a0:	bf18      	it	ne
 80006a2:	ea95 0f0c 	teqne	r5, ip
 80006a6:	d00c      	beq.n	80006c2 <__aeabi_dmul+0x206>
 80006a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ac:	bf18      	it	ne
 80006ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b2:	d1d1      	bne.n	8000658 <__aeabi_dmul+0x19c>
 80006b4:	ea81 0103 	eor.w	r1, r1, r3
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	f04f 0000 	mov.w	r0, #0
 80006c0:	bd70      	pop	{r4, r5, r6, pc}
 80006c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c6:	bf06      	itte	eq
 80006c8:	4610      	moveq	r0, r2
 80006ca:	4619      	moveq	r1, r3
 80006cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d0:	d019      	beq.n	8000706 <__aeabi_dmul+0x24a>
 80006d2:	ea94 0f0c 	teq	r4, ip
 80006d6:	d102      	bne.n	80006de <__aeabi_dmul+0x222>
 80006d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006dc:	d113      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006de:	ea95 0f0c 	teq	r5, ip
 80006e2:	d105      	bne.n	80006f0 <__aeabi_dmul+0x234>
 80006e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006e8:	bf1c      	itt	ne
 80006ea:	4610      	movne	r0, r2
 80006ec:	4619      	movne	r1, r3
 80006ee:	d10a      	bne.n	8000706 <__aeabi_dmul+0x24a>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80006fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800070e:	bd70      	pop	{r4, r5, r6, pc}

08000710 <__aeabi_ddiv>:
 8000710:	b570      	push	{r4, r5, r6, lr}
 8000712:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000716:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800071e:	bf1d      	ittte	ne
 8000720:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000724:	ea94 0f0c 	teqne	r4, ip
 8000728:	ea95 0f0c 	teqne	r5, ip
 800072c:	f000 f8a7 	bleq	800087e <__aeabi_ddiv+0x16e>
 8000730:	eba4 0405 	sub.w	r4, r4, r5
 8000734:	ea81 0e03 	eor.w	lr, r1, r3
 8000738:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800073c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000740:	f000 8088 	beq.w	8000854 <__aeabi_ddiv+0x144>
 8000744:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000748:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800074c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000750:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000754:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000758:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800075c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000760:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000764:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000768:	429d      	cmp	r5, r3
 800076a:	bf08      	it	eq
 800076c:	4296      	cmpeq	r6, r2
 800076e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000772:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000776:	d202      	bcs.n	800077e <__aeabi_ddiv+0x6e>
 8000778:	085b      	lsrs	r3, r3, #1
 800077a:	ea4f 0232 	mov.w	r2, r2, rrx
 800077e:	1ab6      	subs	r6, r6, r2
 8000780:	eb65 0503 	sbc.w	r5, r5, r3
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800078e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000792:	ebb6 0e02 	subs.w	lr, r6, r2
 8000796:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079a:	bf22      	ittt	cs
 800079c:	1ab6      	subcs	r6, r6, r2
 800079e:	4675      	movcs	r5, lr
 80007a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b2:	bf22      	ittt	cs
 80007b4:	1ab6      	subcs	r6, r6, r2
 80007b6:	4675      	movcs	r5, lr
 80007b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f0:	d018      	beq.n	8000824 <__aeabi_ddiv+0x114>
 80007f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80007fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000802:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000806:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800080e:	d1c0      	bne.n	8000792 <__aeabi_ddiv+0x82>
 8000810:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000814:	d10b      	bne.n	800082e <__aeabi_ddiv+0x11e>
 8000816:	ea41 0100 	orr.w	r1, r1, r0
 800081a:	f04f 0000 	mov.w	r0, #0
 800081e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000822:	e7b6      	b.n	8000792 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf04      	itt	eq
 800082a:	4301      	orreq	r1, r0
 800082c:	2000      	moveq	r0, #0
 800082e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000832:	bf88      	it	hi
 8000834:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000838:	f63f aeaf 	bhi.w	800059a <__aeabi_dmul+0xde>
 800083c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000840:	bf04      	itt	eq
 8000842:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000846:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084a:	f150 0000 	adcs.w	r0, r0, #0
 800084e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000858:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800085c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000860:	bfc2      	ittt	gt
 8000862:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000866:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086a:	bd70      	popgt	{r4, r5, r6, pc}
 800086c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000870:	f04f 0e00 	mov.w	lr, #0
 8000874:	3c01      	subs	r4, #1
 8000876:	e690      	b.n	800059a <__aeabi_dmul+0xde>
 8000878:	ea45 0e06 	orr.w	lr, r5, r6
 800087c:	e68d      	b.n	800059a <__aeabi_dmul+0xde>
 800087e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000882:	ea94 0f0c 	teq	r4, ip
 8000886:	bf08      	it	eq
 8000888:	ea95 0f0c 	teqeq	r5, ip
 800088c:	f43f af3b 	beq.w	8000706 <__aeabi_dmul+0x24a>
 8000890:	ea94 0f0c 	teq	r4, ip
 8000894:	d10a      	bne.n	80008ac <__aeabi_ddiv+0x19c>
 8000896:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089a:	f47f af34 	bne.w	8000706 <__aeabi_dmul+0x24a>
 800089e:	ea95 0f0c 	teq	r5, ip
 80008a2:	f47f af25 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008a6:	4610      	mov	r0, r2
 80008a8:	4619      	mov	r1, r3
 80008aa:	e72c      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008ac:	ea95 0f0c 	teq	r5, ip
 80008b0:	d106      	bne.n	80008c0 <__aeabi_ddiv+0x1b0>
 80008b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b6:	f43f aefd 	beq.w	80006b4 <__aeabi_dmul+0x1f8>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e722      	b.n	8000706 <__aeabi_dmul+0x24a>
 80008c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c4:	bf18      	it	ne
 80008c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ca:	f47f aec5 	bne.w	8000658 <__aeabi_dmul+0x19c>
 80008ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d2:	f47f af0d 	bne.w	80006f0 <__aeabi_dmul+0x234>
 80008d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008da:	f47f aeeb 	bne.w	80006b4 <__aeabi_dmul+0x1f8>
 80008de:	e712      	b.n	8000706 <__aeabi_dmul+0x24a>

080008e0 <__aeabi_d2uiz>:
 80008e0:	004a      	lsls	r2, r1, #1
 80008e2:	d211      	bcs.n	8000908 <__aeabi_d2uiz+0x28>
 80008e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008e8:	d211      	bcs.n	800090e <__aeabi_d2uiz+0x2e>
 80008ea:	d50d      	bpl.n	8000908 <__aeabi_d2uiz+0x28>
 80008ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f4:	d40e      	bmi.n	8000914 <__aeabi_d2uiz+0x34>
 80008f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000902:	fa23 f002 	lsr.w	r0, r3, r2
 8000906:	4770      	bx	lr
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	4770      	bx	lr
 800090e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000912:	d102      	bne.n	800091a <__aeabi_d2uiz+0x3a>
 8000914:	f04f 30ff 	mov.w	r0, #4294967295
 8000918:	4770      	bx	lr
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	4770      	bx	lr

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <HAL_InitTick+0x3c>)
{
 8000924:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000926:	7818      	ldrb	r0, [r3, #0]
 8000928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800092c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000930:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <HAL_InitTick+0x40>)
 8000932:	6810      	ldr	r0, [r2, #0]
 8000934:	fbb0 f0f3 	udiv	r0, r0, r3
 8000938:	f000 fb82 	bl	8001040 <HAL_SYSTICK_Config>
 800093c:	4604      	mov	r4, r0
 800093e:	b958      	cbnz	r0, 8000958 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000940:	2d0f      	cmp	r5, #15
 8000942:	d809      	bhi.n	8000958 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000944:	4602      	mov	r2, r0
 8000946:	4629      	mov	r1, r5
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f000 fb38 	bl	8000fc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <HAL_InitTick+0x44>)
 8000952:	4620      	mov	r0, r4
 8000954:	601d      	str	r5, [r3, #0]
 8000956:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000958:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800095a:	bd38      	pop	{r3, r4, r5, pc}
 800095c:	20000000 	.word	0x20000000
 8000960:	2000010c 	.word	0x2000010c
 8000964:	20000004 	.word	0x20000004

08000968 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <HAL_Init+0x20>)
{
 800096a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	f043 0310 	orr.w	r3, r3, #16
 8000974:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000976:	f000 fb11 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff ffd0 	bl	8000920 <HAL_InitTick>
  HAL_MspInit();
 8000980:	f001 fe9e 	bl	80026c0 <HAL_MspInit>
}
 8000984:	2000      	movs	r0, #0
 8000986:	bd08      	pop	{r3, pc}
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800098c:	4a03      	ldr	r2, [pc, #12]	; (800099c <HAL_IncTick+0x10>)
 800098e:	4b04      	ldr	r3, [pc, #16]	; (80009a0 <HAL_IncTick+0x14>)
 8000990:	6811      	ldr	r1, [r2, #0]
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	440b      	add	r3, r1
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	200001a4 	.word	0x200001a4
 80009a0:	20000000 	.word	0x20000000

080009a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009a4:	4b01      	ldr	r3, [pc, #4]	; (80009ac <HAL_GetTick+0x8>)
 80009a6:	6818      	ldr	r0, [r3, #0]
}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200001a4 	.word	0x200001a4

080009b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b0:	b538      	push	{r3, r4, r5, lr}
 80009b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009b4:	f7ff fff6 	bl	80009a4 <HAL_GetTick>
 80009b8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ba:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80009bc:	bf1e      	ittt	ne
 80009be:	4b04      	ldrne	r3, [pc, #16]	; (80009d0 <HAL_Delay+0x20>)
 80009c0:	781b      	ldrbne	r3, [r3, #0]
 80009c2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c4:	f7ff ffee 	bl	80009a4 <HAL_GetTick>
 80009c8:	1b40      	subs	r0, r0, r5
 80009ca:	4284      	cmp	r4, r0
 80009cc:	d8fa      	bhi.n	80009c4 <HAL_Delay+0x14>
  {
  }
}
 80009ce:	bd38      	pop	{r3, r4, r5, pc}
 80009d0:	20000000 	.word	0x20000000

080009d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80009d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80009d6:	2600      	movs	r6, #0
{
 80009d8:	4604      	mov	r4, r0
 80009da:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80009dc:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80009de:	f7ff ffe1 	bl	80009a4 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80009e2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80009e4:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	05d2      	lsls	r2, r2, #23
 80009ea:	d508      	bpl.n	80009fe <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80009ec:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80009f0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009f4:	f043 0320 	orr.w	r3, r3, #32
 80009f8:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80009fa:	b003      	add	sp, #12
 80009fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	05d6      	lsls	r6, r2, #23
 8000a02:	d403      	bmi.n	8000a0c <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a06:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8000a0a:	d03b      	beq.n	8000a84 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <HAL_ADC_PollForConversion+0x124>)
 8000a0e:	2002      	movs	r0, #2
 8000a10:	681e      	ldr	r6, [r3, #0]
 8000a12:	f000 ffad 	bl	8001970 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	4a38      	ldr	r2, [pc, #224]	; (8000afc <HAL_ADC_PollForConversion+0x128>)
 8000a1a:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000a1c:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000a20:	4211      	tst	r1, r2
 8000a22:	4a37      	ldr	r2, [pc, #220]	; (8000b00 <HAL_ADC_PollForConversion+0x12c>)
 8000a24:	d14f      	bne.n	8000ac6 <HAL_ADC_PollForConversion+0xf2>
 8000a26:	68de      	ldr	r6, [r3, #12]
 8000a28:	4936      	ldr	r1, [pc, #216]	; (8000b04 <HAL_ADC_PollForConversion+0x130>)
 8000a2a:	420e      	tst	r6, r1
 8000a2c:	d14b      	bne.n	8000ac6 <HAL_ADC_PollForConversion+0xf2>
 8000a2e:	6919      	ldr	r1, [r3, #16]
 8000a30:	4211      	tst	r1, r2
 8000a32:	d159      	bne.n	8000ae8 <HAL_ADC_PollForConversion+0x114>
 8000a34:	68da      	ldr	r2, [r3, #12]
 8000a36:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <HAL_ADC_PollForConversion+0x134>)
 8000a38:	421a      	tst	r2, r3
 8000a3a:	bf14      	ite	ne
 8000a3c:	2329      	movne	r3, #41	; 0x29
 8000a3e:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000a40:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000a44:	9b01      	ldr	r3, [sp, #4]
 8000a46:	429e      	cmp	r6, r3
 8000a48:	d920      	bls.n	8000a8c <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 8000a4a:	1c6b      	adds	r3, r5, #1
 8000a4c:	d005      	beq.n	8000a5a <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000a4e:	b15d      	cbz	r5, 8000a68 <HAL_ADC_PollForConversion+0x94>
 8000a50:	f7ff ffa8 	bl	80009a4 <HAL_GetTick>
 8000a54:	1bc0      	subs	r0, r0, r7
 8000a56:	4285      	cmp	r5, r0
 8000a58:	d306      	bcc.n	8000a68 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 8000a5a:	9b01      	ldr	r3, [sp, #4]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	9301      	str	r3, [sp, #4]
 8000a60:	e7f0      	b.n	8000a44 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 8000a62:	1c68      	adds	r0, r5, #1
 8000a64:	d00f      	beq.n	8000a86 <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000a66:	b945      	cbnz	r5, 8000a7a <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 8000a6a:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8000a72:	2300      	movs	r3, #0
 8000a74:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 8000a78:	e7bf      	b.n	80009fa <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000a7a:	f7ff ff93 	bl	80009a4 <HAL_GetTick>
 8000a7e:	1bc0      	subs	r0, r0, r7
 8000a80:	4285      	cmp	r5, r0
 8000a82:	d3f1      	bcc.n	8000a68 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a84:	6822      	ldr	r2, [r4, #0]
 8000a86:	6813      	ldr	r3, [r2, #0]
 8000a88:	0799      	lsls	r1, r3, #30
 8000a8a:	d5ea      	bpl.n	8000a62 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000a8c:	f06f 0312 	mvn.w	r3, #18
 8000a90:	6822      	ldr	r2, [r4, #0]
 8000a92:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000a94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9a:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a9c:	6893      	ldr	r3, [r2, #8]
 8000a9e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000aa2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000aa6:	d125      	bne.n	8000af4 <HAL_ADC_PollForConversion+0x120>
 8000aa8:	68e3      	ldr	r3, [r4, #12]
 8000aaa:	bb1b      	cbnz	r3, 8000af4 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000aac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000aae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ab2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ab4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000ab6:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000aba:	d11b      	bne.n	8000af4 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000abc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ac4:	e799      	b.n	80009fa <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ac6:	6919      	ldr	r1, [r3, #16]
 8000ac8:	4211      	tst	r1, r2
 8000aca:	d103      	bne.n	8000ad4 <HAL_ADC_PollForConversion+0x100>
 8000acc:	68d9      	ldr	r1, [r3, #12]
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_ADC_PollForConversion+0x134>)
 8000ad0:	4211      	tst	r1, r2
 8000ad2:	d00b      	beq.n	8000aec <HAL_ADC_PollForConversion+0x118>
 8000ad4:	6919      	ldr	r1, [r3, #16]
 8000ad6:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <HAL_ADC_PollForConversion+0x138>)
 8000ad8:	4211      	tst	r1, r2
 8000ada:	d109      	bne.n	8000af0 <HAL_ADC_PollForConversion+0x11c>
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	4213      	tst	r3, r2
 8000ae0:	bf14      	ite	ne
 8000ae2:	23fc      	movne	r3, #252	; 0xfc
 8000ae4:	2354      	moveq	r3, #84	; 0x54
 8000ae6:	e7ab      	b.n	8000a40 <HAL_ADC_PollForConversion+0x6c>
 8000ae8:	2329      	movs	r3, #41	; 0x29
 8000aea:	e7a9      	b.n	8000a40 <HAL_ADC_PollForConversion+0x6c>
 8000aec:	2354      	movs	r3, #84	; 0x54
 8000aee:	e7a7      	b.n	8000a40 <HAL_ADC_PollForConversion+0x6c>
 8000af0:	23fc      	movs	r3, #252	; 0xfc
 8000af2:	e7a5      	b.n	8000a40 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 8000af4:	2000      	movs	r0, #0
 8000af6:	e780      	b.n	80009fa <HAL_ADC_PollForConversion+0x26>
 8000af8:	2000010c 	.word	0x2000010c
 8000afc:	24924924 	.word	0x24924924
 8000b00:	12492492 	.word	0x12492492
 8000b04:	00924924 	.word	0x00924924
 8000b08:	00492492 	.word	0x00492492
 8000b0c:	00249249 	.word	0x00249249

08000b10 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000b10:	6803      	ldr	r3, [r0, #0]
 8000b12:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000b14:	4770      	bx	lr
	...

08000b18 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000b18:	2300      	movs	r3, #0
{ 
 8000b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000b1c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b1e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d074      	beq.n	8000c10 <HAL_ADC_ConfigChannel+0xf8>
 8000b26:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b28:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000b2a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000b2e:	2d06      	cmp	r5, #6
 8000b30:	6802      	ldr	r2, [r0, #0]
 8000b32:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000b36:	680c      	ldr	r4, [r1, #0]
 8000b38:	d825      	bhi.n	8000b86 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b3a:	442b      	add	r3, r5
 8000b3c:	251f      	movs	r5, #31
 8000b3e:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000b40:	3b05      	subs	r3, #5
 8000b42:	409d      	lsls	r5, r3
 8000b44:	ea26 0505 	bic.w	r5, r6, r5
 8000b48:	fa04 f303 	lsl.w	r3, r4, r3
 8000b4c:	432b      	orrs	r3, r5
 8000b4e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b50:	2c09      	cmp	r4, #9
 8000b52:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000b56:	688d      	ldr	r5, [r1, #8]
 8000b58:	d92f      	bls.n	8000bba <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b5a:	2607      	movs	r6, #7
 8000b5c:	4423      	add	r3, r4
 8000b5e:	68d1      	ldr	r1, [r2, #12]
 8000b60:	3b1e      	subs	r3, #30
 8000b62:	409e      	lsls	r6, r3
 8000b64:	ea21 0106 	bic.w	r1, r1, r6
 8000b68:	fa05 f303 	lsl.w	r3, r5, r3
 8000b6c:	430b      	orrs	r3, r1
 8000b6e:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b70:	f1a4 0310 	sub.w	r3, r4, #16
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d92b      	bls.n	8000bd0 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	b002      	add	sp, #8
 8000b84:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000b86:	2d0c      	cmp	r5, #12
 8000b88:	d80b      	bhi.n	8000ba2 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b8a:	442b      	add	r3, r5
 8000b8c:	251f      	movs	r5, #31
 8000b8e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000b90:	3b23      	subs	r3, #35	; 0x23
 8000b92:	409d      	lsls	r5, r3
 8000b94:	ea26 0505 	bic.w	r5, r6, r5
 8000b98:	fa04 f303 	lsl.w	r3, r4, r3
 8000b9c:	432b      	orrs	r3, r5
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	e7d6      	b.n	8000b50 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ba2:	442b      	add	r3, r5
 8000ba4:	251f      	movs	r5, #31
 8000ba6:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000ba8:	3b41      	subs	r3, #65	; 0x41
 8000baa:	409d      	lsls	r5, r3
 8000bac:	ea26 0505 	bic.w	r5, r6, r5
 8000bb0:	fa04 f303 	lsl.w	r3, r4, r3
 8000bb4:	432b      	orrs	r3, r5
 8000bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bb8:	e7ca      	b.n	8000b50 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000bba:	2607      	movs	r6, #7
 8000bbc:	6911      	ldr	r1, [r2, #16]
 8000bbe:	4423      	add	r3, r4
 8000bc0:	409e      	lsls	r6, r3
 8000bc2:	ea21 0106 	bic.w	r1, r1, r6
 8000bc6:	fa05 f303 	lsl.w	r3, r5, r3
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	6113      	str	r3, [r2, #16]
 8000bce:	e7cf      	b.n	8000b70 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_ADC_ConfigChannel+0xfc>)
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d116      	bne.n	8000c04 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bd6:	6893      	ldr	r3, [r2, #8]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	d4cd      	bmi.n	8000b78 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000bdc:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bde:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000be0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000be4:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000be6:	d1c7      	bne.n	8000b78 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_ADC_ConfigChannel+0x100>)
 8000bea:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <HAL_ADC_ConfigChannel+0x104>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	fbb3 f2f2 	udiv	r2, r3, r2
 8000bf2:	230a      	movs	r3, #10
 8000bf4:	4353      	muls	r3, r2
            wait_loop_index--;
 8000bf6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000bf8:	9b01      	ldr	r3, [sp, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0bc      	beq.n	8000b78 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000bfe:	9b01      	ldr	r3, [sp, #4]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	e7f8      	b.n	8000bf6 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c04:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c06:	f043 0320 	orr.w	r3, r3, #32
 8000c0a:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e7b4      	b.n	8000b7a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000c10:	2302      	movs	r3, #2
 8000c12:	e7b5      	b.n	8000b80 <HAL_ADC_ConfigChannel+0x68>
 8000c14:	40012400 	.word	0x40012400
 8000c18:	2000010c 	.word	0x2000010c
 8000c1c:	000f4240 	.word	0x000f4240

08000c20 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000c20:	2300      	movs	r3, #0
{
 8000c22:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000c24:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c26:	6803      	ldr	r3, [r0, #0]
{
 8000c28:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	07d2      	lsls	r2, r2, #31
 8000c2e:	d502      	bpl.n	8000c36 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000c30:	2000      	movs	r0, #0
}
 8000c32:	b002      	add	sp, #8
 8000c34:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	f042 0201 	orr.w	r2, r2, #1
 8000c3c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <ADC_Enable+0x68>)
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <ADC_Enable+0x6c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000c48:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000c4a:	9b01      	ldr	r3, [sp, #4]
 8000c4c:	b9c3      	cbnz	r3, 8000c80 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000c4e:	f7ff fea9 	bl	80009a4 <HAL_GetTick>
 8000c52:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000c54:	6823      	ldr	r3, [r4, #0]
 8000c56:	689d      	ldr	r5, [r3, #8]
 8000c58:	f015 0501 	ands.w	r5, r5, #1
 8000c5c:	d1e8      	bne.n	8000c30 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c5e:	f7ff fea1 	bl	80009a4 <HAL_GetTick>
 8000c62:	1b80      	subs	r0, r0, r6
 8000c64:	2802      	cmp	r0, #2
 8000c66:	d9f5      	bls.n	8000c54 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000c6a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c6e:	f043 0310 	orr.w	r3, r3, #16
 8000c72:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000c76:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c7e:	e7d8      	b.n	8000c32 <ADC_Enable+0x12>
      wait_loop_index--;
 8000c80:	9b01      	ldr	r3, [sp, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	e7e0      	b.n	8000c48 <ADC_Enable+0x28>
 8000c86:	bf00      	nop
 8000c88:	2000010c 	.word	0x2000010c
 8000c8c:	000f4240 	.word	0x000f4240

08000c90 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000c90:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000c94:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000c96:	2b01      	cmp	r3, #1
{
 8000c98:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000c9a:	d054      	beq.n	8000d46 <HAL_ADC_Start+0xb6>
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000ca2:	f7ff ffbd 	bl	8000c20 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d149      	bne.n	8000d3e <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8000caa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cac:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8000cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cb2:	f023 0301 	bic.w	r3, r3, #1
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cba:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cbc:	6823      	ldr	r3, [r4, #0]
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d104      	bne.n	8000ccc <HAL_ADC_Start+0x3c>
 8000cc2:	4923      	ldr	r1, [pc, #140]	; (8000d50 <HAL_ADC_Start+0xc0>)
 8000cc4:	684a      	ldr	r2, [r1, #4]
 8000cc6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000cca:	d12e      	bne.n	8000d2a <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ccc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000cce:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000cd2:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cd4:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cd6:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cd8:	bf41      	itttt	mi
 8000cda:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000cdc:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000ce0:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000ce4:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ce6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cec:	bf1c      	itt	ne
 8000cee:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000cf0:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cfc:	f06f 0202 	mvn.w	r2, #2
 8000d00:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000d08:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000d0c:	d113      	bne.n	8000d36 <HAL_ADC_Start+0xa6>
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <HAL_ADC_Start+0xbc>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d105      	bne.n	8000d20 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d14:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000d18:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d1a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000d1e:	d10a      	bne.n	8000d36 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d2c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d30:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d32:	684a      	ldr	r2, [r1, #4]
 8000d34:	e7cf      	b.n	8000cd6 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d3c:	e7f3      	b.n	8000d26 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000d44:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000d46:	2002      	movs	r0, #2
}
 8000d48:	bd10      	pop	{r4, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40012800 	.word	0x40012800
 8000d50:	40012400 	.word	0x40012400

08000d54 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d54:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d56:	6803      	ldr	r3, [r0, #0]
{
 8000d58:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	07d2      	lsls	r2, r2, #31
 8000d5e:	d401      	bmi.n	8000d64 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d60:	2000      	movs	r0, #0
 8000d62:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	f022 0201 	bic.w	r2, r2, #1
 8000d6a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000d6c:	f7ff fe1a 	bl	80009a4 <HAL_GetTick>
 8000d70:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	07db      	lsls	r3, r3, #31
 8000d78:	d5f2      	bpl.n	8000d60 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d7a:	f7ff fe13 	bl	80009a4 <HAL_GetTick>
 8000d7e:	1b40      	subs	r0, r0, r5
 8000d80:	2802      	cmp	r0, #2
 8000d82:	d9f6      	bls.n	8000d72 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d86:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d88:	f043 0310 	orr.w	r3, r3, #16
 8000d8c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d96:	bd38      	pop	{r3, r4, r5, pc}

08000d98 <HAL_ADC_Init>:
{
 8000d98:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	d071      	beq.n	8000e84 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000da0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000da2:	b923      	cbnz	r3, 8000dae <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000da4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000da6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000daa:	f001 fccf 	bl	800274c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000dae:	4620      	mov	r0, r4
 8000db0:	f7ff ffd0 	bl	8000d54 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000db4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000db6:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000dba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dbc:	d164      	bne.n	8000e88 <HAL_ADC_Init+0xf0>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d162      	bne.n	8000e88 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000dc2:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000dc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000dc8:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000dca:	f023 0302 	bic.w	r3, r3, #2
 8000dce:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000dd2:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dd4:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000dd6:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000dd8:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dda:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000dde:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000de2:	d038      	beq.n	8000e56 <HAL_ADC_Init+0xbe>
 8000de4:	2901      	cmp	r1, #1
 8000de6:	bf14      	ite	ne
 8000de8:	4606      	movne	r6, r0
 8000dea:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dee:	6965      	ldr	r5, [r4, #20]
 8000df0:	2d01      	cmp	r5, #1
 8000df2:	d107      	bne.n	8000e04 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d130      	bne.n	8000e5a <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000df8:	69a3      	ldr	r3, [r4, #24]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000e00:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000e04:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e06:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000e0a:	685d      	ldr	r5, [r3, #4]
 8000e0c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000e10:	ea45 0506 	orr.w	r5, r5, r6
 8000e14:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000e16:	689e      	ldr	r6, [r3, #8]
 8000e18:	4d1d      	ldr	r5, [pc, #116]	; (8000e90 <HAL_ADC_Init+0xf8>)
 8000e1a:	ea05 0506 	and.w	r5, r5, r6
 8000e1e:	ea45 0502 	orr.w	r5, r5, r2
 8000e22:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e24:	d001      	beq.n	8000e2a <HAL_ADC_Init+0x92>
 8000e26:	2901      	cmp	r1, #1
 8000e28:	d120      	bne.n	8000e6c <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e2a:	6921      	ldr	r1, [r4, #16]
 8000e2c:	3901      	subs	r1, #1
 8000e2e:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000e30:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000e32:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000e36:	4329      	orrs	r1, r5
 8000e38:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e3a:	6899      	ldr	r1, [r3, #8]
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_ADC_Init+0xfc>)
 8000e3e:	400b      	ands	r3, r1
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d115      	bne.n	8000e70 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000e44:	2300      	movs	r3, #0
 8000e46:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000e48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e4a:	f023 0303 	bic.w	r3, r3, #3
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e56:	460e      	mov	r6, r1
 8000e58:	e7c9      	b.n	8000dee <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e5c:	f043 0320 	orr.w	r3, r3, #32
 8000e60:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e6a:	e7cb      	b.n	8000e04 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e7df      	b.n	8000e30 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000e70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e72:	f023 0312 	bic.w	r3, r3, #18
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000e84:	2001      	movs	r0, #1
}
 8000e86:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e8e:	e7f9      	b.n	8000e84 <HAL_ADC_Init+0xec>
 8000e90:	ffe1f7fd 	.word	0xffe1f7fd
 8000e94:	ff1f0efe 	.word	0xff1f0efe

08000e98 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000e98:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000e9c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000e9e:	2b01      	cmp	r3, #1
{
 8000ea0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000ea2:	d011      	beq.n	8000ec8 <HAL_ADC_Stop+0x30>
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eaa:	f7ff ff53 	bl	8000d54 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8000eae:	b938      	cbnz	r0, 8000ec0 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8000eb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000eb2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eb6:	f023 0301 	bic.w	r3, r3, #1
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return tmp_hal_status;
 8000ec6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000ec8:	2002      	movs	r0, #2
}
 8000eca:	bd10      	pop	{r4, pc}

08000ecc <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000ecc:	2300      	movs	r3, #0
{
 8000ece:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000ed0:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000ed6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d05a      	beq.n	8000f92 <HAL_ADCEx_Calibration_Start+0xc6>
 8000edc:	2301      	movs	r3, #1
 8000ede:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ee2:	f7ff ff37 	bl	8000d54 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000ee6:	4605      	mov	r5, r0
 8000ee8:	2800      	cmp	r0, #0
 8000eea:	d132      	bne.n	8000f52 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000eee:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 8000ef0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ef4:	f023 0302 	bic.w	r3, r3, #2
 8000ef8:	f043 0302 	orr.w	r3, r3, #2
 8000efc:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <HAL_ADCEx_Calibration_Start+0xcc>)
 8000f00:	681e      	ldr	r6, [r3, #0]
 8000f02:	f000 fd35 	bl	8001970 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f06:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000f0a:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8000f0c:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 8000f0e:	9b01      	ldr	r3, [sp, #4]
 8000f10:	bb1b      	cbnz	r3, 8000f5a <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000f12:	4620      	mov	r0, r4
 8000f14:	f7ff fe84 	bl	8000c20 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000f18:	6822      	ldr	r2, [r4, #0]
 8000f1a:	6893      	ldr	r3, [r2, #8]
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8000f22:	f7ff fd3f 	bl	80009a4 <HAL_GetTick>
 8000f26:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	689a      	ldr	r2, [r3, #8]
 8000f2c:	0712      	lsls	r2, r2, #28
 8000f2e:	d418      	bmi.n	8000f62 <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	f042 0204 	orr.w	r2, r2, #4
 8000f36:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000f38:	f7ff fd34 	bl	80009a4 <HAL_GetTick>
 8000f3c:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	075b      	lsls	r3, r3, #29
 8000f44:	d41f      	bmi.n	8000f86 <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f48:	f023 0303 	bic.w	r3, r3, #3
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f52:	2300      	movs	r3, #0
 8000f54:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f58:	e012      	b.n	8000f80 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 8000f5a:	9b01      	ldr	r3, [sp, #4]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	e7d5      	b.n	8000f0e <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000f62:	f7ff fd1f 	bl	80009a4 <HAL_GetTick>
 8000f66:	1b80      	subs	r0, r0, r6
 8000f68:	280a      	cmp	r0, #10
 8000f6a:	d9dd      	bls.n	8000f28 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8000f6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 8000f6e:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000f70:	f023 0312 	bic.w	r3, r3, #18
 8000f74:	f043 0310 	orr.w	r3, r3, #16
 8000f78:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8000f80:	4628      	mov	r0, r5
 8000f82:	b002      	add	sp, #8
 8000f84:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000f86:	f7ff fd0d 	bl	80009a4 <HAL_GetTick>
 8000f8a:	1b80      	subs	r0, r0, r6
 8000f8c:	280a      	cmp	r0, #10
 8000f8e:	d9d6      	bls.n	8000f3e <HAL_ADCEx_Calibration_Start+0x72>
 8000f90:	e7ec      	b.n	8000f6c <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 8000f92:	2502      	movs	r5, #2
 8000f94:	e7f4      	b.n	8000f80 <HAL_ADCEx_Calibration_Start+0xb4>
 8000f96:	bf00      	nop
 8000f98:	2000010c 	.word	0x2000010c

08000f9c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f9e:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fa2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000faa:	041b      	lsls	r3, r3, #16
 8000fac:	0c1b      	lsrs	r3, r3, #16
 8000fae:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000fb6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fb8:	60d3      	str	r3, [r2, #12]
 8000fba:	4770      	bx	lr
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc2:	b530      	push	{r4, r5, lr}
 8000fc4:	68dc      	ldr	r4, [r3, #12]
 8000fc6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fca:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	bf28      	it	cs
 8000fd4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fdc:	bf98      	it	ls
 8000fde:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	fa05 f303 	lsl.w	r3, r5, r3
 8000fe4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe8:	bf88      	it	hi
 8000fea:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4019      	ands	r1, r3
 8000fee:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	fa05 f404 	lsl.w	r4, r5, r4
 8000ff4:	3c01      	subs	r4, #1
 8000ff6:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ff8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffa:	ea42 0201 	orr.w	r2, r2, r1
 8000ffe:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	bfaf      	iteee	ge
 8001004:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	4b06      	ldrlt	r3, [pc, #24]	; (8001024 <HAL_NVIC_SetPriority+0x64>)
 800100a:	f000 000f 	andlt.w	r0, r0, #15
 800100e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001010:	bfa5      	ittet	ge
 8001012:	b2d2      	uxtbge	r2, r2
 8001014:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001018:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800101e:	bd30      	pop	{r4, r5, pc}
 8001020:	e000ed00 	.word	0xe000ed00
 8001024:	e000ed14 	.word	0xe000ed14

08001028 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001028:	2301      	movs	r3, #1
 800102a:	0942      	lsrs	r2, r0, #5
 800102c:	f000 001f 	and.w	r0, r0, #31
 8001030:	fa03 f000 	lsl.w	r0, r3, r0
 8001034:	4b01      	ldr	r3, [pc, #4]	; (800103c <HAL_NVIC_EnableIRQ+0x14>)
 8001036:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100

08001040 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	3801      	subs	r0, #1
 8001042:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001046:	d20a      	bcs.n	800105e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001048:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800105e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e010 	.word	0xe000e010
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800106e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	bf0c      	ite	eq
 8001074:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001078:	f022 0204 	bicne.w	r2, r2, #4
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	4770      	bx	lr
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001084:	4770      	bx	lr

08001086 <HAL_SYSTICK_IRQHandler>:
{
 8001086:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001088:	f7ff fffc 	bl	8001084 <HAL_SYSTICK_Callback>
 800108c:	bd08      	pop	{r3, pc}
	...

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001094:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001096:	4616      	mov	r6, r2
 8001098:	4b65      	ldr	r3, [pc, #404]	; (8001230 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800109a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001240 <HAL_GPIO_Init+0x1b0>
 800109e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001244 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80010a2:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a6:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80010a8:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ac:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80010b0:	45a0      	cmp	r8, r4
 80010b2:	d17f      	bne.n	80011b4 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80010b4:	684d      	ldr	r5, [r1, #4]
 80010b6:	2d12      	cmp	r5, #18
 80010b8:	f000 80af 	beq.w	800121a <HAL_GPIO_Init+0x18a>
 80010bc:	f200 8088 	bhi.w	80011d0 <HAL_GPIO_Init+0x140>
 80010c0:	2d02      	cmp	r5, #2
 80010c2:	f000 80a7 	beq.w	8001214 <HAL_GPIO_Init+0x184>
 80010c6:	d87c      	bhi.n	80011c2 <HAL_GPIO_Init+0x132>
 80010c8:	2d00      	cmp	r5, #0
 80010ca:	f000 808e 	beq.w	80011ea <HAL_GPIO_Init+0x15a>
 80010ce:	2d01      	cmp	r5, #1
 80010d0:	f000 809e 	beq.w	8001210 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010d8:	2cff      	cmp	r4, #255	; 0xff
 80010da:	bf93      	iteet	ls
 80010dc:	4682      	movls	sl, r0
 80010de:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80010e2:	3d08      	subhi	r5, #8
 80010e4:	f8d0 b000 	ldrls.w	fp, [r0]
 80010e8:	bf92      	itee	ls
 80010ea:	00b5      	lslls	r5, r6, #2
 80010ec:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80010f0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010f2:	fa09 f805 	lsl.w	r8, r9, r5
 80010f6:	ea2b 0808 	bic.w	r8, fp, r8
 80010fa:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010fe:	bf88      	it	hi
 8001100:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001104:	ea48 0505 	orr.w	r5, r8, r5
 8001108:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001110:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001114:	d04e      	beq.n	80011b4 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001116:	4d47      	ldr	r5, [pc, #284]	; (8001234 <HAL_GPIO_Init+0x1a4>)
 8001118:	4f46      	ldr	r7, [pc, #280]	; (8001234 <HAL_GPIO_Init+0x1a4>)
 800111a:	69ad      	ldr	r5, [r5, #24]
 800111c:	f026 0803 	bic.w	r8, r6, #3
 8001120:	f045 0501 	orr.w	r5, r5, #1
 8001124:	61bd      	str	r5, [r7, #24]
 8001126:	69bd      	ldr	r5, [r7, #24]
 8001128:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 800112c:	f005 0501 	and.w	r5, r5, #1
 8001130:	9501      	str	r5, [sp, #4]
 8001132:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001136:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800113a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800113c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001140:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001144:	fa09 f90b 	lsl.w	r9, r9, fp
 8001148:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114c:	4d3a      	ldr	r5, [pc, #232]	; (8001238 <HAL_GPIO_Init+0x1a8>)
 800114e:	42a8      	cmp	r0, r5
 8001150:	d068      	beq.n	8001224 <HAL_GPIO_Init+0x194>
 8001152:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001156:	42a8      	cmp	r0, r5
 8001158:	d066      	beq.n	8001228 <HAL_GPIO_Init+0x198>
 800115a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800115e:	42a8      	cmp	r0, r5
 8001160:	d064      	beq.n	800122c <HAL_GPIO_Init+0x19c>
 8001162:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001166:	42a8      	cmp	r0, r5
 8001168:	bf0c      	ite	eq
 800116a:	2503      	moveq	r5, #3
 800116c:	2504      	movne	r5, #4
 800116e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001172:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001176:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800117a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800117c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001180:	bf14      	ite	ne
 8001182:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001184:	43a5      	biceq	r5, r4
 8001186:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001188:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800118e:	bf14      	ite	ne
 8001190:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001192:	43a5      	biceq	r5, r4
 8001194:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001196:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001198:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800119c:	bf14      	ite	ne
 800119e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011a0:	43a5      	biceq	r5, r4
 80011a2:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011a4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80011aa:	bf14      	ite	ne
 80011ac:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ae:	ea25 0404 	biceq.w	r4, r5, r4
 80011b2:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011b4:	3601      	adds	r6, #1
 80011b6:	2e10      	cmp	r6, #16
 80011b8:	f47f af73 	bne.w	80010a2 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80011bc:	b003      	add	sp, #12
 80011be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80011c2:	2d03      	cmp	r5, #3
 80011c4:	d022      	beq.n	800120c <HAL_GPIO_Init+0x17c>
 80011c6:	2d11      	cmp	r5, #17
 80011c8:	d184      	bne.n	80010d4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011ca:	68ca      	ldr	r2, [r1, #12]
 80011cc:	3204      	adds	r2, #4
          break;
 80011ce:	e781      	b.n	80010d4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80011d0:	4f1a      	ldr	r7, [pc, #104]	; (800123c <HAL_GPIO_Init+0x1ac>)
 80011d2:	42bd      	cmp	r5, r7
 80011d4:	d009      	beq.n	80011ea <HAL_GPIO_Init+0x15a>
 80011d6:	d812      	bhi.n	80011fe <HAL_GPIO_Init+0x16e>
 80011d8:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001248 <HAL_GPIO_Init+0x1b8>
 80011dc:	454d      	cmp	r5, r9
 80011de:	d004      	beq.n	80011ea <HAL_GPIO_Init+0x15a>
 80011e0:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80011e4:	454d      	cmp	r5, r9
 80011e6:	f47f af75 	bne.w	80010d4 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ea:	688a      	ldr	r2, [r1, #8]
 80011ec:	b1c2      	cbz	r2, 8001220 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011ee:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80011f0:	bf0c      	ite	eq
 80011f2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80011f6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011fa:	2208      	movs	r2, #8
 80011fc:	e76a      	b.n	80010d4 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80011fe:	4575      	cmp	r5, lr
 8001200:	d0f3      	beq.n	80011ea <HAL_GPIO_Init+0x15a>
 8001202:	4565      	cmp	r5, ip
 8001204:	d0f1      	beq.n	80011ea <HAL_GPIO_Init+0x15a>
 8001206:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800124c <HAL_GPIO_Init+0x1bc>
 800120a:	e7eb      	b.n	80011e4 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800120c:	2200      	movs	r2, #0
 800120e:	e761      	b.n	80010d4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001210:	68ca      	ldr	r2, [r1, #12]
          break;
 8001212:	e75f      	b.n	80010d4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001214:	68ca      	ldr	r2, [r1, #12]
 8001216:	3208      	adds	r2, #8
          break;
 8001218:	e75c      	b.n	80010d4 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800121a:	68ca      	ldr	r2, [r1, #12]
 800121c:	320c      	adds	r2, #12
          break;
 800121e:	e759      	b.n	80010d4 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001220:	2204      	movs	r2, #4
 8001222:	e757      	b.n	80010d4 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001224:	2500      	movs	r5, #0
 8001226:	e7a2      	b.n	800116e <HAL_GPIO_Init+0xde>
 8001228:	2501      	movs	r5, #1
 800122a:	e7a0      	b.n	800116e <HAL_GPIO_Init+0xde>
 800122c:	2502      	movs	r5, #2
 800122e:	e79e      	b.n	800116e <HAL_GPIO_Init+0xde>
 8001230:	40010400 	.word	0x40010400
 8001234:	40021000 	.word	0x40021000
 8001238:	40010800 	.word	0x40010800
 800123c:	10210000 	.word	0x10210000
 8001240:	10310000 	.word	0x10310000
 8001244:	10320000 	.word	0x10320000
 8001248:	10110000 	.word	0x10110000
 800124c:	10220000 	.word	0x10220000

08001250 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001250:	b10a      	cbz	r2, 8001256 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001252:	6101      	str	r1, [r0, #16]
 8001254:	4770      	bx	lr
 8001256:	0409      	lsls	r1, r1, #16
 8001258:	e7fb      	b.n	8001252 <HAL_GPIO_WritePin+0x2>
	...

0800125c <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800125c:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800125e:	4604      	mov	r4, r0
 8001260:	b908      	cbnz	r0, 8001266 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8001262:	2001      	movs	r0, #1
 8001264:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001266:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800126a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800126e:	b91b      	cbnz	r3, 8001278 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001270:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001274:	f001 fa8a 	bl	800278c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001278:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800127a:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800127c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001280:	6813      	ldr	r3, [r2, #0]
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001288:	f000 fada 	bl	8001840 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800128c:	6863      	ldr	r3, [r4, #4]
 800128e:	4a2f      	ldr	r2, [pc, #188]	; (800134c <HAL_I2C_Init+0xf0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d830      	bhi.n	80012f6 <HAL_I2C_Init+0x9a>
 8001294:	4a2e      	ldr	r2, [pc, #184]	; (8001350 <HAL_I2C_Init+0xf4>)
 8001296:	4290      	cmp	r0, r2
 8001298:	d9e3      	bls.n	8001262 <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800129a:	4a2e      	ldr	r2, [pc, #184]	; (8001354 <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 800129c:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800129e:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 80012a2:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80012a4:	3201      	adds	r2, #1
 80012a6:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80012a8:	4a28      	ldr	r2, [pc, #160]	; (800134c <HAL_I2C_Init+0xf0>)
 80012aa:	3801      	subs	r0, #1
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d832      	bhi.n	8001316 <HAL_I2C_Init+0xba>
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80012b6:	1c43      	adds	r3, r0, #1
 80012b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012bc:	2b04      	cmp	r3, #4
 80012be:	bf38      	it	cc
 80012c0:	2304      	movcc	r3, #4
 80012c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012c4:	6a22      	ldr	r2, [r4, #32]
 80012c6:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012c8:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012ca:	4313      	orrs	r3, r2
 80012cc:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80012ce:	68e2      	ldr	r2, [r4, #12]
 80012d0:	6923      	ldr	r3, [r4, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80012d6:	69a2      	ldr	r2, [r4, #24]
 80012d8:	6963      	ldr	r3, [r4, #20]
 80012da:	4313      	orrs	r3, r2
 80012dc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80012de:	680b      	ldr	r3, [r1, #0]
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80012e6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012ee:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80012f4:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012f6:	4a18      	ldr	r2, [pc, #96]	; (8001358 <HAL_I2C_Init+0xfc>)
 80012f8:	4290      	cmp	r0, r2
 80012fa:	d9b2      	bls.n	8001262 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80012fc:	4d15      	ldr	r5, [pc, #84]	; (8001354 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80012fe:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001302:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001306:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001308:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 800130a:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800130c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001310:	fbb2 f2f5 	udiv	r2, r2, r5
 8001314:	e7c6      	b.n	80012a4 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001316:	68a2      	ldr	r2, [r4, #8]
 8001318:	b952      	cbnz	r2, 8001330 <HAL_I2C_Init+0xd4>
 800131a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800131e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001322:	1c43      	adds	r3, r0, #1
 8001324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001328:	b16b      	cbz	r3, 8001346 <HAL_I2C_Init+0xea>
 800132a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800132e:	e7c8      	b.n	80012c2 <HAL_I2C_Init+0x66>
 8001330:	2219      	movs	r2, #25
 8001332:	4353      	muls	r3, r2
 8001334:	fbb0 f0f3 	udiv	r0, r0, r3
 8001338:	1c43      	adds	r3, r0, #1
 800133a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800133e:	b113      	cbz	r3, 8001346 <HAL_I2C_Init+0xea>
 8001340:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001344:	e7bd      	b.n	80012c2 <HAL_I2C_Init+0x66>
 8001346:	2301      	movs	r3, #1
 8001348:	e7bb      	b.n	80012c2 <HAL_I2C_Init+0x66>
 800134a:	bf00      	nop
 800134c:	000186a0 	.word	0x000186a0
 8001350:	001e847f 	.word	0x001e847f
 8001354:	000f4240 	.word	0x000f4240
 8001358:	003d08ff 	.word	0x003d08ff

0800135c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800135c:	6803      	ldr	r3, [r0, #0]
{
 800135e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001362:	07db      	lsls	r3, r3, #31
{
 8001364:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	d410      	bmi.n	800138a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001368:	682b      	ldr	r3, [r5, #0]
 800136a:	079f      	lsls	r7, r3, #30
 800136c:	d45e      	bmi.n	800142c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136e:	682b      	ldr	r3, [r5, #0]
 8001370:	0719      	lsls	r1, r3, #28
 8001372:	f100 8095 	bmi.w	80014a0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	075a      	lsls	r2, r3, #29
 800137a:	f100 80bf 	bmi.w	80014fc <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800137e:	69ea      	ldr	r2, [r5, #28]
 8001380:	2a00      	cmp	r2, #0
 8001382:	f040 812d 	bne.w	80015e0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001386:	2000      	movs	r0, #0
 8001388:	e014      	b.n	80013b4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800138a:	4c90      	ldr	r4, [pc, #576]	; (80015cc <HAL_RCC_OscConfig+0x270>)
 800138c:	6863      	ldr	r3, [r4, #4]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b04      	cmp	r3, #4
 8001394:	d007      	beq.n	80013a6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001396:	6863      	ldr	r3, [r4, #4]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b08      	cmp	r3, #8
 800139e:	d10c      	bne.n	80013ba <HAL_RCC_OscConfig+0x5e>
 80013a0:	6863      	ldr	r3, [r4, #4]
 80013a2:	03de      	lsls	r6, r3, #15
 80013a4:	d509      	bpl.n	80013ba <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a6:	6823      	ldr	r3, [r4, #0]
 80013a8:	039c      	lsls	r4, r3, #14
 80013aa:	d5dd      	bpl.n	8001368 <HAL_RCC_OscConfig+0xc>
 80013ac:	686b      	ldr	r3, [r5, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1da      	bne.n	8001368 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80013b2:	2001      	movs	r0, #1
}
 80013b4:	b002      	add	sp, #8
 80013b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ba:	686b      	ldr	r3, [r5, #4]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d110      	bne.n	80013e4 <HAL_RCC_OscConfig+0x88>
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013ca:	f7ff faeb 	bl	80009a4 <HAL_GetTick>
 80013ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d0:	6823      	ldr	r3, [r4, #0]
 80013d2:	0398      	lsls	r0, r3, #14
 80013d4:	d4c8      	bmi.n	8001368 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d6:	f7ff fae5 	bl	80009a4 <HAL_GetTick>
 80013da:	1b80      	subs	r0, r0, r6
 80013dc:	2864      	cmp	r0, #100	; 0x64
 80013de:	d9f7      	bls.n	80013d0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80013e0:	2003      	movs	r0, #3
 80013e2:	e7e7      	b.n	80013b4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e4:	b99b      	cbnz	r3, 800140e <HAL_RCC_OscConfig+0xb2>
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ec:	6023      	str	r3, [r4, #0]
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013f6:	f7ff fad5 	bl	80009a4 <HAL_GetTick>
 80013fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fc:	6823      	ldr	r3, [r4, #0]
 80013fe:	0399      	lsls	r1, r3, #14
 8001400:	d5b2      	bpl.n	8001368 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001402:	f7ff facf 	bl	80009a4 <HAL_GetTick>
 8001406:	1b80      	subs	r0, r0, r6
 8001408:	2864      	cmp	r0, #100	; 0x64
 800140a:	d9f7      	bls.n	80013fc <HAL_RCC_OscConfig+0xa0>
 800140c:	e7e8      	b.n	80013e0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	d103      	bne.n	800141e <HAL_RCC_OscConfig+0xc2>
 8001416:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141a:	6023      	str	r3, [r4, #0]
 800141c:	e7d1      	b.n	80013c2 <HAL_RCC_OscConfig+0x66>
 800141e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001422:	6023      	str	r3, [r4, #0]
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	e7cd      	b.n	80013c8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800142c:	4c67      	ldr	r4, [pc, #412]	; (80015cc <HAL_RCC_OscConfig+0x270>)
 800142e:	6863      	ldr	r3, [r4, #4]
 8001430:	f013 0f0c 	tst.w	r3, #12
 8001434:	d007      	beq.n	8001446 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001436:	6863      	ldr	r3, [r4, #4]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	2b08      	cmp	r3, #8
 800143e:	d110      	bne.n	8001462 <HAL_RCC_OscConfig+0x106>
 8001440:	6863      	ldr	r3, [r4, #4]
 8001442:	03da      	lsls	r2, r3, #15
 8001444:	d40d      	bmi.n	8001462 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	6823      	ldr	r3, [r4, #0]
 8001448:	079b      	lsls	r3, r3, #30
 800144a:	d502      	bpl.n	8001452 <HAL_RCC_OscConfig+0xf6>
 800144c:	692b      	ldr	r3, [r5, #16]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d1af      	bne.n	80013b2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	696a      	ldr	r2, [r5, #20]
 8001456:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800145a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800145e:	6023      	str	r3, [r4, #0]
 8001460:	e785      	b.n	800136e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001462:	692a      	ldr	r2, [r5, #16]
 8001464:	4b5a      	ldr	r3, [pc, #360]	; (80015d0 <HAL_RCC_OscConfig+0x274>)
 8001466:	b16a      	cbz	r2, 8001484 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800146c:	f7ff fa9a 	bl	80009a4 <HAL_GetTick>
 8001470:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	079f      	lsls	r7, r3, #30
 8001476:	d4ec      	bmi.n	8001452 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001478:	f7ff fa94 	bl	80009a4 <HAL_GetTick>
 800147c:	1b80      	subs	r0, r0, r6
 800147e:	2802      	cmp	r0, #2
 8001480:	d9f7      	bls.n	8001472 <HAL_RCC_OscConfig+0x116>
 8001482:	e7ad      	b.n	80013e0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001484:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001486:	f7ff fa8d 	bl	80009a4 <HAL_GetTick>
 800148a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	0798      	lsls	r0, r3, #30
 8001490:	f57f af6d 	bpl.w	800136e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001494:	f7ff fa86 	bl	80009a4 <HAL_GetTick>
 8001498:	1b80      	subs	r0, r0, r6
 800149a:	2802      	cmp	r0, #2
 800149c:	d9f6      	bls.n	800148c <HAL_RCC_OscConfig+0x130>
 800149e:	e79f      	b.n	80013e0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a0:	69aa      	ldr	r2, [r5, #24]
 80014a2:	4c4a      	ldr	r4, [pc, #296]	; (80015cc <HAL_RCC_OscConfig+0x270>)
 80014a4:	4b4b      	ldr	r3, [pc, #300]	; (80015d4 <HAL_RCC_OscConfig+0x278>)
 80014a6:	b1da      	cbz	r2, 80014e0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014ac:	f7ff fa7a 	bl	80009a4 <HAL_GetTick>
 80014b0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014b4:	079b      	lsls	r3, r3, #30
 80014b6:	d50d      	bpl.n	80014d4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014b8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80014bc:	4b46      	ldr	r3, [pc, #280]	; (80015d8 <HAL_RCC_OscConfig+0x27c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80014c4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80014c6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80014c8:	9b01      	ldr	r3, [sp, #4]
 80014ca:	1e5a      	subs	r2, r3, #1
 80014cc:	9201      	str	r2, [sp, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f9      	bne.n	80014c6 <HAL_RCC_OscConfig+0x16a>
 80014d2:	e750      	b.n	8001376 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d4:	f7ff fa66 	bl	80009a4 <HAL_GetTick>
 80014d8:	1b80      	subs	r0, r0, r6
 80014da:	2802      	cmp	r0, #2
 80014dc:	d9e9      	bls.n	80014b2 <HAL_RCC_OscConfig+0x156>
 80014de:	e77f      	b.n	80013e0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80014e0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014e2:	f7ff fa5f 	bl	80009a4 <HAL_GetTick>
 80014e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014ea:	079f      	lsls	r7, r3, #30
 80014ec:	f57f af43 	bpl.w	8001376 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f0:	f7ff fa58 	bl	80009a4 <HAL_GetTick>
 80014f4:	1b80      	subs	r0, r0, r6
 80014f6:	2802      	cmp	r0, #2
 80014f8:	d9f6      	bls.n	80014e8 <HAL_RCC_OscConfig+0x18c>
 80014fa:	e771      	b.n	80013e0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fc:	4c33      	ldr	r4, [pc, #204]	; (80015cc <HAL_RCC_OscConfig+0x270>)
 80014fe:	69e3      	ldr	r3, [r4, #28]
 8001500:	00d8      	lsls	r0, r3, #3
 8001502:	d424      	bmi.n	800154e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001504:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	69e3      	ldr	r3, [r4, #28]
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	61e3      	str	r3, [r4, #28]
 800150e:	69e3      	ldr	r3, [r4, #28]
 8001510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4e30      	ldr	r6, [pc, #192]	; (80015dc <HAL_RCC_OscConfig+0x280>)
 800151a:	6833      	ldr	r3, [r6, #0]
 800151c:	05d9      	lsls	r1, r3, #23
 800151e:	d518      	bpl.n	8001552 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	68eb      	ldr	r3, [r5, #12]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d126      	bne.n	8001574 <HAL_RCC_OscConfig+0x218>
 8001526:	6a23      	ldr	r3, [r4, #32]
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800152e:	f7ff fa39 	bl	80009a4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001536:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001538:	6a23      	ldr	r3, [r4, #32]
 800153a:	079b      	lsls	r3, r3, #30
 800153c:	d53f      	bpl.n	80015be <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800153e:	2f00      	cmp	r7, #0
 8001540:	f43f af1d 	beq.w	800137e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001544:	69e3      	ldr	r3, [r4, #28]
 8001546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800154a:	61e3      	str	r3, [r4, #28]
 800154c:	e717      	b.n	800137e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800154e:	2700      	movs	r7, #0
 8001550:	e7e2      	b.n	8001518 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001552:	6833      	ldr	r3, [r6, #0]
 8001554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001558:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800155a:	f7ff fa23 	bl	80009a4 <HAL_GetTick>
 800155e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001560:	6833      	ldr	r3, [r6, #0]
 8001562:	05da      	lsls	r2, r3, #23
 8001564:	d4dc      	bmi.n	8001520 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001566:	f7ff fa1d 	bl	80009a4 <HAL_GetTick>
 800156a:	eba0 0008 	sub.w	r0, r0, r8
 800156e:	2864      	cmp	r0, #100	; 0x64
 8001570:	d9f6      	bls.n	8001560 <HAL_RCC_OscConfig+0x204>
 8001572:	e735      	b.n	80013e0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001574:	b9ab      	cbnz	r3, 80015a2 <HAL_RCC_OscConfig+0x246>
 8001576:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	6223      	str	r3, [r4, #32]
 8001582:	6a23      	ldr	r3, [r4, #32]
 8001584:	f023 0304 	bic.w	r3, r3, #4
 8001588:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800158a:	f7ff fa0b 	bl	80009a4 <HAL_GetTick>
 800158e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001590:	6a23      	ldr	r3, [r4, #32]
 8001592:	0798      	lsls	r0, r3, #30
 8001594:	d5d3      	bpl.n	800153e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fa05 	bl	80009a4 <HAL_GetTick>
 800159a:	1b80      	subs	r0, r0, r6
 800159c:	4540      	cmp	r0, r8
 800159e:	d9f7      	bls.n	8001590 <HAL_RCC_OscConfig+0x234>
 80015a0:	e71e      	b.n	80013e0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a2:	2b05      	cmp	r3, #5
 80015a4:	6a23      	ldr	r3, [r4, #32]
 80015a6:	d103      	bne.n	80015b0 <HAL_RCC_OscConfig+0x254>
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6223      	str	r3, [r4, #32]
 80015ae:	e7ba      	b.n	8001526 <HAL_RCC_OscConfig+0x1ca>
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6223      	str	r3, [r4, #32]
 80015b6:	6a23      	ldr	r3, [r4, #32]
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	e7b6      	b.n	800152c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015be:	f7ff f9f1 	bl	80009a4 <HAL_GetTick>
 80015c2:	eba0 0008 	sub.w	r0, r0, r8
 80015c6:	42b0      	cmp	r0, r6
 80015c8:	d9b6      	bls.n	8001538 <HAL_RCC_OscConfig+0x1dc>
 80015ca:	e709      	b.n	80013e0 <HAL_RCC_OscConfig+0x84>
 80015cc:	40021000 	.word	0x40021000
 80015d0:	42420000 	.word	0x42420000
 80015d4:	42420480 	.word	0x42420480
 80015d8:	2000010c 	.word	0x2000010c
 80015dc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e0:	4c22      	ldr	r4, [pc, #136]	; (800166c <HAL_RCC_OscConfig+0x310>)
 80015e2:	6863      	ldr	r3, [r4, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	f43f aee2 	beq.w	80013b2 <HAL_RCC_OscConfig+0x56>
 80015ee:	2300      	movs	r3, #0
 80015f0:	4e1f      	ldr	r6, [pc, #124]	; (8001670 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80015f4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f6:	d12b      	bne.n	8001650 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80015f8:	f7ff f9d4 	bl	80009a4 <HAL_GetTick>
 80015fc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fe:	6823      	ldr	r3, [r4, #0]
 8001600:	0199      	lsls	r1, r3, #6
 8001602:	d41f      	bmi.n	8001644 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001604:	6a2b      	ldr	r3, [r5, #32]
 8001606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160a:	d105      	bne.n	8001618 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800160c:	6862      	ldr	r2, [r4, #4]
 800160e:	68a9      	ldr	r1, [r5, #8]
 8001610:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001614:	430a      	orrs	r2, r1
 8001616:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001618:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800161a:	6862      	ldr	r2, [r4, #4]
 800161c:	430b      	orrs	r3, r1
 800161e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001622:	4313      	orrs	r3, r2
 8001624:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001626:	2301      	movs	r3, #1
 8001628:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800162a:	f7ff f9bb 	bl	80009a4 <HAL_GetTick>
 800162e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001630:	6823      	ldr	r3, [r4, #0]
 8001632:	019a      	lsls	r2, r3, #6
 8001634:	f53f aea7 	bmi.w	8001386 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001638:	f7ff f9b4 	bl	80009a4 <HAL_GetTick>
 800163c:	1b40      	subs	r0, r0, r5
 800163e:	2802      	cmp	r0, #2
 8001640:	d9f6      	bls.n	8001630 <HAL_RCC_OscConfig+0x2d4>
 8001642:	e6cd      	b.n	80013e0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001644:	f7ff f9ae 	bl	80009a4 <HAL_GetTick>
 8001648:	1bc0      	subs	r0, r0, r7
 800164a:	2802      	cmp	r0, #2
 800164c:	d9d7      	bls.n	80015fe <HAL_RCC_OscConfig+0x2a2>
 800164e:	e6c7      	b.n	80013e0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001650:	f7ff f9a8 	bl	80009a4 <HAL_GetTick>
 8001654:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	019b      	lsls	r3, r3, #6
 800165a:	f57f ae94 	bpl.w	8001386 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165e:	f7ff f9a1 	bl	80009a4 <HAL_GetTick>
 8001662:	1b40      	subs	r0, r0, r5
 8001664:	2802      	cmp	r0, #2
 8001666:	d9f6      	bls.n	8001656 <HAL_RCC_OscConfig+0x2fa>
 8001668:	e6ba      	b.n	80013e0 <HAL_RCC_OscConfig+0x84>
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	42420060 	.word	0x42420060

08001674 <HAL_RCC_GetSysClockFreq>:
{
 8001674:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001678:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800167a:	ac02      	add	r4, sp, #8
 800167c:	f103 0510 	add.w	r5, r3, #16
 8001680:	4622      	mov	r2, r4
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	6859      	ldr	r1, [r3, #4]
 8001686:	3308      	adds	r3, #8
 8001688:	c203      	stmia	r2!, {r0, r1}
 800168a:	42ab      	cmp	r3, r5
 800168c:	4614      	mov	r4, r2
 800168e:	d1f7      	bne.n	8001680 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001690:	2301      	movs	r3, #1
 8001692:	f88d 3004 	strb.w	r3, [sp, #4]
 8001696:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001698:	4911      	ldr	r1, [pc, #68]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800169a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800169e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80016a0:	f003 020c 	and.w	r2, r3, #12
 80016a4:	2a08      	cmp	r2, #8
 80016a6:	d117      	bne.n	80016d8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016a8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80016ac:	a806      	add	r0, sp, #24
 80016ae:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016b0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016b2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016b6:	d50c      	bpl.n	80016d2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016b8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ba:	480a      	ldr	r0, [pc, #40]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016bc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016c0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016c2:	aa06      	add	r2, sp, #24
 80016c4:	4413      	add	r3, r2
 80016c6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ca:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80016ce:	b007      	add	sp, #28
 80016d0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x74>)
 80016d4:	4350      	muls	r0, r2
 80016d6:	e7fa      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80016da:	e7f8      	b.n	80016ce <HAL_RCC_GetSysClockFreq+0x5a>
 80016dc:	08003308 	.word	0x08003308
 80016e0:	40021000 	.word	0x40021000
 80016e4:	007a1200 	.word	0x007a1200
 80016e8:	003d0900 	.word	0x003d0900

080016ec <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016ec:	4a4d      	ldr	r2, [pc, #308]	; (8001824 <HAL_RCC_ClockConfig+0x138>)
{
 80016ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016f2:	6813      	ldr	r3, [r2, #0]
{
 80016f4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	428b      	cmp	r3, r1
{
 80016fc:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016fe:	d328      	bcc.n	8001752 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	682a      	ldr	r2, [r5, #0]
 8001702:	0791      	lsls	r1, r2, #30
 8001704:	d432      	bmi.n	800176c <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	07d2      	lsls	r2, r2, #31
 8001708:	d438      	bmi.n	800177c <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800170a:	4a46      	ldr	r2, [pc, #280]	; (8001824 <HAL_RCC_ClockConfig+0x138>)
 800170c:	6813      	ldr	r3, [r2, #0]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	429e      	cmp	r6, r3
 8001714:	d373      	bcc.n	80017fe <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001716:	682a      	ldr	r2, [r5, #0]
 8001718:	4c43      	ldr	r4, [pc, #268]	; (8001828 <HAL_RCC_ClockConfig+0x13c>)
 800171a:	f012 0f04 	tst.w	r2, #4
 800171e:	d179      	bne.n	8001814 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	0713      	lsls	r3, r2, #28
 8001722:	d506      	bpl.n	8001732 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001724:	6863      	ldr	r3, [r4, #4]
 8001726:	692a      	ldr	r2, [r5, #16]
 8001728:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800172c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001730:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001732:	f7ff ff9f 	bl	8001674 <HAL_RCC_GetSysClockFreq>
 8001736:	6863      	ldr	r3, [r4, #4]
 8001738:	4a3c      	ldr	r2, [pc, #240]	; (800182c <HAL_RCC_ClockConfig+0x140>)
 800173a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	40d8      	lsrs	r0, r3
 8001742:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <HAL_RCC_ClockConfig+0x144>)
 8001744:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff f8ea 	bl	8000920 <HAL_InitTick>
  return HAL_OK;
 800174c:	2000      	movs	r0, #0
}
 800174e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	6813      	ldr	r3, [r2, #0]
 8001754:	f023 0307 	bic.w	r3, r3, #7
 8001758:	430b      	orrs	r3, r1
 800175a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800175c:	6813      	ldr	r3, [r2, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	4299      	cmp	r1, r3
 8001764:	d0cc      	beq.n	8001700 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001766:	2001      	movs	r0, #1
 8001768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800176c:	492e      	ldr	r1, [pc, #184]	; (8001828 <HAL_RCC_ClockConfig+0x13c>)
 800176e:	68a8      	ldr	r0, [r5, #8]
 8001770:	684b      	ldr	r3, [r1, #4]
 8001772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001776:	4303      	orrs	r3, r0
 8001778:	604b      	str	r3, [r1, #4]
 800177a:	e7c4      	b.n	8001706 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177c:	686a      	ldr	r2, [r5, #4]
 800177e:	4c2a      	ldr	r4, [pc, #168]	; (8001828 <HAL_RCC_ClockConfig+0x13c>)
 8001780:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001782:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001784:	d11c      	bne.n	80017c0 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	d0ec      	beq.n	8001766 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178c:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800178e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	4313      	orrs	r3, r2
 8001798:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800179a:	f7ff f903 	bl	80009a4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800179e:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80017a0:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d114      	bne.n	80017d0 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017a6:	6863      	ldr	r3, [r4, #4]
 80017a8:	f003 030c 	and.w	r3, r3, #12
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d0ac      	beq.n	800170a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7ff f8f8 	bl	80009a4 <HAL_GetTick>
 80017b4:	1bc0      	subs	r0, r0, r7
 80017b6:	4540      	cmp	r0, r8
 80017b8:	d9f5      	bls.n	80017a6 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80017ba:	2003      	movs	r0, #3
 80017bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c0:	2a02      	cmp	r2, #2
 80017c2:	d102      	bne.n	80017ca <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017c8:	e7df      	b.n	800178a <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	f013 0f02 	tst.w	r3, #2
 80017ce:	e7dc      	b.n	800178a <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d10f      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d4:	6863      	ldr	r3, [r4, #4]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d095      	beq.n	800170a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017de:	f7ff f8e1 	bl	80009a4 <HAL_GetTick>
 80017e2:	1bc0      	subs	r0, r0, r7
 80017e4:	4540      	cmp	r0, r8
 80017e6:	d9f5      	bls.n	80017d4 <HAL_RCC_ClockConfig+0xe8>
 80017e8:	e7e7      	b.n	80017ba <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ea:	f7ff f8db 	bl	80009a4 <HAL_GetTick>
 80017ee:	1bc0      	subs	r0, r0, r7
 80017f0:	4540      	cmp	r0, r8
 80017f2:	d8e2      	bhi.n	80017ba <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f4:	6863      	ldr	r3, [r4, #4]
 80017f6:	f013 0f0c 	tst.w	r3, #12
 80017fa:	d1f6      	bne.n	80017ea <HAL_RCC_ClockConfig+0xfe>
 80017fc:	e785      	b.n	800170a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	6813      	ldr	r3, [r2, #0]
 8001800:	f023 0307 	bic.w	r3, r3, #7
 8001804:	4333      	orrs	r3, r6
 8001806:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001808:	6813      	ldr	r3, [r2, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	429e      	cmp	r6, r3
 8001810:	d1a9      	bne.n	8001766 <HAL_RCC_ClockConfig+0x7a>
 8001812:	e780      	b.n	8001716 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	6863      	ldr	r3, [r4, #4]
 8001816:	68e9      	ldr	r1, [r5, #12]
 8001818:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800181c:	430b      	orrs	r3, r1
 800181e:	6063      	str	r3, [r4, #4]
 8001820:	e77e      	b.n	8001720 <HAL_RCC_ClockConfig+0x34>
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	08003332 	.word	0x08003332
 8001830:	2000010c 	.word	0x2000010c

08001834 <HAL_RCC_GetHCLKFreq>:
}
 8001834:	4b01      	ldr	r3, [pc, #4]	; (800183c <HAL_RCC_GetHCLKFreq+0x8>)
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000010c 	.word	0x2000010c

08001840 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001840:	4b04      	ldr	r3, [pc, #16]	; (8001854 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800184a:	5cd3      	ldrb	r3, [r2, r3]
 800184c:	4a03      	ldr	r2, [pc, #12]	; (800185c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800184e:	6810      	ldr	r0, [r2, #0]
}    
 8001850:	40d8      	lsrs	r0, r3
 8001852:	4770      	bx	lr
 8001854:	40021000 	.word	0x40021000
 8001858:	08003342 	.word	0x08003342
 800185c:	2000010c 	.word	0x2000010c

08001860 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	4a03      	ldr	r2, [pc, #12]	; (800187c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800186e:	6810      	ldr	r0, [r2, #0]
} 
 8001870:	40d8      	lsrs	r0, r3
 8001872:	4770      	bx	lr
 8001874:	40021000 	.word	0x40021000
 8001878:	08003342 	.word	0x08003342
 800187c:	2000010c 	.word	0x2000010c

08001880 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001880:	6803      	ldr	r3, [r0, #0]
{
 8001882:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001886:	07d9      	lsls	r1, r3, #31
{
 8001888:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800188a:	d520      	bpl.n	80018ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188c:	4c35      	ldr	r4, [pc, #212]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800188e:	69e3      	ldr	r3, [r4, #28]
 8001890:	00da      	lsls	r2, r3, #3
 8001892:	d432      	bmi.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001894:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001896:	69e3      	ldr	r3, [r4, #28]
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800189c:	61e3      	str	r3, [r4, #28]
 800189e:	69e3      	ldr	r3, [r4, #28]
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	4e2f      	ldr	r6, [pc, #188]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80018aa:	6833      	ldr	r3, [r6, #0]
 80018ac:	05db      	lsls	r3, r3, #23
 80018ae:	d526      	bpl.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018b0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018b2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80018b6:	d136      	bne.n	8001926 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80018b8:	6a23      	ldr	r3, [r4, #32]
 80018ba:	686a      	ldr	r2, [r5, #4]
 80018bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018c0:	4313      	orrs	r3, r2
 80018c2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018c4:	b11f      	cbz	r7, 80018ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c6:	69e3      	ldr	r3, [r4, #28]
 80018c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018cc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80018ce:	6828      	ldr	r0, [r5, #0]
 80018d0:	0783      	lsls	r3, r0, #30
 80018d2:	d506      	bpl.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80018d4:	4a23      	ldr	r2, [pc, #140]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80018d6:	68a9      	ldr	r1, [r5, #8]
 80018d8:	6853      	ldr	r3, [r2, #4]
 80018da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018de:	430b      	orrs	r3, r1
 80018e0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80018e2:	f010 0010 	ands.w	r0, r0, #16
 80018e6:	d01b      	beq.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018e8:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80018ea:	68e9      	ldr	r1, [r5, #12]
 80018ec:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80018ee:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6053      	str	r3, [r2, #4]
 80018f8:	e012      	b.n	8001920 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80018fa:	2700      	movs	r7, #0
 80018fc:	e7d4      	b.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018fe:	6833      	ldr	r3, [r6, #0]
 8001900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001904:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001906:	f7ff f84d 	bl	80009a4 <HAL_GetTick>
 800190a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190c:	6833      	ldr	r3, [r6, #0]
 800190e:	05d8      	lsls	r0, r3, #23
 8001910:	d4ce      	bmi.n	80018b0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001912:	f7ff f847 	bl	80009a4 <HAL_GetTick>
 8001916:	eba0 0008 	sub.w	r0, r0, r8
 800191a:	2864      	cmp	r0, #100	; 0x64
 800191c:	d9f6      	bls.n	800190c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 800191e:	2003      	movs	r0, #3
}
 8001920:	b002      	add	sp, #8
 8001922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001926:	686a      	ldr	r2, [r5, #4]
 8001928:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800192c:	4293      	cmp	r3, r2
 800192e:	d0c3      	beq.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001930:	2001      	movs	r0, #1
 8001932:	4a0e      	ldr	r2, [pc, #56]	; (800196c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001934:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001936:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001938:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800193a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800193e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001940:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001942:	07d9      	lsls	r1, r3, #31
 8001944:	d5b8      	bpl.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001946:	f7ff f82d 	bl	80009a4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800194e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	6a23      	ldr	r3, [r4, #32]
 8001952:	079a      	lsls	r2, r3, #30
 8001954:	d4b0      	bmi.n	80018b8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7ff f825 	bl	80009a4 <HAL_GetTick>
 800195a:	1b80      	subs	r0, r0, r6
 800195c:	4540      	cmp	r0, r8
 800195e:	d9f7      	bls.n	8001950 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001960:	e7dd      	b.n	800191e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
 800196c:	42420440 	.word	0x42420440

08001970 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001970:	b570      	push	{r4, r5, r6, lr}
 8001972:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001974:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8001976:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001978:	ad02      	add	r5, sp, #8
 800197a:	f103 0610 	add.w	r6, r3, #16
 800197e:	462a      	mov	r2, r5
 8001980:	6818      	ldr	r0, [r3, #0]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	3308      	adds	r3, #8
 8001986:	c203      	stmia	r2!, {r0, r1}
 8001988:	42b3      	cmp	r3, r6
 800198a:	4615      	mov	r5, r2
 800198c:	d1f7      	bne.n	800197e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800198e:	2301      	movs	r3, #1
 8001990:	f88d 3004 	strb.w	r3, [sp, #4]
 8001994:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8001996:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001998:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 800199c:	d047      	beq.n	8001a2e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 800199e:	2c10      	cmp	r4, #16
 80019a0:	d017      	beq.n	80019d2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80019a2:	2c01      	cmp	r4, #1
 80019a4:	d14f      	bne.n	8001a46 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80019a6:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80019aa:	4a29      	ldr	r2, [pc, #164]	; (8001a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80019ac:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80019ae:	4019      	ands	r1, r3
 80019b0:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80019b4:	d044      	beq.n	8001a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80019b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019be:	d12d      	bne.n	8001a1c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 80019c0:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80019c4:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80019c6:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 80019ca:	bf08      	it	eq
 80019cc:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 80019ce:	b006      	add	sp, #24
 80019d0:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 80019d2:	4b1f      	ldr	r3, [pc, #124]	; (8001a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80019d4:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80019dc:	d0f7      	beq.n	80019ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019de:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80019e2:	a806      	add	r0, sp, #24
 80019e4:	4402      	add	r2, r0
 80019e6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019ea:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ec:	bf41      	itttt	mi
 80019ee:	685a      	ldrmi	r2, [r3, #4]
 80019f0:	a906      	addmi	r1, sp, #24
 80019f2:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80019f6:	1852      	addmi	r2, r2, r1
 80019f8:	bf44      	itt	mi
 80019fa:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80019fe:	4a15      	ldrmi	r2, [pc, #84]	; (8001a54 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001a00:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001a02:	bf4c      	ite	mi
 8001a04:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a08:	4a13      	ldrpl	r2, [pc, #76]	; (8001a58 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001a0a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a0c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001a10:	d4dd      	bmi.n	80019ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8001a12:	2303      	movs	r3, #3
 8001a14:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001a16:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001a1a:	e7d8      	b.n	80019ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001a1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a20:	d111      	bne.n	8001a46 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001a22:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001a24:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001a28:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a2c:	e7cd      	b.n	80019ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001a2e:	f7ff ff17 	bl	8001860 <HAL_RCC_GetPCLK2Freq>
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	e7ea      	b.n	8001a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8001a40:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a44:	e7c3      	b.n	80019ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8001a46:	2000      	movs	r0, #0
 8001a48:	e7c1      	b.n	80019ce <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8001a4a:	bf00      	nop
 8001a4c:	08003318 	.word	0x08003318
 8001a50:	40021000 	.word	0x40021000
 8001a54:	007a1200 	.word	0x007a1200
 8001a58:	003d0900 	.word	0x003d0900

08001a5c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a5c:	6a03      	ldr	r3, [r0, #32]
{
 8001a5e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a66:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a68:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a6a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a6c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a6e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a72:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a74:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001a76:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001a7a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a7c:	4d0a      	ldr	r5, [pc, #40]	; (8001aa8 <TIM_OC1_SetConfig+0x4c>)
 8001a7e:	42a8      	cmp	r0, r5
 8001a80:	d10b      	bne.n	8001a9a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a82:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a84:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001a88:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a8a:	698e      	ldr	r6, [r1, #24]
 8001a8c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a8e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a92:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a94:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a98:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a9a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a9c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001a9e:	684a      	ldr	r2, [r1, #4]
 8001aa0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001aa2:	6203      	str	r3, [r0, #32]
 8001aa4:	bd70      	pop	{r4, r5, r6, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40012c00 	.word	0x40012c00

08001aac <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001aac:	6a03      	ldr	r3, [r0, #32]
{
 8001aae:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ab4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ab6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ab8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001aba:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001abc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001abe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001ac2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ac4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001ac6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001aca:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ace:	4d0b      	ldr	r5, [pc, #44]	; (8001afc <TIM_OC3_SetConfig+0x50>)
 8001ad0:	42a8      	cmp	r0, r5
 8001ad2:	d10d      	bne.n	8001af0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ad4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ada:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ade:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ae0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ae2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ae6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ae8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001aec:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001af0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001af2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001af4:	684a      	ldr	r2, [r1, #4]
 8001af6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001af8:	6203      	str	r3, [r0, #32]
 8001afa:	bd70      	pop	{r4, r5, r6, pc}
 8001afc:	40012c00 	.word	0x40012c00

08001b00 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b00:	6a03      	ldr	r3, [r0, #32]
{
 8001b02:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b08:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b0a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b0c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b0e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b10:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b12:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b16:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b1a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001b1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b20:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b24:	4d06      	ldr	r5, [pc, #24]	; (8001b40 <TIM_OC4_SetConfig+0x40>)
 8001b26:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001b28:	bf02      	ittt	eq
 8001b2a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b2c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001b30:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b34:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b36:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b38:	684a      	ldr	r2, [r1, #4]
 8001b3a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b3c:	6203      	str	r3, [r0, #32]
 8001b3e:	bd30      	pop	{r4, r5, pc}
 8001b40:	40012c00 	.word	0x40012c00

08001b44 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b44:	6803      	ldr	r3, [r0, #0]
}
 8001b46:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
}
 8001b58:	4770      	bx	lr

08001b5a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001b5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001b5e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	f04f 0302 	mov.w	r3, #2
 8001b66:	d01c      	beq.n	8001ba2 <HAL_TIM_ConfigClockSource+0x48>
 8001b68:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001b6e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001b70:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001b74:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b76:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001b7a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001b7e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001b80:	680a      	ldr	r2, [r1, #0]
 8001b82:	2a40      	cmp	r2, #64	; 0x40
 8001b84:	d079      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0x120>
 8001b86:	d819      	bhi.n	8001bbc <HAL_TIM_ConfigClockSource+0x62>
 8001b88:	2a10      	cmp	r2, #16
 8001b8a:	f000 8093 	beq.w	8001cb4 <HAL_TIM_ConfigClockSource+0x15a>
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_TIM_ConfigClockSource+0x4c>
 8001b90:	2a00      	cmp	r2, #0
 8001b92:	f000 8089 	beq.w	8001ca8 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001ba2:	4618      	mov	r0, r3
}
 8001ba4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001ba6:	2a20      	cmp	r2, #32
 8001ba8:	f000 808a 	beq.w	8001cc0 <HAL_TIM_ConfigClockSource+0x166>
 8001bac:	2a30      	cmp	r2, #48	; 0x30
 8001bae:	d1f2      	bne.n	8001b96 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001bb0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001bb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001bb6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001bba:	e036      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001bbc:	2a70      	cmp	r2, #112	; 0x70
 8001bbe:	d036      	beq.n	8001c2e <HAL_TIM_ConfigClockSource+0xd4>
 8001bc0:	d81b      	bhi.n	8001bfa <HAL_TIM_ConfigClockSource+0xa0>
 8001bc2:	2a50      	cmp	r2, #80	; 0x50
 8001bc4:	d042      	beq.n	8001c4c <HAL_TIM_ConfigClockSource+0xf2>
 8001bc6:	2a60      	cmp	r2, #96	; 0x60
 8001bc8:	d1e5      	bne.n	8001b96 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bca:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bcc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bce:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bd2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bd4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bd6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001bd8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bda:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001bde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001be2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001be6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001bea:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bec:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001bee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001bf0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001bf4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001bf8:	e017      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001bfa:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001bfe:	d011      	beq.n	8001c24 <HAL_TIM_ConfigClockSource+0xca>
 8001c00:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001c04:	d1c7      	bne.n	8001b96 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c06:	688a      	ldr	r2, [r1, #8]
 8001c08:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001c0a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c0c:	68c9      	ldr	r1, [r1, #12]
 8001c0e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c10:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c18:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c1a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c22:	e002      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c24:	689a      	ldr	r2, [r3, #8]
 8001c26:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	e7b3      	b.n	8001b96 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c2e:	688a      	ldr	r2, [r1, #8]
 8001c30:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001c32:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c34:	68c9      	ldr	r1, [r1, #12]
 8001c36:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c38:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c40:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001c42:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001c44:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c46:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001c4a:	e7ee      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c4c:	684c      	ldr	r4, [r1, #4]
 8001c4e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c50:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c52:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c54:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c58:	f025 0501 	bic.w	r5, r5, #1
 8001c5c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c5e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001c60:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c66:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c6c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001c6e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c74:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001c78:	e7d7      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c7a:	684c      	ldr	r4, [r1, #4]
 8001c7c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c7e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c80:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c82:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c86:	f025 0501 	bic.w	r5, r5, #1
 8001c8a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c8c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001c8e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c90:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c94:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001c98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c9a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001c9c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ca2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001ca6:	e7c0      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001ca8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001caa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cae:	f042 0207 	orr.w	r2, r2, #7
 8001cb2:	e7ba      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001cb4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cba:	f042 0217 	orr.w	r2, r2, #23
 8001cbe:	e7b4      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001cc0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cc2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cc6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001cca:	e7ae      	b.n	8001c2a <HAL_TIM_ConfigClockSource+0xd0>

08001ccc <HAL_TIM_PeriodElapsedCallback>:
 8001ccc:	4770      	bx	lr

08001cce <HAL_TIM_OC_DelayElapsedCallback>:
 8001cce:	4770      	bx	lr

08001cd0 <HAL_TIM_IC_CaptureCallback>:
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_TIM_TriggerCallback>:
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd6:	6803      	ldr	r3, [r0, #0]
{
 8001cd8:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cda:	691a      	ldr	r2, [r3, #16]
{
 8001cdc:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cde:	0791      	lsls	r1, r2, #30
 8001ce0:	d50e      	bpl.n	8001d00 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	0792      	lsls	r2, r2, #30
 8001ce6:	d50b      	bpl.n	8001d00 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ce8:	f06f 0202 	mvn.w	r2, #2
 8001cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cee:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf2:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf4:	079b      	lsls	r3, r3, #30
 8001cf6:	d077      	beq.n	8001de8 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001cf8:	f7ff ffea 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	0750      	lsls	r0, r2, #29
 8001d06:	d510      	bpl.n	8001d2a <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	0751      	lsls	r1, r2, #29
 8001d0c:	d50d      	bpl.n	8001d2a <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d0e:	f06f 0204 	mvn.w	r2, #4
 8001d12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d14:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d16:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d18:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d1a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d20:	d068      	beq.n	8001df4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	f7ff ffd5 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d26:	2300      	movs	r3, #0
 8001d28:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	691a      	ldr	r2, [r3, #16]
 8001d2e:	0712      	lsls	r2, r2, #28
 8001d30:	d50f      	bpl.n	8001d52 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	0710      	lsls	r0, r2, #28
 8001d36:	d50c      	bpl.n	8001d52 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d38:	f06f 0208 	mvn.w	r2, #8
 8001d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d3e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d40:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d42:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d44:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001d46:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d48:	d05a      	beq.n	8001e00 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	f7ff ffc1 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	06d2      	lsls	r2, r2, #27
 8001d58:	d510      	bpl.n	8001d7c <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	06d0      	lsls	r0, r2, #27
 8001d5e:	d50d      	bpl.n	8001d7c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d60:	f06f 0210 	mvn.w	r2, #16
 8001d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d66:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d68:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d6c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001d70:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d72:	d04b      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d74:	f7ff ffac 	bl	8001cd0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	691a      	ldr	r2, [r3, #16]
 8001d80:	07d1      	lsls	r1, r2, #31
 8001d82:	d508      	bpl.n	8001d96 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	07d2      	lsls	r2, r2, #31
 8001d88:	d505      	bpl.n	8001d96 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d8a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d8e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d90:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d92:	f7ff ff9b 	bl	8001ccc <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	0610      	lsls	r0, r2, #24
 8001d9c:	d508      	bpl.n	8001db0 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	0611      	lsls	r1, r2, #24
 8001da2:	d505      	bpl.n	8001db0 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001da8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001daa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001dac:	f000 f975 	bl	800209a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	0652      	lsls	r2, r2, #25
 8001db6:	d508      	bpl.n	8001dca <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	0650      	lsls	r0, r2, #25
 8001dbc:	d505      	bpl.n	8001dca <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001dc2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dc4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001dc6:	f7ff ff85 	bl	8001cd4 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	0691      	lsls	r1, r2, #26
 8001dd0:	d522      	bpl.n	8001e18 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001dd2:	68da      	ldr	r2, [r3, #12]
 8001dd4:	0692      	lsls	r2, r2, #26
 8001dd6:	d51f      	bpl.n	8001e18 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001dd8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001ddc:	4620      	mov	r0, r4
}
 8001dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001de2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001de4:	f000 b958 	b.w	8002098 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de8:	f7ff ff71 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7ff ff70 	bl	8001cd2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001df2:	e783      	b.n	8001cfc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df4:	f7ff ff6b 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df8:	4620      	mov	r0, r4
 8001dfa:	f7ff ff6a 	bl	8001cd2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dfe:	e792      	b.n	8001d26 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e00:	f7ff ff65 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e04:	4620      	mov	r0, r4
 8001e06:	f7ff ff64 	bl	8001cd2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e0a:	e7a0      	b.n	8001d4e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0c:	f7ff ff5f 	bl	8001cce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	4620      	mov	r0, r4
 8001e12:	f7ff ff5e 	bl	8001cd2 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e16:	e7af      	b.n	8001d78 <HAL_TIM_IRQHandler+0xa2>
 8001e18:	bd10      	pop	{r4, pc}
	...

08001e1c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e1c:	4a1a      	ldr	r2, [pc, #104]	; (8001e88 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001e1e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e20:	4290      	cmp	r0, r2
 8001e22:	d00a      	beq.n	8001e3a <TIM_Base_SetConfig+0x1e>
 8001e24:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e28:	d007      	beq.n	8001e3a <TIM_Base_SetConfig+0x1e>
 8001e2a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e2e:	4290      	cmp	r0, r2
 8001e30:	d003      	beq.n	8001e3a <TIM_Base_SetConfig+0x1e>
 8001e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e36:	4290      	cmp	r0, r2
 8001e38:	d115      	bne.n	8001e66 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001e3a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e40:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e42:	4a11      	ldr	r2, [pc, #68]	; (8001e88 <TIM_Base_SetConfig+0x6c>)
 8001e44:	4290      	cmp	r0, r2
 8001e46:	d00a      	beq.n	8001e5e <TIM_Base_SetConfig+0x42>
 8001e48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e4c:	d007      	beq.n	8001e5e <TIM_Base_SetConfig+0x42>
 8001e4e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e52:	4290      	cmp	r0, r2
 8001e54:	d003      	beq.n	8001e5e <TIM_Base_SetConfig+0x42>
 8001e56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e5a:	4290      	cmp	r0, r2
 8001e5c:	d103      	bne.n	8001e66 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e5e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e64:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e66:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e6c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001e6e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e70:	688b      	ldr	r3, [r1, #8]
 8001e72:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001e74:	680b      	ldr	r3, [r1, #0]
 8001e76:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <TIM_Base_SetConfig+0x6c>)
 8001e7a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001e7c:	bf04      	itt	eq
 8001e7e:	690b      	ldreq	r3, [r1, #16]
 8001e80:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001e82:	2301      	movs	r3, #1
 8001e84:	6143      	str	r3, [r0, #20]
 8001e86:	4770      	bx	lr
 8001e88:	40012c00 	.word	0x40012c00

08001e8c <HAL_TIM_Base_Init>:
{
 8001e8c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001e8e:	4604      	mov	r4, r0
 8001e90:	b1a0      	cbz	r0, 8001ebc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e9a:	b91b      	cbnz	r3, 8001ea4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001e9c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ea0:	f000 fcc4 	bl	800282c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ea4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001ea8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eac:	1d21      	adds	r1, r4, #4
 8001eae:	f7ff ffb5 	bl	8001e1c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001eb2:	2301      	movs	r3, #1
  return HAL_OK;
 8001eb4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001eb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001eba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ebc:	2001      	movs	r0, #1
}
 8001ebe:	bd10      	pop	{r4, pc}

08001ec0 <HAL_TIM_PWM_Init>:
{
 8001ec0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	b1a0      	cbz	r0, 8001ef0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ec6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001eca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ece:	b91b      	cbnz	r3, 8001ed8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ed0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001ed4:	f000 fc86 	bl	80027e4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ed8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eda:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001edc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee0:	1d21      	adds	r1, r4, #4
 8001ee2:	f7ff ff9b 	bl	8001e1c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001ee6:	2301      	movs	r3, #1
  return HAL_OK;
 8001ee8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001eea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001eee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ef0:	2001      	movs	r0, #1
}
 8001ef2:	bd10      	pop	{r4, pc}

08001ef4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ef4:	6a03      	ldr	r3, [r0, #32]
{
 8001ef6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ef8:	f023 0310 	bic.w	r3, r3, #16
 8001efc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001efe:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001f00:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001f02:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f04:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f06:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f0a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f0e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001f10:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f14:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f18:	4d0b      	ldr	r5, [pc, #44]	; (8001f48 <TIM_OC2_SetConfig+0x54>)
 8001f1a:	42a8      	cmp	r0, r5
 8001f1c:	d10d      	bne.n	8001f3a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f1e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f24:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001f28:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001f2a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f2c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001f30:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001f36:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001f3a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001f3c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001f3e:	684a      	ldr	r2, [r1, #4]
 8001f40:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001f42:	6203      	str	r3, [r0, #32]
 8001f44:	bd70      	pop	{r4, r5, r6, pc}
 8001f46:	bf00      	nop
 8001f48:	40012c00 	.word	0x40012c00

08001f4c <HAL_TIM_PWM_ConfigChannel>:
{
 8001f4c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001f4e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f52:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	f04f 0002 	mov.w	r0, #2
 8001f5a:	d025      	beq.n	8001fa8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001f5c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001f5e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001f62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001f66:	2a0c      	cmp	r2, #12
 8001f68:	d818      	bhi.n	8001f9c <HAL_TIM_PWM_ConfigChannel+0x50>
 8001f6a:	e8df f002 	tbb	[pc, r2]
 8001f6e:	1707      	.short	0x1707
 8001f70:	171e1717 	.word	0x171e1717
 8001f74:	172f1717 	.word	0x172f1717
 8001f78:	1717      	.short	0x1717
 8001f7a:	40          	.byte	0x40
 8001f7b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f7c:	6820      	ldr	r0, [r4, #0]
 8001f7e:	f7ff fd6d 	bl	8001a5c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f82:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f84:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f86:	699a      	ldr	r2, [r3, #24]
 8001f88:	f042 0208 	orr.w	r2, r2, #8
 8001f8c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f8e:	699a      	ldr	r2, [r3, #24]
 8001f90:	f022 0204 	bic.w	r2, r2, #4
 8001f94:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001f9a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001f9c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001f9e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001fa0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001fa4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001fa8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001faa:	6820      	ldr	r0, [r4, #0]
 8001fac:	f7ff ffa2 	bl	8001ef4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fb0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001fb2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fca:	e7e6      	b.n	8001f9a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fcc:	6820      	ldr	r0, [r4, #0]
 8001fce:	f7ff fd6d 	bl	8001aac <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fd2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fd4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fd6:	69da      	ldr	r2, [r3, #28]
 8001fd8:	f042 0208 	orr.w	r2, r2, #8
 8001fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fde:	69da      	ldr	r2, [r3, #28]
 8001fe0:	f022 0204 	bic.w	r2, r2, #4
 8001fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fe6:	69da      	ldr	r2, [r3, #28]
 8001fe8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001fea:	61da      	str	r2, [r3, #28]
    break;
 8001fec:	e7d6      	b.n	8001f9c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fee:	6820      	ldr	r0, [r4, #0]
 8001ff0:	f7ff fd86 	bl	8001b00 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ff4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001ff6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ff8:	69da      	ldr	r2, [r3, #28]
 8001ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ffe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002000:	69da      	ldr	r2, [r3, #28]
 8002002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002006:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8002008:	69da      	ldr	r2, [r3, #28]
 800200a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800200e:	e7ec      	b.n	8001fea <HAL_TIM_PWM_ConfigChannel+0x9e>

08002010 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002010:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002012:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002014:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8002016:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002018:	ea23 0304 	bic.w	r3, r3, r4
 800201c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800201e:	6a03      	ldr	r3, [r0, #32]
 8002020:	408a      	lsls	r2, r1
 8002022:	431a      	orrs	r2, r3
 8002024:	6202      	str	r2, [r0, #32]
 8002026:	bd10      	pop	{r4, pc}

08002028 <HAL_TIM_PWM_Start>:
{
 8002028:	b510      	push	{r4, lr}
 800202a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800202c:	2201      	movs	r2, #1
 800202e:	6800      	ldr	r0, [r0, #0]
 8002030:	f7ff ffee 	bl	8002010 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	4a06      	ldr	r2, [pc, #24]	; (8002050 <HAL_TIM_PWM_Start+0x28>)
}
 8002038:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800203a:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800203c:	bf02      	ittt	eq
 800203e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002040:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002044:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	601a      	str	r2, [r3, #0]
}
 800204e:	bd10      	pop	{r4, pc}
 8002050:	40012c00 	.word	0x40012c00

08002054 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002054:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002058:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800205a:	2b01      	cmp	r3, #1
 800205c:	f04f 0302 	mov.w	r3, #2
 8002060:	d018      	beq.n	8002094 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002062:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002066:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002068:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800206a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800206c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800206e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002072:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	4322      	orrs	r2, r4
 8002078:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002080:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	430a      	orrs	r2, r1
 8002086:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002088:	2301      	movs	r3, #1
 800208a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800208e:	2300      	movs	r3, #0
 8002090:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002094:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002096:	bd10      	pop	{r4, pc}

08002098 <HAL_TIMEx_CommutationCallback>:
 8002098:	4770      	bx	lr

0800209a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800209a:	4770      	bx	lr

0800209c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800209c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a0:	6805      	ldr	r5, [r0, #0]
 80020a2:	68c2      	ldr	r2, [r0, #12]
 80020a4:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020a6:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020ac:	4313      	orrs	r3, r2
 80020ae:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020b0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80020b2:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020b4:	430b      	orrs	r3, r1
 80020b6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80020b8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80020bc:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020c0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020c6:	696b      	ldr	r3, [r5, #20]
 80020c8:	6982      	ldr	r2, [r0, #24]
 80020ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020ce:	4313      	orrs	r3, r2
 80020d0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020d2:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <UART_SetConfig+0x138>)
{
 80020d4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80020d6:	429d      	cmp	r5, r3
 80020d8:	f04f 0419 	mov.w	r4, #25
 80020dc:	d146      	bne.n	800216c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020de:	f7ff fbbf 	bl	8001860 <HAL_RCC_GetPCLK2Freq>
 80020e2:	fb04 f300 	mul.w	r3, r4, r0
 80020e6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80020ea:	f04f 0864 	mov.w	r8, #100	; 0x64
 80020ee:	00b6      	lsls	r6, r6, #2
 80020f0:	fbb3 f3f6 	udiv	r3, r3, r6
 80020f4:	fbb3 f3f8 	udiv	r3, r3, r8
 80020f8:	011e      	lsls	r6, r3, #4
 80020fa:	f7ff fbb1 	bl	8001860 <HAL_RCC_GetPCLK2Freq>
 80020fe:	4360      	muls	r0, r4
 8002100:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	fbb0 f7f3 	udiv	r7, r0, r3
 800210a:	f7ff fba9 	bl	8001860 <HAL_RCC_GetPCLK2Freq>
 800210e:	4360      	muls	r0, r4
 8002110:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	fbb0 f3f3 	udiv	r3, r0, r3
 800211a:	fbb3 f3f8 	udiv	r3, r3, r8
 800211e:	fb08 7313 	mls	r3, r8, r3, r7
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	3332      	adds	r3, #50	; 0x32
 8002126:	fbb3 f3f8 	udiv	r3, r3, r8
 800212a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800212e:	f7ff fb97 	bl	8001860 <HAL_RCC_GetPCLK2Freq>
 8002132:	4360      	muls	r0, r4
 8002134:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002138:	0092      	lsls	r2, r2, #2
 800213a:	fbb0 faf2 	udiv	sl, r0, r2
 800213e:	f7ff fb8f 	bl	8001860 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002142:	4360      	muls	r0, r4
 8002144:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002152:	fb08 a313 	mls	r3, r8, r3, sl
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	3332      	adds	r3, #50	; 0x32
 800215a:	fbb3 f3f8 	udiv	r3, r3, r8
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	433b      	orrs	r3, r7
 8002164:	4433      	add	r3, r6
 8002166:	60ab      	str	r3, [r5, #8]
 8002168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800216c:	f7ff fb68 	bl	8001840 <HAL_RCC_GetPCLK1Freq>
 8002170:	fb04 f300 	mul.w	r3, r4, r0
 8002174:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002178:	f04f 0864 	mov.w	r8, #100	; 0x64
 800217c:	00b6      	lsls	r6, r6, #2
 800217e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002182:	fbb3 f3f8 	udiv	r3, r3, r8
 8002186:	011e      	lsls	r6, r3, #4
 8002188:	f7ff fb5a 	bl	8001840 <HAL_RCC_GetPCLK1Freq>
 800218c:	4360      	muls	r0, r4
 800218e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	fbb0 f7f3 	udiv	r7, r0, r3
 8002198:	f7ff fb52 	bl	8001840 <HAL_RCC_GetPCLK1Freq>
 800219c:	4360      	muls	r0, r4
 800219e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a8:	fbb3 f3f8 	udiv	r3, r3, r8
 80021ac:	fb08 7313 	mls	r3, r8, r3, r7
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	3332      	adds	r3, #50	; 0x32
 80021b4:	fbb3 f3f8 	udiv	r3, r3, r8
 80021b8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80021bc:	f7ff fb40 	bl	8001840 <HAL_RCC_GetPCLK1Freq>
 80021c0:	4360      	muls	r0, r4
 80021c2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	fbb0 faf2 	udiv	sl, r0, r2
 80021cc:	f7ff fb38 	bl	8001840 <HAL_RCC_GetPCLK1Freq>
 80021d0:	e7b7      	b.n	8002142 <UART_SetConfig+0xa6>
 80021d2:	bf00      	nop
 80021d4:	40013800 	.word	0x40013800

080021d8 <HAL_UART_Init>:
{
 80021d8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80021da:	4604      	mov	r4, r0
 80021dc:	b340      	cbz	r0, 8002230 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80021de:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021e6:	b91b      	cbnz	r3, 80021f0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021e8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021ec:	f000 fb5e 	bl	80028ac <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80021f0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80021f2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021f8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80021fa:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80021fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002200:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002202:	f7ff ff4b 	bl	800209c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002206:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002208:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002218:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002220:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002222:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002224:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002226:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800222a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800222e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002230:	2001      	movs	r0, #1
}
 8002232:	bd10      	pop	{r4, pc}

08002234 <write_lcd>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void write_lcd (uint8_t data, uint8_t cmd_data)
{
 8002234:	b510      	push	{r4, lr}
	// identifica comando ou dado
	if (cmd_data) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8002236:	460a      	mov	r2, r1
{
 8002238:	4604      	mov	r4, r0
	if (cmd_data) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 800223a:	b101      	cbz	r1, 800223e <write_lcd+0xa>
 800223c:	2201      	movs	r2, #1
	else 					HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 800223e:	2120      	movs	r1, #32
 8002240:	4832      	ldr	r0, [pc, #200]	; (800230c <write_lcd+0xd8>)
 8002242:	f7ff f805 	bl	8001250 <HAL_GPIO_WritePin>

	// 4 bits high
	if (data & 0x80) HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8002246:	0623      	lsls	r3, r4, #24
 8002248:	bf4c      	ite	mi
 800224a:	2201      	movmi	r2, #1
	else						 HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 800224c:	2200      	movpl	r2, #0
 800224e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002252:	482f      	ldr	r0, [pc, #188]	; (8002310 <write_lcd+0xdc>)
 8002254:	f7fe fffc 	bl	8001250 <HAL_GPIO_WritePin>
	if (data & 0x40) HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8002258:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 800225c:	bf18      	it	ne
 800225e:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8002260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002264:	482a      	ldr	r0, [pc, #168]	; (8002310 <write_lcd+0xdc>)
 8002266:	f7fe fff3 	bl	8001250 <HAL_GPIO_WritePin>
	if (data & 0x20) HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 800226a:	f014 0220 	ands.w	r2, r4, #32
 800226e:	bf18      	it	ne
 8002270:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8002272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002276:	4826      	ldr	r0, [pc, #152]	; (8002310 <write_lcd+0xdc>)
 8002278:	f7fe ffea 	bl	8001250 <HAL_GPIO_WritePin>
	if (data & 0x10) HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 800227c:	f014 0210 	ands.w	r2, r4, #16
 8002280:	bf18      	it	ne
 8002282:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8002284:	2108      	movs	r1, #8
 8002286:	4821      	ldr	r0, [pc, #132]	; (800230c <write_lcd+0xd8>)
 8002288:	f7fe ffe2 	bl	8001250 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 800228c:	2201      	movs	r2, #1
 800228e:	2110      	movs	r1, #16
 8002290:	481e      	ldr	r0, [pc, #120]	; (800230c <write_lcd+0xd8>)
 8002292:	f7fe ffdd 	bl	8001250 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8002296:	2002      	movs	r0, #2
 8002298:	f7fe fb8a 	bl	80009b0 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 800229c:	2200      	movs	r2, #0
 800229e:	2110      	movs	r1, #16
 80022a0:	481a      	ldr	r0, [pc, #104]	; (800230c <write_lcd+0xd8>)
 80022a2:	f7fe ffd5 	bl	8001250 <HAL_GPIO_WritePin>

	// 4 bits Low
	if (data & 0x08) HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80022a6:	f014 0208 	ands.w	r2, r4, #8
 80022aa:	bf18      	it	ne
 80022ac:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80022ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b2:	4817      	ldr	r0, [pc, #92]	; (8002310 <write_lcd+0xdc>)
 80022b4:	f7fe ffcc 	bl	8001250 <HAL_GPIO_WritePin>
	if (data & 0x04) HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80022b8:	f014 0204 	ands.w	r2, r4, #4
 80022bc:	bf18      	it	ne
 80022be:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80022c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c4:	4812      	ldr	r0, [pc, #72]	; (8002310 <write_lcd+0xdc>)
 80022c6:	f7fe ffc3 	bl	8001250 <HAL_GPIO_WritePin>
	if (data & 0x02) HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80022ca:	f014 0202 	ands.w	r2, r4, #2
 80022ce:	bf18      	it	ne
 80022d0:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80022d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022d6:	480e      	ldr	r0, [pc, #56]	; (8002310 <write_lcd+0xdc>)
 80022d8:	f7fe ffba 	bl	8001250 <HAL_GPIO_WritePin>
	if (data & 0x01) HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80022dc:	f014 0201 	ands.w	r2, r4, #1
 80022e0:	bf18      	it	ne
 80022e2:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 80022e4:	2108      	movs	r1, #8
 80022e6:	4809      	ldr	r0, [pc, #36]	; (800230c <write_lcd+0xd8>)
 80022e8:	f7fe ffb2 	bl	8001250 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80022ec:	2201      	movs	r2, #1
 80022ee:	2110      	movs	r1, #16
 80022f0:	4806      	ldr	r0, [pc, #24]	; (800230c <write_lcd+0xd8>)
 80022f2:	f7fe ffad 	bl	8001250 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80022f6:	2002      	movs	r0, #2
 80022f8:	f7fe fb5a 	bl	80009b0 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
}
 80022fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	2110      	movs	r1, #16
 8002304:	4801      	ldr	r0, [pc, #4]	; (800230c <write_lcd+0xd8>)
 8002306:	f7fe bfa3 	b.w	8001250 <HAL_GPIO_WritePin>
 800230a:	bf00      	nop
 800230c:	40010c00 	.word	0x40010c00
 8002310:	40010800 	.word	0x40010800

08002314 <init_lcd>:

/* init_LCD - Inicializa o display em 4bits */
void init_lcd(void)
{
 8002314:	b508      	push	{r3, lr}
	write_lcd(0x33, 0);
 8002316:	2100      	movs	r1, #0
 8002318:	2033      	movs	r0, #51	; 0x33
 800231a:	f7ff ff8b 	bl	8002234 <write_lcd>
	write_lcd(0x32, 0);
 800231e:	2100      	movs	r1, #0
 8002320:	2032      	movs	r0, #50	; 0x32
 8002322:	f7ff ff87 	bl	8002234 <write_lcd>
	write_lcd(0x28, 0);
 8002326:	2100      	movs	r1, #0
 8002328:	2028      	movs	r0, #40	; 0x28
 800232a:	f7ff ff83 	bl	8002234 <write_lcd>
	write_lcd(0x06, 0);
 800232e:	2100      	movs	r1, #0
 8002330:	2006      	movs	r0, #6
 8002332:	f7ff ff7f 	bl	8002234 <write_lcd>
	write_lcd(0x0C, 0);
 8002336:	2100      	movs	r1, #0
 8002338:	200c      	movs	r0, #12
 800233a:	f7ff ff7b 	bl	8002234 <write_lcd>
	write_lcd(0x01, 0);
}
 800233e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	write_lcd(0x01, 0);
 8002342:	2100      	movs	r1, #0
 8002344:	2001      	movs	r0, #1
 8002346:	f7ff bf75 	b.w	8002234 <write_lcd>

0800234a <string_lcd>:

/* string_lcd - escreve string no LCD */
void string_lcd (char *string)
{
 800234a:	b510      	push	{r4, lr}
 800234c:	1e44      	subs	r4, r0, #1
	while(*string) write_lcd(*string++, 1);
 800234e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002352:	b900      	cbnz	r0, 8002356 <string_lcd+0xc>
}
 8002354:	bd10      	pop	{r4, pc}
	while(*string) write_lcd(*string++, 1);
 8002356:	2101      	movs	r1, #1
 8002358:	f7ff ff6c 	bl	8002234 <write_lcd>
 800235c:	e7f7      	b.n	800234e <string_lcd+0x4>

0800235e <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800235e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8002362:	b510      	push	{r4, lr}
 8002364:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002366:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002368:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800236a:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800236c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800236e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002370:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002374:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002376:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002378:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800237a:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800237c:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800237e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002380:	f7fe ffec 	bl	800135c <HAL_RCC_OscConfig>
 8002384:	b100      	cbz	r0, 8002388 <SystemClock_Config+0x2a>
 8002386:	e7fe      	b.n	8002386 <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002388:	230f      	movs	r3, #15
 800238a:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800238c:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800238e:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002390:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002392:	4621      	mov	r1, r4
 8002394:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002396:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002398:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800239a:	f7ff f9a7 	bl	80016ec <HAL_RCC_ClockConfig>
 800239e:	b100      	cbz	r0, 80023a2 <SystemClock_Config+0x44>
 80023a0:	e7fe      	b.n	80023a0 <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80023a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023a6:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023a8:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80023aa:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ac:	f7ff fa68 	bl	8001880 <HAL_RCCEx_PeriphCLKConfig>
 80023b0:	4604      	mov	r4, r0
 80023b2:	b100      	cbz	r0, 80023b6 <SystemClock_Config+0x58>
 80023b4:	e7fe      	b.n	80023b4 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80023b6:	f7ff fa3d 	bl	8001834 <HAL_RCC_GetHCLKFreq>
 80023ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023be:	fbb0 f0f3 	udiv	r0, r0, r3
 80023c2:	f7fe fe3d 	bl	8001040 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80023c6:	2004      	movs	r0, #4
 80023c8:	f7fe fe50 	bl	800106c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80023cc:	4622      	mov	r2, r4
 80023ce:	4621      	mov	r1, r4
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f7fe fdf4 	bl	8000fc0 <HAL_NVIC_SetPriority>
}
 80023d8:	b014      	add	sp, #80	; 0x50
 80023da:	bd10      	pop	{r4, pc}

080023dc <main>:
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 80023e0:	f7fe fac2 	bl	8000968 <HAL_Init>
  SystemClock_Config();
 80023e4:	f7ff ffbb 	bl	800235e <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e8:	4b9f      	ldr	r3, [pc, #636]	; (8002668 <main+0x28c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|D4_Pin|EN_Pin|RS_Pin, GPIO_PIN_RESET);
 80023ea:	2139      	movs	r1, #57	; 0x39
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ec:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|D4_Pin|EN_Pin|RS_Pin, GPIO_PIN_RESET);
 80023ee:	489f      	ldr	r0, [pc, #636]	; (800266c <main+0x290>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f0:	f042 0220 	orr.w	r2, r2, #32
 80023f4:	619a      	str	r2, [r3, #24]
 80023f6:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD1_Pin D4_Pin EN_Pin RS_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|D4_Pin|EN_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f8:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fa:	f002 0220 	and.w	r2, r2, #32
 80023fe:	9200      	str	r2, [sp, #0]
 8002400:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002402:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2402      	movs	r4, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	f042 0204 	orr.w	r2, r2, #4
 800240a:	619a      	str	r2, [r3, #24]
 800240c:	699a      	ldr	r2, [r3, #24]
 800240e:	f002 0204 	and.w	r2, r2, #4
 8002412:	9201      	str	r2, [sp, #4]
 8002414:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002416:	699a      	ldr	r2, [r3, #24]
 8002418:	f042 0208 	orr.w	r2, r2, #8
 800241c:	619a      	str	r2, [r3, #24]
 800241e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|D4_Pin|EN_Pin|RS_Pin, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	9302      	str	r3, [sp, #8]
 8002428:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|D4_Pin|EN_Pin|RS_Pin, GPIO_PIN_RESET);
 800242a:	f7fe ff11 	bl	8001250 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 800242e:	2200      	movs	r2, #0
 8002430:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8002434:	488e      	ldr	r0, [pc, #568]	; (8002670 <main+0x294>)
 8002436:	f7fe ff0b 	bl	8001250 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD1_Pin|D4_Pin|EN_Pin|RS_Pin;
 800243a:	2339      	movs	r3, #57	; 0x39
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	a905      	add	r1, sp, #20
 800243e:	488b      	ldr	r0, [pc, #556]	; (800266c <main+0x290>)
  GPIO_InitStruct.Pin = LD1_Pin|D4_Pin|EN_Pin|RS_Pin;
 8002440:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002442:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	f7fe fe23 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin;
 800244a:	f44f 4318 	mov.w	r3, #38912	; 0x9800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	a905      	add	r1, sp, #20
 8002450:	4887      	ldr	r0, [pc, #540]	; (8002670 <main+0x294>)
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin;
 8002452:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002454:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002458:	f7fe fe1a 	bl	8001090 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 800245c:	4885      	ldr	r0, [pc, #532]	; (8002674 <main+0x298>)
  hi2c1.Init.ClockSpeed = 400000;
 800245e:	4b86      	ldr	r3, [pc, #536]	; (8002678 <main+0x29c>)
 8002460:	4986      	ldr	r1, [pc, #536]	; (800267c <main+0x2a0>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002462:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8002466:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800246a:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800246c:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800246e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002470:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002472:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002474:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002476:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002478:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800247a:	f7fe feef 	bl	800125c <HAL_I2C_Init>
 800247e:	b100      	cbz	r0, 8002482 <main+0xa6>
 8002480:	e7fe      	b.n	8002480 <main+0xa4>
  huart1.Init.BaudRate = 9600;
 8002482:	f44f 5816 	mov.w	r8, #9600	; 0x2580
  huart1.Instance = USART1;
 8002486:	4b7e      	ldr	r3, [pc, #504]	; (8002680 <main+0x2a4>)
  huart1.Init.BaudRate = 9600;
 8002488:	4a7e      	ldr	r2, [pc, #504]	; (8002684 <main+0x2a8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 9600;
 800248c:	e883 0104 	stmia.w	r3, {r2, r8}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002490:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002492:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002494:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002496:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002498:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800249a:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 800249c:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800249e:	f7ff fe9b 	bl	80021d8 <HAL_UART_Init>
 80024a2:	b100      	cbz	r0, 80024a6 <main+0xca>
 80024a4:	e7fe      	b.n	80024a4 <main+0xc8>
  htim2.Init.Prescaler = 8;
 80024a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024aa:	f04f 0c08 	mov.w	ip, #8
  htim2.Instance = TIM2;
 80024ae:	4c76      	ldr	r4, [pc, #472]	; (8002688 <main+0x2ac>)
  htim2.Init.Prescaler = 8;
 80024b0:	e884 1008 	stmia.w	r4, {r3, ip}
  htim2.Init.Period = 100;
 80024b4:	2364      	movs	r3, #100	; 0x64
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b6:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ba:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024bc:	4620      	mov	r0, r4
  htim2.Init.Period = 100;
 80024be:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024c0:	f7ff fcfe 	bl	8001ec0 <HAL_TIM_PWM_Init>
 80024c4:	b100      	cbz	r0, 80024c8 <main+0xec>
 80024c6:	e7fe      	b.n	80024c6 <main+0xea>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c8:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ca:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024cc:	a903      	add	r1, sp, #12
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7ff fdc0 	bl	8002054 <HAL_TIMEx_MasterConfigSynchronization>
 80024d4:	4602      	mov	r2, r0
 80024d6:	b100      	cbz	r0, 80024da <main+0xfe>
 80024d8:	e7fe      	b.n	80024d8 <main+0xfc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024da:	2360      	movs	r3, #96	; 0x60
 80024dc:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80024de:	2304      	movs	r3, #4
  sConfigOC.Pulse = 0;
 80024e0:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024e2:	9007      	str	r0, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e4:	a905      	add	r1, sp, #20
 80024e6:	4620      	mov	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80024e8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ea:	f7ff fd2f 	bl	8001f4c <HAL_TIM_PWM_ConfigChannel>
 80024ee:	4606      	mov	r6, r0
 80024f0:	b100      	cbz	r0, 80024f4 <main+0x118>
 80024f2:	e7fe      	b.n	80024f2 <main+0x116>
  HAL_TIM_MspPostInit(&htim2);
 80024f4:	4620      	mov	r0, r4
 80024f6:	f000 f9b7 	bl	8002868 <HAL_TIM_MspPostInit>
  htim3.Init.Prescaler = 360;
 80024fa:	f44f 7eb4 	mov.w	lr, #360	; 0x168
  htim3.Instance = TIM3;
 80024fe:	4c63      	ldr	r4, [pc, #396]	; (800268c <main+0x2b0>)
  htim3.Init.Prescaler = 360;
 8002500:	4b63      	ldr	r3, [pc, #396]	; (8002690 <main+0x2b4>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002502:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 360;
 8002504:	e884 4008 	stmia.w	r4, {r3, lr}
  htim3.Init.Period = 25;
 8002508:	2319      	movs	r3, #25
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250a:	60a6      	str	r6, [r4, #8]
  htim3.Init.Period = 25;
 800250c:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250e:	6126      	str	r6, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002510:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002512:	f7ff fcbb 	bl	8001e8c <HAL_TIM_Base_Init>
 8002516:	b100      	cbz	r0, 800251a <main+0x13e>
 8002518:	e7fe      	b.n	8002518 <main+0x13c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800251a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800251e:	a905      	add	r1, sp, #20
 8002520:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002522:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002524:	f7ff fb19 	bl	8001b5a <HAL_TIM_ConfigClockSource>
 8002528:	b100      	cbz	r0, 800252c <main+0x150>
 800252a:	e7fe      	b.n	800252a <main+0x14e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252c:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252e:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002530:	a903      	add	r1, sp, #12
 8002532:	4620      	mov	r0, r4
 8002534:	f7ff fd8e 	bl	8002054 <HAL_TIMEx_MasterConfigSynchronization>
 8002538:	b100      	cbz	r0, 800253c <main+0x160>
 800253a:	e7fe      	b.n	800253a <main+0x15e>
  hadc1.Instance = ADC1;
 800253c:	4c55      	ldr	r4, [pc, #340]	; (8002694 <main+0x2b8>)
 800253e:	4b56      	ldr	r3, [pc, #344]	; (8002698 <main+0x2bc>)
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002540:	60a0      	str	r0, [r4, #8]
  hadc1.Instance = ADC1;
 8002542:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002544:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002548:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800254a:	6160      	str	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800254c:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800254e:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002550:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 8002552:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002554:	f7fe fc20 	bl	8000d98 <HAL_ADC_Init>
 8002558:	b100      	cbz	r0, 800255c <main+0x180>
 800255a:	e7fe      	b.n	800255a <main+0x17e>
  sConfig.Channel = ADC_CHANNEL_3;
 800255c:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800255e:	a905      	add	r1, sp, #20
 8002560:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8002562:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002564:	9506      	str	r5, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8002566:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002568:	f7fe fad6 	bl	8000b18 <HAL_ADC_ConfigChannel>
 800256c:	b100      	cbz	r0, 8002570 <main+0x194>
 800256e:	e7fe      	b.n	800256e <main+0x192>
  htim4.Init.Prescaler = 8;
 8002570:	2708      	movs	r7, #8
  htim4.Instance = TIM4;
 8002572:	4c4a      	ldr	r4, [pc, #296]	; (800269c <main+0x2c0>)
  htim4.Init.Prescaler = 8;
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <main+0x2c4>)
  htim4.Init.Period = 100;
 8002576:	2264      	movs	r2, #100	; 0x64
  htim4.Init.Prescaler = 8;
 8002578:	e884 0088 	stmia.w	r4, {r3, r7}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257c:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800257e:	4620      	mov	r0, r4
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002580:	60a3      	str	r3, [r4, #8]
  htim4.Init.Period = 100;
 8002582:	60e2      	str	r2, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002584:	6123      	str	r3, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002586:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002588:	f7ff fc9a 	bl	8001ec0 <HAL_TIM_PWM_Init>
 800258c:	b100      	cbz	r0, 8002590 <main+0x1b4>
 800258e:	e7fe      	b.n	800258e <main+0x1b2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002590:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002592:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002594:	a903      	add	r1, sp, #12
 8002596:	4620      	mov	r0, r4
 8002598:	f7ff fd5c 	bl	8002054 <HAL_TIMEx_MasterConfigSynchronization>
 800259c:	4602      	mov	r2, r0
 800259e:	b100      	cbz	r0, 80025a2 <main+0x1c6>
 80025a0:	e7fe      	b.n	80025a0 <main+0x1c4>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a2:	2360      	movs	r3, #96	; 0x60
 80025a4:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80025a6:	2304      	movs	r3, #4
  sConfigOC.Pulse = 0;
 80025a8:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025aa:	9007      	str	r0, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ac:	a905      	add	r1, sp, #20
 80025ae:	4620      	mov	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80025b0:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b2:	f7ff fccb 	bl	8001f4c <HAL_TIM_PWM_ConfigChannel>
 80025b6:	4605      	mov	r5, r0
 80025b8:	b100      	cbz	r0, 80025bc <main+0x1e0>
 80025ba:	e7fe      	b.n	80025ba <main+0x1de>
  HAL_TIM_MspPostInit(&htim4);
 80025bc:	4620      	mov	r0, r4
 80025be:	f000 f953 	bl	8002868 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80025c2:	4629      	mov	r1, r5
 80025c4:	4830      	ldr	r0, [pc, #192]	; (8002688 <main+0x2ac>)
 80025c6:	f7ff fd2f 	bl	8002028 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80025ca:	4629      	mov	r1, r5
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7ff fd2b 	bl	8002028 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80025d2:	482e      	ldr	r0, [pc, #184]	; (800268c <main+0x2b0>)
 80025d4:	f7ff fab6 	bl	8001b44 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80025d8:	482e      	ldr	r0, [pc, #184]	; (8002694 <main+0x2b8>)
 80025da:	f7fe fc77 	bl	8000ecc <HAL_ADCEx_Calibration_Start>
	  		fine_amp = (adc_value * 0.244140625)/100;
 80025de:	f04f 0800 	mov.w	r8, #0
  init_lcd();
 80025e2:	f7ff fe97 	bl	8002314 <init_lcd>
	  	  	HAL_ADC_Start(&hadc1);
 80025e6:	4d2b      	ldr	r5, [pc, #172]	; (8002694 <main+0x2b8>)
	  		fine_amp = (adc_value * 0.244140625)/100;
 80025e8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80026bc <main+0x2e0>
	  		sprintf(buffer,"%04d",adc_value);
 80025ec:	4c2d      	ldr	r4, [pc, #180]	; (80026a4 <main+0x2c8>)
	  	  	HAL_ADC_Start(&hadc1);
 80025ee:	4628      	mov	r0, r5
 80025f0:	f7fe fb4e 	bl	8000c90 <HAL_ADC_Start>
	  		HAL_ADC_PollForConversion(&hadc1, 50);
 80025f4:	2132      	movs	r1, #50	; 0x32
 80025f6:	4628      	mov	r0, r5
 80025f8:	f7fe f9ec 	bl	80009d4 <HAL_ADC_PollForConversion>
	  		adc_value = HAL_ADC_GetValue(&hadc1);
 80025fc:	4628      	mov	r0, r5
 80025fe:	f7fe fa87 	bl	8000b10 <HAL_ADC_GetValue>
 8002602:	4e29      	ldr	r6, [pc, #164]	; (80026a8 <main+0x2cc>)
 8002604:	8030      	strh	r0, [r6, #0]
	  		HAL_ADC_Stop(&hadc1);
 8002606:	4628      	mov	r0, r5
 8002608:	f7fe fc46 	bl	8000e98 <HAL_ADC_Stop>
	  		fine_amp = (adc_value * 0.244140625)/100;
 800260c:	8837      	ldrh	r7, [r6, #0]
 800260e:	4e27      	ldr	r6, [pc, #156]	; (80026ac <main+0x2d0>)
 8002610:	4638      	mov	r0, r7
 8002612:	f7fd feed 	bl	80003f0 <__aeabi_i2d>
 8002616:	4642      	mov	r2, r8
 8002618:	464b      	mov	r3, r9
 800261a:	f7fd ff4f 	bl	80004bc <__aeabi_dmul>
 800261e:	2200      	movs	r2, #0
 8002620:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <main+0x2d4>)
 8002622:	f7fe f875 	bl	8000710 <__aeabi_ddiv>
 8002626:	f7fe f95b 	bl	80008e0 <__aeabi_d2uiz>
 800262a:	b280      	uxth	r0, r0
 800262c:	8030      	strh	r0, [r6, #0]
	  		if(fine_amp<=0) fine_amp=1;
 800262e:	b908      	cbnz	r0, 8002634 <main+0x258>
 8002630:	2301      	movs	r3, #1
 8002632:	8033      	strh	r3, [r6, #0]
	  		sprintf(buffer,"%04d",adc_value);
 8002634:	463a      	mov	r2, r7
 8002636:	491f      	ldr	r1, [pc, #124]	; (80026b4 <main+0x2d8>)
 8002638:	4620      	mov	r0, r4
 800263a:	f000 fa1f 	bl	8002a7c <siprintf>
	  		write_lcd(0x80,0);
 800263e:	2100      	movs	r1, #0
 8002640:	2080      	movs	r0, #128	; 0x80
 8002642:	f7ff fdf7 	bl	8002234 <write_lcd>
	  		string_lcd(buffer);
 8002646:	4620      	mov	r0, r4
 8002648:	f7ff fe7f 	bl	800234a <string_lcd>
	  		sprintf(buffer,"%02d",fine_amp);
 800264c:	8832      	ldrh	r2, [r6, #0]
 800264e:	491a      	ldr	r1, [pc, #104]	; (80026b8 <main+0x2dc>)
 8002650:	4620      	mov	r0, r4
 8002652:	f000 fa13 	bl	8002a7c <siprintf>
	  		write_lcd(0xC0,0);
 8002656:	2100      	movs	r1, #0
 8002658:	20c0      	movs	r0, #192	; 0xc0
 800265a:	f7ff fdeb 	bl	8002234 <write_lcd>
	  		string_lcd(buffer);
 800265e:	4620      	mov	r0, r4
 8002660:	f7ff fe73 	bl	800234a <string_lcd>
	  	  	HAL_ADC_Start(&hadc1);
 8002664:	e7c3      	b.n	80025ee <main+0x212>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	40010c00 	.word	0x40010c00
 8002670:	40010800 	.word	0x40010800
 8002674:	200001e8 	.word	0x200001e8
 8002678:	00061a80 	.word	0x00061a80
 800267c:	40005400 	.word	0x40005400
 8002680:	200002ac 	.word	0x200002ac
 8002684:	40013800 	.word	0x40013800
 8002688:	200003b4 	.word	0x200003b4
 800268c:	2000023c 	.word	0x2000023c
 8002690:	40000400 	.word	0x40000400
 8002694:	2000027c 	.word	0x2000027c
 8002698:	40012400 	.word	0x40012400
 800269c:	200001a8 	.word	0x200001a8
 80026a0:	40000800 	.word	0x40000800
 80026a4:	200002ec 	.word	0x200002ec
 80026a8:	20000190 	.word	0x20000190
 80026ac:	200003f4 	.word	0x200003f4
 80026b0:	40590000 	.word	0x40590000
 80026b4:	08003328 	.word	0x08003328
 80026b8:	0800332d 	.word	0x0800332d
 80026bc:	3fcf4000 	.word	0x3fcf4000

080026c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026c0:	4b20      	ldr	r3, [pc, #128]	; (8002744 <HAL_MspInit+0x84>)
{
 80026c2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80026c4:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026c6:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80026c8:	f042 0201 	orr.w	r2, r2, #1
 80026cc:	619a      	str	r2, [r3, #24]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026d8:	f7fe fc60 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80026dc:	2200      	movs	r2, #0
 80026de:	f06f 000b 	mvn.w	r0, #11
 80026e2:	4611      	mov	r1, r2
 80026e4:	f7fe fc6c 	bl	8000fc0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80026e8:	2200      	movs	r2, #0
 80026ea:	f06f 000a 	mvn.w	r0, #10
 80026ee:	4611      	mov	r1, r2
 80026f0:	f7fe fc66 	bl	8000fc0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	f06f 0009 	mvn.w	r0, #9
 80026fa:	4611      	mov	r1, r2
 80026fc:	f7fe fc60 	bl	8000fc0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002700:	2200      	movs	r2, #0
 8002702:	f06f 0004 	mvn.w	r0, #4
 8002706:	4611      	mov	r1, r2
 8002708:	f7fe fc5a 	bl	8000fc0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800270c:	2200      	movs	r2, #0
 800270e:	f06f 0003 	mvn.w	r0, #3
 8002712:	4611      	mov	r1, r2
 8002714:	f7fe fc54 	bl	8000fc0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002718:	2200      	movs	r2, #0
 800271a:	f06f 0001 	mvn.w	r0, #1
 800271e:	4611      	mov	r1, r2
 8002720:	f7fe fc4e 	bl	8000fc0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002724:	2200      	movs	r2, #0
 8002726:	f04f 30ff 	mov.w	r0, #4294967295
 800272a:	4611      	mov	r1, r2
 800272c:	f7fe fc48 	bl	8000fc0 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002730:	4a05      	ldr	r2, [pc, #20]	; (8002748 <HAL_MspInit+0x88>)
 8002732:	6853      	ldr	r3, [r2, #4]
 8002734:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800273c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800273e:	b003      	add	sp, #12
 8002740:	f85d fb04 	ldr.w	pc, [sp], #4
 8002744:	40021000 	.word	0x40021000
 8002748:	40010000 	.word	0x40010000

0800274c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800274c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800274e:	6802      	ldr	r2, [r0, #0]
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <HAL_ADC_MspInit+0x38>)
 8002752:	429a      	cmp	r2, r3
 8002754:	d112      	bne.n	800277c <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002756:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800275a:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800275e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002762:	619a      	str	r2, [r3, #24]
 8002764:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002766:	4808      	ldr	r0, [pc, #32]	; (8002788 <HAL_ADC_MspInit+0x3c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002768:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002770:	2308      	movs	r3, #8
 8002772:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002774:	2303      	movs	r3, #3
 8002776:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	f7fe fc8a 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800277c:	b007      	add	sp, #28
 800277e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002782:	bf00      	nop
 8002784:	40012400 	.word	0x40012400
 8002788:	40010800 	.word	0x40010800

0800278c <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800278c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800278e:	6802      	ldr	r2, [r0, #0]
 8002790:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_I2C_MspInit+0x48>)
 8002792:	429a      	cmp	r2, r3
 8002794:	d11b      	bne.n	80027ce <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002796:	f44f 7340 	mov.w	r3, #768	; 0x300
 800279a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279c:	2312      	movs	r3, #18
 800279e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a2:	a902      	add	r1, sp, #8
 80027a4:	480c      	ldr	r0, [pc, #48]	; (80027d8 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a8:	f7fe fc72 	bl	8001090 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80027ac:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <HAL_I2C_MspInit+0x50>)
 80027ae:	6853      	ldr	r3, [r2, #4]
 80027b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ba:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_I2C_MspInit+0x54>)
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80027c2:	61da      	str	r2, [r3, #28]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027ce:	b007      	add	sp, #28
 80027d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80027d4:	40005400 	.word	0x40005400
 80027d8:	40010c00 	.word	0x40010c00
 80027dc:	40010000 	.word	0x40010000
 80027e0:	40021000 	.word	0x40021000

080027e4 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 80027e4:	6803      	ldr	r3, [r0, #0]
{
 80027e6:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ec:	d10c      	bne.n	8002808 <HAL_TIM_PWM_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ee:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	f042 0201 	orr.w	r2, r2, #1
 80027f8:	61da      	str	r2, [r3, #28]
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002804:	b002      	add	sp, #8
 8002806:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM4)
 8002808:	4a06      	ldr	r2, [pc, #24]	; (8002824 <HAL_TIM_PWM_MspInit+0x40>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d1fa      	bne.n	8002804 <HAL_TIM_PWM_MspInit+0x20>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_TIM_PWM_MspInit+0x44>)
 8002810:	69da      	ldr	r2, [r3, #28]
 8002812:	f042 0204 	orr.w	r2, r2, #4
 8002816:	61da      	str	r2, [r3, #28]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	9b01      	ldr	r3, [sp, #4]
}
 8002822:	e7ef      	b.n	8002804 <HAL_TIM_PWM_MspInit+0x20>
 8002824:	40000800 	.word	0x40000800
 8002828:	40021000 	.word	0x40021000

0800282c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800282c:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM3)
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <HAL_TIM_Base_MspInit+0x38>)
 8002830:	6802      	ldr	r2, [r0, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d112      	bne.n	800285c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002836:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 800283a:	69da      	ldr	r2, [r3, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800283c:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800283e:	f042 0202 	orr.w	r2, r2, #2
 8002842:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002844:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002846:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002848:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	9301      	str	r3, [sp, #4]
 8002850:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002852:	f7fe fbb5 	bl	8000fc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002856:	201d      	movs	r0, #29
 8002858:	f7fe fbe6 	bl	8001028 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800285c:	b003      	add	sp, #12
 800285e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002862:	bf00      	nop
 8002864:	40000400 	.word	0x40000400

08002868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002868:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 800286a:	6803      	ldr	r3, [r0, #0]
 800286c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002870:	d10b      	bne.n	800288a <HAL_TIM_MspPostInit+0x22>

  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002872:	2301      	movs	r3, #1
 8002874:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002876:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002878:	4669      	mov	r1, sp
 800287a:	4809      	ldr	r0, [pc, #36]	; (80028a0 <HAL_TIM_MspPostInit+0x38>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	9303      	str	r3, [sp, #12]
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	f7fe fc06 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002884:	b005      	add	sp, #20
 8002886:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM4)
 800288a:	4a06      	ldr	r2, [pc, #24]	; (80028a4 <HAL_TIM_MspPostInit+0x3c>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d1f9      	bne.n	8002884 <HAL_TIM_MspPostInit+0x1c>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002890:	2340      	movs	r3, #64	; 0x40
 8002892:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002896:	4669      	mov	r1, sp
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289c:	4802      	ldr	r0, [pc, #8]	; (80028a8 <HAL_TIM_MspPostInit+0x40>)
 800289e:	e7ef      	b.n	8002880 <HAL_TIM_MspPostInit+0x18>
 80028a0:	40010800 	.word	0x40010800
 80028a4:	40000800 	.word	0x40000800
 80028a8:	40010c00 	.word	0x40010c00

080028ac <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80028ae:	6802      	ldr	r2, [r0, #0]
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_UART_MspInit+0x50>)
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d11f      	bne.n	80028f6 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028b6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80028ba:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028bc:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 80028be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028c2:	619a      	str	r2, [r3, #24]
 80028c4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	480e      	ldr	r0, [pc, #56]	; (8002900 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80028c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028da:	2303      	movs	r3, #3
 80028dc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028de:	f7fe fbd7 	bl	8001090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ea:	a902      	add	r1, sp, #8
 80028ec:	4804      	ldr	r0, [pc, #16]	; (8002900 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f2:	f7fe fbcd 	bl	8001090 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028f6:	b007      	add	sp, #28
 80028f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80028fc:	40013800 	.word	0x40013800
 8002900:	40010800 	.word	0x40010800

08002904 <NMI_Handler>:
 8002904:	4770      	bx	lr

08002906 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002906:	e7fe      	b.n	8002906 <HardFault_Handler>

08002908 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002908:	e7fe      	b.n	8002908 <MemManage_Handler>

0800290a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800290a:	e7fe      	b.n	800290a <BusFault_Handler>

0800290c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800290c:	e7fe      	b.n	800290c <UsageFault_Handler>

0800290e <SVC_Handler>:
 800290e:	4770      	bx	lr

08002910 <DebugMon_Handler>:
 8002910:	4770      	bx	lr

08002912 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002912:	4770      	bx	lr

08002914 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002914:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002916:	f7fe f839 	bl	800098c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800291e:	f7fe bbb2 	b.w	8001086 <HAL_SYSTICK_IRQHandler>
	...

08002924 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 8002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002926:	4815      	ldr	r0, [pc, #84]	; (800297c <TIM3_IRQHandler+0x58>)
 8002928:	f7ff f9d5 	bl	8001cd6 <HAL_TIM_IRQHandler>


  	  	  	  	  for(i=0;i<10;i++)
                  {

  	  	  	  		  TIM2 -> CCR1 = sine_table[count]/fine_amp;
 800292c:	4a14      	ldr	r2, [pc, #80]	; (8002980 <TIM3_IRQHandler+0x5c>)
 800292e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8002932:	8814      	ldrh	r4, [r2, #0]
 8002934:	2200      	movs	r2, #0
 8002936:	4913      	ldr	r1, [pc, #76]	; (8002984 <TIM3_IRQHandler+0x60>)
 8002938:	f8df e05c 	ldr.w	lr, [pc, #92]	; 8002998 <TIM3_IRQHandler+0x74>
 800293c:	880b      	ldrh	r3, [r1, #0]
					  TIM4 -> CCR1 = sine_table2[count]/fine_amp;
 800293e:	4e12      	ldr	r6, [pc, #72]	; (8002988 <TIM3_IRQHandler+0x64>)
 8002940:	4d12      	ldr	r5, [pc, #72]	; (800298c <TIM3_IRQHandler+0x68>)
  	  	  	  		  TIM2 -> CCR1 = sine_table[count]/fine_amp;
 8002942:	f83e 0013 	ldrh.w	r0, [lr, r3, lsl #1]
  	  	  	  	  for(i=0;i<10;i++)
 8002946:	3201      	adds	r2, #1
  	  	  	  		  TIM2 -> CCR1 = sine_table[count]/fine_amp;
 8002948:	fbb0 f0f4 	udiv	r0, r0, r4
 800294c:	6378      	str	r0, [r7, #52]	; 0x34
					  TIM4 -> CCR1 = sine_table2[count]/fine_amp;
 800294e:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
  	  	  	  	  for(i=0;i<10;i++)
 8002952:	b292      	uxth	r2, r2
					  TIM4 -> CCR1 = sine_table2[count]/fine_amp;
 8002954:	fbb0 f0f4 	udiv	r0, r0, r4
  	  	  	  	  for(i=0;i<10;i++)
 8002958:	2a0a      	cmp	r2, #10
					  TIM4 -> CCR1 = sine_table2[count]/fine_amp;
 800295a:	6368      	str	r0, [r5, #52]	; 0x34
  	  	  	  	  for(i=0;i<10;i++)
 800295c:	d1f1      	bne.n	8002942 <TIM3_IRQHandler+0x1e>


				 }
                 count++;
 800295e:	3301      	adds	r3, #1
 8002960:	b29b      	uxth	r3, r3
 8002962:	480b      	ldr	r0, [pc, #44]	; (8002990 <TIM3_IRQHandler+0x6c>)
                 if(count>=64)
 8002964:	2b3f      	cmp	r3, #63	; 0x3f
 8002966:	8002      	strh	r2, [r0, #0]
                 {
                  count=0;
 8002968:	bf88      	it	hi
 800296a:	2300      	movhi	r3, #0
                 }
                 HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 800296c:	2201      	movs	r2, #1
                  count=0;
 800296e:	800b      	strh	r3, [r1, #0]
                 HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8002970:	4808      	ldr	r0, [pc, #32]	; (8002994 <TIM3_IRQHandler+0x70>)
 8002972:	4611      	mov	r1, r2

  /* USER CODE END TIM3_IRQn 1 */
}
 8002974:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                 HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8002978:	f7fe bc6a 	b.w	8001250 <HAL_GPIO_WritePin>
 800297c:	2000023c 	.word	0x2000023c
 8002980:	200003f4 	.word	0x200003f4
 8002984:	20000192 	.word	0x20000192
 8002988:	2000008a 	.word	0x2000008a
 800298c:	40000800 	.word	0x40000800
 8002990:	20000194 	.word	0x20000194
 8002994:	40010c00 	.word	0x40010c00
 8002998:	20000008 	.word	0x20000008

0800299c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800299c:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <SystemInit+0x40>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	f042 0201 	orr.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	4a0d      	ldr	r2, [pc, #52]	; (80029e0 <SystemInit+0x44>)
 80029aa:	400a      	ands	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80029b4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029b8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80029c8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80029ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80029ce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80029d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <SystemInit+0x48>)
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	f8ff0000 	.word	0xf8ff0000
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80029e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80029ea:	e003      	b.n	80029f4 <LoopCopyDataInit>

080029ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80029ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80029f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80029f2:	3104      	adds	r1, #4

080029f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80029f4:	480a      	ldr	r0, [pc, #40]	; (8002a20 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80029f6:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80029f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80029fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80029fc:	d3f6      	bcc.n	80029ec <CopyDataInit>
  ldr r2, =_sbss
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002a00:	e002      	b.n	8002a08 <LoopFillZerobss>

08002a02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002a04:	f842 3b04 	str.w	r3, [r2], #4

08002a08 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002a0a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002a0c:	d3f9      	bcc.n	8002a02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a0e:	f7ff ffc5 	bl	800299c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a12:	f000 f80f 	bl	8002a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a16:	f7ff fce1 	bl	80023dc <main>
  bx lr
 8002a1a:	4770      	bx	lr
  ldr r3, =_sidata
 8002a1c:	08003388 	.word	0x08003388
  ldr r0, =_sdata
 8002a20:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002a24:	20000174 	.word	0x20000174
  ldr r2, =_sbss
 8002a28:	20000174 	.word	0x20000174
  ldr r3, = _ebss
 8002a2c:	200003fc 	.word	0x200003fc

08002a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <ADC1_2_IRQHandler>
	...

08002a34 <__libc_init_array>:
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	2500      	movs	r5, #0
 8002a38:	4e0c      	ldr	r6, [pc, #48]	; (8002a6c <__libc_init_array+0x38>)
 8002a3a:	4c0d      	ldr	r4, [pc, #52]	; (8002a70 <__libc_init_array+0x3c>)
 8002a3c:	1ba4      	subs	r4, r4, r6
 8002a3e:	10a4      	asrs	r4, r4, #2
 8002a40:	42a5      	cmp	r5, r4
 8002a42:	d109      	bne.n	8002a58 <__libc_init_array+0x24>
 8002a44:	f000 fc54 	bl	80032f0 <_init>
 8002a48:	2500      	movs	r5, #0
 8002a4a:	4e0a      	ldr	r6, [pc, #40]	; (8002a74 <__libc_init_array+0x40>)
 8002a4c:	4c0a      	ldr	r4, [pc, #40]	; (8002a78 <__libc_init_array+0x44>)
 8002a4e:	1ba4      	subs	r4, r4, r6
 8002a50:	10a4      	asrs	r4, r4, #2
 8002a52:	42a5      	cmp	r5, r4
 8002a54:	d105      	bne.n	8002a62 <__libc_init_array+0x2e>
 8002a56:	bd70      	pop	{r4, r5, r6, pc}
 8002a58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a5c:	4798      	blx	r3
 8002a5e:	3501      	adds	r5, #1
 8002a60:	e7ee      	b.n	8002a40 <__libc_init_array+0xc>
 8002a62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a66:	4798      	blx	r3
 8002a68:	3501      	adds	r5, #1
 8002a6a:	e7f2      	b.n	8002a52 <__libc_init_array+0x1e>
 8002a6c:	08003380 	.word	0x08003380
 8002a70:	08003380 	.word	0x08003380
 8002a74:	08003380 	.word	0x08003380
 8002a78:	08003384 	.word	0x08003384

08002a7c <siprintf>:
 8002a7c:	b40e      	push	{r1, r2, r3}
 8002a7e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002a82:	b500      	push	{lr}
 8002a84:	b09c      	sub	sp, #112	; 0x70
 8002a86:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002a8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a8e:	9104      	str	r1, [sp, #16]
 8002a90:	9107      	str	r1, [sp, #28]
 8002a92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a96:	ab1d      	add	r3, sp, #116	; 0x74
 8002a98:	9002      	str	r0, [sp, #8]
 8002a9a:	9006      	str	r0, [sp, #24]
 8002a9c:	4808      	ldr	r0, [pc, #32]	; (8002ac0 <siprintf+0x44>)
 8002a9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002aa2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002aa6:	6800      	ldr	r0, [r0, #0]
 8002aa8:	a902      	add	r1, sp, #8
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	f000 f866 	bl	8002b7c <_svfiprintf_r>
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	9b02      	ldr	r3, [sp, #8]
 8002ab4:	701a      	strb	r2, [r3, #0]
 8002ab6:	b01c      	add	sp, #112	; 0x70
 8002ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002abc:	b003      	add	sp, #12
 8002abe:	4770      	bx	lr
 8002ac0:	20000110 	.word	0x20000110

08002ac4 <__ssputs_r>:
 8002ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac8:	688e      	ldr	r6, [r1, #8]
 8002aca:	4682      	mov	sl, r0
 8002acc:	429e      	cmp	r6, r3
 8002ace:	460c      	mov	r4, r1
 8002ad0:	4691      	mov	r9, r2
 8002ad2:	4698      	mov	r8, r3
 8002ad4:	d835      	bhi.n	8002b42 <__ssputs_r+0x7e>
 8002ad6:	898a      	ldrh	r2, [r1, #12]
 8002ad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002adc:	d031      	beq.n	8002b42 <__ssputs_r+0x7e>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	6825      	ldr	r5, [r4, #0]
 8002ae2:	6909      	ldr	r1, [r1, #16]
 8002ae4:	1a6f      	subs	r7, r5, r1
 8002ae6:	6965      	ldr	r5, [r4, #20]
 8002ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002aec:	fb95 f5f3 	sdiv	r5, r5, r3
 8002af0:	f108 0301 	add.w	r3, r8, #1
 8002af4:	443b      	add	r3, r7
 8002af6:	429d      	cmp	r5, r3
 8002af8:	bf38      	it	cc
 8002afa:	461d      	movcc	r5, r3
 8002afc:	0553      	lsls	r3, r2, #21
 8002afe:	d531      	bpl.n	8002b64 <__ssputs_r+0xa0>
 8002b00:	4629      	mov	r1, r5
 8002b02:	f000 fb47 	bl	8003194 <_malloc_r>
 8002b06:	4606      	mov	r6, r0
 8002b08:	b950      	cbnz	r0, 8002b20 <__ssputs_r+0x5c>
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	f8ca 3000 	str.w	r3, [sl]
 8002b10:	89a3      	ldrh	r3, [r4, #12]
 8002b12:	f04f 30ff 	mov.w	r0, #4294967295
 8002b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b1a:	81a3      	strh	r3, [r4, #12]
 8002b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b20:	463a      	mov	r2, r7
 8002b22:	6921      	ldr	r1, [r4, #16]
 8002b24:	f000 fac4 	bl	80030b0 <memcpy>
 8002b28:	89a3      	ldrh	r3, [r4, #12]
 8002b2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b32:	81a3      	strh	r3, [r4, #12]
 8002b34:	6126      	str	r6, [r4, #16]
 8002b36:	443e      	add	r6, r7
 8002b38:	6026      	str	r6, [r4, #0]
 8002b3a:	4646      	mov	r6, r8
 8002b3c:	6165      	str	r5, [r4, #20]
 8002b3e:	1bed      	subs	r5, r5, r7
 8002b40:	60a5      	str	r5, [r4, #8]
 8002b42:	4546      	cmp	r6, r8
 8002b44:	bf28      	it	cs
 8002b46:	4646      	movcs	r6, r8
 8002b48:	4649      	mov	r1, r9
 8002b4a:	4632      	mov	r2, r6
 8002b4c:	6820      	ldr	r0, [r4, #0]
 8002b4e:	f000 faba 	bl	80030c6 <memmove>
 8002b52:	68a3      	ldr	r3, [r4, #8]
 8002b54:	2000      	movs	r0, #0
 8002b56:	1b9b      	subs	r3, r3, r6
 8002b58:	60a3      	str	r3, [r4, #8]
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	441e      	add	r6, r3
 8002b5e:	6026      	str	r6, [r4, #0]
 8002b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b64:	462a      	mov	r2, r5
 8002b66:	f000 fb73 	bl	8003250 <_realloc_r>
 8002b6a:	4606      	mov	r6, r0
 8002b6c:	2800      	cmp	r0, #0
 8002b6e:	d1e1      	bne.n	8002b34 <__ssputs_r+0x70>
 8002b70:	6921      	ldr	r1, [r4, #16]
 8002b72:	4650      	mov	r0, sl
 8002b74:	f000 fac2 	bl	80030fc <_free_r>
 8002b78:	e7c7      	b.n	8002b0a <__ssputs_r+0x46>
	...

08002b7c <_svfiprintf_r>:
 8002b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b80:	b09d      	sub	sp, #116	; 0x74
 8002b82:	9303      	str	r3, [sp, #12]
 8002b84:	898b      	ldrh	r3, [r1, #12]
 8002b86:	4680      	mov	r8, r0
 8002b88:	061c      	lsls	r4, r3, #24
 8002b8a:	460d      	mov	r5, r1
 8002b8c:	4616      	mov	r6, r2
 8002b8e:	d50f      	bpl.n	8002bb0 <_svfiprintf_r+0x34>
 8002b90:	690b      	ldr	r3, [r1, #16]
 8002b92:	b96b      	cbnz	r3, 8002bb0 <_svfiprintf_r+0x34>
 8002b94:	2140      	movs	r1, #64	; 0x40
 8002b96:	f000 fafd 	bl	8003194 <_malloc_r>
 8002b9a:	6028      	str	r0, [r5, #0]
 8002b9c:	6128      	str	r0, [r5, #16]
 8002b9e:	b928      	cbnz	r0, 8002bac <_svfiprintf_r+0x30>
 8002ba0:	230c      	movs	r3, #12
 8002ba2:	f8c8 3000 	str.w	r3, [r8]
 8002ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8002baa:	e0c4      	b.n	8002d36 <_svfiprintf_r+0x1ba>
 8002bac:	2340      	movs	r3, #64	; 0x40
 8002bae:	616b      	str	r3, [r5, #20]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bba:	2330      	movs	r3, #48	; 0x30
 8002bbc:	f04f 0b01 	mov.w	fp, #1
 8002bc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bc4:	4637      	mov	r7, r6
 8002bc6:	463c      	mov	r4, r7
 8002bc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d13c      	bne.n	8002c4a <_svfiprintf_r+0xce>
 8002bd0:	ebb7 0a06 	subs.w	sl, r7, r6
 8002bd4:	d00b      	beq.n	8002bee <_svfiprintf_r+0x72>
 8002bd6:	4653      	mov	r3, sl
 8002bd8:	4632      	mov	r2, r6
 8002bda:	4629      	mov	r1, r5
 8002bdc:	4640      	mov	r0, r8
 8002bde:	f7ff ff71 	bl	8002ac4 <__ssputs_r>
 8002be2:	3001      	adds	r0, #1
 8002be4:	f000 80a2 	beq.w	8002d2c <_svfiprintf_r+0x1b0>
 8002be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bea:	4453      	add	r3, sl
 8002bec:	9309      	str	r3, [sp, #36]	; 0x24
 8002bee:	783b      	ldrb	r3, [r7, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 809b 	beq.w	8002d2c <_svfiprintf_r+0x1b0>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfc:	9304      	str	r3, [sp, #16]
 8002bfe:	9307      	str	r3, [sp, #28]
 8002c00:	9205      	str	r2, [sp, #20]
 8002c02:	9306      	str	r3, [sp, #24]
 8002c04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c08:	931a      	str	r3, [sp, #104]	; 0x68
 8002c0a:	2205      	movs	r2, #5
 8002c0c:	7821      	ldrb	r1, [r4, #0]
 8002c0e:	4850      	ldr	r0, [pc, #320]	; (8002d50 <_svfiprintf_r+0x1d4>)
 8002c10:	f000 fa40 	bl	8003094 <memchr>
 8002c14:	1c67      	adds	r7, r4, #1
 8002c16:	9b04      	ldr	r3, [sp, #16]
 8002c18:	b9d8      	cbnz	r0, 8002c52 <_svfiprintf_r+0xd6>
 8002c1a:	06d9      	lsls	r1, r3, #27
 8002c1c:	bf44      	itt	mi
 8002c1e:	2220      	movmi	r2, #32
 8002c20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c24:	071a      	lsls	r2, r3, #28
 8002c26:	bf44      	itt	mi
 8002c28:	222b      	movmi	r2, #43	; 0x2b
 8002c2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c2e:	7822      	ldrb	r2, [r4, #0]
 8002c30:	2a2a      	cmp	r2, #42	; 0x2a
 8002c32:	d016      	beq.n	8002c62 <_svfiprintf_r+0xe6>
 8002c34:	2100      	movs	r1, #0
 8002c36:	200a      	movs	r0, #10
 8002c38:	9a07      	ldr	r2, [sp, #28]
 8002c3a:	4627      	mov	r7, r4
 8002c3c:	783b      	ldrb	r3, [r7, #0]
 8002c3e:	3401      	adds	r4, #1
 8002c40:	3b30      	subs	r3, #48	; 0x30
 8002c42:	2b09      	cmp	r3, #9
 8002c44:	d950      	bls.n	8002ce8 <_svfiprintf_r+0x16c>
 8002c46:	b1c9      	cbz	r1, 8002c7c <_svfiprintf_r+0x100>
 8002c48:	e011      	b.n	8002c6e <_svfiprintf_r+0xf2>
 8002c4a:	2b25      	cmp	r3, #37	; 0x25
 8002c4c:	d0c0      	beq.n	8002bd0 <_svfiprintf_r+0x54>
 8002c4e:	4627      	mov	r7, r4
 8002c50:	e7b9      	b.n	8002bc6 <_svfiprintf_r+0x4a>
 8002c52:	4a3f      	ldr	r2, [pc, #252]	; (8002d50 <_svfiprintf_r+0x1d4>)
 8002c54:	463c      	mov	r4, r7
 8002c56:	1a80      	subs	r0, r0, r2
 8002c58:	fa0b f000 	lsl.w	r0, fp, r0
 8002c5c:	4318      	orrs	r0, r3
 8002c5e:	9004      	str	r0, [sp, #16]
 8002c60:	e7d3      	b.n	8002c0a <_svfiprintf_r+0x8e>
 8002c62:	9a03      	ldr	r2, [sp, #12]
 8002c64:	1d11      	adds	r1, r2, #4
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	9103      	str	r1, [sp, #12]
 8002c6a:	2a00      	cmp	r2, #0
 8002c6c:	db01      	blt.n	8002c72 <_svfiprintf_r+0xf6>
 8002c6e:	9207      	str	r2, [sp, #28]
 8002c70:	e004      	b.n	8002c7c <_svfiprintf_r+0x100>
 8002c72:	4252      	negs	r2, r2
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	9207      	str	r2, [sp, #28]
 8002c7a:	9304      	str	r3, [sp, #16]
 8002c7c:	783b      	ldrb	r3, [r7, #0]
 8002c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8002c80:	d10d      	bne.n	8002c9e <_svfiprintf_r+0x122>
 8002c82:	787b      	ldrb	r3, [r7, #1]
 8002c84:	1c79      	adds	r1, r7, #1
 8002c86:	2b2a      	cmp	r3, #42	; 0x2a
 8002c88:	d132      	bne.n	8002cf0 <_svfiprintf_r+0x174>
 8002c8a:	9b03      	ldr	r3, [sp, #12]
 8002c8c:	3702      	adds	r7, #2
 8002c8e:	1d1a      	adds	r2, r3, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	9203      	str	r2, [sp, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bfb8      	it	lt
 8002c98:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c9c:	9305      	str	r3, [sp, #20]
 8002c9e:	4c2d      	ldr	r4, [pc, #180]	; (8002d54 <_svfiprintf_r+0x1d8>)
 8002ca0:	2203      	movs	r2, #3
 8002ca2:	7839      	ldrb	r1, [r7, #0]
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f000 f9f5 	bl	8003094 <memchr>
 8002caa:	b138      	cbz	r0, 8002cbc <_svfiprintf_r+0x140>
 8002cac:	2340      	movs	r3, #64	; 0x40
 8002cae:	1b00      	subs	r0, r0, r4
 8002cb0:	fa03 f000 	lsl.w	r0, r3, r0
 8002cb4:	9b04      	ldr	r3, [sp, #16]
 8002cb6:	3701      	adds	r7, #1
 8002cb8:	4303      	orrs	r3, r0
 8002cba:	9304      	str	r3, [sp, #16]
 8002cbc:	7839      	ldrb	r1, [r7, #0]
 8002cbe:	2206      	movs	r2, #6
 8002cc0:	4825      	ldr	r0, [pc, #148]	; (8002d58 <_svfiprintf_r+0x1dc>)
 8002cc2:	1c7e      	adds	r6, r7, #1
 8002cc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cc8:	f000 f9e4 	bl	8003094 <memchr>
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	d035      	beq.n	8002d3c <_svfiprintf_r+0x1c0>
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <_svfiprintf_r+0x1e0>)
 8002cd2:	b9fb      	cbnz	r3, 8002d14 <_svfiprintf_r+0x198>
 8002cd4:	9b03      	ldr	r3, [sp, #12]
 8002cd6:	3307      	adds	r3, #7
 8002cd8:	f023 0307 	bic.w	r3, r3, #7
 8002cdc:	3308      	adds	r3, #8
 8002cde:	9303      	str	r3, [sp, #12]
 8002ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ce2:	444b      	add	r3, r9
 8002ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ce6:	e76d      	b.n	8002bc4 <_svfiprintf_r+0x48>
 8002ce8:	fb00 3202 	mla	r2, r0, r2, r3
 8002cec:	2101      	movs	r1, #1
 8002cee:	e7a4      	b.n	8002c3a <_svfiprintf_r+0xbe>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	240a      	movs	r4, #10
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	9305      	str	r3, [sp, #20]
 8002cf8:	460f      	mov	r7, r1
 8002cfa:	783a      	ldrb	r2, [r7, #0]
 8002cfc:	3101      	adds	r1, #1
 8002cfe:	3a30      	subs	r2, #48	; 0x30
 8002d00:	2a09      	cmp	r2, #9
 8002d02:	d903      	bls.n	8002d0c <_svfiprintf_r+0x190>
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0ca      	beq.n	8002c9e <_svfiprintf_r+0x122>
 8002d08:	9005      	str	r0, [sp, #20]
 8002d0a:	e7c8      	b.n	8002c9e <_svfiprintf_r+0x122>
 8002d0c:	fb04 2000 	mla	r0, r4, r0, r2
 8002d10:	2301      	movs	r3, #1
 8002d12:	e7f1      	b.n	8002cf8 <_svfiprintf_r+0x17c>
 8002d14:	ab03      	add	r3, sp, #12
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	462a      	mov	r2, r5
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <_svfiprintf_r+0x1e4>)
 8002d1c:	a904      	add	r1, sp, #16
 8002d1e:	4640      	mov	r0, r8
 8002d20:	f3af 8000 	nop.w
 8002d24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002d28:	4681      	mov	r9, r0
 8002d2a:	d1d9      	bne.n	8002ce0 <_svfiprintf_r+0x164>
 8002d2c:	89ab      	ldrh	r3, [r5, #12]
 8002d2e:	065b      	lsls	r3, r3, #25
 8002d30:	f53f af39 	bmi.w	8002ba6 <_svfiprintf_r+0x2a>
 8002d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d36:	b01d      	add	sp, #116	; 0x74
 8002d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d3c:	ab03      	add	r3, sp, #12
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	462a      	mov	r2, r5
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <_svfiprintf_r+0x1e4>)
 8002d44:	a904      	add	r1, sp, #16
 8002d46:	4640      	mov	r0, r8
 8002d48:	f000 f884 	bl	8002e54 <_printf_i>
 8002d4c:	e7ea      	b.n	8002d24 <_svfiprintf_r+0x1a8>
 8002d4e:	bf00      	nop
 8002d50:	0800334a 	.word	0x0800334a
 8002d54:	08003350 	.word	0x08003350
 8002d58:	08003354 	.word	0x08003354
 8002d5c:	00000000 	.word	0x00000000
 8002d60:	08002ac5 	.word	0x08002ac5

08002d64 <_printf_common>:
 8002d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d68:	4691      	mov	r9, r2
 8002d6a:	461f      	mov	r7, r3
 8002d6c:	688a      	ldr	r2, [r1, #8]
 8002d6e:	690b      	ldr	r3, [r1, #16]
 8002d70:	4606      	mov	r6, r0
 8002d72:	4293      	cmp	r3, r2
 8002d74:	bfb8      	it	lt
 8002d76:	4613      	movlt	r3, r2
 8002d78:	f8c9 3000 	str.w	r3, [r9]
 8002d7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d80:	460c      	mov	r4, r1
 8002d82:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d86:	b112      	cbz	r2, 8002d8e <_printf_common+0x2a>
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f8c9 3000 	str.w	r3, [r9]
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	0699      	lsls	r1, r3, #26
 8002d92:	bf42      	ittt	mi
 8002d94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002d98:	3302      	addmi	r3, #2
 8002d9a:	f8c9 3000 	strmi.w	r3, [r9]
 8002d9e:	6825      	ldr	r5, [r4, #0]
 8002da0:	f015 0506 	ands.w	r5, r5, #6
 8002da4:	d107      	bne.n	8002db6 <_printf_common+0x52>
 8002da6:	f104 0a19 	add.w	sl, r4, #25
 8002daa:	68e3      	ldr	r3, [r4, #12]
 8002dac:	f8d9 2000 	ldr.w	r2, [r9]
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	429d      	cmp	r5, r3
 8002db4:	db2a      	blt.n	8002e0c <_printf_common+0xa8>
 8002db6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002dba:	6822      	ldr	r2, [r4, #0]
 8002dbc:	3300      	adds	r3, #0
 8002dbe:	bf18      	it	ne
 8002dc0:	2301      	movne	r3, #1
 8002dc2:	0692      	lsls	r2, r2, #26
 8002dc4:	d42f      	bmi.n	8002e26 <_printf_common+0xc2>
 8002dc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dca:	4639      	mov	r1, r7
 8002dcc:	4630      	mov	r0, r6
 8002dce:	47c0      	blx	r8
 8002dd0:	3001      	adds	r0, #1
 8002dd2:	d022      	beq.n	8002e1a <_printf_common+0xb6>
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	68e5      	ldr	r5, [r4, #12]
 8002dd8:	f003 0306 	and.w	r3, r3, #6
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	bf18      	it	ne
 8002de0:	2500      	movne	r5, #0
 8002de2:	f8d9 2000 	ldr.w	r2, [r9]
 8002de6:	f04f 0900 	mov.w	r9, #0
 8002dea:	bf08      	it	eq
 8002dec:	1aad      	subeq	r5, r5, r2
 8002dee:	68a3      	ldr	r3, [r4, #8]
 8002df0:	6922      	ldr	r2, [r4, #16]
 8002df2:	bf08      	it	eq
 8002df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	bfc4      	itt	gt
 8002dfc:	1a9b      	subgt	r3, r3, r2
 8002dfe:	18ed      	addgt	r5, r5, r3
 8002e00:	341a      	adds	r4, #26
 8002e02:	454d      	cmp	r5, r9
 8002e04:	d11b      	bne.n	8002e3e <_printf_common+0xda>
 8002e06:	2000      	movs	r0, #0
 8002e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	4652      	mov	r2, sl
 8002e10:	4639      	mov	r1, r7
 8002e12:	4630      	mov	r0, r6
 8002e14:	47c0      	blx	r8
 8002e16:	3001      	adds	r0, #1
 8002e18:	d103      	bne.n	8002e22 <_printf_common+0xbe>
 8002e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e22:	3501      	adds	r5, #1
 8002e24:	e7c1      	b.n	8002daa <_printf_common+0x46>
 8002e26:	2030      	movs	r0, #48	; 0x30
 8002e28:	18e1      	adds	r1, r4, r3
 8002e2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e2e:	1c5a      	adds	r2, r3, #1
 8002e30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e34:	4422      	add	r2, r4
 8002e36:	3302      	adds	r3, #2
 8002e38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e3c:	e7c3      	b.n	8002dc6 <_printf_common+0x62>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	4622      	mov	r2, r4
 8002e42:	4639      	mov	r1, r7
 8002e44:	4630      	mov	r0, r6
 8002e46:	47c0      	blx	r8
 8002e48:	3001      	adds	r0, #1
 8002e4a:	d0e6      	beq.n	8002e1a <_printf_common+0xb6>
 8002e4c:	f109 0901 	add.w	r9, r9, #1
 8002e50:	e7d7      	b.n	8002e02 <_printf_common+0x9e>
	...

08002e54 <_printf_i>:
 8002e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e58:	4617      	mov	r7, r2
 8002e5a:	7e0a      	ldrb	r2, [r1, #24]
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	2a6e      	cmp	r2, #110	; 0x6e
 8002e60:	4698      	mov	r8, r3
 8002e62:	4606      	mov	r6, r0
 8002e64:	460c      	mov	r4, r1
 8002e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e68:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002e6c:	f000 80bc 	beq.w	8002fe8 <_printf_i+0x194>
 8002e70:	d81a      	bhi.n	8002ea8 <_printf_i+0x54>
 8002e72:	2a63      	cmp	r2, #99	; 0x63
 8002e74:	d02e      	beq.n	8002ed4 <_printf_i+0x80>
 8002e76:	d80a      	bhi.n	8002e8e <_printf_i+0x3a>
 8002e78:	2a00      	cmp	r2, #0
 8002e7a:	f000 80c8 	beq.w	800300e <_printf_i+0x1ba>
 8002e7e:	2a58      	cmp	r2, #88	; 0x58
 8002e80:	f000 808a 	beq.w	8002f98 <_printf_i+0x144>
 8002e84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e88:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002e8c:	e02a      	b.n	8002ee4 <_printf_i+0x90>
 8002e8e:	2a64      	cmp	r2, #100	; 0x64
 8002e90:	d001      	beq.n	8002e96 <_printf_i+0x42>
 8002e92:	2a69      	cmp	r2, #105	; 0x69
 8002e94:	d1f6      	bne.n	8002e84 <_printf_i+0x30>
 8002e96:	6821      	ldr	r1, [r4, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002e9e:	d023      	beq.n	8002ee8 <_printf_i+0x94>
 8002ea0:	1d11      	adds	r1, r2, #4
 8002ea2:	6019      	str	r1, [r3, #0]
 8002ea4:	6813      	ldr	r3, [r2, #0]
 8002ea6:	e027      	b.n	8002ef8 <_printf_i+0xa4>
 8002ea8:	2a73      	cmp	r2, #115	; 0x73
 8002eaa:	f000 80b4 	beq.w	8003016 <_printf_i+0x1c2>
 8002eae:	d808      	bhi.n	8002ec2 <_printf_i+0x6e>
 8002eb0:	2a6f      	cmp	r2, #111	; 0x6f
 8002eb2:	d02a      	beq.n	8002f0a <_printf_i+0xb6>
 8002eb4:	2a70      	cmp	r2, #112	; 0x70
 8002eb6:	d1e5      	bne.n	8002e84 <_printf_i+0x30>
 8002eb8:	680a      	ldr	r2, [r1, #0]
 8002eba:	f042 0220 	orr.w	r2, r2, #32
 8002ebe:	600a      	str	r2, [r1, #0]
 8002ec0:	e003      	b.n	8002eca <_printf_i+0x76>
 8002ec2:	2a75      	cmp	r2, #117	; 0x75
 8002ec4:	d021      	beq.n	8002f0a <_printf_i+0xb6>
 8002ec6:	2a78      	cmp	r2, #120	; 0x78
 8002ec8:	d1dc      	bne.n	8002e84 <_printf_i+0x30>
 8002eca:	2278      	movs	r2, #120	; 0x78
 8002ecc:	496f      	ldr	r1, [pc, #444]	; (800308c <_printf_i+0x238>)
 8002ece:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002ed2:	e064      	b.n	8002f9e <_printf_i+0x14a>
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002eda:	1d11      	adds	r1, r2, #4
 8002edc:	6019      	str	r1, [r3, #0]
 8002ede:	6813      	ldr	r3, [r2, #0]
 8002ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0a3      	b.n	8003030 <_printf_i+0x1dc>
 8002ee8:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002eec:	f102 0104 	add.w	r1, r2, #4
 8002ef0:	6019      	str	r1, [r3, #0]
 8002ef2:	d0d7      	beq.n	8002ea4 <_printf_i+0x50>
 8002ef4:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	da03      	bge.n	8002f04 <_printf_i+0xb0>
 8002efc:	222d      	movs	r2, #45	; 0x2d
 8002efe:	425b      	negs	r3, r3
 8002f00:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f04:	4962      	ldr	r1, [pc, #392]	; (8003090 <_printf_i+0x23c>)
 8002f06:	220a      	movs	r2, #10
 8002f08:	e017      	b.n	8002f3a <_printf_i+0xe6>
 8002f0a:	6820      	ldr	r0, [r4, #0]
 8002f0c:	6819      	ldr	r1, [r3, #0]
 8002f0e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002f12:	d003      	beq.n	8002f1c <_printf_i+0xc8>
 8002f14:	1d08      	adds	r0, r1, #4
 8002f16:	6018      	str	r0, [r3, #0]
 8002f18:	680b      	ldr	r3, [r1, #0]
 8002f1a:	e006      	b.n	8002f2a <_printf_i+0xd6>
 8002f1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f20:	f101 0004 	add.w	r0, r1, #4
 8002f24:	6018      	str	r0, [r3, #0]
 8002f26:	d0f7      	beq.n	8002f18 <_printf_i+0xc4>
 8002f28:	880b      	ldrh	r3, [r1, #0]
 8002f2a:	2a6f      	cmp	r2, #111	; 0x6f
 8002f2c:	bf14      	ite	ne
 8002f2e:	220a      	movne	r2, #10
 8002f30:	2208      	moveq	r2, #8
 8002f32:	4957      	ldr	r1, [pc, #348]	; (8003090 <_printf_i+0x23c>)
 8002f34:	2000      	movs	r0, #0
 8002f36:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002f3a:	6865      	ldr	r5, [r4, #4]
 8002f3c:	2d00      	cmp	r5, #0
 8002f3e:	60a5      	str	r5, [r4, #8]
 8002f40:	f2c0 809c 	blt.w	800307c <_printf_i+0x228>
 8002f44:	6820      	ldr	r0, [r4, #0]
 8002f46:	f020 0004 	bic.w	r0, r0, #4
 8002f4a:	6020      	str	r0, [r4, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d13f      	bne.n	8002fd0 <_printf_i+0x17c>
 8002f50:	2d00      	cmp	r5, #0
 8002f52:	f040 8095 	bne.w	8003080 <_printf_i+0x22c>
 8002f56:	4675      	mov	r5, lr
 8002f58:	2a08      	cmp	r2, #8
 8002f5a:	d10b      	bne.n	8002f74 <_printf_i+0x120>
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	07da      	lsls	r2, r3, #31
 8002f60:	d508      	bpl.n	8002f74 <_printf_i+0x120>
 8002f62:	6923      	ldr	r3, [r4, #16]
 8002f64:	6862      	ldr	r2, [r4, #4]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	bfde      	ittt	le
 8002f6a:	2330      	movle	r3, #48	; 0x30
 8002f6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f74:	ebae 0305 	sub.w	r3, lr, r5
 8002f78:	6123      	str	r3, [r4, #16]
 8002f7a:	f8cd 8000 	str.w	r8, [sp]
 8002f7e:	463b      	mov	r3, r7
 8002f80:	aa03      	add	r2, sp, #12
 8002f82:	4621      	mov	r1, r4
 8002f84:	4630      	mov	r0, r6
 8002f86:	f7ff feed 	bl	8002d64 <_printf_common>
 8002f8a:	3001      	adds	r0, #1
 8002f8c:	d155      	bne.n	800303a <_printf_i+0x1e6>
 8002f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f92:	b005      	add	sp, #20
 8002f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f98:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002f9c:	493c      	ldr	r1, [pc, #240]	; (8003090 <_printf_i+0x23c>)
 8002f9e:	6822      	ldr	r2, [r4, #0]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002fa6:	f100 0504 	add.w	r5, r0, #4
 8002faa:	601d      	str	r5, [r3, #0]
 8002fac:	d001      	beq.n	8002fb2 <_printf_i+0x15e>
 8002fae:	6803      	ldr	r3, [r0, #0]
 8002fb0:	e002      	b.n	8002fb8 <_printf_i+0x164>
 8002fb2:	0655      	lsls	r5, r2, #25
 8002fb4:	d5fb      	bpl.n	8002fae <_printf_i+0x15a>
 8002fb6:	8803      	ldrh	r3, [r0, #0]
 8002fb8:	07d0      	lsls	r0, r2, #31
 8002fba:	bf44      	itt	mi
 8002fbc:	f042 0220 	orrmi.w	r2, r2, #32
 8002fc0:	6022      	strmi	r2, [r4, #0]
 8002fc2:	b91b      	cbnz	r3, 8002fcc <_printf_i+0x178>
 8002fc4:	6822      	ldr	r2, [r4, #0]
 8002fc6:	f022 0220 	bic.w	r2, r2, #32
 8002fca:	6022      	str	r2, [r4, #0]
 8002fcc:	2210      	movs	r2, #16
 8002fce:	e7b1      	b.n	8002f34 <_printf_i+0xe0>
 8002fd0:	4675      	mov	r5, lr
 8002fd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8002fd6:	fb02 3310 	mls	r3, r2, r0, r3
 8002fda:	5ccb      	ldrb	r3, [r1, r3]
 8002fdc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d1f5      	bne.n	8002fd2 <_printf_i+0x17e>
 8002fe6:	e7b7      	b.n	8002f58 <_printf_i+0x104>
 8002fe8:	6808      	ldr	r0, [r1, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002ff0:	6949      	ldr	r1, [r1, #20]
 8002ff2:	d004      	beq.n	8002ffe <_printf_i+0x1aa>
 8002ff4:	1d10      	adds	r0, r2, #4
 8002ff6:	6018      	str	r0, [r3, #0]
 8002ff8:	6813      	ldr	r3, [r2, #0]
 8002ffa:	6019      	str	r1, [r3, #0]
 8002ffc:	e007      	b.n	800300e <_printf_i+0x1ba>
 8002ffe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003002:	f102 0004 	add.w	r0, r2, #4
 8003006:	6018      	str	r0, [r3, #0]
 8003008:	6813      	ldr	r3, [r2, #0]
 800300a:	d0f6      	beq.n	8002ffa <_printf_i+0x1a6>
 800300c:	8019      	strh	r1, [r3, #0]
 800300e:	2300      	movs	r3, #0
 8003010:	4675      	mov	r5, lr
 8003012:	6123      	str	r3, [r4, #16]
 8003014:	e7b1      	b.n	8002f7a <_printf_i+0x126>
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	1d11      	adds	r1, r2, #4
 800301a:	6019      	str	r1, [r3, #0]
 800301c:	6815      	ldr	r5, [r2, #0]
 800301e:	2100      	movs	r1, #0
 8003020:	6862      	ldr	r2, [r4, #4]
 8003022:	4628      	mov	r0, r5
 8003024:	f000 f836 	bl	8003094 <memchr>
 8003028:	b108      	cbz	r0, 800302e <_printf_i+0x1da>
 800302a:	1b40      	subs	r0, r0, r5
 800302c:	6060      	str	r0, [r4, #4]
 800302e:	6863      	ldr	r3, [r4, #4]
 8003030:	6123      	str	r3, [r4, #16]
 8003032:	2300      	movs	r3, #0
 8003034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003038:	e79f      	b.n	8002f7a <_printf_i+0x126>
 800303a:	6923      	ldr	r3, [r4, #16]
 800303c:	462a      	mov	r2, r5
 800303e:	4639      	mov	r1, r7
 8003040:	4630      	mov	r0, r6
 8003042:	47c0      	blx	r8
 8003044:	3001      	adds	r0, #1
 8003046:	d0a2      	beq.n	8002f8e <_printf_i+0x13a>
 8003048:	6823      	ldr	r3, [r4, #0]
 800304a:	079b      	lsls	r3, r3, #30
 800304c:	d507      	bpl.n	800305e <_printf_i+0x20a>
 800304e:	2500      	movs	r5, #0
 8003050:	f104 0919 	add.w	r9, r4, #25
 8003054:	68e3      	ldr	r3, [r4, #12]
 8003056:	9a03      	ldr	r2, [sp, #12]
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	429d      	cmp	r5, r3
 800305c:	db05      	blt.n	800306a <_printf_i+0x216>
 800305e:	68e0      	ldr	r0, [r4, #12]
 8003060:	9b03      	ldr	r3, [sp, #12]
 8003062:	4298      	cmp	r0, r3
 8003064:	bfb8      	it	lt
 8003066:	4618      	movlt	r0, r3
 8003068:	e793      	b.n	8002f92 <_printf_i+0x13e>
 800306a:	2301      	movs	r3, #1
 800306c:	464a      	mov	r2, r9
 800306e:	4639      	mov	r1, r7
 8003070:	4630      	mov	r0, r6
 8003072:	47c0      	blx	r8
 8003074:	3001      	adds	r0, #1
 8003076:	d08a      	beq.n	8002f8e <_printf_i+0x13a>
 8003078:	3501      	adds	r5, #1
 800307a:	e7eb      	b.n	8003054 <_printf_i+0x200>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1a7      	bne.n	8002fd0 <_printf_i+0x17c>
 8003080:	780b      	ldrb	r3, [r1, #0]
 8003082:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003086:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800308a:	e765      	b.n	8002f58 <_printf_i+0x104>
 800308c:	0800336c 	.word	0x0800336c
 8003090:	0800335b 	.word	0x0800335b

08003094 <memchr>:
 8003094:	b510      	push	{r4, lr}
 8003096:	b2c9      	uxtb	r1, r1
 8003098:	4402      	add	r2, r0
 800309a:	4290      	cmp	r0, r2
 800309c:	4603      	mov	r3, r0
 800309e:	d101      	bne.n	80030a4 <memchr+0x10>
 80030a0:	2000      	movs	r0, #0
 80030a2:	bd10      	pop	{r4, pc}
 80030a4:	781c      	ldrb	r4, [r3, #0]
 80030a6:	3001      	adds	r0, #1
 80030a8:	428c      	cmp	r4, r1
 80030aa:	d1f6      	bne.n	800309a <memchr+0x6>
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd10      	pop	{r4, pc}

080030b0 <memcpy>:
 80030b0:	b510      	push	{r4, lr}
 80030b2:	1e43      	subs	r3, r0, #1
 80030b4:	440a      	add	r2, r1
 80030b6:	4291      	cmp	r1, r2
 80030b8:	d100      	bne.n	80030bc <memcpy+0xc>
 80030ba:	bd10      	pop	{r4, pc}
 80030bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030c4:	e7f7      	b.n	80030b6 <memcpy+0x6>

080030c6 <memmove>:
 80030c6:	4288      	cmp	r0, r1
 80030c8:	b510      	push	{r4, lr}
 80030ca:	eb01 0302 	add.w	r3, r1, r2
 80030ce:	d803      	bhi.n	80030d8 <memmove+0x12>
 80030d0:	1e42      	subs	r2, r0, #1
 80030d2:	4299      	cmp	r1, r3
 80030d4:	d10c      	bne.n	80030f0 <memmove+0x2a>
 80030d6:	bd10      	pop	{r4, pc}
 80030d8:	4298      	cmp	r0, r3
 80030da:	d2f9      	bcs.n	80030d0 <memmove+0xa>
 80030dc:	1881      	adds	r1, r0, r2
 80030de:	1ad2      	subs	r2, r2, r3
 80030e0:	42d3      	cmn	r3, r2
 80030e2:	d100      	bne.n	80030e6 <memmove+0x20>
 80030e4:	bd10      	pop	{r4, pc}
 80030e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80030ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80030ee:	e7f7      	b.n	80030e0 <memmove+0x1a>
 80030f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80030f4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80030f8:	e7eb      	b.n	80030d2 <memmove+0xc>
	...

080030fc <_free_r>:
 80030fc:	b538      	push	{r3, r4, r5, lr}
 80030fe:	4605      	mov	r5, r0
 8003100:	2900      	cmp	r1, #0
 8003102:	d043      	beq.n	800318c <_free_r+0x90>
 8003104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003108:	1f0c      	subs	r4, r1, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	bfb8      	it	lt
 800310e:	18e4      	addlt	r4, r4, r3
 8003110:	f000 f8d4 	bl	80032bc <__malloc_lock>
 8003114:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <_free_r+0x94>)
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	4610      	mov	r0, r2
 800311a:	b933      	cbnz	r3, 800312a <_free_r+0x2e>
 800311c:	6063      	str	r3, [r4, #4]
 800311e:	6014      	str	r4, [r2, #0]
 8003120:	4628      	mov	r0, r5
 8003122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003126:	f000 b8ca 	b.w	80032be <__malloc_unlock>
 800312a:	42a3      	cmp	r3, r4
 800312c:	d90b      	bls.n	8003146 <_free_r+0x4a>
 800312e:	6821      	ldr	r1, [r4, #0]
 8003130:	1862      	adds	r2, r4, r1
 8003132:	4293      	cmp	r3, r2
 8003134:	bf01      	itttt	eq
 8003136:	681a      	ldreq	r2, [r3, #0]
 8003138:	685b      	ldreq	r3, [r3, #4]
 800313a:	1852      	addeq	r2, r2, r1
 800313c:	6022      	streq	r2, [r4, #0]
 800313e:	6063      	str	r3, [r4, #4]
 8003140:	6004      	str	r4, [r0, #0]
 8003142:	e7ed      	b.n	8003120 <_free_r+0x24>
 8003144:	4613      	mov	r3, r2
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	b10a      	cbz	r2, 800314e <_free_r+0x52>
 800314a:	42a2      	cmp	r2, r4
 800314c:	d9fa      	bls.n	8003144 <_free_r+0x48>
 800314e:	6819      	ldr	r1, [r3, #0]
 8003150:	1858      	adds	r0, r3, r1
 8003152:	42a0      	cmp	r0, r4
 8003154:	d10b      	bne.n	800316e <_free_r+0x72>
 8003156:	6820      	ldr	r0, [r4, #0]
 8003158:	4401      	add	r1, r0
 800315a:	1858      	adds	r0, r3, r1
 800315c:	4282      	cmp	r2, r0
 800315e:	6019      	str	r1, [r3, #0]
 8003160:	d1de      	bne.n	8003120 <_free_r+0x24>
 8003162:	6810      	ldr	r0, [r2, #0]
 8003164:	6852      	ldr	r2, [r2, #4]
 8003166:	4401      	add	r1, r0
 8003168:	6019      	str	r1, [r3, #0]
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	e7d8      	b.n	8003120 <_free_r+0x24>
 800316e:	d902      	bls.n	8003176 <_free_r+0x7a>
 8003170:	230c      	movs	r3, #12
 8003172:	602b      	str	r3, [r5, #0]
 8003174:	e7d4      	b.n	8003120 <_free_r+0x24>
 8003176:	6820      	ldr	r0, [r4, #0]
 8003178:	1821      	adds	r1, r4, r0
 800317a:	428a      	cmp	r2, r1
 800317c:	bf01      	itttt	eq
 800317e:	6811      	ldreq	r1, [r2, #0]
 8003180:	6852      	ldreq	r2, [r2, #4]
 8003182:	1809      	addeq	r1, r1, r0
 8003184:	6021      	streq	r1, [r4, #0]
 8003186:	6062      	str	r2, [r4, #4]
 8003188:	605c      	str	r4, [r3, #4]
 800318a:	e7c9      	b.n	8003120 <_free_r+0x24>
 800318c:	bd38      	pop	{r3, r4, r5, pc}
 800318e:	bf00      	nop
 8003190:	20000198 	.word	0x20000198

08003194 <_malloc_r>:
 8003194:	b570      	push	{r4, r5, r6, lr}
 8003196:	1ccd      	adds	r5, r1, #3
 8003198:	f025 0503 	bic.w	r5, r5, #3
 800319c:	3508      	adds	r5, #8
 800319e:	2d0c      	cmp	r5, #12
 80031a0:	bf38      	it	cc
 80031a2:	250c      	movcc	r5, #12
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	4606      	mov	r6, r0
 80031a8:	db01      	blt.n	80031ae <_malloc_r+0x1a>
 80031aa:	42a9      	cmp	r1, r5
 80031ac:	d903      	bls.n	80031b6 <_malloc_r+0x22>
 80031ae:	230c      	movs	r3, #12
 80031b0:	6033      	str	r3, [r6, #0]
 80031b2:	2000      	movs	r0, #0
 80031b4:	bd70      	pop	{r4, r5, r6, pc}
 80031b6:	f000 f881 	bl	80032bc <__malloc_lock>
 80031ba:	4a23      	ldr	r2, [pc, #140]	; (8003248 <_malloc_r+0xb4>)
 80031bc:	6814      	ldr	r4, [r2, #0]
 80031be:	4621      	mov	r1, r4
 80031c0:	b991      	cbnz	r1, 80031e8 <_malloc_r+0x54>
 80031c2:	4c22      	ldr	r4, [pc, #136]	; (800324c <_malloc_r+0xb8>)
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	b91b      	cbnz	r3, 80031d0 <_malloc_r+0x3c>
 80031c8:	4630      	mov	r0, r6
 80031ca:	f000 f867 	bl	800329c <_sbrk_r>
 80031ce:	6020      	str	r0, [r4, #0]
 80031d0:	4629      	mov	r1, r5
 80031d2:	4630      	mov	r0, r6
 80031d4:	f000 f862 	bl	800329c <_sbrk_r>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d126      	bne.n	800322a <_malloc_r+0x96>
 80031dc:	230c      	movs	r3, #12
 80031de:	4630      	mov	r0, r6
 80031e0:	6033      	str	r3, [r6, #0]
 80031e2:	f000 f86c 	bl	80032be <__malloc_unlock>
 80031e6:	e7e4      	b.n	80031b2 <_malloc_r+0x1e>
 80031e8:	680b      	ldr	r3, [r1, #0]
 80031ea:	1b5b      	subs	r3, r3, r5
 80031ec:	d41a      	bmi.n	8003224 <_malloc_r+0x90>
 80031ee:	2b0b      	cmp	r3, #11
 80031f0:	d90f      	bls.n	8003212 <_malloc_r+0x7e>
 80031f2:	600b      	str	r3, [r1, #0]
 80031f4:	18cc      	adds	r4, r1, r3
 80031f6:	50cd      	str	r5, [r1, r3]
 80031f8:	4630      	mov	r0, r6
 80031fa:	f000 f860 	bl	80032be <__malloc_unlock>
 80031fe:	f104 000b 	add.w	r0, r4, #11
 8003202:	1d23      	adds	r3, r4, #4
 8003204:	f020 0007 	bic.w	r0, r0, #7
 8003208:	1ac3      	subs	r3, r0, r3
 800320a:	d01b      	beq.n	8003244 <_malloc_r+0xb0>
 800320c:	425a      	negs	r2, r3
 800320e:	50e2      	str	r2, [r4, r3]
 8003210:	bd70      	pop	{r4, r5, r6, pc}
 8003212:	428c      	cmp	r4, r1
 8003214:	bf0b      	itete	eq
 8003216:	6863      	ldreq	r3, [r4, #4]
 8003218:	684b      	ldrne	r3, [r1, #4]
 800321a:	6013      	streq	r3, [r2, #0]
 800321c:	6063      	strne	r3, [r4, #4]
 800321e:	bf18      	it	ne
 8003220:	460c      	movne	r4, r1
 8003222:	e7e9      	b.n	80031f8 <_malloc_r+0x64>
 8003224:	460c      	mov	r4, r1
 8003226:	6849      	ldr	r1, [r1, #4]
 8003228:	e7ca      	b.n	80031c0 <_malloc_r+0x2c>
 800322a:	1cc4      	adds	r4, r0, #3
 800322c:	f024 0403 	bic.w	r4, r4, #3
 8003230:	42a0      	cmp	r0, r4
 8003232:	d005      	beq.n	8003240 <_malloc_r+0xac>
 8003234:	1a21      	subs	r1, r4, r0
 8003236:	4630      	mov	r0, r6
 8003238:	f000 f830 	bl	800329c <_sbrk_r>
 800323c:	3001      	adds	r0, #1
 800323e:	d0cd      	beq.n	80031dc <_malloc_r+0x48>
 8003240:	6025      	str	r5, [r4, #0]
 8003242:	e7d9      	b.n	80031f8 <_malloc_r+0x64>
 8003244:	bd70      	pop	{r4, r5, r6, pc}
 8003246:	bf00      	nop
 8003248:	20000198 	.word	0x20000198
 800324c:	2000019c 	.word	0x2000019c

08003250 <_realloc_r>:
 8003250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003252:	4607      	mov	r7, r0
 8003254:	4614      	mov	r4, r2
 8003256:	460e      	mov	r6, r1
 8003258:	b921      	cbnz	r1, 8003264 <_realloc_r+0x14>
 800325a:	4611      	mov	r1, r2
 800325c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003260:	f7ff bf98 	b.w	8003194 <_malloc_r>
 8003264:	b922      	cbnz	r2, 8003270 <_realloc_r+0x20>
 8003266:	f7ff ff49 	bl	80030fc <_free_r>
 800326a:	4625      	mov	r5, r4
 800326c:	4628      	mov	r0, r5
 800326e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003270:	f000 f826 	bl	80032c0 <_malloc_usable_size_r>
 8003274:	4284      	cmp	r4, r0
 8003276:	d90f      	bls.n	8003298 <_realloc_r+0x48>
 8003278:	4621      	mov	r1, r4
 800327a:	4638      	mov	r0, r7
 800327c:	f7ff ff8a 	bl	8003194 <_malloc_r>
 8003280:	4605      	mov	r5, r0
 8003282:	2800      	cmp	r0, #0
 8003284:	d0f2      	beq.n	800326c <_realloc_r+0x1c>
 8003286:	4631      	mov	r1, r6
 8003288:	4622      	mov	r2, r4
 800328a:	f7ff ff11 	bl	80030b0 <memcpy>
 800328e:	4631      	mov	r1, r6
 8003290:	4638      	mov	r0, r7
 8003292:	f7ff ff33 	bl	80030fc <_free_r>
 8003296:	e7e9      	b.n	800326c <_realloc_r+0x1c>
 8003298:	4635      	mov	r5, r6
 800329a:	e7e7      	b.n	800326c <_realloc_r+0x1c>

0800329c <_sbrk_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	2300      	movs	r3, #0
 80032a0:	4c05      	ldr	r4, [pc, #20]	; (80032b8 <_sbrk_r+0x1c>)
 80032a2:	4605      	mov	r5, r0
 80032a4:	4608      	mov	r0, r1
 80032a6:	6023      	str	r3, [r4, #0]
 80032a8:	f000 f814 	bl	80032d4 <_sbrk>
 80032ac:	1c43      	adds	r3, r0, #1
 80032ae:	d102      	bne.n	80032b6 <_sbrk_r+0x1a>
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	b103      	cbz	r3, 80032b6 <_sbrk_r+0x1a>
 80032b4:	602b      	str	r3, [r5, #0]
 80032b6:	bd38      	pop	{r3, r4, r5, pc}
 80032b8:	200003f8 	.word	0x200003f8

080032bc <__malloc_lock>:
 80032bc:	4770      	bx	lr

080032be <__malloc_unlock>:
 80032be:	4770      	bx	lr

080032c0 <_malloc_usable_size_r>:
 80032c0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80032c4:	2800      	cmp	r0, #0
 80032c6:	f1a0 0004 	sub.w	r0, r0, #4
 80032ca:	bfbc      	itt	lt
 80032cc:	580b      	ldrlt	r3, [r1, r0]
 80032ce:	18c0      	addlt	r0, r0, r3
 80032d0:	4770      	bx	lr
	...

080032d4 <_sbrk>:
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <_sbrk+0x14>)
 80032d6:	4602      	mov	r2, r0
 80032d8:	6819      	ldr	r1, [r3, #0]
 80032da:	b909      	cbnz	r1, 80032e0 <_sbrk+0xc>
 80032dc:	4903      	ldr	r1, [pc, #12]	; (80032ec <_sbrk+0x18>)
 80032de:	6019      	str	r1, [r3, #0]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	4402      	add	r2, r0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	4770      	bx	lr
 80032e8:	200001a0 	.word	0x200001a0
 80032ec:	200003fc 	.word	0x200003fc

080032f0 <_init>:
 80032f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032f2:	bf00      	nop
 80032f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f6:	bc08      	pop	{r3}
 80032f8:	469e      	mov	lr, r3
 80032fa:	4770      	bx	lr

080032fc <_fini>:
 80032fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fe:	bf00      	nop
 8003300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003302:	bc08      	pop	{r3}
 8003304:	469e      	mov	lr, r3
 8003306:	4770      	bx	lr
