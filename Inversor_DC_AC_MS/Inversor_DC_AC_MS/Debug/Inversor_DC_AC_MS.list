
Inversor_DC_AC_MS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080033e0  080033e0  000133e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08003464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000028c  20000070  080034d4  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200002fc  080034d4  000202fc  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018592  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002ca8  00000000  00000000  0003862b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009a3e  00000000  00000000  0003b2d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b48  00000000  00000000  00044d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001038  00000000  00000000  00045860  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000075d7  00000000  00000000  00046898  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000044fd  00000000  00000000  0004de6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005236c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002774  00000000  00000000  000523e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080033c8 	.word	0x080033c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080033c8 	.word	0x080033c8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2uiz>:
 80008e4:	004a      	lsls	r2, r1, #1
 80008e6:	d211      	bcs.n	800090c <__aeabi_d2uiz+0x28>
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d211      	bcs.n	8000912 <__aeabi_d2uiz+0x2e>
 80008ee:	d50d      	bpl.n	800090c <__aeabi_d2uiz+0x28>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d40e      	bmi.n	8000918 <__aeabi_d2uiz+0x34>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	fa23 f002 	lsr.w	r0, r3, r2
 800090a:	4770      	bx	lr
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	4770      	bx	lr
 8000912:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000916:	d102      	bne.n	800091e <__aeabi_d2uiz+0x3a>
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	4770      	bx	lr
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	4770      	bx	lr

08000924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <HAL_InitTick+0x3c>)
{
 8000928:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800092a:	7818      	ldrb	r0, [r3, #0]
 800092c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000930:	fbb3 f3f0 	udiv	r3, r3, r0
 8000934:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <HAL_InitTick+0x40>)
 8000936:	6810      	ldr	r0, [r2, #0]
 8000938:	fbb0 f0f3 	udiv	r0, r0, r3
 800093c:	f000 fb82 	bl	8001044 <HAL_SYSTICK_Config>
 8000940:	4604      	mov	r4, r0
 8000942:	b958      	cbnz	r0, 800095c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000944:	2d0f      	cmp	r5, #15
 8000946:	d809      	bhi.n	800095c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000948:	4602      	mov	r2, r0
 800094a:	4629      	mov	r1, r5
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	f000 fb38 	bl	8000fc4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <HAL_InitTick+0x44>)
 8000956:	4620      	mov	r0, r4
 8000958:	601d      	str	r5, [r3, #0]
 800095a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800095c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800095e:	bd38      	pop	{r3, r4, r5, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_Init+0x20>)
{
 800096e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000972:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	f043 0310 	orr.w	r3, r3, #16
 8000978:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800097a:	f000 fb11 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff ffd0 	bl	8000924 <HAL_InitTick>
  HAL_MspInit();
 8000984:	f001 fee2 	bl	800274c <HAL_MspInit>
}
 8000988:	2000      	movs	r0, #0
 800098a:	bd08      	pop	{r3, pc}
 800098c:	40022000 	.word	0x40022000

08000990 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <HAL_IncTick+0x10>)
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <HAL_IncTick+0x14>)
 8000994:	6811      	ldr	r1, [r2, #0]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	440b      	add	r3, r1
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	2000009c 	.word	0x2000009c
 80009a4:	20000000 	.word	0x20000000

080009a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80009a8:	4b01      	ldr	r3, [pc, #4]	; (80009b0 <HAL_GetTick+0x8>)
 80009aa:	6818      	ldr	r0, [r3, #0]
}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	2000009c 	.word	0x2000009c

080009b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b4:	b538      	push	{r3, r4, r5, lr}
 80009b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80009b8:	f7ff fff6 	bl	80009a8 <HAL_GetTick>
 80009bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009be:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80009c0:	bf1e      	ittt	ne
 80009c2:	4b04      	ldrne	r3, [pc, #16]	; (80009d4 <HAL_Delay+0x20>)
 80009c4:	781b      	ldrbne	r3, [r3, #0]
 80009c6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009c8:	f7ff ffee 	bl	80009a8 <HAL_GetTick>
 80009cc:	1b40      	subs	r0, r0, r5
 80009ce:	4284      	cmp	r4, r0
 80009d0:	d8fa      	bhi.n	80009c8 <HAL_Delay+0x14>
  {
  }
}
 80009d2:	bd38      	pop	{r3, r4, r5, pc}
 80009d4:	20000000 	.word	0x20000000

080009d8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80009d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80009da:	2600      	movs	r6, #0
{
 80009dc:	4604      	mov	r4, r0
 80009de:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80009e0:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80009e2:	f7ff ffe1 	bl	80009a8 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80009e6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80009e8:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	05d2      	lsls	r2, r2, #23
 80009ee:	d508      	bpl.n	8000a02 <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80009f0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80009f4:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009f8:	f043 0320 	orr.w	r3, r3, #32
 80009fc:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80009fe:	b003      	add	sp, #12
 8000a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	05d6      	lsls	r6, r2, #23
 8000a06:	d403      	bmi.n	8000a10 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a0a:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8000a0e:	d03b      	beq.n	8000a88 <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000a10:	4b3a      	ldr	r3, [pc, #232]	; (8000afc <HAL_ADC_PollForConversion+0x124>)
 8000a12:	2002      	movs	r0, #2
 8000a14:	681e      	ldr	r6, [r3, #0]
 8000a16:	f000 ffad 	bl	8001974 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000a1a:	6823      	ldr	r3, [r4, #0]
 8000a1c:	4a38      	ldr	r2, [pc, #224]	; (8000b00 <HAL_ADC_PollForConversion+0x128>)
 8000a1e:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000a20:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000a24:	4211      	tst	r1, r2
 8000a26:	4a37      	ldr	r2, [pc, #220]	; (8000b04 <HAL_ADC_PollForConversion+0x12c>)
 8000a28:	d14f      	bne.n	8000aca <HAL_ADC_PollForConversion+0xf2>
 8000a2a:	68de      	ldr	r6, [r3, #12]
 8000a2c:	4936      	ldr	r1, [pc, #216]	; (8000b08 <HAL_ADC_PollForConversion+0x130>)
 8000a2e:	420e      	tst	r6, r1
 8000a30:	d14b      	bne.n	8000aca <HAL_ADC_PollForConversion+0xf2>
 8000a32:	6919      	ldr	r1, [r3, #16]
 8000a34:	4211      	tst	r1, r2
 8000a36:	d159      	bne.n	8000aec <HAL_ADC_PollForConversion+0x114>
 8000a38:	68da      	ldr	r2, [r3, #12]
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <HAL_ADC_PollForConversion+0x134>)
 8000a3c:	421a      	tst	r2, r3
 8000a3e:	bf14      	ite	ne
 8000a40:	2329      	movne	r3, #41	; 0x29
 8000a42:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000a44:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000a48:	9b01      	ldr	r3, [sp, #4]
 8000a4a:	429e      	cmp	r6, r3
 8000a4c:	d920      	bls.n	8000a90 <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 8000a4e:	1c6b      	adds	r3, r5, #1
 8000a50:	d005      	beq.n	8000a5e <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000a52:	b15d      	cbz	r5, 8000a6c <HAL_ADC_PollForConversion+0x94>
 8000a54:	f7ff ffa8 	bl	80009a8 <HAL_GetTick>
 8000a58:	1bc0      	subs	r0, r0, r7
 8000a5a:	4285      	cmp	r5, r0
 8000a5c:	d306      	bcc.n	8000a6c <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 8000a5e:	9b01      	ldr	r3, [sp, #4]
 8000a60:	3301      	adds	r3, #1
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	e7f0      	b.n	8000a48 <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 8000a66:	1c68      	adds	r0, r5, #1
 8000a68:	d00f      	beq.n	8000a8a <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000a6a:	b945      	cbnz	r5, 8000a7e <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 8000a6e:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a70:	f043 0304 	orr.w	r3, r3, #4
 8000a74:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8000a76:	2300      	movs	r3, #0
 8000a78:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 8000a7c:	e7bf      	b.n	80009fe <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000a7e:	f7ff ff93 	bl	80009a8 <HAL_GetTick>
 8000a82:	1bc0      	subs	r0, r0, r7
 8000a84:	4285      	cmp	r5, r0
 8000a86:	d3f1      	bcc.n	8000a6c <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a88:	6822      	ldr	r2, [r4, #0]
 8000a8a:	6813      	ldr	r3, [r2, #0]
 8000a8c:	0799      	lsls	r1, r3, #30
 8000a8e:	d5ea      	bpl.n	8000a66 <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000a90:	f06f 0312 	mvn.w	r3, #18
 8000a94:	6822      	ldr	r2, [r4, #0]
 8000a96:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000a98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a9e:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000aa0:	6893      	ldr	r3, [r2, #8]
 8000aa2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000aa6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000aaa:	d125      	bne.n	8000af8 <HAL_ADC_PollForConversion+0x120>
 8000aac:	68e3      	ldr	r3, [r4, #12]
 8000aae:	bb1b      	cbnz	r3, 8000af8 <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ab0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ab2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ab6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ab8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000aba:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000abe:	d11b      	bne.n	8000af8 <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ac0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ac8:	e799      	b.n	80009fe <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000aca:	6919      	ldr	r1, [r3, #16]
 8000acc:	4211      	tst	r1, r2
 8000ace:	d103      	bne.n	8000ad8 <HAL_ADC_PollForConversion+0x100>
 8000ad0:	68d9      	ldr	r1, [r3, #12]
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_ADC_PollForConversion+0x134>)
 8000ad4:	4211      	tst	r1, r2
 8000ad6:	d00b      	beq.n	8000af0 <HAL_ADC_PollForConversion+0x118>
 8000ad8:	6919      	ldr	r1, [r3, #16]
 8000ada:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <HAL_ADC_PollForConversion+0x138>)
 8000adc:	4211      	tst	r1, r2
 8000ade:	d109      	bne.n	8000af4 <HAL_ADC_PollForConversion+0x11c>
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	4213      	tst	r3, r2
 8000ae4:	bf14      	ite	ne
 8000ae6:	23fc      	movne	r3, #252	; 0xfc
 8000ae8:	2354      	moveq	r3, #84	; 0x54
 8000aea:	e7ab      	b.n	8000a44 <HAL_ADC_PollForConversion+0x6c>
 8000aec:	2329      	movs	r3, #41	; 0x29
 8000aee:	e7a9      	b.n	8000a44 <HAL_ADC_PollForConversion+0x6c>
 8000af0:	2354      	movs	r3, #84	; 0x54
 8000af2:	e7a7      	b.n	8000a44 <HAL_ADC_PollForConversion+0x6c>
 8000af4:	23fc      	movs	r3, #252	; 0xfc
 8000af6:	e7a5      	b.n	8000a44 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 8000af8:	2000      	movs	r0, #0
 8000afa:	e780      	b.n	80009fe <HAL_ADC_PollForConversion+0x26>
 8000afc:	20000008 	.word	0x20000008
 8000b00:	24924924 	.word	0x24924924
 8000b04:	12492492 	.word	0x12492492
 8000b08:	00924924 	.word	0x00924924
 8000b0c:	00492492 	.word	0x00492492
 8000b10:	00249249 	.word	0x00249249

08000b14 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000b14:	6803      	ldr	r3, [r0, #0]
 8000b16:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000b18:	4770      	bx	lr
	...

08000b1c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000b1c:	2300      	movs	r3, #0
{ 
 8000b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000b20:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b22:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d074      	beq.n	8000c14 <HAL_ADC_ConfigChannel+0xf8>
 8000b2a:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b2c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000b2e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000b32:	2d06      	cmp	r5, #6
 8000b34:	6802      	ldr	r2, [r0, #0]
 8000b36:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000b3a:	680c      	ldr	r4, [r1, #0]
 8000b3c:	d825      	bhi.n	8000b8a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b3e:	442b      	add	r3, r5
 8000b40:	251f      	movs	r5, #31
 8000b42:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000b44:	3b05      	subs	r3, #5
 8000b46:	409d      	lsls	r5, r3
 8000b48:	ea26 0505 	bic.w	r5, r6, r5
 8000b4c:	fa04 f303 	lsl.w	r3, r4, r3
 8000b50:	432b      	orrs	r3, r5
 8000b52:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b54:	2c09      	cmp	r4, #9
 8000b56:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000b5a:	688d      	ldr	r5, [r1, #8]
 8000b5c:	d92f      	bls.n	8000bbe <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000b5e:	2607      	movs	r6, #7
 8000b60:	4423      	add	r3, r4
 8000b62:	68d1      	ldr	r1, [r2, #12]
 8000b64:	3b1e      	subs	r3, #30
 8000b66:	409e      	lsls	r6, r3
 8000b68:	ea21 0106 	bic.w	r1, r1, r6
 8000b6c:	fa05 f303 	lsl.w	r3, r5, r3
 8000b70:	430b      	orrs	r3, r1
 8000b72:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b74:	f1a4 0310 	sub.w	r3, r4, #16
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d92b      	bls.n	8000bd4 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b7c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	b002      	add	sp, #8
 8000b88:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000b8a:	2d0c      	cmp	r5, #12
 8000b8c:	d80b      	bhi.n	8000ba6 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000b8e:	442b      	add	r3, r5
 8000b90:	251f      	movs	r5, #31
 8000b92:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000b94:	3b23      	subs	r3, #35	; 0x23
 8000b96:	409d      	lsls	r5, r3
 8000b98:	ea26 0505 	bic.w	r5, r6, r5
 8000b9c:	fa04 f303 	lsl.w	r3, r4, r3
 8000ba0:	432b      	orrs	r3, r5
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	e7d6      	b.n	8000b54 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ba6:	442b      	add	r3, r5
 8000ba8:	251f      	movs	r5, #31
 8000baa:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000bac:	3b41      	subs	r3, #65	; 0x41
 8000bae:	409d      	lsls	r5, r3
 8000bb0:	ea26 0505 	bic.w	r5, r6, r5
 8000bb4:	fa04 f303 	lsl.w	r3, r4, r3
 8000bb8:	432b      	orrs	r3, r5
 8000bba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bbc:	e7ca      	b.n	8000b54 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000bbe:	2607      	movs	r6, #7
 8000bc0:	6911      	ldr	r1, [r2, #16]
 8000bc2:	4423      	add	r3, r4
 8000bc4:	409e      	lsls	r6, r3
 8000bc6:	ea21 0106 	bic.w	r1, r1, r6
 8000bca:	fa05 f303 	lsl.w	r3, r5, r3
 8000bce:	430b      	orrs	r3, r1
 8000bd0:	6113      	str	r3, [r2, #16]
 8000bd2:	e7cf      	b.n	8000b74 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_ADC_ConfigChannel+0xfc>)
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d116      	bne.n	8000c08 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000bda:	6893      	ldr	r3, [r2, #8]
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	d4cd      	bmi.n	8000b7c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000be0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000be2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000be4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000be8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000bea:	d1c7      	bne.n	8000b7c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <HAL_ADC_ConfigChannel+0x100>)
 8000bee:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <HAL_ADC_ConfigChannel+0x104>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	fbb3 f2f2 	udiv	r2, r3, r2
 8000bf6:	230a      	movs	r3, #10
 8000bf8:	4353      	muls	r3, r2
            wait_loop_index--;
 8000bfa:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000bfc:	9b01      	ldr	r3, [sp, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0bc      	beq.n	8000b7c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000c02:	9b01      	ldr	r3, [sp, #4]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	e7f8      	b.n	8000bfa <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c08:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c0a:	f043 0320 	orr.w	r3, r3, #32
 8000c0e:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e7b4      	b.n	8000b7e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000c14:	2302      	movs	r3, #2
 8000c16:	e7b5      	b.n	8000b84 <HAL_ADC_ConfigChannel+0x68>
 8000c18:	40012400 	.word	0x40012400
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	000f4240 	.word	0x000f4240

08000c24 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000c24:	2300      	movs	r3, #0
{
 8000c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000c28:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c2a:	6803      	ldr	r3, [r0, #0]
{
 8000c2c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	07d2      	lsls	r2, r2, #31
 8000c32:	d502      	bpl.n	8000c3a <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000c34:	2000      	movs	r0, #0
}
 8000c36:	b002      	add	sp, #8
 8000c38:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	f042 0201 	orr.w	r2, r2, #1
 8000c40:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c42:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <ADC_Enable+0x68>)
 8000c44:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <ADC_Enable+0x6c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000c4c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000c4e:	9b01      	ldr	r3, [sp, #4]
 8000c50:	b9c3      	cbnz	r3, 8000c84 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000c52:	f7ff fea9 	bl	80009a8 <HAL_GetTick>
 8000c56:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000c58:	6823      	ldr	r3, [r4, #0]
 8000c5a:	689d      	ldr	r5, [r3, #8]
 8000c5c:	f015 0501 	ands.w	r5, r5, #1
 8000c60:	d1e8      	bne.n	8000c34 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c62:	f7ff fea1 	bl	80009a8 <HAL_GetTick>
 8000c66:	1b80      	subs	r0, r0, r6
 8000c68:	2802      	cmp	r0, #2
 8000c6a:	d9f5      	bls.n	8000c58 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000c6e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000c7a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c82:	e7d8      	b.n	8000c36 <ADC_Enable+0x12>
      wait_loop_index--;
 8000c84:	9b01      	ldr	r3, [sp, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	e7e0      	b.n	8000c4c <ADC_Enable+0x28>
 8000c8a:	bf00      	nop
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	000f4240 	.word	0x000f4240

08000c94 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000c94:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000c98:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000c9a:	2b01      	cmp	r3, #1
{
 8000c9c:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000c9e:	d054      	beq.n	8000d4a <HAL_ADC_Start+0xb6>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000ca6:	f7ff ffbd 	bl	8000c24 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000caa:	2800      	cmp	r0, #0
 8000cac:	d149      	bne.n	8000d42 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8000cae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8000cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cb6:	f023 0301 	bic.w	r3, r3, #1
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d104      	bne.n	8000cd0 <HAL_ADC_Start+0x3c>
 8000cc6:	4923      	ldr	r1, [pc, #140]	; (8000d54 <HAL_ADC_Start+0xc0>)
 8000cc8:	684a      	ldr	r2, [r1, #4]
 8000cca:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000cce:	d12e      	bne.n	8000d2e <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cd0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000cd2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000cd6:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cd8:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cda:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cdc:	bf41      	itttt	mi
 8000cde:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8000ce0:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000ce4:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000ce8:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000cec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cf0:	bf1c      	itt	ne
 8000cf2:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8000cf4:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000cf8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d00:	f06f 0202 	mvn.w	r2, #2
 8000d04:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000d0c:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000d10:	d113      	bne.n	8000d3a <HAL_ADC_Start+0xa6>
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_ADC_Start+0xbc>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d105      	bne.n	8000d24 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d18:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000d1c:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d1e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000d22:	d10a      	bne.n	8000d3a <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000d30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d34:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d36:	684a      	ldr	r2, [r1, #4]
 8000d38:	e7cf      	b.n	8000cda <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d40:	e7f3      	b.n	8000d2a <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8000d42:	2300      	movs	r3, #0
 8000d44:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000d48:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000d4a:	2002      	movs	r0, #2
}
 8000d4c:	bd10      	pop	{r4, pc}
 8000d4e:	bf00      	nop
 8000d50:	40012800 	.word	0x40012800
 8000d54:	40012400 	.word	0x40012400

08000d58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000d58:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d5a:	6803      	ldr	r3, [r0, #0]
{
 8000d5c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	07d2      	lsls	r2, r2, #31
 8000d62:	d401      	bmi.n	8000d68 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000d64:	2000      	movs	r0, #0
 8000d66:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	f022 0201 	bic.w	r2, r2, #1
 8000d6e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000d70:	f7ff fe1a 	bl	80009a8 <HAL_GetTick>
 8000d74:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000d76:	6823      	ldr	r3, [r4, #0]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	07db      	lsls	r3, r3, #31
 8000d7c:	d5f2      	bpl.n	8000d64 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000d7e:	f7ff fe13 	bl	80009a8 <HAL_GetTick>
 8000d82:	1b40      	subs	r0, r0, r5
 8000d84:	2802      	cmp	r0, #2
 8000d86:	d9f6      	bls.n	8000d76 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d9a:	bd38      	pop	{r3, r4, r5, pc}

08000d9c <HAL_ADC_Init>:
{
 8000d9c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000d9e:	4604      	mov	r4, r0
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d071      	beq.n	8000e88 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000da4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000da6:	b923      	cbnz	r3, 8000db2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000da8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000daa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000dae:	f001 fd13 	bl	80027d8 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000db2:	4620      	mov	r0, r4
 8000db4:	f7ff ffd0 	bl	8000d58 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000db8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000dba:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000dbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dc0:	d164      	bne.n	8000e8c <HAL_ADC_Init+0xf0>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d162      	bne.n	8000e8c <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000dc6:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000dc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000dcc:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000dce:	f023 0302 	bic.w	r3, r3, #2
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000dd6:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dd8:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000dda:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000ddc:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000dde:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000de2:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000de6:	d038      	beq.n	8000e5a <HAL_ADC_Init+0xbe>
 8000de8:	2901      	cmp	r1, #1
 8000dea:	bf14      	ite	ne
 8000dec:	4606      	movne	r6, r0
 8000dee:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000df2:	6965      	ldr	r5, [r4, #20]
 8000df4:	2d01      	cmp	r5, #1
 8000df6:	d107      	bne.n	8000e08 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d130      	bne.n	8000e5e <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000dfc:	69a3      	ldr	r3, [r4, #24]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000e04:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000e08:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e0a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000e0e:	685d      	ldr	r5, [r3, #4]
 8000e10:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000e14:	ea45 0506 	orr.w	r5, r5, r6
 8000e18:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000e1a:	689e      	ldr	r6, [r3, #8]
 8000e1c:	4d1d      	ldr	r5, [pc, #116]	; (8000e94 <HAL_ADC_Init+0xf8>)
 8000e1e:	ea05 0506 	and.w	r5, r5, r6
 8000e22:	ea45 0502 	orr.w	r5, r5, r2
 8000e26:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000e28:	d001      	beq.n	8000e2e <HAL_ADC_Init+0x92>
 8000e2a:	2901      	cmp	r1, #1
 8000e2c:	d120      	bne.n	8000e70 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e2e:	6921      	ldr	r1, [r4, #16]
 8000e30:	3901      	subs	r1, #1
 8000e32:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000e34:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000e36:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000e3a:	4329      	orrs	r1, r5
 8000e3c:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e3e:	6899      	ldr	r1, [r3, #8]
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_ADC_Init+0xfc>)
 8000e42:	400b      	ands	r3, r1
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d115      	bne.n	8000e74 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000e4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e4e:	f023 0303 	bic.w	r3, r3, #3
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e58:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e5a:	460e      	mov	r6, r1
 8000e5c:	e7c9      	b.n	8000df2 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e60:	f043 0320 	orr.w	r3, r3, #32
 8000e64:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e6e:	e7cb      	b.n	8000e08 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000e70:	2100      	movs	r1, #0
 8000e72:	e7df      	b.n	8000e34 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000e74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e76:	f023 0312 	bic.w	r3, r3, #18
 8000e7a:	f043 0310 	orr.w	r3, r3, #16
 8000e7e:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8000e88:	2001      	movs	r0, #1
}
 8000e8a:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e8c:	f043 0310 	orr.w	r3, r3, #16
 8000e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e92:	e7f9      	b.n	8000e88 <HAL_ADC_Init+0xec>
 8000e94:	ffe1f7fd 	.word	0xffe1f7fd
 8000e98:	ff1f0efe 	.word	0xff1f0efe

08000e9c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000e9c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000ea0:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000ea2:	2b01      	cmp	r3, #1
{
 8000ea4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000ea6:	d011      	beq.n	8000ecc <HAL_ADC_Stop+0x30>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eae:	f7ff ff53 	bl	8000d58 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8000eb2:	b938      	cbnz	r0, 8000ec4 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8000eb4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000eb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000eba:	f023 0301 	bic.w	r3, r3, #1
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return tmp_hal_status;
 8000eca:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000ecc:	2002      	movs	r0, #2
}
 8000ece:	bd10      	pop	{r4, pc}

08000ed0 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000ed0:	2300      	movs	r3, #0
{
 8000ed2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000ed4:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ed6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8000eda:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d05a      	beq.n	8000f96 <HAL_ADCEx_Calibration_Start+0xc6>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ee6:	f7ff ff37 	bl	8000d58 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000eea:	4605      	mov	r5, r0
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d132      	bne.n	8000f56 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ef0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000ef2:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 8000ef4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ef8:	f023 0302 	bic.w	r3, r3, #2
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <HAL_ADCEx_Calibration_Start+0xcc>)
 8000f04:	681e      	ldr	r6, [r3, #0]
 8000f06:	f000 fd35 	bl	8001974 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f0a:	fbb6 f0f0 	udiv	r0, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000f0e:	0040      	lsls	r0, r0, #1
    wait_loop_index = ((SystemCoreClock
 8000f10:	9001      	str	r0, [sp, #4]

    while(wait_loop_index != 0U)
 8000f12:	9b01      	ldr	r3, [sp, #4]
 8000f14:	bb1b      	cbnz	r3, 8000f5e <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff fe84 	bl	8000c24 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000f1c:	6822      	ldr	r2, [r4, #0]
 8000f1e:	6893      	ldr	r3, [r2, #8]
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8000f26:	f7ff fd3f 	bl	80009a8 <HAL_GetTick>
 8000f2a:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000f2c:	6823      	ldr	r3, [r4, #0]
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	0712      	lsls	r2, r2, #28
 8000f32:	d418      	bmi.n	8000f66 <HAL_ADCEx_Calibration_Start+0x96>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	f042 0204 	orr.w	r2, r2, #4
 8000f3a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000f3c:	f7ff fd34 	bl	80009a8 <HAL_GetTick>
 8000f40:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	075b      	lsls	r3, r3, #29
 8000f48:	d41f      	bmi.n	8000f8a <HAL_ADCEx_Calibration_Start+0xba>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f4c:	f023 0303 	bic.w	r3, r3, #3
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f56:	2300      	movs	r3, #0
 8000f58:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f5c:	e012      	b.n	8000f84 <HAL_ADCEx_Calibration_Start+0xb4>
      wait_loop_index--;
 8000f5e:	9b01      	ldr	r3, [sp, #4]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	9301      	str	r3, [sp, #4]
 8000f64:	e7d5      	b.n	8000f12 <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000f66:	f7ff fd1f 	bl	80009a8 <HAL_GetTick>
 8000f6a:	1b80      	subs	r0, r0, r6
 8000f6c:	280a      	cmp	r0, #10
 8000f6e:	d9dd      	bls.n	8000f2c <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8000f70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        return HAL_ERROR;
 8000f72:	2501      	movs	r5, #1
        ADC_STATE_CLR_SET(hadc->State,
 8000f74:	f023 0312 	bic.w	r3, r3, #18
 8000f78:	f043 0310 	orr.w	r3, r3, #16
 8000f7c:	62a3      	str	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8000f84:	4628      	mov	r0, r5
 8000f86:	b002      	add	sp, #8
 8000f88:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000f8a:	f7ff fd0d 	bl	80009a8 <HAL_GetTick>
 8000f8e:	1b80      	subs	r0, r0, r6
 8000f90:	280a      	cmp	r0, #10
 8000f92:	d9d6      	bls.n	8000f42 <HAL_ADCEx_Calibration_Start+0x72>
 8000f94:	e7ec      	b.n	8000f70 <HAL_ADCEx_Calibration_Start+0xa0>
  __HAL_LOCK(hadc);
 8000f96:	2502      	movs	r5, #2
 8000f98:	e7f4      	b.n	8000f84 <HAL_ADCEx_Calibration_Start+0xb4>
 8000f9a:	bf00      	nop
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4a07      	ldr	r2, [pc, #28]	; (8000fc0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fa2:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fa6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	0c1b      	lsrs	r3, r3, #16
 8000fb2:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000fba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000fbc:	60d3      	str	r3, [r2, #12]
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc6:	b530      	push	{r4, r5, lr}
 8000fc8:	68dc      	ldr	r4, [r3, #12]
 8000fca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	bf28      	it	cs
 8000fd8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe0:	bf98      	it	ls
 8000fe2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	fa05 f303 	lsl.w	r3, r5, r3
 8000fe8:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fec:	bf88      	it	hi
 8000fee:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4019      	ands	r1, r3
 8000ff2:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	fa05 f404 	lsl.w	r4, r5, r4
 8000ff8:	3c01      	subs	r4, #1
 8000ffa:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ffc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffe:	ea42 0201 	orr.w	r2, r2, r1
 8001002:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	bfaf      	iteee	ge
 8001008:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	4b06      	ldrlt	r3, [pc, #24]	; (8001028 <HAL_NVIC_SetPriority+0x64>)
 800100e:	f000 000f 	andlt.w	r0, r0, #15
 8001012:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	bfa5      	ittet	ge
 8001016:	b2d2      	uxtbge	r2, r2
 8001018:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001022:	bd30      	pop	{r4, r5, pc}
 8001024:	e000ed00 	.word	0xe000ed00
 8001028:	e000ed14 	.word	0xe000ed14

0800102c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800102c:	2301      	movs	r3, #1
 800102e:	0942      	lsrs	r2, r0, #5
 8001030:	f000 001f 	and.w	r0, r0, #31
 8001034:	fa03 f000 	lsl.w	r0, r3, r0
 8001038:	4b01      	ldr	r3, [pc, #4]	; (8001040 <HAL_NVIC_EnableIRQ+0x14>)
 800103a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800103e:	4770      	bx	lr
 8001040:	e000e100 	.word	0xe000e100

08001044 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	3801      	subs	r0, #1
 8001046:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800104a:	d20a      	bcs.n	8001062 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001058:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001072:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	bf0c      	ite	eq
 8001078:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800107c:	f022 0204 	bicne.w	r2, r2, #4
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	4770      	bx	lr
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001088:	4770      	bx	lr

0800108a <HAL_SYSTICK_IRQHandler>:
{
 800108a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800108c:	f7ff fffc 	bl	8001088 <HAL_SYSTICK_Callback>
 8001090:	bd08      	pop	{r3, pc}
	...

08001094 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001098:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800109a:	4616      	mov	r6, r2
 800109c:	4b65      	ldr	r3, [pc, #404]	; (8001234 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800109e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8001244 <HAL_GPIO_Init+0x1b0>
 80010a2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001248 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80010a6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010aa:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80010ac:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80010b4:	45a0      	cmp	r8, r4
 80010b6:	d17f      	bne.n	80011b8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80010b8:	684d      	ldr	r5, [r1, #4]
 80010ba:	2d12      	cmp	r5, #18
 80010bc:	f000 80af 	beq.w	800121e <HAL_GPIO_Init+0x18a>
 80010c0:	f200 8088 	bhi.w	80011d4 <HAL_GPIO_Init+0x140>
 80010c4:	2d02      	cmp	r5, #2
 80010c6:	f000 80a7 	beq.w	8001218 <HAL_GPIO_Init+0x184>
 80010ca:	d87c      	bhi.n	80011c6 <HAL_GPIO_Init+0x132>
 80010cc:	2d00      	cmp	r5, #0
 80010ce:	f000 808e 	beq.w	80011ee <HAL_GPIO_Init+0x15a>
 80010d2:	2d01      	cmp	r5, #1
 80010d4:	f000 809e 	beq.w	8001214 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010dc:	2cff      	cmp	r4, #255	; 0xff
 80010de:	bf93      	iteet	ls
 80010e0:	4682      	movls	sl, r0
 80010e2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80010e6:	3d08      	subhi	r5, #8
 80010e8:	f8d0 b000 	ldrls.w	fp, [r0]
 80010ec:	bf92      	itee	ls
 80010ee:	00b5      	lslls	r5, r6, #2
 80010f0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80010f4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010f6:	fa09 f805 	lsl.w	r8, r9, r5
 80010fa:	ea2b 0808 	bic.w	r8, fp, r8
 80010fe:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001102:	bf88      	it	hi
 8001104:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001108:	ea48 0505 	orr.w	r5, r8, r5
 800110c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001110:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001114:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001118:	d04e      	beq.n	80011b8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800111a:	4d47      	ldr	r5, [pc, #284]	; (8001238 <HAL_GPIO_Init+0x1a4>)
 800111c:	4f46      	ldr	r7, [pc, #280]	; (8001238 <HAL_GPIO_Init+0x1a4>)
 800111e:	69ad      	ldr	r5, [r5, #24]
 8001120:	f026 0803 	bic.w	r8, r6, #3
 8001124:	f045 0501 	orr.w	r5, r5, #1
 8001128:	61bd      	str	r5, [r7, #24]
 800112a:	69bd      	ldr	r5, [r7, #24]
 800112c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001130:	f005 0501 	and.w	r5, r5, #1
 8001134:	9501      	str	r5, [sp, #4]
 8001136:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800113a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800113e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001140:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8001144:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001148:	fa09 f90b 	lsl.w	r9, r9, fp
 800114c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001150:	4d3a      	ldr	r5, [pc, #232]	; (800123c <HAL_GPIO_Init+0x1a8>)
 8001152:	42a8      	cmp	r0, r5
 8001154:	d068      	beq.n	8001228 <HAL_GPIO_Init+0x194>
 8001156:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800115a:	42a8      	cmp	r0, r5
 800115c:	d066      	beq.n	800122c <HAL_GPIO_Init+0x198>
 800115e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001162:	42a8      	cmp	r0, r5
 8001164:	d064      	beq.n	8001230 <HAL_GPIO_Init+0x19c>
 8001166:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800116a:	42a8      	cmp	r0, r5
 800116c:	bf0c      	ite	eq
 800116e:	2503      	moveq	r5, #3
 8001170:	2504      	movne	r5, #4
 8001172:	fa05 f50b 	lsl.w	r5, r5, fp
 8001176:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800117a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800117e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001180:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001184:	bf14      	ite	ne
 8001186:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001188:	43a5      	biceq	r5, r4
 800118a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800118c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001192:	bf14      	ite	ne
 8001194:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001196:	43a5      	biceq	r5, r4
 8001198:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800119a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a0:	bf14      	ite	ne
 80011a2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011a4:	43a5      	biceq	r5, r4
 80011a6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011a8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011aa:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ae:	bf14      	ite	ne
 80011b0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b2:	ea25 0404 	biceq.w	r4, r5, r4
 80011b6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80011b8:	3601      	adds	r6, #1
 80011ba:	2e10      	cmp	r6, #16
 80011bc:	f47f af73 	bne.w	80010a6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80011c0:	b003      	add	sp, #12
 80011c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80011c6:	2d03      	cmp	r5, #3
 80011c8:	d022      	beq.n	8001210 <HAL_GPIO_Init+0x17c>
 80011ca:	2d11      	cmp	r5, #17
 80011cc:	d184      	bne.n	80010d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011ce:	68ca      	ldr	r2, [r1, #12]
 80011d0:	3204      	adds	r2, #4
          break;
 80011d2:	e781      	b.n	80010d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80011d4:	4f1a      	ldr	r7, [pc, #104]	; (8001240 <HAL_GPIO_Init+0x1ac>)
 80011d6:	42bd      	cmp	r5, r7
 80011d8:	d009      	beq.n	80011ee <HAL_GPIO_Init+0x15a>
 80011da:	d812      	bhi.n	8001202 <HAL_GPIO_Init+0x16e>
 80011dc:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800124c <HAL_GPIO_Init+0x1b8>
 80011e0:	454d      	cmp	r5, r9
 80011e2:	d004      	beq.n	80011ee <HAL_GPIO_Init+0x15a>
 80011e4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80011e8:	454d      	cmp	r5, r9
 80011ea:	f47f af75 	bne.w	80010d8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ee:	688a      	ldr	r2, [r1, #8]
 80011f0:	b1c2      	cbz	r2, 8001224 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011f2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80011f4:	bf0c      	ite	eq
 80011f6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80011fa:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011fe:	2208      	movs	r2, #8
 8001200:	e76a      	b.n	80010d8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001202:	4575      	cmp	r5, lr
 8001204:	d0f3      	beq.n	80011ee <HAL_GPIO_Init+0x15a>
 8001206:	4565      	cmp	r5, ip
 8001208:	d0f1      	beq.n	80011ee <HAL_GPIO_Init+0x15a>
 800120a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001250 <HAL_GPIO_Init+0x1bc>
 800120e:	e7eb      	b.n	80011e8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001210:	2200      	movs	r2, #0
 8001212:	e761      	b.n	80010d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001214:	68ca      	ldr	r2, [r1, #12]
          break;
 8001216:	e75f      	b.n	80010d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001218:	68ca      	ldr	r2, [r1, #12]
 800121a:	3208      	adds	r2, #8
          break;
 800121c:	e75c      	b.n	80010d8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800121e:	68ca      	ldr	r2, [r1, #12]
 8001220:	320c      	adds	r2, #12
          break;
 8001222:	e759      	b.n	80010d8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001224:	2204      	movs	r2, #4
 8001226:	e757      	b.n	80010d8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001228:	2500      	movs	r5, #0
 800122a:	e7a2      	b.n	8001172 <HAL_GPIO_Init+0xde>
 800122c:	2501      	movs	r5, #1
 800122e:	e7a0      	b.n	8001172 <HAL_GPIO_Init+0xde>
 8001230:	2502      	movs	r5, #2
 8001232:	e79e      	b.n	8001172 <HAL_GPIO_Init+0xde>
 8001234:	40010400 	.word	0x40010400
 8001238:	40021000 	.word	0x40021000
 800123c:	40010800 	.word	0x40010800
 8001240:	10210000 	.word	0x10210000
 8001244:	10310000 	.word	0x10310000
 8001248:	10320000 	.word	0x10320000
 800124c:	10110000 	.word	0x10110000
 8001250:	10220000 	.word	0x10220000

08001254 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001254:	b10a      	cbz	r2, 800125a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	6101      	str	r1, [r0, #16]
 8001258:	4770      	bx	lr
 800125a:	0409      	lsls	r1, r1, #16
 800125c:	e7fb      	b.n	8001256 <HAL_GPIO_WritePin+0x2>
	...

08001260 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001260:	b538      	push	{r3, r4, r5, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001262:	4604      	mov	r4, r0
 8001264:	b908      	cbnz	r0, 800126a <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8001266:	2001      	movs	r0, #1
 8001268:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800126a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800126e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001272:	b91b      	cbnz	r3, 800127c <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001274:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001278:	f001 face 	bl	8002818 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800127c:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800127e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001280:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001284:	6813      	ldr	r3, [r2, #0]
 8001286:	f023 0301 	bic.w	r3, r3, #1
 800128a:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800128c:	f000 fada 	bl	8001844 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001290:	6863      	ldr	r3, [r4, #4]
 8001292:	4a2f      	ldr	r2, [pc, #188]	; (8001350 <HAL_I2C_Init+0xf0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d830      	bhi.n	80012fa <HAL_I2C_Init+0x9a>
 8001298:	4a2e      	ldr	r2, [pc, #184]	; (8001354 <HAL_I2C_Init+0xf4>)
 800129a:	4290      	cmp	r0, r2
 800129c:	d9e3      	bls.n	8001266 <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800129e:	4a2e      	ldr	r2, [pc, #184]	; (8001358 <HAL_I2C_Init+0xf8>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80012a0:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80012a2:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 80012a6:	604a      	str	r2, [r1, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80012a8:	3201      	adds	r2, #1
 80012aa:	620a      	str	r2, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80012ac:	4a28      	ldr	r2, [pc, #160]	; (8001350 <HAL_I2C_Init+0xf0>)
 80012ae:	3801      	subs	r0, #1
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d832      	bhi.n	800131a <HAL_I2C_Init+0xba>
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80012ba:	1c43      	adds	r3, r0, #1
 80012bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	bf38      	it	cc
 80012c4:	2304      	movcc	r3, #4
 80012c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012c8:	6a22      	ldr	r2, [r4, #32]
 80012ca:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012cc:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80012d2:	68e2      	ldr	r2, [r4, #12]
 80012d4:	6923      	ldr	r3, [r4, #16]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80012da:	69a2      	ldr	r2, [r4, #24]
 80012dc:	6963      	ldr	r3, [r4, #20]
 80012de:	4313      	orrs	r3, r2
 80012e0:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80012e2:	680b      	ldr	r3, [r1, #0]
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80012ea:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ec:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80012ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80012f2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012f4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80012f8:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012fa:	4a18      	ldr	r2, [pc, #96]	; (800135c <HAL_I2C_Init+0xfc>)
 80012fc:	4290      	cmp	r0, r2
 80012fe:	d9b2      	bls.n	8001266 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001300:	4d15      	ldr	r5, [pc, #84]	; (8001358 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001302:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8001306:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 800130a:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800130c:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 800130e:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001310:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8001314:	fbb2 f2f5 	udiv	r2, r2, r5
 8001318:	e7c6      	b.n	80012a8 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800131a:	68a2      	ldr	r2, [r4, #8]
 800131c:	b952      	cbnz	r2, 8001334 <HAL_I2C_Init+0xd4>
 800131e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001322:	fbb0 f0f3 	udiv	r0, r0, r3
 8001326:	1c43      	adds	r3, r0, #1
 8001328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800132c:	b16b      	cbz	r3, 800134a <HAL_I2C_Init+0xea>
 800132e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001332:	e7c8      	b.n	80012c6 <HAL_I2C_Init+0x66>
 8001334:	2219      	movs	r2, #25
 8001336:	4353      	muls	r3, r2
 8001338:	fbb0 f0f3 	udiv	r0, r0, r3
 800133c:	1c43      	adds	r3, r0, #1
 800133e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001342:	b113      	cbz	r3, 800134a <HAL_I2C_Init+0xea>
 8001344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001348:	e7bd      	b.n	80012c6 <HAL_I2C_Init+0x66>
 800134a:	2301      	movs	r3, #1
 800134c:	e7bb      	b.n	80012c6 <HAL_I2C_Init+0x66>
 800134e:	bf00      	nop
 8001350:	000186a0 	.word	0x000186a0
 8001354:	001e847f 	.word	0x001e847f
 8001358:	000f4240 	.word	0x000f4240
 800135c:	003d08ff 	.word	0x003d08ff

08001360 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001360:	6803      	ldr	r3, [r0, #0]
{
 8001362:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	07db      	lsls	r3, r3, #31
{
 8001368:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136a:	d410      	bmi.n	800138e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136c:	682b      	ldr	r3, [r5, #0]
 800136e:	079f      	lsls	r7, r3, #30
 8001370:	d45e      	bmi.n	8001430 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001372:	682b      	ldr	r3, [r5, #0]
 8001374:	0719      	lsls	r1, r3, #28
 8001376:	f100 8095 	bmi.w	80014a4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800137a:	682b      	ldr	r3, [r5, #0]
 800137c:	075a      	lsls	r2, r3, #29
 800137e:	f100 80bf 	bmi.w	8001500 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001382:	69ea      	ldr	r2, [r5, #28]
 8001384:	2a00      	cmp	r2, #0
 8001386:	f040 812d 	bne.w	80015e4 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800138a:	2000      	movs	r0, #0
 800138c:	e014      	b.n	80013b8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800138e:	4c90      	ldr	r4, [pc, #576]	; (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001390:	6863      	ldr	r3, [r4, #4]
 8001392:	f003 030c 	and.w	r3, r3, #12
 8001396:	2b04      	cmp	r3, #4
 8001398:	d007      	beq.n	80013aa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800139a:	6863      	ldr	r3, [r4, #4]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d10c      	bne.n	80013be <HAL_RCC_OscConfig+0x5e>
 80013a4:	6863      	ldr	r3, [r4, #4]
 80013a6:	03de      	lsls	r6, r3, #15
 80013a8:	d509      	bpl.n	80013be <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	039c      	lsls	r4, r3, #14
 80013ae:	d5dd      	bpl.n	800136c <HAL_RCC_OscConfig+0xc>
 80013b0:	686b      	ldr	r3, [r5, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1da      	bne.n	800136c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80013b6:	2001      	movs	r0, #1
}
 80013b8:	b002      	add	sp, #8
 80013ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013be:	686b      	ldr	r3, [r5, #4]
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c4:	d110      	bne.n	80013e8 <HAL_RCC_OscConfig+0x88>
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013ce:	f7ff faeb 	bl	80009a8 <HAL_GetTick>
 80013d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	0398      	lsls	r0, r3, #14
 80013d8:	d4c8      	bmi.n	800136c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013da:	f7ff fae5 	bl	80009a8 <HAL_GetTick>
 80013de:	1b80      	subs	r0, r0, r6
 80013e0:	2864      	cmp	r0, #100	; 0x64
 80013e2:	d9f7      	bls.n	80013d4 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80013e4:	2003      	movs	r0, #3
 80013e6:	e7e7      	b.n	80013b8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e8:	b99b      	cbnz	r3, 8001412 <HAL_RCC_OscConfig+0xb2>
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	6823      	ldr	r3, [r4, #0]
 80013f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80013fa:	f7ff fad5 	bl	80009a8 <HAL_GetTick>
 80013fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	0399      	lsls	r1, r3, #14
 8001404:	d5b2      	bpl.n	800136c <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001406:	f7ff facf 	bl	80009a8 <HAL_GetTick>
 800140a:	1b80      	subs	r0, r0, r6
 800140c:	2864      	cmp	r0, #100	; 0x64
 800140e:	d9f7      	bls.n	8001400 <HAL_RCC_OscConfig+0xa0>
 8001410:	e7e8      	b.n	80013e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001412:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	d103      	bne.n	8001422 <HAL_RCC_OscConfig+0xc2>
 800141a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141e:	6023      	str	r3, [r4, #0]
 8001420:	e7d1      	b.n	80013c6 <HAL_RCC_OscConfig+0x66>
 8001422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001426:	6023      	str	r3, [r4, #0]
 8001428:	6823      	ldr	r3, [r4, #0]
 800142a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142e:	e7cd      	b.n	80013cc <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001430:	4c67      	ldr	r4, [pc, #412]	; (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001432:	6863      	ldr	r3, [r4, #4]
 8001434:	f013 0f0c 	tst.w	r3, #12
 8001438:	d007      	beq.n	800144a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800143a:	6863      	ldr	r3, [r4, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b08      	cmp	r3, #8
 8001442:	d110      	bne.n	8001466 <HAL_RCC_OscConfig+0x106>
 8001444:	6863      	ldr	r3, [r4, #4]
 8001446:	03da      	lsls	r2, r3, #15
 8001448:	d40d      	bmi.n	8001466 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	079b      	lsls	r3, r3, #30
 800144e:	d502      	bpl.n	8001456 <HAL_RCC_OscConfig+0xf6>
 8001450:	692b      	ldr	r3, [r5, #16]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d1af      	bne.n	80013b6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	696a      	ldr	r2, [r5, #20]
 800145a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800145e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001462:	6023      	str	r3, [r4, #0]
 8001464:	e785      	b.n	8001372 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001466:	692a      	ldr	r2, [r5, #16]
 8001468:	4b5a      	ldr	r3, [pc, #360]	; (80015d4 <HAL_RCC_OscConfig+0x274>)
 800146a:	b16a      	cbz	r2, 8001488 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 800146c:	2201      	movs	r2, #1
 800146e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001470:	f7ff fa9a 	bl	80009a8 <HAL_GetTick>
 8001474:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	079f      	lsls	r7, r3, #30
 800147a:	d4ec      	bmi.n	8001456 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fa94 	bl	80009a8 <HAL_GetTick>
 8001480:	1b80      	subs	r0, r0, r6
 8001482:	2802      	cmp	r0, #2
 8001484:	d9f7      	bls.n	8001476 <HAL_RCC_OscConfig+0x116>
 8001486:	e7ad      	b.n	80013e4 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001488:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800148a:	f7ff fa8d 	bl	80009a8 <HAL_GetTick>
 800148e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	0798      	lsls	r0, r3, #30
 8001494:	f57f af6d 	bpl.w	8001372 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff fa86 	bl	80009a8 <HAL_GetTick>
 800149c:	1b80      	subs	r0, r0, r6
 800149e:	2802      	cmp	r0, #2
 80014a0:	d9f6      	bls.n	8001490 <HAL_RCC_OscConfig+0x130>
 80014a2:	e79f      	b.n	80013e4 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a4:	69aa      	ldr	r2, [r5, #24]
 80014a6:	4c4a      	ldr	r4, [pc, #296]	; (80015d0 <HAL_RCC_OscConfig+0x270>)
 80014a8:	4b4b      	ldr	r3, [pc, #300]	; (80015d8 <HAL_RCC_OscConfig+0x278>)
 80014aa:	b1da      	cbz	r2, 80014e4 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80014ac:	2201      	movs	r2, #1
 80014ae:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014b0:	f7ff fa7a 	bl	80009a8 <HAL_GetTick>
 80014b4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014b8:	079b      	lsls	r3, r3, #30
 80014ba:	d50d      	bpl.n	80014d8 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014bc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80014c0:	4b46      	ldr	r3, [pc, #280]	; (80015dc <HAL_RCC_OscConfig+0x27c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80014c8:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80014ca:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80014cc:	9b01      	ldr	r3, [sp, #4]
 80014ce:	1e5a      	subs	r2, r3, #1
 80014d0:	9201      	str	r2, [sp, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f9      	bne.n	80014ca <HAL_RCC_OscConfig+0x16a>
 80014d6:	e750      	b.n	800137a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fa66 	bl	80009a8 <HAL_GetTick>
 80014dc:	1b80      	subs	r0, r0, r6
 80014de:	2802      	cmp	r0, #2
 80014e0:	d9e9      	bls.n	80014b6 <HAL_RCC_OscConfig+0x156>
 80014e2:	e77f      	b.n	80013e4 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80014e4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80014e6:	f7ff fa5f 	bl	80009a8 <HAL_GetTick>
 80014ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014ee:	079f      	lsls	r7, r3, #30
 80014f0:	f57f af43 	bpl.w	800137a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fa58 	bl	80009a8 <HAL_GetTick>
 80014f8:	1b80      	subs	r0, r0, r6
 80014fa:	2802      	cmp	r0, #2
 80014fc:	d9f6      	bls.n	80014ec <HAL_RCC_OscConfig+0x18c>
 80014fe:	e771      	b.n	80013e4 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001500:	4c33      	ldr	r4, [pc, #204]	; (80015d0 <HAL_RCC_OscConfig+0x270>)
 8001502:	69e3      	ldr	r3, [r4, #28]
 8001504:	00d8      	lsls	r0, r3, #3
 8001506:	d424      	bmi.n	8001552 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001508:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	69e3      	ldr	r3, [r4, #28]
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	61e3      	str	r3, [r4, #28]
 8001512:	69e3      	ldr	r3, [r4, #28]
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	4e30      	ldr	r6, [pc, #192]	; (80015e0 <HAL_RCC_OscConfig+0x280>)
 800151e:	6833      	ldr	r3, [r6, #0]
 8001520:	05d9      	lsls	r1, r3, #23
 8001522:	d518      	bpl.n	8001556 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	68eb      	ldr	r3, [r5, #12]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d126      	bne.n	8001578 <HAL_RCC_OscConfig+0x218>
 800152a:	6a23      	ldr	r3, [r4, #32]
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001532:	f7ff fa39 	bl	80009a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001536:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800153a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800153c:	6a23      	ldr	r3, [r4, #32]
 800153e:	079b      	lsls	r3, r3, #30
 8001540:	d53f      	bpl.n	80015c2 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001542:	2f00      	cmp	r7, #0
 8001544:	f43f af1d 	beq.w	8001382 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001548:	69e3      	ldr	r3, [r4, #28]
 800154a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800154e:	61e3      	str	r3, [r4, #28]
 8001550:	e717      	b.n	8001382 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001552:	2700      	movs	r7, #0
 8001554:	e7e2      	b.n	800151c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001556:	6833      	ldr	r3, [r6, #0]
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800155e:	f7ff fa23 	bl	80009a8 <HAL_GetTick>
 8001562:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	6833      	ldr	r3, [r6, #0]
 8001566:	05da      	lsls	r2, r3, #23
 8001568:	d4dc      	bmi.n	8001524 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800156a:	f7ff fa1d 	bl	80009a8 <HAL_GetTick>
 800156e:	eba0 0008 	sub.w	r0, r0, r8
 8001572:	2864      	cmp	r0, #100	; 0x64
 8001574:	d9f6      	bls.n	8001564 <HAL_RCC_OscConfig+0x204>
 8001576:	e735      	b.n	80013e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001578:	b9ab      	cbnz	r3, 80015a6 <HAL_RCC_OscConfig+0x246>
 800157a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6223      	str	r3, [r4, #32]
 8001586:	6a23      	ldr	r3, [r4, #32]
 8001588:	f023 0304 	bic.w	r3, r3, #4
 800158c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800158e:	f7ff fa0b 	bl	80009a8 <HAL_GetTick>
 8001592:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	6a23      	ldr	r3, [r4, #32]
 8001596:	0798      	lsls	r0, r3, #30
 8001598:	d5d3      	bpl.n	8001542 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159a:	f7ff fa05 	bl	80009a8 <HAL_GetTick>
 800159e:	1b80      	subs	r0, r0, r6
 80015a0:	4540      	cmp	r0, r8
 80015a2:	d9f7      	bls.n	8001594 <HAL_RCC_OscConfig+0x234>
 80015a4:	e71e      	b.n	80013e4 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	6a23      	ldr	r3, [r4, #32]
 80015aa:	d103      	bne.n	80015b4 <HAL_RCC_OscConfig+0x254>
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	6223      	str	r3, [r4, #32]
 80015b2:	e7ba      	b.n	800152a <HAL_RCC_OscConfig+0x1ca>
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	6223      	str	r3, [r4, #32]
 80015ba:	6a23      	ldr	r3, [r4, #32]
 80015bc:	f023 0304 	bic.w	r3, r3, #4
 80015c0:	e7b6      	b.n	8001530 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff f9f1 	bl	80009a8 <HAL_GetTick>
 80015c6:	eba0 0008 	sub.w	r0, r0, r8
 80015ca:	42b0      	cmp	r0, r6
 80015cc:	d9b6      	bls.n	800153c <HAL_RCC_OscConfig+0x1dc>
 80015ce:	e709      	b.n	80013e4 <HAL_RCC_OscConfig+0x84>
 80015d0:	40021000 	.word	0x40021000
 80015d4:	42420000 	.word	0x42420000
 80015d8:	42420480 	.word	0x42420480
 80015dc:	20000008 	.word	0x20000008
 80015e0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e4:	4c22      	ldr	r4, [pc, #136]	; (8001670 <HAL_RCC_OscConfig+0x310>)
 80015e6:	6863      	ldr	r3, [r4, #4]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b08      	cmp	r3, #8
 80015ee:	f43f aee2 	beq.w	80013b6 <HAL_RCC_OscConfig+0x56>
 80015f2:	2300      	movs	r3, #0
 80015f4:	4e1f      	ldr	r6, [pc, #124]	; (8001674 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f6:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80015f8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fa:	d12b      	bne.n	8001654 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80015fc:	f7ff f9d4 	bl	80009a8 <HAL_GetTick>
 8001600:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001602:	6823      	ldr	r3, [r4, #0]
 8001604:	0199      	lsls	r1, r3, #6
 8001606:	d41f      	bmi.n	8001648 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001608:	6a2b      	ldr	r3, [r5, #32]
 800160a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800160e:	d105      	bne.n	800161c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001610:	6862      	ldr	r2, [r4, #4]
 8001612:	68a9      	ldr	r1, [r5, #8]
 8001614:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001618:	430a      	orrs	r2, r1
 800161a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800161c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800161e:	6862      	ldr	r2, [r4, #4]
 8001620:	430b      	orrs	r3, r1
 8001622:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001626:	4313      	orrs	r3, r2
 8001628:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800162a:	2301      	movs	r3, #1
 800162c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800162e:	f7ff f9bb 	bl	80009a8 <HAL_GetTick>
 8001632:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001634:	6823      	ldr	r3, [r4, #0]
 8001636:	019a      	lsls	r2, r3, #6
 8001638:	f53f aea7 	bmi.w	800138a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff f9b4 	bl	80009a8 <HAL_GetTick>
 8001640:	1b40      	subs	r0, r0, r5
 8001642:	2802      	cmp	r0, #2
 8001644:	d9f6      	bls.n	8001634 <HAL_RCC_OscConfig+0x2d4>
 8001646:	e6cd      	b.n	80013e4 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff f9ae 	bl	80009a8 <HAL_GetTick>
 800164c:	1bc0      	subs	r0, r0, r7
 800164e:	2802      	cmp	r0, #2
 8001650:	d9d7      	bls.n	8001602 <HAL_RCC_OscConfig+0x2a2>
 8001652:	e6c7      	b.n	80013e4 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001654:	f7ff f9a8 	bl	80009a8 <HAL_GetTick>
 8001658:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	f57f ae94 	bpl.w	800138a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff f9a1 	bl	80009a8 <HAL_GetTick>
 8001666:	1b40      	subs	r0, r0, r5
 8001668:	2802      	cmp	r0, #2
 800166a:	d9f6      	bls.n	800165a <HAL_RCC_OscConfig+0x2fa>
 800166c:	e6ba      	b.n	80013e4 <HAL_RCC_OscConfig+0x84>
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	42420060 	.word	0x42420060

08001678 <HAL_RCC_GetSysClockFreq>:
{
 8001678:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800167c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800167e:	ac02      	add	r4, sp, #8
 8001680:	f103 0510 	add.w	r5, r3, #16
 8001684:	4622      	mov	r2, r4
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	6859      	ldr	r1, [r3, #4]
 800168a:	3308      	adds	r3, #8
 800168c:	c203      	stmia	r2!, {r0, r1}
 800168e:	42ab      	cmp	r3, r5
 8001690:	4614      	mov	r4, r2
 8001692:	d1f7      	bne.n	8001684 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001694:	2301      	movs	r3, #1
 8001696:	f88d 3004 	strb.w	r3, [sp, #4]
 800169a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 800169c:	4911      	ldr	r1, [pc, #68]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800169e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80016a2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80016a4:	f003 020c 	and.w	r2, r3, #12
 80016a8:	2a08      	cmp	r2, #8
 80016aa:	d117      	bne.n	80016dc <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016ac:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80016b0:	a806      	add	r0, sp, #24
 80016b2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016b4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016b6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016ba:	d50c      	bpl.n	80016d6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016bc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016be:	480a      	ldr	r0, [pc, #40]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016c0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016c4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016c6:	aa06      	add	r2, sp, #24
 80016c8:	4413      	add	r3, r2
 80016ca:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016ce:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80016d2:	b007      	add	sp, #28
 80016d4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <HAL_RCC_GetSysClockFreq+0x74>)
 80016d8:	4350      	muls	r0, r2
 80016da:	e7fa      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80016de:	e7f8      	b.n	80016d2 <HAL_RCC_GetSysClockFreq+0x5a>
 80016e0:	080033e0 	.word	0x080033e0
 80016e4:	40021000 	.word	0x40021000
 80016e8:	007a1200 	.word	0x007a1200
 80016ec:	003d0900 	.word	0x003d0900

080016f0 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016f0:	4a4d      	ldr	r2, [pc, #308]	; (8001828 <HAL_RCC_ClockConfig+0x138>)
{
 80016f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016f6:	6813      	ldr	r3, [r2, #0]
{
 80016f8:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	428b      	cmp	r3, r1
{
 8001700:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001702:	d328      	bcc.n	8001756 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001704:	682a      	ldr	r2, [r5, #0]
 8001706:	0791      	lsls	r1, r2, #30
 8001708:	d432      	bmi.n	8001770 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800170a:	07d2      	lsls	r2, r2, #31
 800170c:	d438      	bmi.n	8001780 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800170e:	4a46      	ldr	r2, [pc, #280]	; (8001828 <HAL_RCC_ClockConfig+0x138>)
 8001710:	6813      	ldr	r3, [r2, #0]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	429e      	cmp	r6, r3
 8001718:	d373      	bcc.n	8001802 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171a:	682a      	ldr	r2, [r5, #0]
 800171c:	4c43      	ldr	r4, [pc, #268]	; (800182c <HAL_RCC_ClockConfig+0x13c>)
 800171e:	f012 0f04 	tst.w	r2, #4
 8001722:	d179      	bne.n	8001818 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	0713      	lsls	r3, r2, #28
 8001726:	d506      	bpl.n	8001736 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001728:	6863      	ldr	r3, [r4, #4]
 800172a:	692a      	ldr	r2, [r5, #16]
 800172c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001730:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001734:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001736:	f7ff ff9f 	bl	8001678 <HAL_RCC_GetSysClockFreq>
 800173a:	6863      	ldr	r3, [r4, #4]
 800173c:	4a3c      	ldr	r2, [pc, #240]	; (8001830 <HAL_RCC_ClockConfig+0x140>)
 800173e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	40d8      	lsrs	r0, r3
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <HAL_RCC_ClockConfig+0x144>)
 8001748:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff f8ea 	bl	8000924 <HAL_InitTick>
  return HAL_OK;
 8001750:	2000      	movs	r0, #0
}
 8001752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	6813      	ldr	r3, [r2, #0]
 8001758:	f023 0307 	bic.w	r3, r3, #7
 800175c:	430b      	orrs	r3, r1
 800175e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001760:	6813      	ldr	r3, [r2, #0]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	4299      	cmp	r1, r3
 8001768:	d0cc      	beq.n	8001704 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800176a:	2001      	movs	r0, #1
 800176c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001770:	492e      	ldr	r1, [pc, #184]	; (800182c <HAL_RCC_ClockConfig+0x13c>)
 8001772:	68a8      	ldr	r0, [r5, #8]
 8001774:	684b      	ldr	r3, [r1, #4]
 8001776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800177a:	4303      	orrs	r3, r0
 800177c:	604b      	str	r3, [r1, #4]
 800177e:	e7c4      	b.n	800170a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001780:	686a      	ldr	r2, [r5, #4]
 8001782:	4c2a      	ldr	r4, [pc, #168]	; (800182c <HAL_RCC_ClockConfig+0x13c>)
 8001784:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001788:	d11c      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	d0ec      	beq.n	800176a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001790:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001792:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	4313      	orrs	r3, r2
 800179c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800179e:	f7ff f903 	bl	80009a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a2:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80017a4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d114      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017aa:	6863      	ldr	r3, [r4, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d0ac      	beq.n	800170e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff f8f8 	bl	80009a8 <HAL_GetTick>
 80017b8:	1bc0      	subs	r0, r0, r7
 80017ba:	4540      	cmp	r0, r8
 80017bc:	d9f5      	bls.n	80017aa <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80017be:	2003      	movs	r0, #3
 80017c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c4:	2a02      	cmp	r2, #2
 80017c6:	d102      	bne.n	80017ce <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80017cc:	e7df      	b.n	800178e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ce:	f013 0f02 	tst.w	r3, #2
 80017d2:	e7dc      	b.n	800178e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d10f      	bne.n	80017f8 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d8:	6863      	ldr	r3, [r4, #4]
 80017da:	f003 030c 	and.w	r3, r3, #12
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d095      	beq.n	800170e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e2:	f7ff f8e1 	bl	80009a8 <HAL_GetTick>
 80017e6:	1bc0      	subs	r0, r0, r7
 80017e8:	4540      	cmp	r0, r8
 80017ea:	d9f5      	bls.n	80017d8 <HAL_RCC_ClockConfig+0xe8>
 80017ec:	e7e7      	b.n	80017be <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ee:	f7ff f8db 	bl	80009a8 <HAL_GetTick>
 80017f2:	1bc0      	subs	r0, r0, r7
 80017f4:	4540      	cmp	r0, r8
 80017f6:	d8e2      	bhi.n	80017be <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f8:	6863      	ldr	r3, [r4, #4]
 80017fa:	f013 0f0c 	tst.w	r3, #12
 80017fe:	d1f6      	bne.n	80017ee <HAL_RCC_ClockConfig+0xfe>
 8001800:	e785      	b.n	800170e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	f023 0307 	bic.w	r3, r3, #7
 8001808:	4333      	orrs	r3, r6
 800180a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800180c:	6813      	ldr	r3, [r2, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	429e      	cmp	r6, r3
 8001814:	d1a9      	bne.n	800176a <HAL_RCC_ClockConfig+0x7a>
 8001816:	e780      	b.n	800171a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	6863      	ldr	r3, [r4, #4]
 800181a:	68e9      	ldr	r1, [r5, #12]
 800181c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001820:	430b      	orrs	r3, r1
 8001822:	6063      	str	r3, [r4, #4]
 8001824:	e77e      	b.n	8001724 <HAL_RCC_ClockConfig+0x34>
 8001826:	bf00      	nop
 8001828:	40022000 	.word	0x40022000
 800182c:	40021000 	.word	0x40021000
 8001830:	0800340f 	.word	0x0800340f
 8001834:	20000008 	.word	0x20000008

08001838 <HAL_RCC_GetHCLKFreq>:
}
 8001838:	4b01      	ldr	r3, [pc, #4]	; (8001840 <HAL_RCC_GetHCLKFreq+0x8>)
 800183a:	6818      	ldr	r0, [r3, #0]
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008

08001844 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001844:	4b04      	ldr	r3, [pc, #16]	; (8001858 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800184e:	5cd3      	ldrb	r3, [r2, r3]
 8001850:	4a03      	ldr	r2, [pc, #12]	; (8001860 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001852:	6810      	ldr	r0, [r2, #0]
}    
 8001854:	40d8      	lsrs	r0, r3
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000
 800185c:	0800341f 	.word	0x0800341f
 8001860:	20000008 	.word	0x20000008

08001864 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800186e:	5cd3      	ldrb	r3, [r2, r3]
 8001870:	4a03      	ldr	r2, [pc, #12]	; (8001880 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001872:	6810      	ldr	r0, [r2, #0]
} 
 8001874:	40d8      	lsrs	r0, r3
 8001876:	4770      	bx	lr
 8001878:	40021000 	.word	0x40021000
 800187c:	0800341f 	.word	0x0800341f
 8001880:	20000008 	.word	0x20000008

08001884 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001884:	6803      	ldr	r3, [r0, #0]
{
 8001886:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800188a:	07d9      	lsls	r1, r3, #31
{
 800188c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800188e:	d520      	bpl.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001890:	4c35      	ldr	r4, [pc, #212]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001892:	69e3      	ldr	r3, [r4, #28]
 8001894:	00da      	lsls	r2, r3, #3
 8001896:	d432      	bmi.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001898:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	69e3      	ldr	r3, [r4, #28]
 800189c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a0:	61e3      	str	r3, [r4, #28]
 80018a2:	69e3      	ldr	r3, [r4, #28]
 80018a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	4e2f      	ldr	r6, [pc, #188]	; (800196c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80018ae:	6833      	ldr	r3, [r6, #0]
 80018b0:	05db      	lsls	r3, r3, #23
 80018b2:	d526      	bpl.n	8001902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018b4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80018ba:	d136      	bne.n	800192a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80018bc:	6a23      	ldr	r3, [r4, #32]
 80018be:	686a      	ldr	r2, [r5, #4]
 80018c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018c4:	4313      	orrs	r3, r2
 80018c6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018c8:	b11f      	cbz	r7, 80018d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ca:	69e3      	ldr	r3, [r4, #28]
 80018cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80018d2:	6828      	ldr	r0, [r5, #0]
 80018d4:	0783      	lsls	r3, r0, #30
 80018d6:	d506      	bpl.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80018d8:	4a23      	ldr	r2, [pc, #140]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80018da:	68a9      	ldr	r1, [r5, #8]
 80018dc:	6853      	ldr	r3, [r2, #4]
 80018de:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018e2:	430b      	orrs	r3, r1
 80018e4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80018e6:	f010 0010 	ands.w	r0, r0, #16
 80018ea:	d01b      	beq.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018ec:	4a1e      	ldr	r2, [pc, #120]	; (8001968 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80018ee:	68e9      	ldr	r1, [r5, #12]
 80018f0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80018f2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80018f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80018f8:	430b      	orrs	r3, r1
 80018fa:	6053      	str	r3, [r2, #4]
 80018fc:	e012      	b.n	8001924 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80018fe:	2700      	movs	r7, #0
 8001900:	e7d4      	b.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001902:	6833      	ldr	r3, [r6, #0]
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800190a:	f7ff f84d 	bl	80009a8 <HAL_GetTick>
 800190e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	6833      	ldr	r3, [r6, #0]
 8001912:	05d8      	lsls	r0, r3, #23
 8001914:	d4ce      	bmi.n	80018b4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001916:	f7ff f847 	bl	80009a8 <HAL_GetTick>
 800191a:	eba0 0008 	sub.w	r0, r0, r8
 800191e:	2864      	cmp	r0, #100	; 0x64
 8001920:	d9f6      	bls.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001922:	2003      	movs	r0, #3
}
 8001924:	b002      	add	sp, #8
 8001926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800192a:	686a      	ldr	r2, [r5, #4]
 800192c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001930:	4293      	cmp	r3, r2
 8001932:	d0c3      	beq.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001934:	2001      	movs	r0, #1
 8001936:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001938:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800193a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800193c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800193e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001942:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001944:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001946:	07d9      	lsls	r1, r3, #31
 8001948:	d5b8      	bpl.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800194a:	f7ff f82d 	bl	80009a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001952:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	6a23      	ldr	r3, [r4, #32]
 8001956:	079a      	lsls	r2, r3, #30
 8001958:	d4b0      	bmi.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7ff f825 	bl	80009a8 <HAL_GetTick>
 800195e:	1b80      	subs	r0, r0, r6
 8001960:	4540      	cmp	r0, r8
 8001962:	d9f7      	bls.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001964:	e7dd      	b.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	40007000 	.word	0x40007000
 8001970:	42420440 	.word	0x42420440

08001974 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001974:	b570      	push	{r4, r5, r6, lr}
 8001976:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001978:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 800197a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800197c:	ad02      	add	r5, sp, #8
 800197e:	f103 0610 	add.w	r6, r3, #16
 8001982:	462a      	mov	r2, r5
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	6859      	ldr	r1, [r3, #4]
 8001988:	3308      	adds	r3, #8
 800198a:	c203      	stmia	r2!, {r0, r1}
 800198c:	42b3      	cmp	r3, r6
 800198e:	4615      	mov	r5, r2
 8001990:	d1f7      	bne.n	8001982 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001992:	2301      	movs	r3, #1
 8001994:	f88d 3004 	strb.w	r3, [sp, #4]
 8001998:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800199a:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800199c:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 80019a0:	d047      	beq.n	8001a32 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 80019a2:	2c10      	cmp	r4, #16
 80019a4:	d017      	beq.n	80019d6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 80019a6:	2c01      	cmp	r4, #1
 80019a8:	d14f      	bne.n	8001a4a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80019aa:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 80019ae:	4a29      	ldr	r2, [pc, #164]	; (8001a54 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80019b0:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80019b2:	4019      	ands	r1, r3
 80019b4:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 80019b8:	d044      	beq.n	8001a44 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80019ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019c2:	d12d      	bne.n	8001a20 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 80019c4:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80019c8:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 80019ca:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 80019ce:	bf08      	it	eq
 80019d0:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 80019d2:	b006      	add	sp, #24
 80019d4:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 80019d6:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80019d8:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 80019e0:	d0f7      	beq.n	80019d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019e2:	f3c1 4283 	ubfx	r2, r1, #18, #4
 80019e6:	a806      	add	r0, sp, #24
 80019e8:	4402      	add	r2, r0
 80019ea:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019ee:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019f0:	bf41      	itttt	mi
 80019f2:	685a      	ldrmi	r2, [r3, #4]
 80019f4:	a906      	addmi	r1, sp, #24
 80019f6:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 80019fa:	1852      	addmi	r2, r2, r1
 80019fc:	bf44      	itt	mi
 80019fe:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001a02:	4a15      	ldrmi	r2, [pc, #84]	; (8001a58 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001a04:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001a06:	bf4c      	ite	mi
 8001a08:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a0c:	4a13      	ldrpl	r2, [pc, #76]	; (8001a5c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001a0e:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a10:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001a14:	d4dd      	bmi.n	80019d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8001a16:	2303      	movs	r3, #3
 8001a18:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001a1a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001a1e:	e7d8      	b.n	80019d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a24:	d111      	bne.n	8001a4a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001a26:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001a28:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001a2c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a30:	e7cd      	b.n	80019ce <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001a32:	f7ff ff17 	bl	8001864 <HAL_RCC_GetPCLK2Freq>
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8001a3e:	3301      	adds	r3, #1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	e7ea      	b.n	8001a1a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8001a44:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001a48:	e7c3      	b.n	80019d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	e7c1      	b.n	80019d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8001a4e:	bf00      	nop
 8001a50:	080033f0 	.word	0x080033f0
 8001a54:	40021000 	.word	0x40021000
 8001a58:	007a1200 	.word	0x007a1200
 8001a5c:	003d0900 	.word	0x003d0900

08001a60 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a60:	6a03      	ldr	r3, [r0, #32]
{
 8001a62:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a64:	f023 0301 	bic.w	r3, r3, #1
 8001a68:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a6a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a6e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001a70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001a72:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001a76:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001a78:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001a7a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001a7e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001a80:	4d0a      	ldr	r5, [pc, #40]	; (8001aac <TIM_OC1_SetConfig+0x4c>)
 8001a82:	42a8      	cmp	r0, r5
 8001a84:	d10b      	bne.n	8001a9e <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001a86:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001a88:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001a8c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a8e:	698e      	ldr	r6, [r1, #24]
 8001a90:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001a92:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a96:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001a98:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001a9c:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a9e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001aa0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001aa2:	684a      	ldr	r2, [r1, #4]
 8001aa4:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001aa6:	6203      	str	r3, [r0, #32]
 8001aa8:	bd70      	pop	{r4, r5, r6, pc}
 8001aaa:	bf00      	nop
 8001aac:	40012c00 	.word	0x40012c00

08001ab0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ab0:	6a03      	ldr	r3, [r0, #32]
{
 8001ab2:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ab8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001aba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001abc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001abe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ac0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ac2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001ac6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ac8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001aca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ace:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ad2:	4d0b      	ldr	r5, [pc, #44]	; (8001b00 <TIM_OC3_SetConfig+0x50>)
 8001ad4:	42a8      	cmp	r0, r5
 8001ad6:	d10d      	bne.n	8001af4 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ad8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ade:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ae2:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ae4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ae6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001aea:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001aec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001af0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001af4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001af6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001af8:	684a      	ldr	r2, [r1, #4]
 8001afa:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001afc:	6203      	str	r3, [r0, #32]
 8001afe:	bd70      	pop	{r4, r5, r6, pc}
 8001b00:	40012c00 	.word	0x40012c00

08001b04 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b04:	6a03      	ldr	r3, [r0, #32]
{
 8001b06:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b0c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b0e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b10:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b12:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b14:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001b16:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001b1a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b1e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001b24:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001b28:	4d06      	ldr	r5, [pc, #24]	; (8001b44 <TIM_OC4_SetConfig+0x40>)
 8001b2a:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001b2c:	bf02      	ittt	eq
 8001b2e:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b30:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001b34:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b38:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b3a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001b3c:	684a      	ldr	r2, [r1, #4]
 8001b3e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b40:	6203      	str	r3, [r0, #32]
 8001b42:	bd30      	pop	{r4, r5, pc}
 8001b44:	40012c00 	.word	0x40012c00

08001b48 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b48:	6803      	ldr	r3, [r0, #0]
}
 8001b4a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
}
 8001b5c:	4770      	bx	lr

08001b5e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001b5e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001b62:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	f04f 0302 	mov.w	r3, #2
 8001b6a:	d01c      	beq.n	8001ba6 <HAL_TIM_ConfigClockSource+0x48>
 8001b6c:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001b6e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001b72:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001b74:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001b78:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b7a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001b7e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001b82:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001b84:	680a      	ldr	r2, [r1, #0]
 8001b86:	2a40      	cmp	r2, #64	; 0x40
 8001b88:	d079      	beq.n	8001c7e <HAL_TIM_ConfigClockSource+0x120>
 8001b8a:	d819      	bhi.n	8001bc0 <HAL_TIM_ConfigClockSource+0x62>
 8001b8c:	2a10      	cmp	r2, #16
 8001b8e:	f000 8093 	beq.w	8001cb8 <HAL_TIM_ConfigClockSource+0x15a>
 8001b92:	d80a      	bhi.n	8001baa <HAL_TIM_ConfigClockSource+0x4c>
 8001b94:	2a00      	cmp	r2, #0
 8001b96:	f000 8089 	beq.w	8001cac <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001ba6:	4618      	mov	r0, r3
}
 8001ba8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001baa:	2a20      	cmp	r2, #32
 8001bac:	f000 808a 	beq.w	8001cc4 <HAL_TIM_ConfigClockSource+0x166>
 8001bb0:	2a30      	cmp	r2, #48	; 0x30
 8001bb2:	d1f2      	bne.n	8001b9a <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001bb4:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001bb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001bba:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001bbe:	e036      	b.n	8001c2e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001bc0:	2a70      	cmp	r2, #112	; 0x70
 8001bc2:	d036      	beq.n	8001c32 <HAL_TIM_ConfigClockSource+0xd4>
 8001bc4:	d81b      	bhi.n	8001bfe <HAL_TIM_ConfigClockSource+0xa0>
 8001bc6:	2a50      	cmp	r2, #80	; 0x50
 8001bc8:	d042      	beq.n	8001c50 <HAL_TIM_ConfigClockSource+0xf2>
 8001bca:	2a60      	cmp	r2, #96	; 0x60
 8001bcc:	d1e5      	bne.n	8001b9a <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bce:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bd0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bd2:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001bd6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bd8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bda:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001bdc:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bde:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001be2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001be6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001bea:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001bee:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bf0:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001bf2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001bf4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001bf8:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001bfc:	e017      	b.n	8001c2e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001bfe:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001c02:	d011      	beq.n	8001c28 <HAL_TIM_ConfigClockSource+0xca>
 8001c04:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001c08:	d1c7      	bne.n	8001b9a <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c0a:	688a      	ldr	r2, [r1, #8]
 8001c0c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001c0e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c10:	68c9      	ldr	r1, [r1, #12]
 8001c12:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c14:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c1c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c1e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c26:	e002      	b.n	8001c2e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	e7b3      	b.n	8001b9a <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c32:	688a      	ldr	r2, [r1, #8]
 8001c34:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001c36:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c38:	68c9      	ldr	r1, [r1, #12]
 8001c3a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c3c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001c44:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001c46:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001c48:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c4a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001c4e:	e7ee      	b.n	8001c2e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c50:	684c      	ldr	r4, [r1, #4]
 8001c52:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c54:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c56:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c58:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c5c:	f025 0501 	bic.w	r5, r5, #1
 8001c60:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c62:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001c64:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c66:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c6a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001c6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c70:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001c72:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c78:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001c7c:	e7d7      	b.n	8001c2e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c7e:	684c      	ldr	r4, [r1, #4]
 8001c80:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001c82:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c84:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c86:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c8a:	f025 0501 	bic.w	r5, r5, #1
 8001c8e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c90:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001c92:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c94:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c98:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001c9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c9e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001ca0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ca2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ca6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001caa:	e7c0      	b.n	8001c2e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001cac:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cb2:	f042 0207 	orr.w	r2, r2, #7
 8001cb6:	e7ba      	b.n	8001c2e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001cb8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cbe:	f042 0217 	orr.w	r2, r2, #23
 8001cc2:	e7b4      	b.n	8001c2e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001cc4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cca:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001cce:	e7ae      	b.n	8001c2e <HAL_TIM_ConfigClockSource+0xd0>

08001cd0 <HAL_TIM_PeriodElapsedCallback>:
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_TIM_OC_DelayElapsedCallback>:
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_TIM_IC_CaptureCallback>:
 8001cd4:	4770      	bx	lr

08001cd6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_TIM_TriggerCallback>:
 8001cd8:	4770      	bx	lr

08001cda <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cda:	6803      	ldr	r3, [r0, #0]
{
 8001cdc:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cde:	691a      	ldr	r2, [r3, #16]
{
 8001ce0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ce2:	0791      	lsls	r1, r2, #30
 8001ce4:	d50e      	bpl.n	8001d04 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	0792      	lsls	r2, r2, #30
 8001cea:	d50b      	bpl.n	8001d04 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cec:	f06f 0202 	mvn.w	r2, #2
 8001cf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf6:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cf8:	079b      	lsls	r3, r3, #30
 8001cfa:	d077      	beq.n	8001dec <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001cfc:	f7ff ffea 	bl	8001cd4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d00:	2300      	movs	r3, #0
 8001d02:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	0750      	lsls	r0, r2, #29
 8001d0a:	d510      	bpl.n	8001d2e <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	0751      	lsls	r1, r2, #29
 8001d10:	d50d      	bpl.n	8001d2e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d12:	f06f 0204 	mvn.w	r2, #4
 8001d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d18:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d1a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d1c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d1e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d24:	d068      	beq.n	8001df8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d26:	f7ff ffd5 	bl	8001cd4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	691a      	ldr	r2, [r3, #16]
 8001d32:	0712      	lsls	r2, r2, #28
 8001d34:	d50f      	bpl.n	8001d56 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	0710      	lsls	r0, r2, #28
 8001d3a:	d50c      	bpl.n	8001d56 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d3c:	f06f 0208 	mvn.w	r2, #8
 8001d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d42:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d44:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d46:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d48:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d4c:	d05a      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4e:	f7ff ffc1 	bl	8001cd4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d52:	2300      	movs	r3, #0
 8001d54:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	691a      	ldr	r2, [r3, #16]
 8001d5a:	06d2      	lsls	r2, r2, #27
 8001d5c:	d510      	bpl.n	8001d80 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	06d0      	lsls	r0, r2, #27
 8001d62:	d50d      	bpl.n	8001d80 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d64:	f06f 0210 	mvn.w	r2, #16
 8001d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d6c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d6e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d70:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001d74:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d76:	d04b      	beq.n	8001e10 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d78:	f7ff ffac 	bl	8001cd4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	07d1      	lsls	r1, r2, #31
 8001d86:	d508      	bpl.n	8001d9a <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	07d2      	lsls	r2, r2, #31
 8001d8c:	d505      	bpl.n	8001d9a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d8e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d94:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d96:	f7ff ff9b 	bl	8001cd0 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	0610      	lsls	r0, r2, #24
 8001da0:	d508      	bpl.n	8001db4 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	0611      	lsls	r1, r2, #24
 8001da6:	d505      	bpl.n	8001db4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001da8:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001dac:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001db0:	f000 f975 	bl	800209e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001db4:	6823      	ldr	r3, [r4, #0]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	0652      	lsls	r2, r2, #25
 8001dba:	d508      	bpl.n	8001dce <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	0650      	lsls	r0, r2, #25
 8001dc0:	d505      	bpl.n	8001dce <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001dc6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dc8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001dca:	f7ff ff85 	bl	8001cd8 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001dce:	6823      	ldr	r3, [r4, #0]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	0691      	lsls	r1, r2, #26
 8001dd4:	d522      	bpl.n	8001e1c <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	0692      	lsls	r2, r2, #26
 8001dda:	d51f      	bpl.n	8001e1c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ddc:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001de0:	4620      	mov	r0, r4
}
 8001de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001de6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001de8:	f000 b958 	b.w	800209c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dec:	f7ff ff71 	bl	8001cd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	4620      	mov	r0, r4
 8001df2:	f7ff ff70 	bl	8001cd6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001df6:	e783      	b.n	8001d00 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df8:	f7ff ff6b 	bl	8001cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff ff6a 	bl	8001cd6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e02:	e792      	b.n	8001d2a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e04:	f7ff ff65 	bl	8001cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f7ff ff64 	bl	8001cd6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e0e:	e7a0      	b.n	8001d52 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e10:	f7ff ff5f 	bl	8001cd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	4620      	mov	r0, r4
 8001e16:	f7ff ff5e 	bl	8001cd6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e1a:	e7af      	b.n	8001d7c <HAL_TIM_IRQHandler+0xa2>
 8001e1c:	bd10      	pop	{r4, pc}
	...

08001e20 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e20:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001e22:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e24:	4290      	cmp	r0, r2
 8001e26:	d00a      	beq.n	8001e3e <TIM_Base_SetConfig+0x1e>
 8001e28:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e2c:	d007      	beq.n	8001e3e <TIM_Base_SetConfig+0x1e>
 8001e2e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e32:	4290      	cmp	r0, r2
 8001e34:	d003      	beq.n	8001e3e <TIM_Base_SetConfig+0x1e>
 8001e36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e3a:	4290      	cmp	r0, r2
 8001e3c:	d115      	bne.n	8001e6a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001e3e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e44:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e46:	4a11      	ldr	r2, [pc, #68]	; (8001e8c <TIM_Base_SetConfig+0x6c>)
 8001e48:	4290      	cmp	r0, r2
 8001e4a:	d00a      	beq.n	8001e62 <TIM_Base_SetConfig+0x42>
 8001e4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e50:	d007      	beq.n	8001e62 <TIM_Base_SetConfig+0x42>
 8001e52:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001e56:	4290      	cmp	r0, r2
 8001e58:	d003      	beq.n	8001e62 <TIM_Base_SetConfig+0x42>
 8001e5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e5e:	4290      	cmp	r0, r2
 8001e60:	d103      	bne.n	8001e6a <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e62:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e68:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e6a:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001e70:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001e72:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e74:	688b      	ldr	r3, [r1, #8]
 8001e76:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001e78:	680b      	ldr	r3, [r1, #0]
 8001e7a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <TIM_Base_SetConfig+0x6c>)
 8001e7e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001e80:	bf04      	itt	eq
 8001e82:	690b      	ldreq	r3, [r1, #16]
 8001e84:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001e86:	2301      	movs	r3, #1
 8001e88:	6143      	str	r3, [r0, #20]
 8001e8a:	4770      	bx	lr
 8001e8c:	40012c00 	.word	0x40012c00

08001e90 <HAL_TIM_Base_Init>:
{
 8001e90:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001e92:	4604      	mov	r4, r0
 8001e94:	b1a0      	cbz	r0, 8001ec0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001e96:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e9e:	b91b      	cbnz	r3, 8001ea8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ea0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ea4:	f000 fd08 	bl	80028b8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ea8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eaa:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001eac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001eb0:	1d21      	adds	r1, r4, #4
 8001eb2:	f7ff ffb5 	bl	8001e20 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001eb6:	2301      	movs	r3, #1
  return HAL_OK;
 8001eb8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001eba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ebe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ec0:	2001      	movs	r0, #1
}
 8001ec2:	bd10      	pop	{r4, pc}

08001ec4 <HAL_TIM_PWM_Init>:
{
 8001ec4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001ec6:	4604      	mov	r4, r0
 8001ec8:	b1a0      	cbz	r0, 8001ef4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001eca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ece:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ed2:	b91b      	cbnz	r3, 8001edc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ed4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001ed8:	f000 fcca 	bl	8002870 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001edc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ede:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001ee0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee4:	1d21      	adds	r1, r4, #4
 8001ee6:	f7ff ff9b 	bl	8001e20 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001eea:	2301      	movs	r3, #1
  return HAL_OK;
 8001eec:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001eee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ef2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ef4:	2001      	movs	r0, #1
}
 8001ef6:	bd10      	pop	{r4, pc}

08001ef8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ef8:	6a03      	ldr	r3, [r0, #32]
{
 8001efa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001efc:	f023 0310 	bic.w	r3, r3, #16
 8001f00:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001f02:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001f04:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001f06:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f08:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f0a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f0e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f12:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001f14:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f1c:	4d0b      	ldr	r5, [pc, #44]	; (8001f4c <TIM_OC2_SetConfig+0x54>)
 8001f1e:	42a8      	cmp	r0, r5
 8001f20:	d10d      	bne.n	8001f3e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f22:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f28:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001f2c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001f2e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f30:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001f34:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001f3a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001f3e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001f40:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001f42:	684a      	ldr	r2, [r1, #4]
 8001f44:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001f46:	6203      	str	r3, [r0, #32]
 8001f48:	bd70      	pop	{r4, r5, r6, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40012c00 	.word	0x40012c00

08001f50 <HAL_TIM_PWM_ConfigChannel>:
{
 8001f50:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001f52:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f56:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	f04f 0002 	mov.w	r0, #2
 8001f5e:	d025      	beq.n	8001fac <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001f60:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001f62:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001f66:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001f6a:	2a0c      	cmp	r2, #12
 8001f6c:	d818      	bhi.n	8001fa0 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001f6e:	e8df f002 	tbb	[pc, r2]
 8001f72:	1707      	.short	0x1707
 8001f74:	171e1717 	.word	0x171e1717
 8001f78:	172f1717 	.word	0x172f1717
 8001f7c:	1717      	.short	0x1717
 8001f7e:	40          	.byte	0x40
 8001f7f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f80:	6820      	ldr	r0, [r4, #0]
 8001f82:	f7ff fd6d 	bl	8001a60 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f86:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f88:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f8a:	699a      	ldr	r2, [r3, #24]
 8001f8c:	f042 0208 	orr.w	r2, r2, #8
 8001f90:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	f022 0204 	bic.w	r2, r2, #4
 8001f98:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f9a:	699a      	ldr	r2, [r3, #24]
 8001f9c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001f9e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001fa0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001fa2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001fa4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001fa8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001fac:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fae:	6820      	ldr	r0, [r4, #0]
 8001fb0:	f7ff ffa2 	bl	8001ef8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fb4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001fb6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001fce:	e7e6      	b.n	8001f9e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fd0:	6820      	ldr	r0, [r4, #0]
 8001fd2:	f7ff fd6d 	bl	8001ab0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fd6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fd8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	f042 0208 	orr.w	r2, r2, #8
 8001fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	f022 0204 	bic.w	r2, r2, #4
 8001fe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fea:	69da      	ldr	r2, [r3, #28]
 8001fec:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001fee:	61da      	str	r2, [r3, #28]
    break;
 8001ff0:	e7d6      	b.n	8001fa0 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ff2:	6820      	ldr	r0, [r4, #0]
 8001ff4:	f7ff fd86 	bl	8001b04 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ff8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001ffa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002002:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800200a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002012:	e7ec      	b.n	8001fee <HAL_TIM_PWM_ConfigChannel+0x9e>

08002014 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002014:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002016:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002018:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800201a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800201c:	ea23 0304 	bic.w	r3, r3, r4
 8002020:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002022:	6a03      	ldr	r3, [r0, #32]
 8002024:	408a      	lsls	r2, r1
 8002026:	431a      	orrs	r2, r3
 8002028:	6202      	str	r2, [r0, #32]
 800202a:	bd10      	pop	{r4, pc}

0800202c <HAL_TIM_PWM_Start>:
{
 800202c:	b510      	push	{r4, lr}
 800202e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002030:	2201      	movs	r2, #1
 8002032:	6800      	ldr	r0, [r0, #0]
 8002034:	f7ff ffee 	bl	8002014 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	4a06      	ldr	r2, [pc, #24]	; (8002054 <HAL_TIM_PWM_Start+0x28>)
}
 800203c:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800203e:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8002040:	bf02      	ittt	eq
 8002042:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002044:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002048:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	f042 0201 	orr.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]
}
 8002052:	bd10      	pop	{r4, pc}
 8002054:	40012c00 	.word	0x40012c00

08002058 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002058:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800205c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800205e:	2b01      	cmp	r3, #1
 8002060:	f04f 0302 	mov.w	r3, #2
 8002064:	d018      	beq.n	8002098 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002066:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800206a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 800206c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800206e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002070:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002072:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002076:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	4322      	orrs	r2, r4
 800207c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002084:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800208c:	2301      	movs	r3, #1
 800208e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002092:	2300      	movs	r3, #0
 8002094:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002098:	4618      	mov	r0, r3

  return HAL_OK;
}
 800209a:	bd10      	pop	{r4, pc}

0800209c <HAL_TIMEx_CommutationCallback>:
 800209c:	4770      	bx	lr

0800209e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800209e:	4770      	bx	lr

080020a0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a4:	6805      	ldr	r5, [r0, #0]
 80020a6:	68c2      	ldr	r2, [r0, #12]
 80020a8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020aa:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020b0:	4313      	orrs	r3, r2
 80020b2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020b4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80020b6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020b8:	430b      	orrs	r3, r1
 80020ba:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80020bc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80020c0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020c4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020ca:	696b      	ldr	r3, [r5, #20]
 80020cc:	6982      	ldr	r2, [r0, #24]
 80020ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020d2:	4313      	orrs	r3, r2
 80020d4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020d6:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <UART_SetConfig+0x138>)
{
 80020d8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80020da:	429d      	cmp	r5, r3
 80020dc:	f04f 0419 	mov.w	r4, #25
 80020e0:	d146      	bne.n	8002170 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020e2:	f7ff fbbf 	bl	8001864 <HAL_RCC_GetPCLK2Freq>
 80020e6:	fb04 f300 	mul.w	r3, r4, r0
 80020ea:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80020ee:	f04f 0864 	mov.w	r8, #100	; 0x64
 80020f2:	00b6      	lsls	r6, r6, #2
 80020f4:	fbb3 f3f6 	udiv	r3, r3, r6
 80020f8:	fbb3 f3f8 	udiv	r3, r3, r8
 80020fc:	011e      	lsls	r6, r3, #4
 80020fe:	f7ff fbb1 	bl	8001864 <HAL_RCC_GetPCLK2Freq>
 8002102:	4360      	muls	r0, r4
 8002104:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	fbb0 f7f3 	udiv	r7, r0, r3
 800210e:	f7ff fba9 	bl	8001864 <HAL_RCC_GetPCLK2Freq>
 8002112:	4360      	muls	r0, r4
 8002114:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	fbb0 f3f3 	udiv	r3, r0, r3
 800211e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002122:	fb08 7313 	mls	r3, r8, r3, r7
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	3332      	adds	r3, #50	; 0x32
 800212a:	fbb3 f3f8 	udiv	r3, r3, r8
 800212e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8002132:	f7ff fb97 	bl	8001864 <HAL_RCC_GetPCLK2Freq>
 8002136:	4360      	muls	r0, r4
 8002138:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800213c:	0092      	lsls	r2, r2, #2
 800213e:	fbb0 faf2 	udiv	sl, r0, r2
 8002142:	f7ff fb8f 	bl	8001864 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002146:	4360      	muls	r0, r4
 8002148:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002152:	fbb3 f3f8 	udiv	r3, r3, r8
 8002156:	fb08 a313 	mls	r3, r8, r3, sl
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	3332      	adds	r3, #50	; 0x32
 800215e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	433b      	orrs	r3, r7
 8002168:	4433      	add	r3, r6
 800216a:	60ab      	str	r3, [r5, #8]
 800216c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002170:	f7ff fb68 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8002174:	fb04 f300 	mul.w	r3, r4, r0
 8002178:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800217c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8002180:	00b6      	lsls	r6, r6, #2
 8002182:	fbb3 f3f6 	udiv	r3, r3, r6
 8002186:	fbb3 f3f8 	udiv	r3, r3, r8
 800218a:	011e      	lsls	r6, r3, #4
 800218c:	f7ff fb5a 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 8002190:	4360      	muls	r0, r4
 8002192:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	fbb0 f7f3 	udiv	r7, r0, r3
 800219c:	f7ff fb52 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 80021a0:	4360      	muls	r0, r4
 80021a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ac:	fbb3 f3f8 	udiv	r3, r3, r8
 80021b0:	fb08 7313 	mls	r3, r8, r3, r7
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	3332      	adds	r3, #50	; 0x32
 80021b8:	fbb3 f3f8 	udiv	r3, r3, r8
 80021bc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80021c0:	f7ff fb40 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 80021c4:	4360      	muls	r0, r4
 80021c6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	fbb0 faf2 	udiv	sl, r0, r2
 80021d0:	f7ff fb38 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 80021d4:	e7b7      	b.n	8002146 <UART_SetConfig+0xa6>
 80021d6:	bf00      	nop
 80021d8:	40013800 	.word	0x40013800

080021dc <HAL_UART_Init>:
{
 80021dc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80021de:	4604      	mov	r4, r0
 80021e0:	b340      	cbz	r0, 8002234 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80021e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021ea:	b91b      	cbnz	r3, 80021f4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021ec:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021f0:	f000 fba2 	bl	8002938 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80021f4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80021f6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021fc:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80021fe:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8002200:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002204:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002206:	f7ff ff4b 	bl	80020a0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800220a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800221c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002224:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002226:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002228:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800222a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800222e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002232:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002234:	2001      	movs	r0, #1
}
 8002236:	bd10      	pop	{r4, pc}

08002238 <write_lcd>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void write_lcd (uint8_t data, uint8_t cmd_data)
{
 8002238:	b510      	push	{r4, lr}
	// identifica comando ou dado
	if (cmd_data) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 800223a:	460a      	mov	r2, r1
{
 800223c:	4604      	mov	r4, r0
	if (cmd_data) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 800223e:	b101      	cbz	r1, 8002242 <write_lcd+0xa>
 8002240:	2201      	movs	r2, #1
	else 					HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8002242:	2120      	movs	r1, #32
 8002244:	4832      	ldr	r0, [pc, #200]	; (8002310 <write_lcd+0xd8>)
 8002246:	f7ff f805 	bl	8001254 <HAL_GPIO_WritePin>

	// 4 bits high
	if (data & 0x80) HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 800224a:	0623      	lsls	r3, r4, #24
 800224c:	bf4c      	ite	mi
 800224e:	2201      	movmi	r2, #1
	else						 HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8002250:	2200      	movpl	r2, #0
 8002252:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002256:	482f      	ldr	r0, [pc, #188]	; (8002314 <write_lcd+0xdc>)
 8002258:	f7fe fffc 	bl	8001254 <HAL_GPIO_WritePin>
	if (data & 0x40) HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 800225c:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 8002260:	bf18      	it	ne
 8002262:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8002264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002268:	482a      	ldr	r0, [pc, #168]	; (8002314 <write_lcd+0xdc>)
 800226a:	f7fe fff3 	bl	8001254 <HAL_GPIO_WritePin>
	if (data & 0x20) HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 800226e:	f014 0220 	ands.w	r2, r4, #32
 8002272:	bf18      	it	ne
 8002274:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8002276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800227a:	4826      	ldr	r0, [pc, #152]	; (8002314 <write_lcd+0xdc>)
 800227c:	f7fe ffea 	bl	8001254 <HAL_GPIO_WritePin>
	if (data & 0x10) HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8002280:	f014 0210 	ands.w	r2, r4, #16
 8002284:	bf18      	it	ne
 8002286:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8002288:	2108      	movs	r1, #8
 800228a:	4821      	ldr	r0, [pc, #132]	; (8002310 <write_lcd+0xd8>)
 800228c:	f7fe ffe2 	bl	8001254 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8002290:	2201      	movs	r2, #1
 8002292:	2110      	movs	r1, #16
 8002294:	481e      	ldr	r0, [pc, #120]	; (8002310 <write_lcd+0xd8>)
 8002296:	f7fe ffdd 	bl	8001254 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800229a:	2002      	movs	r0, #2
 800229c:	f7fe fb8a 	bl	80009b4 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80022a0:	2200      	movs	r2, #0
 80022a2:	2110      	movs	r1, #16
 80022a4:	481a      	ldr	r0, [pc, #104]	; (8002310 <write_lcd+0xd8>)
 80022a6:	f7fe ffd5 	bl	8001254 <HAL_GPIO_WritePin>

	// 4 bits Low
	if (data & 0x08) HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 80022aa:	f014 0208 	ands.w	r2, r4, #8
 80022ae:	bf18      	it	ne
 80022b0:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80022b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b6:	4817      	ldr	r0, [pc, #92]	; (8002314 <write_lcd+0xdc>)
 80022b8:	f7fe ffcc 	bl	8001254 <HAL_GPIO_WritePin>
	if (data & 0x04) HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80022bc:	f014 0204 	ands.w	r2, r4, #4
 80022c0:	bf18      	it	ne
 80022c2:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80022c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c8:	4812      	ldr	r0, [pc, #72]	; (8002314 <write_lcd+0xdc>)
 80022ca:	f7fe ffc3 	bl	8001254 <HAL_GPIO_WritePin>
	if (data & 0x02) HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80022ce:	f014 0202 	ands.w	r2, r4, #2
 80022d2:	bf18      	it	ne
 80022d4:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80022d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022da:	480e      	ldr	r0, [pc, #56]	; (8002314 <write_lcd+0xdc>)
 80022dc:	f7fe ffba 	bl	8001254 <HAL_GPIO_WritePin>
	if (data & 0x01) HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80022e0:	f014 0201 	ands.w	r2, r4, #1
 80022e4:	bf18      	it	ne
 80022e6:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 80022e8:	2108      	movs	r1, #8
 80022ea:	4809      	ldr	r0, [pc, #36]	; (8002310 <write_lcd+0xd8>)
 80022ec:	f7fe ffb2 	bl	8001254 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80022f0:	2201      	movs	r2, #1
 80022f2:	2110      	movs	r1, #16
 80022f4:	4806      	ldr	r0, [pc, #24]	; (8002310 <write_lcd+0xd8>)
 80022f6:	f7fe ffad 	bl	8001254 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80022fa:	2002      	movs	r0, #2
 80022fc:	f7fe fb5a 	bl	80009b4 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
}
 8002300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8002304:	2200      	movs	r2, #0
 8002306:	2110      	movs	r1, #16
 8002308:	4801      	ldr	r0, [pc, #4]	; (8002310 <write_lcd+0xd8>)
 800230a:	f7fe bfa3 	b.w	8001254 <HAL_GPIO_WritePin>
 800230e:	bf00      	nop
 8002310:	40010c00 	.word	0x40010c00
 8002314:	40010800 	.word	0x40010800

08002318 <init_lcd>:

/* init_LCD - Inicializa o display em 4bits */
void init_lcd(void)
{
 8002318:	b508      	push	{r3, lr}
	write_lcd(0x33, 0);
 800231a:	2100      	movs	r1, #0
 800231c:	2033      	movs	r0, #51	; 0x33
 800231e:	f7ff ff8b 	bl	8002238 <write_lcd>
	write_lcd(0x32, 0);
 8002322:	2100      	movs	r1, #0
 8002324:	2032      	movs	r0, #50	; 0x32
 8002326:	f7ff ff87 	bl	8002238 <write_lcd>
	write_lcd(0x28, 0);
 800232a:	2100      	movs	r1, #0
 800232c:	2028      	movs	r0, #40	; 0x28
 800232e:	f7ff ff83 	bl	8002238 <write_lcd>
	write_lcd(0x06, 0);
 8002332:	2100      	movs	r1, #0
 8002334:	2006      	movs	r0, #6
 8002336:	f7ff ff7f 	bl	8002238 <write_lcd>
	write_lcd(0x0C, 0);
 800233a:	2100      	movs	r1, #0
 800233c:	200c      	movs	r0, #12
 800233e:	f7ff ff7b 	bl	8002238 <write_lcd>
	write_lcd(0x01, 0);
}
 8002342:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	write_lcd(0x01, 0);
 8002346:	2100      	movs	r1, #0
 8002348:	2001      	movs	r0, #1
 800234a:	f7ff bf75 	b.w	8002238 <write_lcd>

0800234e <string_lcd>:

/* string_lcd - escreve string no LCD */
void string_lcd (char *string)
{
 800234e:	b510      	push	{r4, lr}
 8002350:	1e44      	subs	r4, r0, #1
	while(*string) write_lcd(*string++, 1);
 8002352:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002356:	b900      	cbnz	r0, 800235a <string_lcd+0xc>
}
 8002358:	bd10      	pop	{r4, pc}
	while(*string) write_lcd(*string++, 1);
 800235a:	2101      	movs	r1, #1
 800235c:	f7ff ff6c 	bl	8002238 <write_lcd>
 8002360:	e7f7      	b.n	8002352 <string_lcd+0x4>

08002362 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8002366:	b510      	push	{r4, lr}
 8002368:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800236a:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800236c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800236e:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002370:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002372:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002374:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002378:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800237a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800237c:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800237e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002380:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002382:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002384:	f7fe ffec 	bl	8001360 <HAL_RCC_OscConfig>
 8002388:	b100      	cbz	r0, 800238c <SystemClock_Config+0x2a>
 800238a:	e7fe      	b.n	800238a <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800238c:	230f      	movs	r3, #15
 800238e:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002390:	2380      	movs	r3, #128	; 0x80
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002392:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002394:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002396:	4621      	mov	r1, r4
 8002398:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800239a:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800239c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800239e:	f7ff f9a7 	bl	80016f0 <HAL_RCC_ClockConfig>
 80023a2:	b100      	cbz	r0, 80023a6 <SystemClock_Config+0x44>
 80023a4:	e7fe      	b.n	80023a4 <SystemClock_Config+0x42>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80023a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023aa:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023ac:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80023ae:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023b0:	f7ff fa68 	bl	8001884 <HAL_RCCEx_PeriphCLKConfig>
 80023b4:	4604      	mov	r4, r0
 80023b6:	b100      	cbz	r0, 80023ba <SystemClock_Config+0x58>
 80023b8:	e7fe      	b.n	80023b8 <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80023ba:	f7ff fa3d 	bl	8001838 <HAL_RCC_GetHCLKFreq>
 80023be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80023c6:	f7fe fe3d 	bl	8001044 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80023ca:	2004      	movs	r0, #4
 80023cc:	f7fe fe50 	bl	8001070 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80023d0:	4622      	mov	r2, r4
 80023d2:	4621      	mov	r1, r4
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f7fe fdf4 	bl	8000fc4 <HAL_NVIC_SetPriority>
}
 80023dc:	b014      	add	sp, #80	; 0x50
 80023de:	bd10      	pop	{r4, pc}

080023e0 <main>:
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 80023e4:	f7fe fac2 	bl	800096c <HAL_Init>
  SystemClock_Config();
 80023e8:	f7ff ffbb 	bl	8002362 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ec:	4b74      	ldr	r3, [pc, #464]	; (80025c0 <main+0x1e0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|D4_Pin|EN_Pin 
 80023ee:	213b      	movs	r1, #59	; 0x3b
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|D4_Pin|EN_Pin 
 80023f2:	4874      	ldr	r0, [pc, #464]	; (80025c4 <main+0x1e4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f4:	f042 0220 	orr.w	r2, r2, #32
 80023f8:	619a      	str	r2, [r3, #24]
 80023fa:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : LD1_Pin LD2_Pin D4_Pin EN_Pin 
                           RS_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|D4_Pin|EN_Pin 
                          |RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fc:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fe:	f002 0220 	and.w	r2, r2, #32
 8002402:	9200      	str	r2, [sp, #0]
 8002404:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2402      	movs	r4, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	f042 0204 	orr.w	r2, r2, #4
 800240e:	619a      	str	r2, [r3, #24]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	f002 0204 	and.w	r2, r2, #4
 8002416:	9201      	str	r2, [sp, #4]
 8002418:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800241a:	699a      	ldr	r2, [r3, #24]
 800241c:	f042 0208 	orr.w	r2, r2, #8
 8002420:	619a      	str	r2, [r3, #24]
 8002422:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|D4_Pin|EN_Pin 
 8002424:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|D4_Pin|EN_Pin 
 800242e:	f7fe ff11 	bl	8001254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8002438:	4863      	ldr	r0, [pc, #396]	; (80025c8 <main+0x1e8>)
 800243a:	f7fe ff0b 	bl	8001254 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|D4_Pin|EN_Pin 
 800243e:	233b      	movs	r3, #59	; 0x3b
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002440:	a905      	add	r1, sp, #20
 8002442:	4860      	ldr	r0, [pc, #384]	; (80025c4 <main+0x1e4>)
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|D4_Pin|EN_Pin 
 8002444:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002446:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	f7fe fe23 	bl	8001094 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin;
 800244e:	f44f 4318 	mov.w	r3, #38912	; 0x9800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	485d      	ldr	r0, [pc, #372]	; (80025c8 <main+0x1e8>)
 8002454:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin;
 8002456:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002458:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	f7fe fe1a 	bl	8001094 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8002460:	485a      	ldr	r0, [pc, #360]	; (80025cc <main+0x1ec>)
  hi2c1.Init.ClockSpeed = 400000;
 8002462:	4a5b      	ldr	r2, [pc, #364]	; (80025d0 <main+0x1f0>)
 8002464:	4b5b      	ldr	r3, [pc, #364]	; (80025d4 <main+0x1f4>)
 8002466:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800246a:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800246c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002470:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002472:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002474:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002476:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002478:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800247a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800247c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800247e:	f7fe feef 	bl	8001260 <HAL_I2C_Init>
 8002482:	b100      	cbz	r0, 8002486 <main+0xa6>
 8002484:	e7fe      	b.n	8002484 <main+0xa4>
  huart1.Init.BaudRate = 9600;
 8002486:	f44f 5816 	mov.w	r8, #9600	; 0x2580
  huart1.Instance = USART1;
 800248a:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <main+0x1f8>)
  huart1.Init.BaudRate = 9600;
 800248c:	4a53      	ldr	r2, [pc, #332]	; (80025dc <main+0x1fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800248e:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 9600;
 8002490:	e883 0104 	stmia.w	r3, {r2, r8}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002494:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002496:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002498:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249a:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800249c:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800249e:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024a0:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024a2:	f7ff fe9b 	bl	80021dc <HAL_UART_Init>
 80024a6:	b100      	cbz	r0, 80024aa <main+0xca>
 80024a8:	e7fe      	b.n	80024a8 <main+0xc8>
  htim2.Init.Prescaler = 6;
 80024aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024ae:	f04f 0c06 	mov.w	ip, #6
  htim2.Init.Period = 100;
 80024b2:	2764      	movs	r7, #100	; 0x64
  htim2.Instance = TIM2;
 80024b4:	4c4a      	ldr	r4, [pc, #296]	; (80025e0 <main+0x200>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b6:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ba:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024bc:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 6;
 80024be:	e884 1008 	stmia.w	r4, {r3, ip}
  htim2.Init.Period = 100;
 80024c2:	60e7      	str	r7, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80024c4:	f7ff fcfe 	bl	8001ec4 <HAL_TIM_PWM_Init>
 80024c8:	b100      	cbz	r0, 80024cc <main+0xec>
 80024ca:	e7fe      	b.n	80024ca <main+0xea>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024cc:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ce:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024d0:	a903      	add	r1, sp, #12
 80024d2:	4620      	mov	r0, r4
 80024d4:	f7ff fdc0 	bl	8002058 <HAL_TIMEx_MasterConfigSynchronization>
 80024d8:	4602      	mov	r2, r0
 80024da:	b100      	cbz	r0, 80024de <main+0xfe>
 80024dc:	e7fe      	b.n	80024dc <main+0xfc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024de:	2360      	movs	r3, #96	; 0x60
 80024e0:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80024e2:	2304      	movs	r3, #4
  sConfigOC.Pulse = 0;
 80024e4:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024e6:	9007      	str	r0, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024e8:	a905      	add	r1, sp, #20
 80024ea:	4620      	mov	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80024ec:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ee:	f7ff fd2f 	bl	8001f50 <HAL_TIM_PWM_ConfigChannel>
 80024f2:	4606      	mov	r6, r0
 80024f4:	b100      	cbz	r0, 80024f8 <main+0x118>
 80024f6:	e7fe      	b.n	80024f6 <main+0x116>
  HAL_TIM_MspPostInit(&htim2);
 80024f8:	4620      	mov	r0, r4
 80024fa:	f000 f9fb 	bl	80028f4 <HAL_TIM_MspPostInit>
  htim3.Init.Prescaler = 36;
 80024fe:	f04f 0e24 	mov.w	lr, #36	; 0x24
  htim3.Instance = TIM3;
 8002502:	4c38      	ldr	r4, [pc, #224]	; (80025e4 <main+0x204>)
  htim3.Init.Prescaler = 36;
 8002504:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <main+0x208>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002506:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 36;
 8002508:	e884 4008 	stmia.w	r4, {r3, lr}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250c:	60a6      	str	r6, [r4, #8]
  htim3.Init.Period = 100;
 800250e:	60e7      	str	r7, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002510:	6126      	str	r6, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002512:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002514:	f7ff fcbc 	bl	8001e90 <HAL_TIM_Base_Init>
 8002518:	b100      	cbz	r0, 800251c <main+0x13c>
 800251a:	e7fe      	b.n	800251a <main+0x13a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800251c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002520:	a905      	add	r1, sp, #20
 8002522:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002524:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002526:	f7ff fb1a 	bl	8001b5e <HAL_TIM_ConfigClockSource>
 800252a:	b100      	cbz	r0, 800252e <main+0x14e>
 800252c:	e7fe      	b.n	800252c <main+0x14c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252e:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002530:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002532:	a903      	add	r1, sp, #12
 8002534:	4620      	mov	r0, r4
 8002536:	f7ff fd8f 	bl	8002058 <HAL_TIMEx_MasterConfigSynchronization>
 800253a:	b100      	cbz	r0, 800253e <main+0x15e>
 800253c:	e7fe      	b.n	800253c <main+0x15c>
  hadc1.Instance = ADC1;
 800253e:	4c2b      	ldr	r4, [pc, #172]	; (80025ec <main+0x20c>)
 8002540:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <main+0x210>)
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002542:	60a0      	str	r0, [r4, #8]
  hadc1.Instance = ADC1;
 8002544:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002546:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = DISABLE;
 800254a:	60e0      	str	r0, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800254c:	6160      	str	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800254e:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002550:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002552:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 8002554:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002556:	f7fe fc21 	bl	8000d9c <HAL_ADC_Init>
 800255a:	b100      	cbz	r0, 800255e <main+0x17e>
 800255c:	e7fe      	b.n	800255c <main+0x17c>
  sConfig.Channel = ADC_CHANNEL_3;
 800255e:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002560:	a905      	add	r1, sp, #20
 8002562:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 8002564:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002566:	9506      	str	r5, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8002568:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800256a:	f7fe fad7 	bl	8000b1c <HAL_ADC_ConfigChannel>
 800256e:	b100      	cbz	r0, 8002572 <main+0x192>
 8002570:	e7fe      	b.n	8002570 <main+0x190>
  htim4.Init.Prescaler = 6;
 8002572:	2706      	movs	r7, #6
  htim4.Instance = TIM4;
 8002574:	4c1f      	ldr	r4, [pc, #124]	; (80025f4 <main+0x214>)
  htim4.Init.Prescaler = 6;
 8002576:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <main+0x218>)
  htim4.Init.Period = 100;
 8002578:	2264      	movs	r2, #100	; 0x64
  htim4.Init.Prescaler = 6;
 800257a:	e884 0088 	stmia.w	r4, {r3, r7}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257e:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002580:	4620      	mov	r0, r4
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002582:	60a3      	str	r3, [r4, #8]
  htim4.Init.Period = 100;
 8002584:	60e2      	str	r2, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002586:	6123      	str	r3, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002588:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800258a:	f7ff fc9b 	bl	8001ec4 <HAL_TIM_PWM_Init>
 800258e:	b100      	cbz	r0, 8002592 <main+0x1b2>
 8002590:	e7fe      	b.n	8002590 <main+0x1b0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002592:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002594:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002596:	a903      	add	r1, sp, #12
 8002598:	4620      	mov	r0, r4
 800259a:	f7ff fd5d 	bl	8002058 <HAL_TIMEx_MasterConfigSynchronization>
 800259e:	4602      	mov	r2, r0
 80025a0:	b100      	cbz	r0, 80025a4 <main+0x1c4>
 80025a2:	e7fe      	b.n	80025a2 <main+0x1c2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a4:	2360      	movs	r3, #96	; 0x60
 80025a6:	9305      	str	r3, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80025a8:	2304      	movs	r3, #4
  sConfigOC.Pulse = 0;
 80025aa:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ac:	9007      	str	r0, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025ae:	a905      	add	r1, sp, #20
 80025b0:	4620      	mov	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80025b2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b4:	f7ff fccc 	bl	8001f50 <HAL_TIM_PWM_ConfigChannel>
 80025b8:	4605      	mov	r5, r0
 80025ba:	b1f8      	cbz	r0, 80025fc <main+0x21c>
 80025bc:	e7fe      	b.n	80025bc <main+0x1dc>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010c00 	.word	0x40010c00
 80025c8:	40010800 	.word	0x40010800
 80025cc:	200000e0 	.word	0x200000e0
 80025d0:	40005400 	.word	0x40005400
 80025d4:	00061a80 	.word	0x00061a80
 80025d8:	200001a8 	.word	0x200001a8
 80025dc:	40013800 	.word	0x40013800
 80025e0:	200002b4 	.word	0x200002b4
 80025e4:	20000138 	.word	0x20000138
 80025e8:	40000400 	.word	0x40000400
 80025ec:	20000178 	.word	0x20000178
 80025f0:	40012400 	.word	0x40012400
 80025f4:	200000a0 	.word	0x200000a0
 80025f8:	40000800 	.word	0x40000800
  HAL_TIM_MspPostInit(&htim4);
 80025fc:	4620      	mov	r0, r4
		  		fine_amp = (adc_value * 0.2443)*0.04;
 80025fe:	f20f 1908 	addw	r9, pc, #264	; 0x108
 8002602:	e9d9 8900 	ldrd	r8, r9, [r9]
  HAL_TIM_MspPostInit(&htim4);
 8002606:	f000 f975 	bl	80028f4 <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 800260a:	4629      	mov	r1, r5
 800260c:	4842      	ldr	r0, [pc, #264]	; (8002718 <main+0x338>)
 800260e:	f7ff fd0d 	bl	800202c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002612:	4629      	mov	r1, r5
 8002614:	4620      	mov	r0, r4
 8002616:	f7ff fd09 	bl	800202c <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 800261a:	462a      	mov	r2, r5
 800261c:	2101      	movs	r1, #1
 800261e:	483f      	ldr	r0, [pc, #252]	; (800271c <main+0x33c>)
 8002620:	f7fe fe18 	bl	8001254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8002624:	462a      	mov	r2, r5
 8002626:	2102      	movs	r1, #2
 8002628:	483c      	ldr	r0, [pc, #240]	; (800271c <main+0x33c>)
 800262a:	f7fe fe13 	bl	8001254 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim3);
 800262e:	483c      	ldr	r0, [pc, #240]	; (8002720 <main+0x340>)
 8002630:	f7ff fa8a 	bl	8001b48 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8002634:	483b      	ldr	r0, [pc, #236]	; (8002724 <main+0x344>)
 8002636:	f7fe fc4b 	bl	8000ed0 <HAL_ADCEx_Calibration_Start>
  init_lcd();
 800263a:	f7ff fe6d 	bl	8002318 <init_lcd>
	  			HAL_ADC_Start(&hadc1);
 800263e:	4d39      	ldr	r5, [pc, #228]	; (8002724 <main+0x344>)
		  		sprintf(buffer,"%04d",adc_value);
 8002640:	4c39      	ldr	r4, [pc, #228]	; (8002728 <main+0x348>)
		  		sprintf(buffer,"%02d",fine_amp);
 8002642:	4e3a      	ldr	r6, [pc, #232]	; (800272c <main+0x34c>)
	  			HAL_ADC_Start(&hadc1);
 8002644:	4628      	mov	r0, r5
 8002646:	f7fe fb25 	bl	8000c94 <HAL_ADC_Start>
		  		HAL_ADC_PollForConversion(&hadc1, 50);
 800264a:	2132      	movs	r1, #50	; 0x32
 800264c:	4628      	mov	r0, r5
 800264e:	f7fe f9c3 	bl	80009d8 <HAL_ADC_PollForConversion>
		  		adc_value = HAL_ADC_GetValue(&hadc1);
 8002652:	4628      	mov	r0, r5
 8002654:	f7fe fa5e 	bl	8000b14 <HAL_ADC_GetValue>
 8002658:	4f35      	ldr	r7, [pc, #212]	; (8002730 <main+0x350>)
 800265a:	8038      	strh	r0, [r7, #0]
		  		HAL_ADC_Stop(&hadc1);
 800265c:	4628      	mov	r0, r5
 800265e:	f7fe fc1d 	bl	8000e9c <HAL_ADC_Stop>
		  		fine_amp = (adc_value * 0.2443)*0.04;
 8002662:	f8b7 a000 	ldrh.w	sl, [r7]
 8002666:	4f33      	ldr	r7, [pc, #204]	; (8002734 <main+0x354>)
 8002668:	4650      	mov	r0, sl
 800266a:	f7fd fec3 	bl	80003f4 <__aeabi_i2d>
 800266e:	4642      	mov	r2, r8
 8002670:	464b      	mov	r3, r9
 8002672:	f7fd ff25 	bl	80004c0 <__aeabi_dmul>
 8002676:	a326      	add	r3, pc, #152	; (adr r3, 8002710 <main+0x330>)
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f7fd ff20 	bl	80004c0 <__aeabi_dmul>
 8002680:	f7fe f930 	bl	80008e4 <__aeabi_d2uiz>
		  		sprintf(buffer,"%04d",adc_value);
 8002684:	4652      	mov	r2, sl
		  		fine_amp = (adc_value * 0.2443)*0.04;
 8002686:	8038      	strh	r0, [r7, #0]
		  		sprintf(buffer,"%04d",adc_value);
 8002688:	492b      	ldr	r1, [pc, #172]	; (8002738 <main+0x358>)
 800268a:	4620      	mov	r0, r4
 800268c:	f000 fa62 	bl	8002b54 <siprintf>
		  		write_lcd(0x80,0);
 8002690:	2100      	movs	r1, #0
 8002692:	2080      	movs	r0, #128	; 0x80
 8002694:	f7ff fdd0 	bl	8002238 <write_lcd>
		  		string_lcd(buffer);
 8002698:	4620      	mov	r0, r4
 800269a:	f7ff fe58 	bl	800234e <string_lcd>
		  		sprintf(buffer,"%02d",fine_amp);
 800269e:	883a      	ldrh	r2, [r7, #0]
 80026a0:	4631      	mov	r1, r6
 80026a2:	4620      	mov	r0, r4
 80026a4:	f000 fa56 	bl	8002b54 <siprintf>
		  		write_lcd(0xC0,0);
 80026a8:	2100      	movs	r1, #0
 80026aa:	20c0      	movs	r0, #192	; 0xc0
 80026ac:	f7ff fdc4 	bl	8002238 <write_lcd>
		  		string_lcd(buffer);
 80026b0:	4620      	mov	r0, r4
 80026b2:	f7ff fe4c 	bl	800234e <string_lcd>
		  		sprintf(buffer,"%02d",c0);
 80026b6:	4b21      	ldr	r3, [pc, #132]	; (800273c <main+0x35c>)
 80026b8:	4631      	mov	r1, r6
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	4620      	mov	r0, r4
 80026be:	f000 fa49 	bl	8002b54 <siprintf>
		  		write_lcd(0x86,0);
 80026c2:	2100      	movs	r1, #0
 80026c4:	2086      	movs	r0, #134	; 0x86
 80026c6:	f7ff fdb7 	bl	8002238 <write_lcd>
		  		string_lcd(buffer);
 80026ca:	4620      	mov	r0, r4
 80026cc:	f7ff fe3f 	bl	800234e <string_lcd>
		  		sprintf(buffer,"%02d",c1);
 80026d0:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <main+0x360>)
 80026d2:	4631      	mov	r1, r6
 80026d4:	881a      	ldrh	r2, [r3, #0]
 80026d6:	4620      	mov	r0, r4
 80026d8:	f000 fa3c 	bl	8002b54 <siprintf>
		  		write_lcd(0x8A,0);
 80026dc:	2100      	movs	r1, #0
 80026de:	208a      	movs	r0, #138	; 0x8a
 80026e0:	f7ff fdaa 	bl	8002238 <write_lcd>
		  		string_lcd(buffer);
 80026e4:	4620      	mov	r0, r4
 80026e6:	f7ff fe32 	bl	800234e <string_lcd>
		  		sprintf(buffer,"%03d",c2);
 80026ea:	4b16      	ldr	r3, [pc, #88]	; (8002744 <main+0x364>)
 80026ec:	4916      	ldr	r1, [pc, #88]	; (8002748 <main+0x368>)
 80026ee:	881a      	ldrh	r2, [r3, #0]
 80026f0:	4620      	mov	r0, r4
 80026f2:	f000 fa2f 	bl	8002b54 <siprintf>
		  		write_lcd(0xC6,0);
 80026f6:	2100      	movs	r1, #0
 80026f8:	20c6      	movs	r0, #198	; 0xc6
 80026fa:	f7ff fd9d 	bl	8002238 <write_lcd>
		  		string_lcd(buffer);
 80026fe:	4620      	mov	r0, r4
 8002700:	f7ff fe25 	bl	800234e <string_lcd>
 8002704:	e79e      	b.n	8002644 <main+0x264>
 8002706:	bf00      	nop
 8002708:	ef34d6a1 	.word	0xef34d6a1
 800270c:	3fcf4538 	.word	0x3fcf4538
 8002710:	47ae147b 	.word	0x47ae147b
 8002714:	3fa47ae1 	.word	0x3fa47ae1
 8002718:	200002b4 	.word	0x200002b4
 800271c:	40010c00 	.word	0x40010c00
 8002720:	20000138 	.word	0x20000138
 8002724:	20000178 	.word	0x20000178
 8002728:	200001ea 	.word	0x200001ea
 800272c:	08003405 	.word	0x08003405
 8002730:	2000008c 	.word	0x2000008c
 8002734:	200002f6 	.word	0x200002f6
 8002738:	08003400 	.word	0x08003400
 800273c:	200002f4 	.word	0x200002f4
 8002740:	200001e8 	.word	0x200001e8
 8002744:	20000134 	.word	0x20000134
 8002748:	0800340a 	.word	0x0800340a

0800274c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <HAL_MspInit+0x84>)
{
 800274e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002750:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002752:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	619a      	str	r2, [r3, #24]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002764:	f7fe fc1c 	bl	8000fa0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002768:	2200      	movs	r2, #0
 800276a:	f06f 000b 	mvn.w	r0, #11
 800276e:	4611      	mov	r1, r2
 8002770:	f7fe fc28 	bl	8000fc4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002774:	2200      	movs	r2, #0
 8002776:	f06f 000a 	mvn.w	r0, #10
 800277a:	4611      	mov	r1, r2
 800277c:	f7fe fc22 	bl	8000fc4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002780:	2200      	movs	r2, #0
 8002782:	f06f 0009 	mvn.w	r0, #9
 8002786:	4611      	mov	r1, r2
 8002788:	f7fe fc1c 	bl	8000fc4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800278c:	2200      	movs	r2, #0
 800278e:	f06f 0004 	mvn.w	r0, #4
 8002792:	4611      	mov	r1, r2
 8002794:	f7fe fc16 	bl	8000fc4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002798:	2200      	movs	r2, #0
 800279a:	f06f 0003 	mvn.w	r0, #3
 800279e:	4611      	mov	r1, r2
 80027a0:	f7fe fc10 	bl	8000fc4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80027a4:	2200      	movs	r2, #0
 80027a6:	f06f 0001 	mvn.w	r0, #1
 80027aa:	4611      	mov	r1, r2
 80027ac:	f7fe fc0a 	bl	8000fc4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	f04f 30ff 	mov.w	r0, #4294967295
 80027b6:	4611      	mov	r1, r2
 80027b8:	f7fe fc04 	bl	8000fc4 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027bc:	4a05      	ldr	r2, [pc, #20]	; (80027d4 <HAL_MspInit+0x88>)
 80027be:	6853      	ldr	r3, [r2, #4]
 80027c0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ca:	b003      	add	sp, #12
 80027cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40010000 	.word	0x40010000

080027d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80027da:	6802      	ldr	r2, [r0, #0]
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_ADC_MspInit+0x38>)
 80027de:	429a      	cmp	r2, r3
 80027e0:	d112      	bne.n	8002808 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027e2:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 80027e6:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e8:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ee:	619a      	str	r2, [r3, #24]
 80027f0:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f2:	4808      	ldr	r0, [pc, #32]	; (8002814 <HAL_ADC_MspInit+0x3c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f8:	9301      	str	r3, [sp, #4]
 80027fa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027fc:	2308      	movs	r3, #8
 80027fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002800:	2303      	movs	r3, #3
 8002802:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002804:	f7fe fc46 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002808:	b007      	add	sp, #28
 800280a:	f85d fb04 	ldr.w	pc, [sp], #4
 800280e:	bf00      	nop
 8002810:	40012400 	.word	0x40012400
 8002814:	40010800 	.word	0x40010800

08002818 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002818:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800281a:	6802      	ldr	r2, [r0, #0]
 800281c:	4b10      	ldr	r3, [pc, #64]	; (8002860 <HAL_I2C_MspInit+0x48>)
 800281e:	429a      	cmp	r2, r3
 8002820:	d11b      	bne.n	800285a <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002822:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002826:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002828:	2312      	movs	r3, #18
 800282a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800282c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	a902      	add	r1, sp, #8
 8002830:	480c      	ldr	r0, [pc, #48]	; (8002864 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002832:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002834:	f7fe fc2e 	bl	8001094 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002838:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <HAL_I2C_MspInit+0x50>)
 800283a:	6853      	ldr	r3, [r2, #4]
 800283c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_I2C_MspInit+0x54>)
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800284e:	61da      	str	r2, [r3, #28]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800285a:	b007      	add	sp, #28
 800285c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002860:	40005400 	.word	0x40005400
 8002864:	40010c00 	.word	0x40010c00
 8002868:	40010000 	.word	0x40010000
 800286c:	40021000 	.word	0x40021000

08002870 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM2)
 8002870:	6803      	ldr	r3, [r0, #0]
{
 8002872:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM2)
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d10c      	bne.n	8002894 <HAL_TIM_PWM_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800287a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	61da      	str	r2, [r3, #28]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002890:	b002      	add	sp, #8
 8002892:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM4)
 8002894:	4a06      	ldr	r2, [pc, #24]	; (80028b0 <HAL_TIM_PWM_MspInit+0x40>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d1fa      	bne.n	8002890 <HAL_TIM_PWM_MspInit+0x20>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_TIM_PWM_MspInit+0x44>)
 800289c:	69da      	ldr	r2, [r3, #28]
 800289e:	f042 0204 	orr.w	r2, r2, #4
 80028a2:	61da      	str	r2, [r3, #28]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	9b01      	ldr	r3, [sp, #4]
}
 80028ae:	e7ef      	b.n	8002890 <HAL_TIM_PWM_MspInit+0x20>
 80028b0:	40000800 	.word	0x40000800
 80028b4:	40021000 	.word	0x40021000

080028b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028b8:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM3)
 80028ba:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_TIM_Base_MspInit+0x38>)
 80028bc:	6802      	ldr	r2, [r0, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d112      	bne.n	80028e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028c2:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80028c6:	69da      	ldr	r2, [r3, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028c8:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ca:	f042 0202 	orr.w	r2, r2, #2
 80028ce:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028d0:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028d2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028d4:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028de:	f7fe fb71 	bl	8000fc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028e2:	201d      	movs	r0, #29
 80028e4:	f7fe fba2 	bl	800102c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028e8:	b003      	add	sp, #12
 80028ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80028ee:	bf00      	nop
 80028f0:	40000400 	.word	0x40000400

080028f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM2)
 80028f6:	6803      	ldr	r3, [r0, #0]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028fc:	d10b      	bne.n	8002916 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE END TIM2_MspPostInit 0 */
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80028fe:	2301      	movs	r3, #1
 8002900:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002904:	4669      	mov	r1, sp
 8002906:	4809      	ldr	r0, [pc, #36]	; (800292c <HAL_TIM_MspPostInit+0x38>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290a:	9303      	str	r3, [sp, #12]
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800290c:	f7fe fbc2 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002910:	b005      	add	sp, #20
 8002912:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM4)
 8002916:	4a06      	ldr	r2, [pc, #24]	; (8002930 <HAL_TIM_MspPostInit+0x3c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d1f9      	bne.n	8002910 <HAL_TIM_MspPostInit+0x1c>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800291c:	2340      	movs	r3, #64	; 0x40
 800291e:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	4669      	mov	r1, sp
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002924:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002926:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <HAL_TIM_MspPostInit+0x40>)
 800292a:	e7ef      	b.n	800290c <HAL_TIM_MspPostInit+0x18>
 800292c:	40010800 	.word	0x40010800
 8002930:	40000800 	.word	0x40000800
 8002934:	40010c00 	.word	0x40010c00

08002938 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002938:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800293a:	6802      	ldr	r2, [r0, #0]
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_UART_MspInit+0x50>)
 800293e:	429a      	cmp	r2, r3
 8002940:	d11f      	bne.n	8002982 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002942:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002946:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002948:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800294a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800294e:	619a      	str	r2, [r3, #24]
 8002950:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	480e      	ldr	r0, [pc, #56]	; (800298c <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800295c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002960:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002962:	2302      	movs	r3, #2
 8002964:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002966:	2303      	movs	r3, #3
 8002968:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296a:	f7fe fb93 	bl	8001094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800296e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002972:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002974:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	a902      	add	r1, sp, #8
 8002978:	4804      	ldr	r0, [pc, #16]	; (800298c <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800297a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297e:	f7fe fb89 	bl	8001094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002982:	b007      	add	sp, #28
 8002984:	f85d fb04 	ldr.w	pc, [sp], #4
 8002988:	40013800 	.word	0x40013800
 800298c:	40010800 	.word	0x40010800

08002990 <NMI_Handler>:
 8002990:	4770      	bx	lr

08002992 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002992:	e7fe      	b.n	8002992 <HardFault_Handler>

08002994 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002994:	e7fe      	b.n	8002994 <MemManage_Handler>

08002996 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002996:	e7fe      	b.n	8002996 <BusFault_Handler>

08002998 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002998:	e7fe      	b.n	8002998 <UsageFault_Handler>

0800299a <SVC_Handler>:
 800299a:	4770      	bx	lr

0800299c <DebugMon_Handler>:
 800299c:	4770      	bx	lr

0800299e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800299e:	4770      	bx	lr

080029a0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80029a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029a2:	f7fd fff5 	bl	8000990 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80029aa:	f7fe bb6e 	b.w	800108a <HAL_SYSTICK_IRQHandler>
	...

080029b0 <TIM3_IRQHandler>:

/**
* @brief This function handles TIM3 global interrupt.
*/
void TIM3_IRQHandler(void)
{
 80029b0:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029b2:	4828      	ldr	r0, [pc, #160]	; (8002a54 <TIM3_IRQHandler+0xa4>)
 80029b4:	f7ff f991 	bl	8001cda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  counter++;
 80029b8:	4c27      	ldr	r4, [pc, #156]	; (8002a58 <TIM3_IRQHandler+0xa8>)
  c0=20+fine_amp;
 80029ba:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <TIM3_IRQHandler+0xac>)
  counter++;
 80029bc:	8822      	ldrh	r2, [r4, #0]
  c0=20+fine_amp;
 80029be:	881b      	ldrh	r3, [r3, #0]
  counter++;
 80029c0:	3201      	adds	r2, #1
  c0=20+fine_amp;
 80029c2:	3314      	adds	r3, #20
  counter++;
 80029c4:	b292      	uxth	r2, r2
  c0=20+fine_amp;
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	4d25      	ldr	r5, [pc, #148]	; (8002a60 <TIM3_IRQHandler+0xb0>)
  if(counter==c0){
 80029ca:	429a      	cmp	r2, r3
  counter++;
 80029cc:	8022      	strh	r2, [r4, #0]
  c0=20+fine_amp;
 80029ce:	802b      	strh	r3, [r5, #0]
  if(counter==c0){
 80029d0:	d109      	bne.n	80029e6 <TIM3_IRQHandler+0x36>
  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2101      	movs	r1, #1
 80029d6:	4823      	ldr	r0, [pc, #140]	; (8002a64 <TIM3_IRQHandler+0xb4>)
 80029d8:	f7fe fc3c 	bl	8001254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
 80029dc:	2201      	movs	r2, #1
 80029de:	2102      	movs	r1, #2
 80029e0:	4820      	ldr	r0, [pc, #128]	; (8002a64 <TIM3_IRQHandler+0xb4>)
 80029e2:	f7fe fc37 	bl	8001254 <HAL_GPIO_WritePin>
  }
   c1=80;
 80029e6:	2250      	movs	r2, #80	; 0x50
 80029e8:	4e1f      	ldr	r6, [pc, #124]	; (8002a68 <TIM3_IRQHandler+0xb8>)
 80029ea:	8032      	strh	r2, [r6, #0]
  if(counter==c1){
 80029ec:	8822      	ldrh	r2, [r4, #0]
 80029ee:	2a50      	cmp	r2, #80	; 0x50
 80029f0:	d109      	bne.n	8002a06 <TIM3_IRQHandler+0x56>
  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2101      	movs	r1, #1
 80029f6:	481b      	ldr	r0, [pc, #108]	; (8002a64 <TIM3_IRQHandler+0xb4>)
 80029f8:	f7fe fc2c 	bl	8001254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 80029fc:	2200      	movs	r2, #0
 80029fe:	2102      	movs	r1, #2
 8002a00:	4818      	ldr	r0, [pc, #96]	; (8002a64 <TIM3_IRQHandler+0xb4>)
 8002a02:	f7fe fc27 	bl	8001254 <HAL_GPIO_WritePin>
  }
  c2=c1+c0;
 8002a06:	882a      	ldrh	r2, [r5, #0]
 8002a08:	8833      	ldrh	r3, [r6, #0]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <TIM3_IRQHandler+0xbc>)
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	8013      	strh	r3, [r2, #0]
  if(counter==c2){
 8002a12:	8822      	ldrh	r2, [r4, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d109      	bne.n	8002a2c <TIM3_IRQHandler+0x7c>
  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_SET);
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4812      	ldr	r0, [pc, #72]	; (8002a64 <TIM3_IRQHandler+0xb4>)
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	f7fe fc19 	bl	8001254 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2102      	movs	r1, #2
 8002a26:	480f      	ldr	r0, [pc, #60]	; (8002a64 <TIM3_IRQHandler+0xb4>)
 8002a28:	f7fe fc14 	bl	8001254 <HAL_GPIO_WritePin>
  }
  c3=160;
 8002a2c:	22a0      	movs	r2, #160	; 0xa0
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <TIM3_IRQHandler+0xc0>)
 8002a30:	801a      	strh	r2, [r3, #0]
  if(counter==c3)
 8002a32:	8823      	ldrh	r3, [r4, #0]
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d10b      	bne.n	8002a50 <TIM3_IRQHandler+0xa0>
  {
	  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin,GPIO_PIN_RESET);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	4809      	ldr	r0, [pc, #36]	; (8002a64 <TIM3_IRQHandler+0xb4>)
 8002a3e:	f7fe fc09 	bl	8001254 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2102      	movs	r1, #2
 8002a46:	4807      	ldr	r0, [pc, #28]	; (8002a64 <TIM3_IRQHandler+0xb4>)
 8002a48:	f7fe fc04 	bl	8001254 <HAL_GPIO_WritePin>
	  counter=0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	8023      	strh	r3, [r4, #0]
 8002a50:	bd70      	pop	{r4, r5, r6, pc}
 8002a52:	bf00      	nop
 8002a54:	20000138 	.word	0x20000138
 8002a58:	2000008e 	.word	0x2000008e
 8002a5c:	200002f6 	.word	0x200002f6
 8002a60:	200002f4 	.word	0x200002f4
 8002a64:	40010c00 	.word	0x40010c00
 8002a68:	200001e8 	.word	0x200001e8
 8002a6c:	20000134 	.word	0x20000134
 8002a70:	200002b2 	.word	0x200002b2

08002a74 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002a74:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <SystemInit+0x40>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	f042 0201 	orr.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	4a0d      	ldr	r2, [pc, #52]	; (8002ab8 <SystemInit+0x44>)
 8002a82:	400a      	ands	r2, r1
 8002a84:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002a8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a90:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a98:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002aa0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002aa2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002aa6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002aa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <SystemInit+0x48>)
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	f8ff0000 	.word	0xf8ff0000
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002ac0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002ac2:	e003      	b.n	8002acc <LoopCopyDataInit>

08002ac4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ac6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ac8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002aca:	3104      	adds	r1, #4

08002acc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002acc:	480a      	ldr	r0, [pc, #40]	; (8002af8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ace:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ad0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ad2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ad4:	d3f6      	bcc.n	8002ac4 <CopyDataInit>
  ldr r2, =_sbss
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ad8:	e002      	b.n	8002ae0 <LoopFillZerobss>

08002ada <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ada:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002adc:	f842 3b04 	str.w	r3, [r2], #4

08002ae0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002ae2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002ae4:	d3f9      	bcc.n	8002ada <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ae6:	f7ff ffc5 	bl	8002a74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aea:	f000 f80f 	bl	8002b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002aee:	f7ff fc77 	bl	80023e0 <main>
  bx lr
 8002af2:	4770      	bx	lr
  ldr r3, =_sidata
 8002af4:	08003464 	.word	0x08003464
  ldr r0, =_sdata
 8002af8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002afc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8002b00:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8002b04:	200002fc 	.word	0x200002fc

08002b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b08:	e7fe      	b.n	8002b08 <ADC1_2_IRQHandler>
	...

08002b0c <__libc_init_array>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	2500      	movs	r5, #0
 8002b10:	4e0c      	ldr	r6, [pc, #48]	; (8002b44 <__libc_init_array+0x38>)
 8002b12:	4c0d      	ldr	r4, [pc, #52]	; (8002b48 <__libc_init_array+0x3c>)
 8002b14:	1ba4      	subs	r4, r4, r6
 8002b16:	10a4      	asrs	r4, r4, #2
 8002b18:	42a5      	cmp	r5, r4
 8002b1a:	d109      	bne.n	8002b30 <__libc_init_array+0x24>
 8002b1c:	f000 fc54 	bl	80033c8 <_init>
 8002b20:	2500      	movs	r5, #0
 8002b22:	4e0a      	ldr	r6, [pc, #40]	; (8002b4c <__libc_init_array+0x40>)
 8002b24:	4c0a      	ldr	r4, [pc, #40]	; (8002b50 <__libc_init_array+0x44>)
 8002b26:	1ba4      	subs	r4, r4, r6
 8002b28:	10a4      	asrs	r4, r4, #2
 8002b2a:	42a5      	cmp	r5, r4
 8002b2c:	d105      	bne.n	8002b3a <__libc_init_array+0x2e>
 8002b2e:	bd70      	pop	{r4, r5, r6, pc}
 8002b30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b34:	4798      	blx	r3
 8002b36:	3501      	adds	r5, #1
 8002b38:	e7ee      	b.n	8002b18 <__libc_init_array+0xc>
 8002b3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b3e:	4798      	blx	r3
 8002b40:	3501      	adds	r5, #1
 8002b42:	e7f2      	b.n	8002b2a <__libc_init_array+0x1e>
 8002b44:	0800345c 	.word	0x0800345c
 8002b48:	0800345c 	.word	0x0800345c
 8002b4c:	0800345c 	.word	0x0800345c
 8002b50:	08003460 	.word	0x08003460

08002b54 <siprintf>:
 8002b54:	b40e      	push	{r1, r2, r3}
 8002b56:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002b5a:	b500      	push	{lr}
 8002b5c:	b09c      	sub	sp, #112	; 0x70
 8002b5e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002b62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b66:	9104      	str	r1, [sp, #16]
 8002b68:	9107      	str	r1, [sp, #28]
 8002b6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b6e:	ab1d      	add	r3, sp, #116	; 0x74
 8002b70:	9002      	str	r0, [sp, #8]
 8002b72:	9006      	str	r0, [sp, #24]
 8002b74:	4808      	ldr	r0, [pc, #32]	; (8002b98 <siprintf+0x44>)
 8002b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b7a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002b7e:	6800      	ldr	r0, [r0, #0]
 8002b80:	a902      	add	r1, sp, #8
 8002b82:	9301      	str	r3, [sp, #4]
 8002b84:	f000 f866 	bl	8002c54 <_svfiprintf_r>
 8002b88:	2200      	movs	r2, #0
 8002b8a:	9b02      	ldr	r3, [sp, #8]
 8002b8c:	701a      	strb	r2, [r3, #0]
 8002b8e:	b01c      	add	sp, #112	; 0x70
 8002b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b94:	b003      	add	sp, #12
 8002b96:	4770      	bx	lr
 8002b98:	2000000c 	.word	0x2000000c

08002b9c <__ssputs_r>:
 8002b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba0:	688e      	ldr	r6, [r1, #8]
 8002ba2:	4682      	mov	sl, r0
 8002ba4:	429e      	cmp	r6, r3
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	4691      	mov	r9, r2
 8002baa:	4698      	mov	r8, r3
 8002bac:	d835      	bhi.n	8002c1a <__ssputs_r+0x7e>
 8002bae:	898a      	ldrh	r2, [r1, #12]
 8002bb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002bb4:	d031      	beq.n	8002c1a <__ssputs_r+0x7e>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	6825      	ldr	r5, [r4, #0]
 8002bba:	6909      	ldr	r1, [r1, #16]
 8002bbc:	1a6f      	subs	r7, r5, r1
 8002bbe:	6965      	ldr	r5, [r4, #20]
 8002bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bc4:	fb95 f5f3 	sdiv	r5, r5, r3
 8002bc8:	f108 0301 	add.w	r3, r8, #1
 8002bcc:	443b      	add	r3, r7
 8002bce:	429d      	cmp	r5, r3
 8002bd0:	bf38      	it	cc
 8002bd2:	461d      	movcc	r5, r3
 8002bd4:	0553      	lsls	r3, r2, #21
 8002bd6:	d531      	bpl.n	8002c3c <__ssputs_r+0xa0>
 8002bd8:	4629      	mov	r1, r5
 8002bda:	f000 fb47 	bl	800326c <_malloc_r>
 8002bde:	4606      	mov	r6, r0
 8002be0:	b950      	cbnz	r0, 8002bf8 <__ssputs_r+0x5c>
 8002be2:	230c      	movs	r3, #12
 8002be4:	f8ca 3000 	str.w	r3, [sl]
 8002be8:	89a3      	ldrh	r3, [r4, #12]
 8002bea:	f04f 30ff 	mov.w	r0, #4294967295
 8002bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bf2:	81a3      	strh	r3, [r4, #12]
 8002bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bf8:	463a      	mov	r2, r7
 8002bfa:	6921      	ldr	r1, [r4, #16]
 8002bfc:	f000 fac4 	bl	8003188 <memcpy>
 8002c00:	89a3      	ldrh	r3, [r4, #12]
 8002c02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c0a:	81a3      	strh	r3, [r4, #12]
 8002c0c:	6126      	str	r6, [r4, #16]
 8002c0e:	443e      	add	r6, r7
 8002c10:	6026      	str	r6, [r4, #0]
 8002c12:	4646      	mov	r6, r8
 8002c14:	6165      	str	r5, [r4, #20]
 8002c16:	1bed      	subs	r5, r5, r7
 8002c18:	60a5      	str	r5, [r4, #8]
 8002c1a:	4546      	cmp	r6, r8
 8002c1c:	bf28      	it	cs
 8002c1e:	4646      	movcs	r6, r8
 8002c20:	4649      	mov	r1, r9
 8002c22:	4632      	mov	r2, r6
 8002c24:	6820      	ldr	r0, [r4, #0]
 8002c26:	f000 faba 	bl	800319e <memmove>
 8002c2a:	68a3      	ldr	r3, [r4, #8]
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	1b9b      	subs	r3, r3, r6
 8002c30:	60a3      	str	r3, [r4, #8]
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	441e      	add	r6, r3
 8002c36:	6026      	str	r6, [r4, #0]
 8002c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c3c:	462a      	mov	r2, r5
 8002c3e:	f000 fb73 	bl	8003328 <_realloc_r>
 8002c42:	4606      	mov	r6, r0
 8002c44:	2800      	cmp	r0, #0
 8002c46:	d1e1      	bne.n	8002c0c <__ssputs_r+0x70>
 8002c48:	6921      	ldr	r1, [r4, #16]
 8002c4a:	4650      	mov	r0, sl
 8002c4c:	f000 fac2 	bl	80031d4 <_free_r>
 8002c50:	e7c7      	b.n	8002be2 <__ssputs_r+0x46>
	...

08002c54 <_svfiprintf_r>:
 8002c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c58:	b09d      	sub	sp, #116	; 0x74
 8002c5a:	9303      	str	r3, [sp, #12]
 8002c5c:	898b      	ldrh	r3, [r1, #12]
 8002c5e:	4680      	mov	r8, r0
 8002c60:	061c      	lsls	r4, r3, #24
 8002c62:	460d      	mov	r5, r1
 8002c64:	4616      	mov	r6, r2
 8002c66:	d50f      	bpl.n	8002c88 <_svfiprintf_r+0x34>
 8002c68:	690b      	ldr	r3, [r1, #16]
 8002c6a:	b96b      	cbnz	r3, 8002c88 <_svfiprintf_r+0x34>
 8002c6c:	2140      	movs	r1, #64	; 0x40
 8002c6e:	f000 fafd 	bl	800326c <_malloc_r>
 8002c72:	6028      	str	r0, [r5, #0]
 8002c74:	6128      	str	r0, [r5, #16]
 8002c76:	b928      	cbnz	r0, 8002c84 <_svfiprintf_r+0x30>
 8002c78:	230c      	movs	r3, #12
 8002c7a:	f8c8 3000 	str.w	r3, [r8]
 8002c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c82:	e0c4      	b.n	8002e0e <_svfiprintf_r+0x1ba>
 8002c84:	2340      	movs	r3, #64	; 0x40
 8002c86:	616b      	str	r3, [r5, #20]
 8002c88:	2300      	movs	r3, #0
 8002c8a:	9309      	str	r3, [sp, #36]	; 0x24
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c92:	2330      	movs	r3, #48	; 0x30
 8002c94:	f04f 0b01 	mov.w	fp, #1
 8002c98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c9c:	4637      	mov	r7, r6
 8002c9e:	463c      	mov	r4, r7
 8002ca0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d13c      	bne.n	8002d22 <_svfiprintf_r+0xce>
 8002ca8:	ebb7 0a06 	subs.w	sl, r7, r6
 8002cac:	d00b      	beq.n	8002cc6 <_svfiprintf_r+0x72>
 8002cae:	4653      	mov	r3, sl
 8002cb0:	4632      	mov	r2, r6
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	4640      	mov	r0, r8
 8002cb6:	f7ff ff71 	bl	8002b9c <__ssputs_r>
 8002cba:	3001      	adds	r0, #1
 8002cbc:	f000 80a2 	beq.w	8002e04 <_svfiprintf_r+0x1b0>
 8002cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cc2:	4453      	add	r3, sl
 8002cc4:	9309      	str	r3, [sp, #36]	; 0x24
 8002cc6:	783b      	ldrb	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 809b 	beq.w	8002e04 <_svfiprintf_r+0x1b0>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd4:	9304      	str	r3, [sp, #16]
 8002cd6:	9307      	str	r3, [sp, #28]
 8002cd8:	9205      	str	r2, [sp, #20]
 8002cda:	9306      	str	r3, [sp, #24]
 8002cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8002ce2:	2205      	movs	r2, #5
 8002ce4:	7821      	ldrb	r1, [r4, #0]
 8002ce6:	4850      	ldr	r0, [pc, #320]	; (8002e28 <_svfiprintf_r+0x1d4>)
 8002ce8:	f000 fa40 	bl	800316c <memchr>
 8002cec:	1c67      	adds	r7, r4, #1
 8002cee:	9b04      	ldr	r3, [sp, #16]
 8002cf0:	b9d8      	cbnz	r0, 8002d2a <_svfiprintf_r+0xd6>
 8002cf2:	06d9      	lsls	r1, r3, #27
 8002cf4:	bf44      	itt	mi
 8002cf6:	2220      	movmi	r2, #32
 8002cf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002cfc:	071a      	lsls	r2, r3, #28
 8002cfe:	bf44      	itt	mi
 8002d00:	222b      	movmi	r2, #43	; 0x2b
 8002d02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002d06:	7822      	ldrb	r2, [r4, #0]
 8002d08:	2a2a      	cmp	r2, #42	; 0x2a
 8002d0a:	d016      	beq.n	8002d3a <_svfiprintf_r+0xe6>
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	200a      	movs	r0, #10
 8002d10:	9a07      	ldr	r2, [sp, #28]
 8002d12:	4627      	mov	r7, r4
 8002d14:	783b      	ldrb	r3, [r7, #0]
 8002d16:	3401      	adds	r4, #1
 8002d18:	3b30      	subs	r3, #48	; 0x30
 8002d1a:	2b09      	cmp	r3, #9
 8002d1c:	d950      	bls.n	8002dc0 <_svfiprintf_r+0x16c>
 8002d1e:	b1c9      	cbz	r1, 8002d54 <_svfiprintf_r+0x100>
 8002d20:	e011      	b.n	8002d46 <_svfiprintf_r+0xf2>
 8002d22:	2b25      	cmp	r3, #37	; 0x25
 8002d24:	d0c0      	beq.n	8002ca8 <_svfiprintf_r+0x54>
 8002d26:	4627      	mov	r7, r4
 8002d28:	e7b9      	b.n	8002c9e <_svfiprintf_r+0x4a>
 8002d2a:	4a3f      	ldr	r2, [pc, #252]	; (8002e28 <_svfiprintf_r+0x1d4>)
 8002d2c:	463c      	mov	r4, r7
 8002d2e:	1a80      	subs	r0, r0, r2
 8002d30:	fa0b f000 	lsl.w	r0, fp, r0
 8002d34:	4318      	orrs	r0, r3
 8002d36:	9004      	str	r0, [sp, #16]
 8002d38:	e7d3      	b.n	8002ce2 <_svfiprintf_r+0x8e>
 8002d3a:	9a03      	ldr	r2, [sp, #12]
 8002d3c:	1d11      	adds	r1, r2, #4
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	9103      	str	r1, [sp, #12]
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	db01      	blt.n	8002d4a <_svfiprintf_r+0xf6>
 8002d46:	9207      	str	r2, [sp, #28]
 8002d48:	e004      	b.n	8002d54 <_svfiprintf_r+0x100>
 8002d4a:	4252      	negs	r2, r2
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	9207      	str	r2, [sp, #28]
 8002d52:	9304      	str	r3, [sp, #16]
 8002d54:	783b      	ldrb	r3, [r7, #0]
 8002d56:	2b2e      	cmp	r3, #46	; 0x2e
 8002d58:	d10d      	bne.n	8002d76 <_svfiprintf_r+0x122>
 8002d5a:	787b      	ldrb	r3, [r7, #1]
 8002d5c:	1c79      	adds	r1, r7, #1
 8002d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8002d60:	d132      	bne.n	8002dc8 <_svfiprintf_r+0x174>
 8002d62:	9b03      	ldr	r3, [sp, #12]
 8002d64:	3702      	adds	r7, #2
 8002d66:	1d1a      	adds	r2, r3, #4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	9203      	str	r2, [sp, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	bfb8      	it	lt
 8002d70:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d74:	9305      	str	r3, [sp, #20]
 8002d76:	4c2d      	ldr	r4, [pc, #180]	; (8002e2c <_svfiprintf_r+0x1d8>)
 8002d78:	2203      	movs	r2, #3
 8002d7a:	7839      	ldrb	r1, [r7, #0]
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f000 f9f5 	bl	800316c <memchr>
 8002d82:	b138      	cbz	r0, 8002d94 <_svfiprintf_r+0x140>
 8002d84:	2340      	movs	r3, #64	; 0x40
 8002d86:	1b00      	subs	r0, r0, r4
 8002d88:	fa03 f000 	lsl.w	r0, r3, r0
 8002d8c:	9b04      	ldr	r3, [sp, #16]
 8002d8e:	3701      	adds	r7, #1
 8002d90:	4303      	orrs	r3, r0
 8002d92:	9304      	str	r3, [sp, #16]
 8002d94:	7839      	ldrb	r1, [r7, #0]
 8002d96:	2206      	movs	r2, #6
 8002d98:	4825      	ldr	r0, [pc, #148]	; (8002e30 <_svfiprintf_r+0x1dc>)
 8002d9a:	1c7e      	adds	r6, r7, #1
 8002d9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002da0:	f000 f9e4 	bl	800316c <memchr>
 8002da4:	2800      	cmp	r0, #0
 8002da6:	d035      	beq.n	8002e14 <_svfiprintf_r+0x1c0>
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <_svfiprintf_r+0x1e0>)
 8002daa:	b9fb      	cbnz	r3, 8002dec <_svfiprintf_r+0x198>
 8002dac:	9b03      	ldr	r3, [sp, #12]
 8002dae:	3307      	adds	r3, #7
 8002db0:	f023 0307 	bic.w	r3, r3, #7
 8002db4:	3308      	adds	r3, #8
 8002db6:	9303      	str	r3, [sp, #12]
 8002db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dba:	444b      	add	r3, r9
 8002dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8002dbe:	e76d      	b.n	8002c9c <_svfiprintf_r+0x48>
 8002dc0:	fb00 3202 	mla	r2, r0, r2, r3
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	e7a4      	b.n	8002d12 <_svfiprintf_r+0xbe>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	240a      	movs	r4, #10
 8002dcc:	4618      	mov	r0, r3
 8002dce:	9305      	str	r3, [sp, #20]
 8002dd0:	460f      	mov	r7, r1
 8002dd2:	783a      	ldrb	r2, [r7, #0]
 8002dd4:	3101      	adds	r1, #1
 8002dd6:	3a30      	subs	r2, #48	; 0x30
 8002dd8:	2a09      	cmp	r2, #9
 8002dda:	d903      	bls.n	8002de4 <_svfiprintf_r+0x190>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0ca      	beq.n	8002d76 <_svfiprintf_r+0x122>
 8002de0:	9005      	str	r0, [sp, #20]
 8002de2:	e7c8      	b.n	8002d76 <_svfiprintf_r+0x122>
 8002de4:	fb04 2000 	mla	r0, r4, r0, r2
 8002de8:	2301      	movs	r3, #1
 8002dea:	e7f1      	b.n	8002dd0 <_svfiprintf_r+0x17c>
 8002dec:	ab03      	add	r3, sp, #12
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	462a      	mov	r2, r5
 8002df2:	4b11      	ldr	r3, [pc, #68]	; (8002e38 <_svfiprintf_r+0x1e4>)
 8002df4:	a904      	add	r1, sp, #16
 8002df6:	4640      	mov	r0, r8
 8002df8:	f3af 8000 	nop.w
 8002dfc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002e00:	4681      	mov	r9, r0
 8002e02:	d1d9      	bne.n	8002db8 <_svfiprintf_r+0x164>
 8002e04:	89ab      	ldrh	r3, [r5, #12]
 8002e06:	065b      	lsls	r3, r3, #25
 8002e08:	f53f af39 	bmi.w	8002c7e <_svfiprintf_r+0x2a>
 8002e0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e0e:	b01d      	add	sp, #116	; 0x74
 8002e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e14:	ab03      	add	r3, sp, #12
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	462a      	mov	r2, r5
 8002e1a:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <_svfiprintf_r+0x1e4>)
 8002e1c:	a904      	add	r1, sp, #16
 8002e1e:	4640      	mov	r0, r8
 8002e20:	f000 f884 	bl	8002f2c <_printf_i>
 8002e24:	e7ea      	b.n	8002dfc <_svfiprintf_r+0x1a8>
 8002e26:	bf00      	nop
 8002e28:	08003427 	.word	0x08003427
 8002e2c:	0800342d 	.word	0x0800342d
 8002e30:	08003431 	.word	0x08003431
 8002e34:	00000000 	.word	0x00000000
 8002e38:	08002b9d 	.word	0x08002b9d

08002e3c <_printf_common>:
 8002e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e40:	4691      	mov	r9, r2
 8002e42:	461f      	mov	r7, r3
 8002e44:	688a      	ldr	r2, [r1, #8]
 8002e46:	690b      	ldr	r3, [r1, #16]
 8002e48:	4606      	mov	r6, r0
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	bfb8      	it	lt
 8002e4e:	4613      	movlt	r3, r2
 8002e50:	f8c9 3000 	str.w	r3, [r9]
 8002e54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e58:	460c      	mov	r4, r1
 8002e5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e5e:	b112      	cbz	r2, 8002e66 <_printf_common+0x2a>
 8002e60:	3301      	adds	r3, #1
 8002e62:	f8c9 3000 	str.w	r3, [r9]
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	0699      	lsls	r1, r3, #26
 8002e6a:	bf42      	ittt	mi
 8002e6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e70:	3302      	addmi	r3, #2
 8002e72:	f8c9 3000 	strmi.w	r3, [r9]
 8002e76:	6825      	ldr	r5, [r4, #0]
 8002e78:	f015 0506 	ands.w	r5, r5, #6
 8002e7c:	d107      	bne.n	8002e8e <_printf_common+0x52>
 8002e7e:	f104 0a19 	add.w	sl, r4, #25
 8002e82:	68e3      	ldr	r3, [r4, #12]
 8002e84:	f8d9 2000 	ldr.w	r2, [r9]
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	429d      	cmp	r5, r3
 8002e8c:	db2a      	blt.n	8002ee4 <_printf_common+0xa8>
 8002e8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e92:	6822      	ldr	r2, [r4, #0]
 8002e94:	3300      	adds	r3, #0
 8002e96:	bf18      	it	ne
 8002e98:	2301      	movne	r3, #1
 8002e9a:	0692      	lsls	r2, r2, #26
 8002e9c:	d42f      	bmi.n	8002efe <_printf_common+0xc2>
 8002e9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ea2:	4639      	mov	r1, r7
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	47c0      	blx	r8
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	d022      	beq.n	8002ef2 <_printf_common+0xb6>
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	68e5      	ldr	r5, [r4, #12]
 8002eb0:	f003 0306 	and.w	r3, r3, #6
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	bf18      	it	ne
 8002eb8:	2500      	movne	r5, #0
 8002eba:	f8d9 2000 	ldr.w	r2, [r9]
 8002ebe:	f04f 0900 	mov.w	r9, #0
 8002ec2:	bf08      	it	eq
 8002ec4:	1aad      	subeq	r5, r5, r2
 8002ec6:	68a3      	ldr	r3, [r4, #8]
 8002ec8:	6922      	ldr	r2, [r4, #16]
 8002eca:	bf08      	it	eq
 8002ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	bfc4      	itt	gt
 8002ed4:	1a9b      	subgt	r3, r3, r2
 8002ed6:	18ed      	addgt	r5, r5, r3
 8002ed8:	341a      	adds	r4, #26
 8002eda:	454d      	cmp	r5, r9
 8002edc:	d11b      	bne.n	8002f16 <_printf_common+0xda>
 8002ede:	2000      	movs	r0, #0
 8002ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	4652      	mov	r2, sl
 8002ee8:	4639      	mov	r1, r7
 8002eea:	4630      	mov	r0, r6
 8002eec:	47c0      	blx	r8
 8002eee:	3001      	adds	r0, #1
 8002ef0:	d103      	bne.n	8002efa <_printf_common+0xbe>
 8002ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002efa:	3501      	adds	r5, #1
 8002efc:	e7c1      	b.n	8002e82 <_printf_common+0x46>
 8002efe:	2030      	movs	r0, #48	; 0x30
 8002f00:	18e1      	adds	r1, r4, r3
 8002f02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f0c:	4422      	add	r2, r4
 8002f0e:	3302      	adds	r3, #2
 8002f10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f14:	e7c3      	b.n	8002e9e <_printf_common+0x62>
 8002f16:	2301      	movs	r3, #1
 8002f18:	4622      	mov	r2, r4
 8002f1a:	4639      	mov	r1, r7
 8002f1c:	4630      	mov	r0, r6
 8002f1e:	47c0      	blx	r8
 8002f20:	3001      	adds	r0, #1
 8002f22:	d0e6      	beq.n	8002ef2 <_printf_common+0xb6>
 8002f24:	f109 0901 	add.w	r9, r9, #1
 8002f28:	e7d7      	b.n	8002eda <_printf_common+0x9e>
	...

08002f2c <_printf_i>:
 8002f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f30:	4617      	mov	r7, r2
 8002f32:	7e0a      	ldrb	r2, [r1, #24]
 8002f34:	b085      	sub	sp, #20
 8002f36:	2a6e      	cmp	r2, #110	; 0x6e
 8002f38:	4698      	mov	r8, r3
 8002f3a:	4606      	mov	r6, r0
 8002f3c:	460c      	mov	r4, r1
 8002f3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f40:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002f44:	f000 80bc 	beq.w	80030c0 <_printf_i+0x194>
 8002f48:	d81a      	bhi.n	8002f80 <_printf_i+0x54>
 8002f4a:	2a63      	cmp	r2, #99	; 0x63
 8002f4c:	d02e      	beq.n	8002fac <_printf_i+0x80>
 8002f4e:	d80a      	bhi.n	8002f66 <_printf_i+0x3a>
 8002f50:	2a00      	cmp	r2, #0
 8002f52:	f000 80c8 	beq.w	80030e6 <_printf_i+0x1ba>
 8002f56:	2a58      	cmp	r2, #88	; 0x58
 8002f58:	f000 808a 	beq.w	8003070 <_printf_i+0x144>
 8002f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f60:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002f64:	e02a      	b.n	8002fbc <_printf_i+0x90>
 8002f66:	2a64      	cmp	r2, #100	; 0x64
 8002f68:	d001      	beq.n	8002f6e <_printf_i+0x42>
 8002f6a:	2a69      	cmp	r2, #105	; 0x69
 8002f6c:	d1f6      	bne.n	8002f5c <_printf_i+0x30>
 8002f6e:	6821      	ldr	r1, [r4, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002f76:	d023      	beq.n	8002fc0 <_printf_i+0x94>
 8002f78:	1d11      	adds	r1, r2, #4
 8002f7a:	6019      	str	r1, [r3, #0]
 8002f7c:	6813      	ldr	r3, [r2, #0]
 8002f7e:	e027      	b.n	8002fd0 <_printf_i+0xa4>
 8002f80:	2a73      	cmp	r2, #115	; 0x73
 8002f82:	f000 80b4 	beq.w	80030ee <_printf_i+0x1c2>
 8002f86:	d808      	bhi.n	8002f9a <_printf_i+0x6e>
 8002f88:	2a6f      	cmp	r2, #111	; 0x6f
 8002f8a:	d02a      	beq.n	8002fe2 <_printf_i+0xb6>
 8002f8c:	2a70      	cmp	r2, #112	; 0x70
 8002f8e:	d1e5      	bne.n	8002f5c <_printf_i+0x30>
 8002f90:	680a      	ldr	r2, [r1, #0]
 8002f92:	f042 0220 	orr.w	r2, r2, #32
 8002f96:	600a      	str	r2, [r1, #0]
 8002f98:	e003      	b.n	8002fa2 <_printf_i+0x76>
 8002f9a:	2a75      	cmp	r2, #117	; 0x75
 8002f9c:	d021      	beq.n	8002fe2 <_printf_i+0xb6>
 8002f9e:	2a78      	cmp	r2, #120	; 0x78
 8002fa0:	d1dc      	bne.n	8002f5c <_printf_i+0x30>
 8002fa2:	2278      	movs	r2, #120	; 0x78
 8002fa4:	496f      	ldr	r1, [pc, #444]	; (8003164 <_printf_i+0x238>)
 8002fa6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002faa:	e064      	b.n	8003076 <_printf_i+0x14a>
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002fb2:	1d11      	adds	r1, r2, #4
 8002fb4:	6019      	str	r1, [r3, #0]
 8002fb6:	6813      	ldr	r3, [r2, #0]
 8002fb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0a3      	b.n	8003108 <_printf_i+0x1dc>
 8002fc0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002fc4:	f102 0104 	add.w	r1, r2, #4
 8002fc8:	6019      	str	r1, [r3, #0]
 8002fca:	d0d7      	beq.n	8002f7c <_printf_i+0x50>
 8002fcc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da03      	bge.n	8002fdc <_printf_i+0xb0>
 8002fd4:	222d      	movs	r2, #45	; 0x2d
 8002fd6:	425b      	negs	r3, r3
 8002fd8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002fdc:	4962      	ldr	r1, [pc, #392]	; (8003168 <_printf_i+0x23c>)
 8002fde:	220a      	movs	r2, #10
 8002fe0:	e017      	b.n	8003012 <_printf_i+0xe6>
 8002fe2:	6820      	ldr	r0, [r4, #0]
 8002fe4:	6819      	ldr	r1, [r3, #0]
 8002fe6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002fea:	d003      	beq.n	8002ff4 <_printf_i+0xc8>
 8002fec:	1d08      	adds	r0, r1, #4
 8002fee:	6018      	str	r0, [r3, #0]
 8002ff0:	680b      	ldr	r3, [r1, #0]
 8002ff2:	e006      	b.n	8003002 <_printf_i+0xd6>
 8002ff4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ff8:	f101 0004 	add.w	r0, r1, #4
 8002ffc:	6018      	str	r0, [r3, #0]
 8002ffe:	d0f7      	beq.n	8002ff0 <_printf_i+0xc4>
 8003000:	880b      	ldrh	r3, [r1, #0]
 8003002:	2a6f      	cmp	r2, #111	; 0x6f
 8003004:	bf14      	ite	ne
 8003006:	220a      	movne	r2, #10
 8003008:	2208      	moveq	r2, #8
 800300a:	4957      	ldr	r1, [pc, #348]	; (8003168 <_printf_i+0x23c>)
 800300c:	2000      	movs	r0, #0
 800300e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003012:	6865      	ldr	r5, [r4, #4]
 8003014:	2d00      	cmp	r5, #0
 8003016:	60a5      	str	r5, [r4, #8]
 8003018:	f2c0 809c 	blt.w	8003154 <_printf_i+0x228>
 800301c:	6820      	ldr	r0, [r4, #0]
 800301e:	f020 0004 	bic.w	r0, r0, #4
 8003022:	6020      	str	r0, [r4, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d13f      	bne.n	80030a8 <_printf_i+0x17c>
 8003028:	2d00      	cmp	r5, #0
 800302a:	f040 8095 	bne.w	8003158 <_printf_i+0x22c>
 800302e:	4675      	mov	r5, lr
 8003030:	2a08      	cmp	r2, #8
 8003032:	d10b      	bne.n	800304c <_printf_i+0x120>
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	07da      	lsls	r2, r3, #31
 8003038:	d508      	bpl.n	800304c <_printf_i+0x120>
 800303a:	6923      	ldr	r3, [r4, #16]
 800303c:	6862      	ldr	r2, [r4, #4]
 800303e:	429a      	cmp	r2, r3
 8003040:	bfde      	ittt	le
 8003042:	2330      	movle	r3, #48	; 0x30
 8003044:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003048:	f105 35ff 	addle.w	r5, r5, #4294967295
 800304c:	ebae 0305 	sub.w	r3, lr, r5
 8003050:	6123      	str	r3, [r4, #16]
 8003052:	f8cd 8000 	str.w	r8, [sp]
 8003056:	463b      	mov	r3, r7
 8003058:	aa03      	add	r2, sp, #12
 800305a:	4621      	mov	r1, r4
 800305c:	4630      	mov	r0, r6
 800305e:	f7ff feed 	bl	8002e3c <_printf_common>
 8003062:	3001      	adds	r0, #1
 8003064:	d155      	bne.n	8003112 <_printf_i+0x1e6>
 8003066:	f04f 30ff 	mov.w	r0, #4294967295
 800306a:	b005      	add	sp, #20
 800306c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003070:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003074:	493c      	ldr	r1, [pc, #240]	; (8003168 <_printf_i+0x23c>)
 8003076:	6822      	ldr	r2, [r4, #0]
 8003078:	6818      	ldr	r0, [r3, #0]
 800307a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800307e:	f100 0504 	add.w	r5, r0, #4
 8003082:	601d      	str	r5, [r3, #0]
 8003084:	d001      	beq.n	800308a <_printf_i+0x15e>
 8003086:	6803      	ldr	r3, [r0, #0]
 8003088:	e002      	b.n	8003090 <_printf_i+0x164>
 800308a:	0655      	lsls	r5, r2, #25
 800308c:	d5fb      	bpl.n	8003086 <_printf_i+0x15a>
 800308e:	8803      	ldrh	r3, [r0, #0]
 8003090:	07d0      	lsls	r0, r2, #31
 8003092:	bf44      	itt	mi
 8003094:	f042 0220 	orrmi.w	r2, r2, #32
 8003098:	6022      	strmi	r2, [r4, #0]
 800309a:	b91b      	cbnz	r3, 80030a4 <_printf_i+0x178>
 800309c:	6822      	ldr	r2, [r4, #0]
 800309e:	f022 0220 	bic.w	r2, r2, #32
 80030a2:	6022      	str	r2, [r4, #0]
 80030a4:	2210      	movs	r2, #16
 80030a6:	e7b1      	b.n	800300c <_printf_i+0xe0>
 80030a8:	4675      	mov	r5, lr
 80030aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80030ae:	fb02 3310 	mls	r3, r2, r0, r3
 80030b2:	5ccb      	ldrb	r3, [r1, r3]
 80030b4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80030b8:	4603      	mov	r3, r0
 80030ba:	2800      	cmp	r0, #0
 80030bc:	d1f5      	bne.n	80030aa <_printf_i+0x17e>
 80030be:	e7b7      	b.n	8003030 <_printf_i+0x104>
 80030c0:	6808      	ldr	r0, [r1, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80030c8:	6949      	ldr	r1, [r1, #20]
 80030ca:	d004      	beq.n	80030d6 <_printf_i+0x1aa>
 80030cc:	1d10      	adds	r0, r2, #4
 80030ce:	6018      	str	r0, [r3, #0]
 80030d0:	6813      	ldr	r3, [r2, #0]
 80030d2:	6019      	str	r1, [r3, #0]
 80030d4:	e007      	b.n	80030e6 <_printf_i+0x1ba>
 80030d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030da:	f102 0004 	add.w	r0, r2, #4
 80030de:	6018      	str	r0, [r3, #0]
 80030e0:	6813      	ldr	r3, [r2, #0]
 80030e2:	d0f6      	beq.n	80030d2 <_printf_i+0x1a6>
 80030e4:	8019      	strh	r1, [r3, #0]
 80030e6:	2300      	movs	r3, #0
 80030e8:	4675      	mov	r5, lr
 80030ea:	6123      	str	r3, [r4, #16]
 80030ec:	e7b1      	b.n	8003052 <_printf_i+0x126>
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	1d11      	adds	r1, r2, #4
 80030f2:	6019      	str	r1, [r3, #0]
 80030f4:	6815      	ldr	r5, [r2, #0]
 80030f6:	2100      	movs	r1, #0
 80030f8:	6862      	ldr	r2, [r4, #4]
 80030fa:	4628      	mov	r0, r5
 80030fc:	f000 f836 	bl	800316c <memchr>
 8003100:	b108      	cbz	r0, 8003106 <_printf_i+0x1da>
 8003102:	1b40      	subs	r0, r0, r5
 8003104:	6060      	str	r0, [r4, #4]
 8003106:	6863      	ldr	r3, [r4, #4]
 8003108:	6123      	str	r3, [r4, #16]
 800310a:	2300      	movs	r3, #0
 800310c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003110:	e79f      	b.n	8003052 <_printf_i+0x126>
 8003112:	6923      	ldr	r3, [r4, #16]
 8003114:	462a      	mov	r2, r5
 8003116:	4639      	mov	r1, r7
 8003118:	4630      	mov	r0, r6
 800311a:	47c0      	blx	r8
 800311c:	3001      	adds	r0, #1
 800311e:	d0a2      	beq.n	8003066 <_printf_i+0x13a>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	079b      	lsls	r3, r3, #30
 8003124:	d507      	bpl.n	8003136 <_printf_i+0x20a>
 8003126:	2500      	movs	r5, #0
 8003128:	f104 0919 	add.w	r9, r4, #25
 800312c:	68e3      	ldr	r3, [r4, #12]
 800312e:	9a03      	ldr	r2, [sp, #12]
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	429d      	cmp	r5, r3
 8003134:	db05      	blt.n	8003142 <_printf_i+0x216>
 8003136:	68e0      	ldr	r0, [r4, #12]
 8003138:	9b03      	ldr	r3, [sp, #12]
 800313a:	4298      	cmp	r0, r3
 800313c:	bfb8      	it	lt
 800313e:	4618      	movlt	r0, r3
 8003140:	e793      	b.n	800306a <_printf_i+0x13e>
 8003142:	2301      	movs	r3, #1
 8003144:	464a      	mov	r2, r9
 8003146:	4639      	mov	r1, r7
 8003148:	4630      	mov	r0, r6
 800314a:	47c0      	blx	r8
 800314c:	3001      	adds	r0, #1
 800314e:	d08a      	beq.n	8003066 <_printf_i+0x13a>
 8003150:	3501      	adds	r5, #1
 8003152:	e7eb      	b.n	800312c <_printf_i+0x200>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1a7      	bne.n	80030a8 <_printf_i+0x17c>
 8003158:	780b      	ldrb	r3, [r1, #0]
 800315a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800315e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003162:	e765      	b.n	8003030 <_printf_i+0x104>
 8003164:	08003449 	.word	0x08003449
 8003168:	08003438 	.word	0x08003438

0800316c <memchr>:
 800316c:	b510      	push	{r4, lr}
 800316e:	b2c9      	uxtb	r1, r1
 8003170:	4402      	add	r2, r0
 8003172:	4290      	cmp	r0, r2
 8003174:	4603      	mov	r3, r0
 8003176:	d101      	bne.n	800317c <memchr+0x10>
 8003178:	2000      	movs	r0, #0
 800317a:	bd10      	pop	{r4, pc}
 800317c:	781c      	ldrb	r4, [r3, #0]
 800317e:	3001      	adds	r0, #1
 8003180:	428c      	cmp	r4, r1
 8003182:	d1f6      	bne.n	8003172 <memchr+0x6>
 8003184:	4618      	mov	r0, r3
 8003186:	bd10      	pop	{r4, pc}

08003188 <memcpy>:
 8003188:	b510      	push	{r4, lr}
 800318a:	1e43      	subs	r3, r0, #1
 800318c:	440a      	add	r2, r1
 800318e:	4291      	cmp	r1, r2
 8003190:	d100      	bne.n	8003194 <memcpy+0xc>
 8003192:	bd10      	pop	{r4, pc}
 8003194:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800319c:	e7f7      	b.n	800318e <memcpy+0x6>

0800319e <memmove>:
 800319e:	4288      	cmp	r0, r1
 80031a0:	b510      	push	{r4, lr}
 80031a2:	eb01 0302 	add.w	r3, r1, r2
 80031a6:	d803      	bhi.n	80031b0 <memmove+0x12>
 80031a8:	1e42      	subs	r2, r0, #1
 80031aa:	4299      	cmp	r1, r3
 80031ac:	d10c      	bne.n	80031c8 <memmove+0x2a>
 80031ae:	bd10      	pop	{r4, pc}
 80031b0:	4298      	cmp	r0, r3
 80031b2:	d2f9      	bcs.n	80031a8 <memmove+0xa>
 80031b4:	1881      	adds	r1, r0, r2
 80031b6:	1ad2      	subs	r2, r2, r3
 80031b8:	42d3      	cmn	r3, r2
 80031ba:	d100      	bne.n	80031be <memmove+0x20>
 80031bc:	bd10      	pop	{r4, pc}
 80031be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031c2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80031c6:	e7f7      	b.n	80031b8 <memmove+0x1a>
 80031c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80031d0:	e7eb      	b.n	80031aa <memmove+0xc>
	...

080031d4 <_free_r>:
 80031d4:	b538      	push	{r3, r4, r5, lr}
 80031d6:	4605      	mov	r5, r0
 80031d8:	2900      	cmp	r1, #0
 80031da:	d043      	beq.n	8003264 <_free_r+0x90>
 80031dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031e0:	1f0c      	subs	r4, r1, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bfb8      	it	lt
 80031e6:	18e4      	addlt	r4, r4, r3
 80031e8:	f000 f8d4 	bl	8003394 <__malloc_lock>
 80031ec:	4a1e      	ldr	r2, [pc, #120]	; (8003268 <_free_r+0x94>)
 80031ee:	6813      	ldr	r3, [r2, #0]
 80031f0:	4610      	mov	r0, r2
 80031f2:	b933      	cbnz	r3, 8003202 <_free_r+0x2e>
 80031f4:	6063      	str	r3, [r4, #4]
 80031f6:	6014      	str	r4, [r2, #0]
 80031f8:	4628      	mov	r0, r5
 80031fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031fe:	f000 b8ca 	b.w	8003396 <__malloc_unlock>
 8003202:	42a3      	cmp	r3, r4
 8003204:	d90b      	bls.n	800321e <_free_r+0x4a>
 8003206:	6821      	ldr	r1, [r4, #0]
 8003208:	1862      	adds	r2, r4, r1
 800320a:	4293      	cmp	r3, r2
 800320c:	bf01      	itttt	eq
 800320e:	681a      	ldreq	r2, [r3, #0]
 8003210:	685b      	ldreq	r3, [r3, #4]
 8003212:	1852      	addeq	r2, r2, r1
 8003214:	6022      	streq	r2, [r4, #0]
 8003216:	6063      	str	r3, [r4, #4]
 8003218:	6004      	str	r4, [r0, #0]
 800321a:	e7ed      	b.n	80031f8 <_free_r+0x24>
 800321c:	4613      	mov	r3, r2
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	b10a      	cbz	r2, 8003226 <_free_r+0x52>
 8003222:	42a2      	cmp	r2, r4
 8003224:	d9fa      	bls.n	800321c <_free_r+0x48>
 8003226:	6819      	ldr	r1, [r3, #0]
 8003228:	1858      	adds	r0, r3, r1
 800322a:	42a0      	cmp	r0, r4
 800322c:	d10b      	bne.n	8003246 <_free_r+0x72>
 800322e:	6820      	ldr	r0, [r4, #0]
 8003230:	4401      	add	r1, r0
 8003232:	1858      	adds	r0, r3, r1
 8003234:	4282      	cmp	r2, r0
 8003236:	6019      	str	r1, [r3, #0]
 8003238:	d1de      	bne.n	80031f8 <_free_r+0x24>
 800323a:	6810      	ldr	r0, [r2, #0]
 800323c:	6852      	ldr	r2, [r2, #4]
 800323e:	4401      	add	r1, r0
 8003240:	6019      	str	r1, [r3, #0]
 8003242:	605a      	str	r2, [r3, #4]
 8003244:	e7d8      	b.n	80031f8 <_free_r+0x24>
 8003246:	d902      	bls.n	800324e <_free_r+0x7a>
 8003248:	230c      	movs	r3, #12
 800324a:	602b      	str	r3, [r5, #0]
 800324c:	e7d4      	b.n	80031f8 <_free_r+0x24>
 800324e:	6820      	ldr	r0, [r4, #0]
 8003250:	1821      	adds	r1, r4, r0
 8003252:	428a      	cmp	r2, r1
 8003254:	bf01      	itttt	eq
 8003256:	6811      	ldreq	r1, [r2, #0]
 8003258:	6852      	ldreq	r2, [r2, #4]
 800325a:	1809      	addeq	r1, r1, r0
 800325c:	6021      	streq	r1, [r4, #0]
 800325e:	6062      	str	r2, [r4, #4]
 8003260:	605c      	str	r4, [r3, #4]
 8003262:	e7c9      	b.n	80031f8 <_free_r+0x24>
 8003264:	bd38      	pop	{r3, r4, r5, pc}
 8003266:	bf00      	nop
 8003268:	20000090 	.word	0x20000090

0800326c <_malloc_r>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	1ccd      	adds	r5, r1, #3
 8003270:	f025 0503 	bic.w	r5, r5, #3
 8003274:	3508      	adds	r5, #8
 8003276:	2d0c      	cmp	r5, #12
 8003278:	bf38      	it	cc
 800327a:	250c      	movcc	r5, #12
 800327c:	2d00      	cmp	r5, #0
 800327e:	4606      	mov	r6, r0
 8003280:	db01      	blt.n	8003286 <_malloc_r+0x1a>
 8003282:	42a9      	cmp	r1, r5
 8003284:	d903      	bls.n	800328e <_malloc_r+0x22>
 8003286:	230c      	movs	r3, #12
 8003288:	6033      	str	r3, [r6, #0]
 800328a:	2000      	movs	r0, #0
 800328c:	bd70      	pop	{r4, r5, r6, pc}
 800328e:	f000 f881 	bl	8003394 <__malloc_lock>
 8003292:	4a23      	ldr	r2, [pc, #140]	; (8003320 <_malloc_r+0xb4>)
 8003294:	6814      	ldr	r4, [r2, #0]
 8003296:	4621      	mov	r1, r4
 8003298:	b991      	cbnz	r1, 80032c0 <_malloc_r+0x54>
 800329a:	4c22      	ldr	r4, [pc, #136]	; (8003324 <_malloc_r+0xb8>)
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	b91b      	cbnz	r3, 80032a8 <_malloc_r+0x3c>
 80032a0:	4630      	mov	r0, r6
 80032a2:	f000 f867 	bl	8003374 <_sbrk_r>
 80032a6:	6020      	str	r0, [r4, #0]
 80032a8:	4629      	mov	r1, r5
 80032aa:	4630      	mov	r0, r6
 80032ac:	f000 f862 	bl	8003374 <_sbrk_r>
 80032b0:	1c43      	adds	r3, r0, #1
 80032b2:	d126      	bne.n	8003302 <_malloc_r+0x96>
 80032b4:	230c      	movs	r3, #12
 80032b6:	4630      	mov	r0, r6
 80032b8:	6033      	str	r3, [r6, #0]
 80032ba:	f000 f86c 	bl	8003396 <__malloc_unlock>
 80032be:	e7e4      	b.n	800328a <_malloc_r+0x1e>
 80032c0:	680b      	ldr	r3, [r1, #0]
 80032c2:	1b5b      	subs	r3, r3, r5
 80032c4:	d41a      	bmi.n	80032fc <_malloc_r+0x90>
 80032c6:	2b0b      	cmp	r3, #11
 80032c8:	d90f      	bls.n	80032ea <_malloc_r+0x7e>
 80032ca:	600b      	str	r3, [r1, #0]
 80032cc:	18cc      	adds	r4, r1, r3
 80032ce:	50cd      	str	r5, [r1, r3]
 80032d0:	4630      	mov	r0, r6
 80032d2:	f000 f860 	bl	8003396 <__malloc_unlock>
 80032d6:	f104 000b 	add.w	r0, r4, #11
 80032da:	1d23      	adds	r3, r4, #4
 80032dc:	f020 0007 	bic.w	r0, r0, #7
 80032e0:	1ac3      	subs	r3, r0, r3
 80032e2:	d01b      	beq.n	800331c <_malloc_r+0xb0>
 80032e4:	425a      	negs	r2, r3
 80032e6:	50e2      	str	r2, [r4, r3]
 80032e8:	bd70      	pop	{r4, r5, r6, pc}
 80032ea:	428c      	cmp	r4, r1
 80032ec:	bf0b      	itete	eq
 80032ee:	6863      	ldreq	r3, [r4, #4]
 80032f0:	684b      	ldrne	r3, [r1, #4]
 80032f2:	6013      	streq	r3, [r2, #0]
 80032f4:	6063      	strne	r3, [r4, #4]
 80032f6:	bf18      	it	ne
 80032f8:	460c      	movne	r4, r1
 80032fa:	e7e9      	b.n	80032d0 <_malloc_r+0x64>
 80032fc:	460c      	mov	r4, r1
 80032fe:	6849      	ldr	r1, [r1, #4]
 8003300:	e7ca      	b.n	8003298 <_malloc_r+0x2c>
 8003302:	1cc4      	adds	r4, r0, #3
 8003304:	f024 0403 	bic.w	r4, r4, #3
 8003308:	42a0      	cmp	r0, r4
 800330a:	d005      	beq.n	8003318 <_malloc_r+0xac>
 800330c:	1a21      	subs	r1, r4, r0
 800330e:	4630      	mov	r0, r6
 8003310:	f000 f830 	bl	8003374 <_sbrk_r>
 8003314:	3001      	adds	r0, #1
 8003316:	d0cd      	beq.n	80032b4 <_malloc_r+0x48>
 8003318:	6025      	str	r5, [r4, #0]
 800331a:	e7d9      	b.n	80032d0 <_malloc_r+0x64>
 800331c:	bd70      	pop	{r4, r5, r6, pc}
 800331e:	bf00      	nop
 8003320:	20000090 	.word	0x20000090
 8003324:	20000094 	.word	0x20000094

08003328 <_realloc_r>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	4607      	mov	r7, r0
 800332c:	4614      	mov	r4, r2
 800332e:	460e      	mov	r6, r1
 8003330:	b921      	cbnz	r1, 800333c <_realloc_r+0x14>
 8003332:	4611      	mov	r1, r2
 8003334:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003338:	f7ff bf98 	b.w	800326c <_malloc_r>
 800333c:	b922      	cbnz	r2, 8003348 <_realloc_r+0x20>
 800333e:	f7ff ff49 	bl	80031d4 <_free_r>
 8003342:	4625      	mov	r5, r4
 8003344:	4628      	mov	r0, r5
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003348:	f000 f826 	bl	8003398 <_malloc_usable_size_r>
 800334c:	4284      	cmp	r4, r0
 800334e:	d90f      	bls.n	8003370 <_realloc_r+0x48>
 8003350:	4621      	mov	r1, r4
 8003352:	4638      	mov	r0, r7
 8003354:	f7ff ff8a 	bl	800326c <_malloc_r>
 8003358:	4605      	mov	r5, r0
 800335a:	2800      	cmp	r0, #0
 800335c:	d0f2      	beq.n	8003344 <_realloc_r+0x1c>
 800335e:	4631      	mov	r1, r6
 8003360:	4622      	mov	r2, r4
 8003362:	f7ff ff11 	bl	8003188 <memcpy>
 8003366:	4631      	mov	r1, r6
 8003368:	4638      	mov	r0, r7
 800336a:	f7ff ff33 	bl	80031d4 <_free_r>
 800336e:	e7e9      	b.n	8003344 <_realloc_r+0x1c>
 8003370:	4635      	mov	r5, r6
 8003372:	e7e7      	b.n	8003344 <_realloc_r+0x1c>

08003374 <_sbrk_r>:
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	2300      	movs	r3, #0
 8003378:	4c05      	ldr	r4, [pc, #20]	; (8003390 <_sbrk_r+0x1c>)
 800337a:	4605      	mov	r5, r0
 800337c:	4608      	mov	r0, r1
 800337e:	6023      	str	r3, [r4, #0]
 8003380:	f000 f814 	bl	80033ac <_sbrk>
 8003384:	1c43      	adds	r3, r0, #1
 8003386:	d102      	bne.n	800338e <_sbrk_r+0x1a>
 8003388:	6823      	ldr	r3, [r4, #0]
 800338a:	b103      	cbz	r3, 800338e <_sbrk_r+0x1a>
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	bd38      	pop	{r3, r4, r5, pc}
 8003390:	200002f8 	.word	0x200002f8

08003394 <__malloc_lock>:
 8003394:	4770      	bx	lr

08003396 <__malloc_unlock>:
 8003396:	4770      	bx	lr

08003398 <_malloc_usable_size_r>:
 8003398:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800339c:	2800      	cmp	r0, #0
 800339e:	f1a0 0004 	sub.w	r0, r0, #4
 80033a2:	bfbc      	itt	lt
 80033a4:	580b      	ldrlt	r3, [r1, r0]
 80033a6:	18c0      	addlt	r0, r0, r3
 80033a8:	4770      	bx	lr
	...

080033ac <_sbrk>:
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <_sbrk+0x14>)
 80033ae:	4602      	mov	r2, r0
 80033b0:	6819      	ldr	r1, [r3, #0]
 80033b2:	b909      	cbnz	r1, 80033b8 <_sbrk+0xc>
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <_sbrk+0x18>)
 80033b6:	6019      	str	r1, [r3, #0]
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	4402      	add	r2, r0
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	4770      	bx	lr
 80033c0:	20000098 	.word	0x20000098
 80033c4:	200002fc 	.word	0x200002fc

080033c8 <_init>:
 80033c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ca:	bf00      	nop
 80033cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ce:	bc08      	pop	{r3}
 80033d0:	469e      	mov	lr, r3
 80033d2:	4770      	bx	lr

080033d4 <_fini>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	bf00      	nop
 80033d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033da:	bc08      	pop	{r3}
 80033dc:	469e      	mov	lr, r3
 80033de:	4770      	bx	lr
