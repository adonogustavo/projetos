
LCD_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001474  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001580  08001580  00011580  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080015d0  080015d0  000115d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080015d4  080015d4  000115d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080015d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000010c  2000000c  080015e4  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000118  080015e4  00020118  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001026d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002082  00000000  00000000  000302a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004f51  00000000  00000000  00032324  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006a8  00000000  00000000  00037278  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a58  00000000  00000000  00037920  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004da0  00000000  00000000  00038378  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a63  00000000  00000000  0003d118  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003fb7b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000012b4  00000000  00000000  0003fbf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001568 	.word	0x08001568

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001568 	.word	0x08001568

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f892 	bl	800028c <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f854 	bl	8000224 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f82d 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 f89e 	bl	80012ec <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000028 	.word	0x20000028
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000028 	.word	0x20000028

080001dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80001dc:	b538      	push	{r3, r4, r5, lr}
 80001de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80001e0:	f7ff fff6 	bl	80001d0 <HAL_GetTick>
 80001e4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001e6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80001e8:	bf1e      	ittt	ne
 80001ea:	4b04      	ldrne	r3, [pc, #16]	; (80001fc <HAL_Delay+0x20>)
 80001ec:	781b      	ldrbne	r3, [r3, #0]
 80001ee:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80001f0:	f7ff ffee 	bl	80001d0 <HAL_GetTick>
 80001f4:	1b40      	subs	r0, r0, r5
 80001f6:	4284      	cmp	r4, r0
 80001f8:	d8fa      	bhi.n	80001f0 <HAL_Delay+0x14>
  {
  }
}
 80001fa:	bd38      	pop	{r3, r4, r5, pc}
 80001fc:	20000000 	.word	0x20000000

08000200 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000200:	4a07      	ldr	r2, [pc, #28]	; (8000220 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000202:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000204:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000206:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800020a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800020e:	041b      	lsls	r3, r3, #16
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800021a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800021c:	60d3      	str	r3, [r2, #12]
 800021e:	4770      	bx	lr
 8000220:	e000ed00 	.word	0xe000ed00

08000224 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000224:	4b17      	ldr	r3, [pc, #92]	; (8000284 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000226:	b530      	push	{r4, r5, lr}
 8000228:	68dc      	ldr	r4, [r3, #12]
 800022a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800022e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000232:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000234:	2b04      	cmp	r3, #4
 8000236:	bf28      	it	cs
 8000238:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf98      	it	ls
 8000242:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	fa05 f303 	lsl.w	r3, r5, r3
 8000248:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024c:	bf88      	it	hi
 800024e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000250:	4019      	ands	r1, r3
 8000252:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000254:	fa05 f404 	lsl.w	r4, r5, r4
 8000258:	3c01      	subs	r4, #1
 800025a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800025c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025e:	ea42 0201 	orr.w	r2, r2, r1
 8000262:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfaf      	iteee	ge
 8000268:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	4b06      	ldrlt	r3, [pc, #24]	; (8000288 <HAL_NVIC_SetPriority+0x64>)
 800026e:	f000 000f 	andlt.w	r0, r0, #15
 8000272:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000274:	bfa5      	ittet	ge
 8000276:	b2d2      	uxtbge	r2, r2
 8000278:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000282:	bd30      	pop	{r4, r5, pc}
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000ed14 	.word	0xe000ed14

0800028c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800028c:	3801      	subs	r0, #1
 800028e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000292:	d20a      	bcs.n	80002aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	4a06      	ldr	r2, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	e000e010 	.word	0xe000e010
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ba:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	bf0c      	ite	eq
 80002c0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002c4:	f022 0204 	bicne.w	r2, r2, #4
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	4770      	bx	lr
 80002cc:	e000e010 	.word	0xe000e010

080002d0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002d0:	4770      	bx	lr

080002d2 <HAL_SYSTICK_IRQHandler>:
{
 80002d2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002d4:	f7ff fffc 	bl	80002d0 <HAL_SYSTICK_Callback>
 80002d8:	bd08      	pop	{r3, pc}
	...

080002dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002e0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002e2:	4616      	mov	r6, r2
 80002e4:	4b65      	ldr	r3, [pc, #404]	; (800047c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002e6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800048c <HAL_GPIO_Init+0x1b0>
 80002ea:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000490 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002ee:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002f4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002f8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d17f      	bne.n	8000400 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000300:	684d      	ldr	r5, [r1, #4]
 8000302:	2d12      	cmp	r5, #18
 8000304:	f000 80af 	beq.w	8000466 <HAL_GPIO_Init+0x18a>
 8000308:	f200 8088 	bhi.w	800041c <HAL_GPIO_Init+0x140>
 800030c:	2d02      	cmp	r5, #2
 800030e:	f000 80a7 	beq.w	8000460 <HAL_GPIO_Init+0x184>
 8000312:	d87c      	bhi.n	800040e <HAL_GPIO_Init+0x132>
 8000314:	2d00      	cmp	r5, #0
 8000316:	f000 808e 	beq.w	8000436 <HAL_GPIO_Init+0x15a>
 800031a:	2d01      	cmp	r5, #1
 800031c:	f000 809e 	beq.w	800045c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000320:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000324:	2cff      	cmp	r4, #255	; 0xff
 8000326:	bf93      	iteet	ls
 8000328:	4682      	movls	sl, r0
 800032a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800032e:	3d08      	subhi	r5, #8
 8000330:	f8d0 b000 	ldrls.w	fp, [r0]
 8000334:	bf92      	itee	ls
 8000336:	00b5      	lslls	r5, r6, #2
 8000338:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800033c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800033e:	fa09 f805 	lsl.w	r8, r9, r5
 8000342:	ea2b 0808 	bic.w	r8, fp, r8
 8000346:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800034a:	bf88      	it	hi
 800034c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000350:	ea48 0505 	orr.w	r5, r8, r5
 8000354:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000358:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800035c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000360:	d04e      	beq.n	8000400 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	4d47      	ldr	r5, [pc, #284]	; (8000480 <HAL_GPIO_Init+0x1a4>)
 8000364:	4f46      	ldr	r7, [pc, #280]	; (8000480 <HAL_GPIO_Init+0x1a4>)
 8000366:	69ad      	ldr	r5, [r5, #24]
 8000368:	f026 0803 	bic.w	r8, r6, #3
 800036c:	f045 0501 	orr.w	r5, r5, #1
 8000370:	61bd      	str	r5, [r7, #24]
 8000372:	69bd      	ldr	r5, [r7, #24]
 8000374:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000378:	f005 0501 	and.w	r5, r5, #1
 800037c:	9501      	str	r5, [sp, #4]
 800037e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000382:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000386:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000388:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800038c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000390:	fa09 f90b 	lsl.w	r9, r9, fp
 8000394:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000398:	4d3a      	ldr	r5, [pc, #232]	; (8000484 <HAL_GPIO_Init+0x1a8>)
 800039a:	42a8      	cmp	r0, r5
 800039c:	d068      	beq.n	8000470 <HAL_GPIO_Init+0x194>
 800039e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003a2:	42a8      	cmp	r0, r5
 80003a4:	d066      	beq.n	8000474 <HAL_GPIO_Init+0x198>
 80003a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003aa:	42a8      	cmp	r0, r5
 80003ac:	d064      	beq.n	8000478 <HAL_GPIO_Init+0x19c>
 80003ae:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b2:	42a8      	cmp	r0, r5
 80003b4:	bf0c      	ite	eq
 80003b6:	2503      	moveq	r5, #3
 80003b8:	2504      	movne	r5, #4
 80003ba:	fa05 f50b 	lsl.w	r5, r5, fp
 80003be:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003c2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80003c6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003c8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80003cc:	bf14      	ite	ne
 80003ce:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003d0:	43a5      	biceq	r5, r4
 80003d2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003d4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003d6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003da:	bf14      	ite	ne
 80003dc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003de:	43a5      	biceq	r5, r4
 80003e0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003e4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003e8:	bf14      	ite	ne
 80003ea:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003ec:	43a5      	biceq	r5, r4
 80003ee:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003f2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003f6:	bf14      	ite	ne
 80003f8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003fa:	ea25 0404 	biceq.w	r4, r5, r4
 80003fe:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000400:	3601      	adds	r6, #1
 8000402:	2e10      	cmp	r6, #16
 8000404:	f47f af73 	bne.w	80002ee <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000408:	b003      	add	sp, #12
 800040a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800040e:	2d03      	cmp	r5, #3
 8000410:	d022      	beq.n	8000458 <HAL_GPIO_Init+0x17c>
 8000412:	2d11      	cmp	r5, #17
 8000414:	d184      	bne.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000416:	68ca      	ldr	r2, [r1, #12]
 8000418:	3204      	adds	r2, #4
          break;
 800041a:	e781      	b.n	8000320 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800041c:	4f1a      	ldr	r7, [pc, #104]	; (8000488 <HAL_GPIO_Init+0x1ac>)
 800041e:	42bd      	cmp	r5, r7
 8000420:	d009      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 8000422:	d812      	bhi.n	800044a <HAL_GPIO_Init+0x16e>
 8000424:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000494 <HAL_GPIO_Init+0x1b8>
 8000428:	454d      	cmp	r5, r9
 800042a:	d004      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 800042c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000430:	454d      	cmp	r5, r9
 8000432:	f47f af75 	bne.w	8000320 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000436:	688a      	ldr	r2, [r1, #8]
 8000438:	b1c2      	cbz	r2, 800046c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800043a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800043c:	bf0c      	ite	eq
 800043e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000442:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000446:	2208      	movs	r2, #8
 8000448:	e76a      	b.n	8000320 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800044a:	4575      	cmp	r5, lr
 800044c:	d0f3      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 800044e:	4565      	cmp	r5, ip
 8000450:	d0f1      	beq.n	8000436 <HAL_GPIO_Init+0x15a>
 8000452:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000498 <HAL_GPIO_Init+0x1bc>
 8000456:	e7eb      	b.n	8000430 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000458:	2200      	movs	r2, #0
 800045a:	e761      	b.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800045c:	68ca      	ldr	r2, [r1, #12]
          break;
 800045e:	e75f      	b.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000460:	68ca      	ldr	r2, [r1, #12]
 8000462:	3208      	adds	r2, #8
          break;
 8000464:	e75c      	b.n	8000320 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000466:	68ca      	ldr	r2, [r1, #12]
 8000468:	320c      	adds	r2, #12
          break;
 800046a:	e759      	b.n	8000320 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800046c:	2204      	movs	r2, #4
 800046e:	e757      	b.n	8000320 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000470:	2500      	movs	r5, #0
 8000472:	e7a2      	b.n	80003ba <HAL_GPIO_Init+0xde>
 8000474:	2501      	movs	r5, #1
 8000476:	e7a0      	b.n	80003ba <HAL_GPIO_Init+0xde>
 8000478:	2502      	movs	r5, #2
 800047a:	e79e      	b.n	80003ba <HAL_GPIO_Init+0xde>
 800047c:	40010400 	.word	0x40010400
 8000480:	40021000 	.word	0x40021000
 8000484:	40010800 	.word	0x40010800
 8000488:	10210000 	.word	0x10210000
 800048c:	10310000 	.word	0x10310000
 8000490:	10320000 	.word	0x10320000
 8000494:	10110000 	.word	0x10110000
 8000498:	10220000 	.word	0x10220000

0800049c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800049c:	b10a      	cbz	r2, 80004a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800049e:	6101      	str	r1, [r0, #16]
 80004a0:	4770      	bx	lr
 80004a2:	0409      	lsls	r1, r1, #16
 80004a4:	e7fb      	b.n	800049e <HAL_GPIO_WritePin+0x2>

080004a6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004a6:	6802      	ldr	r2, [r0, #0]
 80004a8:	6953      	ldr	r3, [r2, #20]
 80004aa:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80004ae:	d00d      	beq.n	80004cc <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80004b0:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80004b4:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004b6:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80004b8:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80004ba:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80004bc:	2300      	movs	r3, #0
 80004be:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80004c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80004c4:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80004c8:	2001      	movs	r0, #1
 80004ca:	4770      	bx	lr
  }
  return HAL_OK;
 80004cc:	4618      	mov	r0, r3
}
 80004ce:	4770      	bx	lr

080004d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80004d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80004d4:	4604      	mov	r4, r0
 80004d6:	4617      	mov	r7, r2
 80004d8:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80004da:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80004de:	b28e      	uxth	r6, r1
 80004e0:	6825      	ldr	r5, [r4, #0]
 80004e2:	f1b8 0f01 	cmp.w	r8, #1
 80004e6:	bf0c      	ite	eq
 80004e8:	696b      	ldreq	r3, [r5, #20]
 80004ea:	69ab      	ldrne	r3, [r5, #24]
 80004ec:	ea36 0303 	bics.w	r3, r6, r3
 80004f0:	bf14      	ite	ne
 80004f2:	2001      	movne	r0, #1
 80004f4:	2000      	moveq	r0, #0
 80004f6:	b908      	cbnz	r0, 80004fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80004f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80004fc:	696b      	ldr	r3, [r5, #20]
 80004fe:	055a      	lsls	r2, r3, #21
 8000500:	d512      	bpl.n	8000528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000502:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000504:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800050a:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800050c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000510:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000512:	2304      	movs	r3, #4
 8000514:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000516:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000518:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 800051a:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800051c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000520:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000528:	1c7b      	adds	r3, r7, #1
 800052a:	d0d9      	beq.n	80004e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800052c:	b94f      	cbnz	r7, 8000542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 800052e:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000530:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000532:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000534:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000538:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 800053c:	2003      	movs	r0, #3
 800053e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000542:	f7ff fe45 	bl	80001d0 <HAL_GetTick>
 8000546:	eba0 0009 	sub.w	r0, r0, r9
 800054a:	4287      	cmp	r7, r0
 800054c:	d2c8      	bcs.n	80004e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 800054e:	e7ee      	b.n	800052e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08000550 <I2C_WaitOnFlagUntilTimeout>:
{
 8000550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000554:	4604      	mov	r4, r0
 8000556:	4690      	mov	r8, r2
 8000558:	461f      	mov	r7, r3
 800055a:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800055c:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000560:	b28d      	uxth	r5, r1
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	f1b9 0f01 	cmp.w	r9, #1
 8000568:	bf0c      	ite	eq
 800056a:	695b      	ldreq	r3, [r3, #20]
 800056c:	699b      	ldrne	r3, [r3, #24]
 800056e:	ea35 0303 	bics.w	r3, r5, r3
 8000572:	bf0c      	ite	eq
 8000574:	2301      	moveq	r3, #1
 8000576:	2300      	movne	r3, #0
 8000578:	4543      	cmp	r3, r8
 800057a:	d002      	beq.n	8000582 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800057c:	2000      	movs	r0, #0
}
 800057e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000582:	1c7b      	adds	r3, r7, #1
 8000584:	d0ed      	beq.n	8000562 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000586:	b95f      	cbnz	r7, 80005a0 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000588:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 800058a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800058c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800058e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000592:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000596:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000598:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800059c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80005a0:	f7ff fe16 	bl	80001d0 <HAL_GetTick>
 80005a4:	1b80      	subs	r0, r0, r6
 80005a6:	4287      	cmp	r7, r0
 80005a8:	d2db      	bcs.n	8000562 <I2C_WaitOnFlagUntilTimeout+0x12>
 80005aa:	e7ed      	b.n	8000588 <I2C_WaitOnFlagUntilTimeout+0x38>

080005ac <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	4604      	mov	r4, r0
 80005b0:	460d      	mov	r5, r1
 80005b2:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	061b      	lsls	r3, r3, #24
 80005ba:	d501      	bpl.n	80005c0 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80005bc:	2000      	movs	r0, #0
 80005be:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80005c0:	4620      	mov	r0, r4
 80005c2:	f7ff ff70 	bl	80004a6 <I2C_IsAcknowledgeFailed>
 80005c6:	b9a8      	cbnz	r0, 80005f4 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80005c8:	1c6a      	adds	r2, r5, #1
 80005ca:	d0f3      	beq.n	80005b4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005cc:	b965      	cbnz	r5, 80005e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80005d0:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80005d2:	f043 0320 	orr.w	r3, r3, #32
 80005d6:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80005d8:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80005da:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80005dc:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005de:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80005e2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80005e6:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80005e8:	f7ff fdf2 	bl	80001d0 <HAL_GetTick>
 80005ec:	1b80      	subs	r0, r0, r6
 80005ee:	4285      	cmp	r5, r0
 80005f0:	d2e0      	bcs.n	80005b4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 80005f2:	e7ec      	b.n	80005ce <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 80005f4:	2001      	movs	r0, #1
}
 80005f6:	bd70      	pop	{r4, r5, r6, pc}

080005f8 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	4604      	mov	r4, r0
 80005fc:	460d      	mov	r5, r1
 80005fe:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000600:	6823      	ldr	r3, [r4, #0]
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	075b      	lsls	r3, r3, #29
 8000606:	d501      	bpl.n	800060c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000608:	2000      	movs	r0, #0
 800060a:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800060c:	4620      	mov	r0, r4
 800060e:	f7ff ff4a 	bl	80004a6 <I2C_IsAcknowledgeFailed>
 8000612:	b9a8      	cbnz	r0, 8000640 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000614:	1c6a      	adds	r2, r5, #1
 8000616:	d0f3      	beq.n	8000600 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000618:	b965      	cbnz	r5, 8000634 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800061a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800061c:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800061e:	f043 0320 	orr.w	r3, r3, #32
 8000622:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000624:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000626:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000628:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800062a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800062e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000632:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000634:	f7ff fdcc 	bl	80001d0 <HAL_GetTick>
 8000638:	1b80      	subs	r0, r0, r6
 800063a:	4285      	cmp	r5, r0
 800063c:	d2e0      	bcs.n	8000600 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800063e:	e7ec      	b.n	800061a <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000640:	2001      	movs	r0, #1
}
 8000642:	bd70      	pop	{r4, r5, r6, pc}

08000644 <HAL_I2C_Init>:
{
 8000644:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8000646:	4604      	mov	r4, r0
 8000648:	b908      	cbnz	r0, 800064e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800064a:	2001      	movs	r0, #1
 800064c:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 800064e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000652:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000656:	b91b      	cbnz	r3, 8000660 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000658:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800065c:	f000 fe8c 	bl	8001378 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000660:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000662:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000664:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000668:	6813      	ldr	r3, [r2, #0]
 800066a:	f023 0301 	bic.w	r3, r3, #1
 800066e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000670:	f000 fbb0 	bl	8000dd4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000674:	6863      	ldr	r3, [r4, #4]
 8000676:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <HAL_I2C_Init+0xf0>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d830      	bhi.n	80006de <HAL_I2C_Init+0x9a>
 800067c:	4a2e      	ldr	r2, [pc, #184]	; (8000738 <HAL_I2C_Init+0xf4>)
 800067e:	4290      	cmp	r0, r2
 8000680:	d9e3      	bls.n	800064a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000682:	4a2e      	ldr	r2, [pc, #184]	; (800073c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8000684:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000686:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 800068a:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800068c:	3201      	adds	r2, #1
 800068e:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000690:	4a28      	ldr	r2, [pc, #160]	; (8000734 <HAL_I2C_Init+0xf0>)
 8000692:	3801      	subs	r0, #1
 8000694:	4293      	cmp	r3, r2
 8000696:	d832      	bhi.n	80006fe <HAL_I2C_Init+0xba>
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	fbb0 f0f3 	udiv	r0, r0, r3
 800069e:	1c43      	adds	r3, r0, #1
 80006a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006a4:	2b04      	cmp	r3, #4
 80006a6:	bf38      	it	cc
 80006a8:	2304      	movcc	r3, #4
 80006aa:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80006ac:	6a22      	ldr	r2, [r4, #32]
 80006ae:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80006b0:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80006b2:	4313      	orrs	r3, r2
 80006b4:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80006b6:	68e2      	ldr	r2, [r4, #12]
 80006b8:	6923      	ldr	r3, [r4, #16]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80006be:	69a2      	ldr	r2, [r4, #24]
 80006c0:	6963      	ldr	r3, [r4, #20]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80006c6:	680b      	ldr	r3, [r1, #0]
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80006ce:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80006d0:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80006d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80006d6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80006d8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80006dc:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <HAL_I2C_Init+0xfc>)
 80006e0:	4290      	cmp	r0, r2
 80006e2:	d9b2      	bls.n	800064a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80006e4:	4d15      	ldr	r5, [pc, #84]	; (800073c <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80006ea:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 80006ee:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006f0:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 80006f2:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80006f4:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80006f8:	fbb2 f2f5 	udiv	r2, r2, r5
 80006fc:	e7c6      	b.n	800068c <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80006fe:	68a2      	ldr	r2, [r4, #8]
 8000700:	b952      	cbnz	r2, 8000718 <HAL_I2C_Init+0xd4>
 8000702:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000706:	fbb0 f0f3 	udiv	r0, r0, r3
 800070a:	1c43      	adds	r3, r0, #1
 800070c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000710:	b16b      	cbz	r3, 800072e <HAL_I2C_Init+0xea>
 8000712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000716:	e7c8      	b.n	80006aa <HAL_I2C_Init+0x66>
 8000718:	2219      	movs	r2, #25
 800071a:	4353      	muls	r3, r2
 800071c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000720:	1c43      	adds	r3, r0, #1
 8000722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000726:	b113      	cbz	r3, 800072e <HAL_I2C_Init+0xea>
 8000728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072c:	e7bd      	b.n	80006aa <HAL_I2C_Init+0x66>
 800072e:	2301      	movs	r3, #1
 8000730:	e7bb      	b.n	80006aa <HAL_I2C_Init+0x66>
 8000732:	bf00      	nop
 8000734:	000186a0 	.word	0x000186a0
 8000738:	001e847f 	.word	0x001e847f
 800073c:	000f4240 	.word	0x000f4240
 8000740:	003d08ff 	.word	0x003d08ff

08000744 <HAL_I2C_Master_Transmit>:
{
 8000744:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000748:	4604      	mov	r4, r0
 800074a:	461f      	mov	r7, r3
 800074c:	460d      	mov	r5, r1
 800074e:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8000750:	f7ff fd3e 	bl	80001d0 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000754:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000758:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800075a:	2b20      	cmp	r3, #32
 800075c:	d004      	beq.n	8000768 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 800075e:	2502      	movs	r5, #2
}
 8000760:	4628      	mov	r0, r5
 8000762:	b004      	add	sp, #16
 8000764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000768:	9000      	str	r0, [sp, #0]
 800076a:	2319      	movs	r3, #25
 800076c:	2201      	movs	r2, #1
 800076e:	495d      	ldr	r1, [pc, #372]	; (80008e4 <HAL_I2C_Master_Transmit+0x1a0>)
 8000770:	4620      	mov	r0, r4
 8000772:	f7ff feed 	bl	8000550 <I2C_WaitOnFlagUntilTimeout>
 8000776:	2800      	cmp	r0, #0
 8000778:	d1f1      	bne.n	800075e <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 800077a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800077e:	2b01      	cmp	r3, #1
 8000780:	d0ed      	beq.n	800075e <HAL_I2C_Master_Transmit+0x1a>
 8000782:	2301      	movs	r3, #1
 8000784:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000788:	6823      	ldr	r3, [r4, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 800078e:	bf5e      	ittt	pl
 8000790:	681a      	ldrpl	r2, [r3, #0]
 8000792:	f042 0201 	orrpl.w	r2, r2, #1
 8000796:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800079e:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80007a0:	2221      	movs	r2, #33	; 0x21
 80007a2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80007a6:	2210      	movs	r2, #16
 80007a8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007ac:	2200      	movs	r2, #0
 80007ae:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80007b0:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80007b4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80007b6:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80007b8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80007ba:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80007be:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80007c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80007c2:	2a04      	cmp	r2, #4
 80007c4:	d004      	beq.n	80007d0 <HAL_I2C_Master_Transmit+0x8c>
 80007c6:	2a01      	cmp	r2, #1
 80007c8:	d002      	beq.n	80007d0 <HAL_I2C_Master_Transmit+0x8c>
 80007ca:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80007ce:	d104      	bne.n	80007da <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	e002      	b.n	80007e0 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80007da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80007dc:	2a12      	cmp	r2, #18
 80007de:	d0f7      	beq.n	80007d0 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80007e0:	9600      	str	r6, [sp, #0]
 80007e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80007e4:	2200      	movs	r2, #0
 80007e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80007ea:	4620      	mov	r0, r4
 80007ec:	f7ff feb0 	bl	8000550 <I2C_WaitOnFlagUntilTimeout>
 80007f0:	bb28      	cbnz	r0, 800083e <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80007f2:	6923      	ldr	r3, [r4, #16]
 80007f4:	6822      	ldr	r2, [r4, #0]
 80007f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007fa:	d112      	bne.n	8000822 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80007fc:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8000800:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000802:	4633      	mov	r3, r6
 8000804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000806:	4938      	ldr	r1, [pc, #224]	; (80008e8 <HAL_I2C_Master_Transmit+0x1a4>)
 8000808:	4620      	mov	r0, r4
 800080a:	f7ff fe61 	bl	80004d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800080e:	4605      	mov	r5, r0
 8000810:	b9a0      	cbnz	r0, 800083c <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000812:	6823      	ldr	r3, [r4, #0]
 8000814:	9003      	str	r0, [sp, #12]
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	9203      	str	r2, [sp, #12]
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	9303      	str	r3, [sp, #12]
 800081e:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8000820:	e050      	b.n	80008c4 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000822:	11eb      	asrs	r3, r5, #7
 8000824:	f003 0306 	and.w	r3, r3, #6
 8000828:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800082c:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800082e:	492f      	ldr	r1, [pc, #188]	; (80008ec <HAL_I2C_Master_Transmit+0x1a8>)
 8000830:	4633      	mov	r3, r6
 8000832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000834:	4620      	mov	r0, r4
 8000836:	f7ff fe4b 	bl	80004d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800083a:	b148      	cbz	r0, 8000850 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800083c:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800083e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000840:	2b04      	cmp	r3, #4
 8000842:	f04f 0300 	mov.w	r3, #0
 8000846:	d107      	bne.n	8000858 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8000848:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 800084c:	2501      	movs	r5, #1
 800084e:	e787      	b.n	8000760 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000850:	6823      	ldr	r3, [r4, #0]
 8000852:	b2ed      	uxtb	r5, r5
 8000854:	611d      	str	r5, [r3, #16]
 8000856:	e7d4      	b.n	8000802 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8000858:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 800085c:	2503      	movs	r5, #3
 800085e:	e77f      	b.n	8000760 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000860:	4632      	mov	r2, r6
 8000862:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000864:	4620      	mov	r0, r4
 8000866:	f7ff fea1 	bl	80005ac <I2C_WaitOnTXEFlagUntilTimeout>
 800086a:	b140      	cbz	r0, 800087e <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800086c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800086e:	2b04      	cmp	r3, #4
 8000870:	d1f4      	bne.n	800085c <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000872:	6822      	ldr	r2, [r4, #0]
 8000874:	6813      	ldr	r3, [r2, #0]
 8000876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800087a:	6013      	str	r3, [r2, #0]
 800087c:	e7e6      	b.n	800084c <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800087e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000880:	6820      	ldr	r0, [r4, #0]
 8000882:	1c4b      	adds	r3, r1, #1
 8000884:	6263      	str	r3, [r4, #36]	; 0x24
 8000886:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8000888:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800088a:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 800088c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800088e:	3b01      	subs	r3, #1
 8000890:	b29b      	uxth	r3, r3
 8000892:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000894:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8000896:	1e53      	subs	r3, r2, #1
 8000898:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800089a:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 800089c:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800089e:	d50a      	bpl.n	80008b6 <HAL_I2C_Master_Transmit+0x172>
 80008a0:	b14b      	cbz	r3, 80008b6 <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80008a2:	1c8b      	adds	r3, r1, #2
 80008a4:	6263      	str	r3, [r4, #36]	; 0x24
 80008a6:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80008a8:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80008aa:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80008ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80008ae:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80008b0:	3b01      	subs	r3, #1
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80008b6:	4632      	mov	r2, r6
 80008b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80008ba:	4620      	mov	r0, r4
 80008bc:	f7ff fe9c 	bl	80005f8 <I2C_WaitOnBTFFlagUntilTimeout>
 80008c0:	2800      	cmp	r0, #0
 80008c2:	d1d3      	bne.n	800086c <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80008c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1ca      	bne.n	8000860 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80008ca:	6821      	ldr	r1, [r4, #0]
 80008cc:	680a      	ldr	r2, [r1, #0]
 80008ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008d2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80008d4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80008d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80008da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80008de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80008e2:	e73d      	b.n	8000760 <HAL_I2C_Master_Transmit+0x1c>
 80008e4:	00100002 	.word	0x00100002
 80008e8:	00010002 	.word	0x00010002
 80008ec:	00010008 	.word	0x00010008

080008f0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008f0:	6803      	ldr	r3, [r0, #0]
{
 80008f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008f6:	07db      	lsls	r3, r3, #31
{
 80008f8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008fa:	d410      	bmi.n	800091e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008fc:	682b      	ldr	r3, [r5, #0]
 80008fe:	079f      	lsls	r7, r3, #30
 8000900:	d45e      	bmi.n	80009c0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	0719      	lsls	r1, r3, #28
 8000906:	f100 8095 	bmi.w	8000a34 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800090a:	682b      	ldr	r3, [r5, #0]
 800090c:	075a      	lsls	r2, r3, #29
 800090e:	f100 80bf 	bmi.w	8000a90 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000912:	69ea      	ldr	r2, [r5, #28]
 8000914:	2a00      	cmp	r2, #0
 8000916:	f040 812d 	bne.w	8000b74 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800091a:	2000      	movs	r0, #0
 800091c:	e014      	b.n	8000948 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800091e:	4c90      	ldr	r4, [pc, #576]	; (8000b60 <HAL_RCC_OscConfig+0x270>)
 8000920:	6863      	ldr	r3, [r4, #4]
 8000922:	f003 030c 	and.w	r3, r3, #12
 8000926:	2b04      	cmp	r3, #4
 8000928:	d007      	beq.n	800093a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800092a:	6863      	ldr	r3, [r4, #4]
 800092c:	f003 030c 	and.w	r3, r3, #12
 8000930:	2b08      	cmp	r3, #8
 8000932:	d10c      	bne.n	800094e <HAL_RCC_OscConfig+0x5e>
 8000934:	6863      	ldr	r3, [r4, #4]
 8000936:	03de      	lsls	r6, r3, #15
 8000938:	d509      	bpl.n	800094e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800093a:	6823      	ldr	r3, [r4, #0]
 800093c:	039c      	lsls	r4, r3, #14
 800093e:	d5dd      	bpl.n	80008fc <HAL_RCC_OscConfig+0xc>
 8000940:	686b      	ldr	r3, [r5, #4]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1da      	bne.n	80008fc <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000946:	2001      	movs	r0, #1
}
 8000948:	b002      	add	sp, #8
 800094a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800094e:	686b      	ldr	r3, [r5, #4]
 8000950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000954:	d110      	bne.n	8000978 <HAL_RCC_OscConfig+0x88>
 8000956:	6823      	ldr	r3, [r4, #0]
 8000958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800095c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800095e:	f7ff fc37 	bl	80001d0 <HAL_GetTick>
 8000962:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	0398      	lsls	r0, r3, #14
 8000968:	d4c8      	bmi.n	80008fc <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800096a:	f7ff fc31 	bl	80001d0 <HAL_GetTick>
 800096e:	1b80      	subs	r0, r0, r6
 8000970:	2864      	cmp	r0, #100	; 0x64
 8000972:	d9f7      	bls.n	8000964 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000974:	2003      	movs	r0, #3
 8000976:	e7e7      	b.n	8000948 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000978:	b99b      	cbnz	r3, 80009a2 <HAL_RCC_OscConfig+0xb2>
 800097a:	6823      	ldr	r3, [r4, #0]
 800097c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000980:	6023      	str	r3, [r4, #0]
 8000982:	6823      	ldr	r3, [r4, #0]
 8000984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000988:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800098a:	f7ff fc21 	bl	80001d0 <HAL_GetTick>
 800098e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	0399      	lsls	r1, r3, #14
 8000994:	d5b2      	bpl.n	80008fc <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000996:	f7ff fc1b 	bl	80001d0 <HAL_GetTick>
 800099a:	1b80      	subs	r0, r0, r6
 800099c:	2864      	cmp	r0, #100	; 0x64
 800099e:	d9f7      	bls.n	8000990 <HAL_RCC_OscConfig+0xa0>
 80009a0:	e7e8      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009a6:	6823      	ldr	r3, [r4, #0]
 80009a8:	d103      	bne.n	80009b2 <HAL_RCC_OscConfig+0xc2>
 80009aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ae:	6023      	str	r3, [r4, #0]
 80009b0:	e7d1      	b.n	8000956 <HAL_RCC_OscConfig+0x66>
 80009b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009b6:	6023      	str	r3, [r4, #0]
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009be:	e7cd      	b.n	800095c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009c0:	4c67      	ldr	r4, [pc, #412]	; (8000b60 <HAL_RCC_OscConfig+0x270>)
 80009c2:	6863      	ldr	r3, [r4, #4]
 80009c4:	f013 0f0c 	tst.w	r3, #12
 80009c8:	d007      	beq.n	80009da <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80009ca:	6863      	ldr	r3, [r4, #4]
 80009cc:	f003 030c 	and.w	r3, r3, #12
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	d110      	bne.n	80009f6 <HAL_RCC_OscConfig+0x106>
 80009d4:	6863      	ldr	r3, [r4, #4]
 80009d6:	03da      	lsls	r2, r3, #15
 80009d8:	d40d      	bmi.n	80009f6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009da:	6823      	ldr	r3, [r4, #0]
 80009dc:	079b      	lsls	r3, r3, #30
 80009de:	d502      	bpl.n	80009e6 <HAL_RCC_OscConfig+0xf6>
 80009e0:	692b      	ldr	r3, [r5, #16]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d1af      	bne.n	8000946 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009e6:	6823      	ldr	r3, [r4, #0]
 80009e8:	696a      	ldr	r2, [r5, #20]
 80009ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009f2:	6023      	str	r3, [r4, #0]
 80009f4:	e785      	b.n	8000902 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009f6:	692a      	ldr	r2, [r5, #16]
 80009f8:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <HAL_RCC_OscConfig+0x274>)
 80009fa:	b16a      	cbz	r2, 8000a18 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a00:	f7ff fbe6 	bl	80001d0 <HAL_GetTick>
 8000a04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a06:	6823      	ldr	r3, [r4, #0]
 8000a08:	079f      	lsls	r7, r3, #30
 8000a0a:	d4ec      	bmi.n	80009e6 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a0c:	f7ff fbe0 	bl	80001d0 <HAL_GetTick>
 8000a10:	1b80      	subs	r0, r0, r6
 8000a12:	2802      	cmp	r0, #2
 8000a14:	d9f7      	bls.n	8000a06 <HAL_RCC_OscConfig+0x116>
 8000a16:	e7ad      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000a18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a1a:	f7ff fbd9 	bl	80001d0 <HAL_GetTick>
 8000a1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a20:	6823      	ldr	r3, [r4, #0]
 8000a22:	0798      	lsls	r0, r3, #30
 8000a24:	f57f af6d 	bpl.w	8000902 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a28:	f7ff fbd2 	bl	80001d0 <HAL_GetTick>
 8000a2c:	1b80      	subs	r0, r0, r6
 8000a2e:	2802      	cmp	r0, #2
 8000a30:	d9f6      	bls.n	8000a20 <HAL_RCC_OscConfig+0x130>
 8000a32:	e79f      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a34:	69aa      	ldr	r2, [r5, #24]
 8000a36:	4c4a      	ldr	r4, [pc, #296]	; (8000b60 <HAL_RCC_OscConfig+0x270>)
 8000a38:	4b4b      	ldr	r3, [pc, #300]	; (8000b68 <HAL_RCC_OscConfig+0x278>)
 8000a3a:	b1da      	cbz	r2, 8000a74 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a40:	f7ff fbc6 	bl	80001d0 <HAL_GetTick>
 8000a44:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a48:	079b      	lsls	r3, r3, #30
 8000a4a:	d50d      	bpl.n	8000a68 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000a4c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_RCC_OscConfig+0x27c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a58:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000a5a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000a5c:	9b01      	ldr	r3, [sp, #4]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	9201      	str	r2, [sp, #4]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1f9      	bne.n	8000a5a <HAL_RCC_OscConfig+0x16a>
 8000a66:	e750      	b.n	800090a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a68:	f7ff fbb2 	bl	80001d0 <HAL_GetTick>
 8000a6c:	1b80      	subs	r0, r0, r6
 8000a6e:	2802      	cmp	r0, #2
 8000a70:	d9e9      	bls.n	8000a46 <HAL_RCC_OscConfig+0x156>
 8000a72:	e77f      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000a74:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a76:	f7ff fbab 	bl	80001d0 <HAL_GetTick>
 8000a7a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a7e:	079f      	lsls	r7, r3, #30
 8000a80:	f57f af43 	bpl.w	800090a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a84:	f7ff fba4 	bl	80001d0 <HAL_GetTick>
 8000a88:	1b80      	subs	r0, r0, r6
 8000a8a:	2802      	cmp	r0, #2
 8000a8c:	d9f6      	bls.n	8000a7c <HAL_RCC_OscConfig+0x18c>
 8000a8e:	e771      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a90:	4c33      	ldr	r4, [pc, #204]	; (8000b60 <HAL_RCC_OscConfig+0x270>)
 8000a92:	69e3      	ldr	r3, [r4, #28]
 8000a94:	00d8      	lsls	r0, r3, #3
 8000a96:	d424      	bmi.n	8000ae2 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000a98:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	69e3      	ldr	r3, [r4, #28]
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	61e3      	str	r3, [r4, #28]
 8000aa2:	69e3      	ldr	r3, [r4, #28]
 8000aa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aac:	4e30      	ldr	r6, [pc, #192]	; (8000b70 <HAL_RCC_OscConfig+0x280>)
 8000aae:	6833      	ldr	r3, [r6, #0]
 8000ab0:	05d9      	lsls	r1, r3, #23
 8000ab2:	d518      	bpl.n	8000ae6 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ab4:	68eb      	ldr	r3, [r5, #12]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d126      	bne.n	8000b08 <HAL_RCC_OscConfig+0x218>
 8000aba:	6a23      	ldr	r3, [r4, #32]
 8000abc:	f043 0301 	orr.w	r3, r3, #1
 8000ac0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000ac2:	f7ff fb85 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ac6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000aca:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000acc:	6a23      	ldr	r3, [r4, #32]
 8000ace:	079b      	lsls	r3, r3, #30
 8000ad0:	d53f      	bpl.n	8000b52 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000ad2:	2f00      	cmp	r7, #0
 8000ad4:	f43f af1d 	beq.w	8000912 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ad8:	69e3      	ldr	r3, [r4, #28]
 8000ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ade:	61e3      	str	r3, [r4, #28]
 8000ae0:	e717      	b.n	8000912 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000ae2:	2700      	movs	r7, #0
 8000ae4:	e7e2      	b.n	8000aac <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ae6:	6833      	ldr	r3, [r6, #0]
 8000ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aec:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000aee:	f7ff fb6f 	bl	80001d0 <HAL_GetTick>
 8000af2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000af4:	6833      	ldr	r3, [r6, #0]
 8000af6:	05da      	lsls	r2, r3, #23
 8000af8:	d4dc      	bmi.n	8000ab4 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000afa:	f7ff fb69 	bl	80001d0 <HAL_GetTick>
 8000afe:	eba0 0008 	sub.w	r0, r0, r8
 8000b02:	2864      	cmp	r0, #100	; 0x64
 8000b04:	d9f6      	bls.n	8000af4 <HAL_RCC_OscConfig+0x204>
 8000b06:	e735      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b08:	b9ab      	cbnz	r3, 8000b36 <HAL_RCC_OscConfig+0x246>
 8000b0a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b0c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b10:	f023 0301 	bic.w	r3, r3, #1
 8000b14:	6223      	str	r3, [r4, #32]
 8000b16:	6a23      	ldr	r3, [r4, #32]
 8000b18:	f023 0304 	bic.w	r3, r3, #4
 8000b1c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b1e:	f7ff fb57 	bl	80001d0 <HAL_GetTick>
 8000b22:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b24:	6a23      	ldr	r3, [r4, #32]
 8000b26:	0798      	lsls	r0, r3, #30
 8000b28:	d5d3      	bpl.n	8000ad2 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b2a:	f7ff fb51 	bl	80001d0 <HAL_GetTick>
 8000b2e:	1b80      	subs	r0, r0, r6
 8000b30:	4540      	cmp	r0, r8
 8000b32:	d9f7      	bls.n	8000b24 <HAL_RCC_OscConfig+0x234>
 8000b34:	e71e      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b36:	2b05      	cmp	r3, #5
 8000b38:	6a23      	ldr	r3, [r4, #32]
 8000b3a:	d103      	bne.n	8000b44 <HAL_RCC_OscConfig+0x254>
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6223      	str	r3, [r4, #32]
 8000b42:	e7ba      	b.n	8000aba <HAL_RCC_OscConfig+0x1ca>
 8000b44:	f023 0301 	bic.w	r3, r3, #1
 8000b48:	6223      	str	r3, [r4, #32]
 8000b4a:	6a23      	ldr	r3, [r4, #32]
 8000b4c:	f023 0304 	bic.w	r3, r3, #4
 8000b50:	e7b6      	b.n	8000ac0 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b52:	f7ff fb3d 	bl	80001d0 <HAL_GetTick>
 8000b56:	eba0 0008 	sub.w	r0, r0, r8
 8000b5a:	42b0      	cmp	r0, r6
 8000b5c:	d9b6      	bls.n	8000acc <HAL_RCC_OscConfig+0x1dc>
 8000b5e:	e709      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
 8000b60:	40021000 	.word	0x40021000
 8000b64:	42420000 	.word	0x42420000
 8000b68:	42420480 	.word	0x42420480
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b74:	4c22      	ldr	r4, [pc, #136]	; (8000c00 <HAL_RCC_OscConfig+0x310>)
 8000b76:	6863      	ldr	r3, [r4, #4]
 8000b78:	f003 030c 	and.w	r3, r3, #12
 8000b7c:	2b08      	cmp	r3, #8
 8000b7e:	f43f aee2 	beq.w	8000946 <HAL_RCC_OscConfig+0x56>
 8000b82:	2300      	movs	r3, #0
 8000b84:	4e1f      	ldr	r6, [pc, #124]	; (8000c04 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b86:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b88:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b8a:	d12b      	bne.n	8000be4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000b8c:	f7ff fb20 	bl	80001d0 <HAL_GetTick>
 8000b90:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	0199      	lsls	r1, r3, #6
 8000b96:	d41f      	bmi.n	8000bd8 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b98:	6a2b      	ldr	r3, [r5, #32]
 8000b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b9e:	d105      	bne.n	8000bac <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ba0:	6862      	ldr	r2, [r4, #4]
 8000ba2:	68a9      	ldr	r1, [r5, #8]
 8000ba4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000bae:	6862      	ldr	r2, [r4, #4]
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bba:	2301      	movs	r3, #1
 8000bbc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fb07 	bl	80001d0 <HAL_GetTick>
 8000bc2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	019a      	lsls	r2, r3, #6
 8000bc8:	f53f aea7 	bmi.w	800091a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bcc:	f7ff fb00 	bl	80001d0 <HAL_GetTick>
 8000bd0:	1b40      	subs	r0, r0, r5
 8000bd2:	2802      	cmp	r0, #2
 8000bd4:	d9f6      	bls.n	8000bc4 <HAL_RCC_OscConfig+0x2d4>
 8000bd6:	e6cd      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bd8:	f7ff fafa 	bl	80001d0 <HAL_GetTick>
 8000bdc:	1bc0      	subs	r0, r0, r7
 8000bde:	2802      	cmp	r0, #2
 8000be0:	d9d7      	bls.n	8000b92 <HAL_RCC_OscConfig+0x2a2>
 8000be2:	e6c7      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000be4:	f7ff faf4 	bl	80001d0 <HAL_GetTick>
 8000be8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bea:	6823      	ldr	r3, [r4, #0]
 8000bec:	019b      	lsls	r3, r3, #6
 8000bee:	f57f ae94 	bpl.w	800091a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bf2:	f7ff faed 	bl	80001d0 <HAL_GetTick>
 8000bf6:	1b40      	subs	r0, r0, r5
 8000bf8:	2802      	cmp	r0, #2
 8000bfa:	d9f6      	bls.n	8000bea <HAL_RCC_OscConfig+0x2fa>
 8000bfc:	e6ba      	b.n	8000974 <HAL_RCC_OscConfig+0x84>
 8000bfe:	bf00      	nop
 8000c00:	40021000 	.word	0x40021000
 8000c04:	42420060 	.word	0x42420060

08000c08 <HAL_RCC_GetSysClockFreq>:
{
 8000c08:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000c0c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c0e:	ac02      	add	r4, sp, #8
 8000c10:	f103 0510 	add.w	r5, r3, #16
 8000c14:	4622      	mov	r2, r4
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	6859      	ldr	r1, [r3, #4]
 8000c1a:	3308      	adds	r3, #8
 8000c1c:	c203      	stmia	r2!, {r0, r1}
 8000c1e:	42ab      	cmp	r3, r5
 8000c20:	4614      	mov	r4, r2
 8000c22:	d1f7      	bne.n	8000c14 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c24:	2301      	movs	r3, #1
 8000c26:	f88d 3004 	strb.w	r3, [sp, #4]
 8000c2a:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000c2c:	4911      	ldr	r1, [pc, #68]	; (8000c74 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000c2e:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000c32:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c34:	f003 020c 	and.w	r2, r3, #12
 8000c38:	2a08      	cmp	r2, #8
 8000c3a:	d117      	bne.n	8000c6c <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c3c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000c40:	a806      	add	r0, sp, #24
 8000c42:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c44:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000c46:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000c4a:	d50c      	bpl.n	8000c66 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c4c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c4e:	480a      	ldr	r0, [pc, #40]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c50:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c54:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000c56:	aa06      	add	r2, sp, #24
 8000c58:	4413      	add	r3, r2
 8000c5a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000c5e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000c62:	b007      	add	sp, #28
 8000c64:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_RCC_GetSysClockFreq+0x74>)
 8000c68:	4350      	muls	r0, r2
 8000c6a:	e7fa      	b.n	8000c62 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000c6e:	e7f8      	b.n	8000c62 <HAL_RCC_GetSysClockFreq+0x5a>
 8000c70:	08001580 	.word	0x08001580
 8000c74:	40021000 	.word	0x40021000
 8000c78:	007a1200 	.word	0x007a1200
 8000c7c:	003d0900 	.word	0x003d0900

08000c80 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c80:	4a4d      	ldr	r2, [pc, #308]	; (8000db8 <HAL_RCC_ClockConfig+0x138>)
{
 8000c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c86:	6813      	ldr	r3, [r2, #0]
{
 8000c88:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	428b      	cmp	r3, r1
{
 8000c90:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c92:	d328      	bcc.n	8000ce6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c94:	682a      	ldr	r2, [r5, #0]
 8000c96:	0791      	lsls	r1, r2, #30
 8000c98:	d432      	bmi.n	8000d00 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c9a:	07d2      	lsls	r2, r2, #31
 8000c9c:	d438      	bmi.n	8000d10 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c9e:	4a46      	ldr	r2, [pc, #280]	; (8000db8 <HAL_RCC_ClockConfig+0x138>)
 8000ca0:	6813      	ldr	r3, [r2, #0]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	d373      	bcc.n	8000d92 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000caa:	682a      	ldr	r2, [r5, #0]
 8000cac:	4c43      	ldr	r4, [pc, #268]	; (8000dbc <HAL_RCC_ClockConfig+0x13c>)
 8000cae:	f012 0f04 	tst.w	r2, #4
 8000cb2:	d179      	bne.n	8000da8 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cb4:	0713      	lsls	r3, r2, #28
 8000cb6:	d506      	bpl.n	8000cc6 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000cb8:	6863      	ldr	r3, [r4, #4]
 8000cba:	692a      	ldr	r2, [r5, #16]
 8000cbc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000cc0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000cc4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cc6:	f7ff ff9f 	bl	8000c08 <HAL_RCC_GetSysClockFreq>
 8000cca:	6863      	ldr	r3, [r4, #4]
 8000ccc:	4a3c      	ldr	r2, [pc, #240]	; (8000dc0 <HAL_RCC_ClockConfig+0x140>)
 8000cce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	40d8      	lsrs	r0, r3
 8000cd6:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <HAL_RCC_ClockConfig+0x144>)
 8000cd8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff fa36 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000ce0:	2000      	movs	r0, #0
}
 8000ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce6:	6813      	ldr	r3, [r2, #0]
 8000ce8:	f023 0307 	bic.w	r3, r3, #7
 8000cec:	430b      	orrs	r3, r1
 8000cee:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000cf0:	6813      	ldr	r3, [r2, #0]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d0cc      	beq.n	8000c94 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d00:	492e      	ldr	r1, [pc, #184]	; (8000dbc <HAL_RCC_ClockConfig+0x13c>)
 8000d02:	68a8      	ldr	r0, [r5, #8]
 8000d04:	684b      	ldr	r3, [r1, #4]
 8000d06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d0a:	4303      	orrs	r3, r0
 8000d0c:	604b      	str	r3, [r1, #4]
 8000d0e:	e7c4      	b.n	8000c9a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d10:	686a      	ldr	r2, [r5, #4]
 8000d12:	4c2a      	ldr	r4, [pc, #168]	; (8000dbc <HAL_RCC_ClockConfig+0x13c>)
 8000d14:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d16:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d18:	d11c      	bne.n	8000d54 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1e:	d0ec      	beq.n	8000cfa <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d20:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d22:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d26:	f023 0303 	bic.w	r3, r3, #3
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000d2e:	f7ff fa4f 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d32:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000d34:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d114      	bne.n	8000d64 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d3a:	6863      	ldr	r3, [r4, #4]
 8000d3c:	f003 030c 	and.w	r3, r3, #12
 8000d40:	2b04      	cmp	r3, #4
 8000d42:	d0ac      	beq.n	8000c9e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d44:	f7ff fa44 	bl	80001d0 <HAL_GetTick>
 8000d48:	1bc0      	subs	r0, r0, r7
 8000d4a:	4540      	cmp	r0, r8
 8000d4c:	d9f5      	bls.n	8000d3a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000d4e:	2003      	movs	r0, #3
 8000d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d54:	2a02      	cmp	r2, #2
 8000d56:	d102      	bne.n	8000d5e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d58:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d5c:	e7df      	b.n	8000d1e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5e:	f013 0f02 	tst.w	r3, #2
 8000d62:	e7dc      	b.n	8000d1e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d10f      	bne.n	8000d88 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d68:	6863      	ldr	r3, [r4, #4]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b08      	cmp	r3, #8
 8000d70:	d095      	beq.n	8000c9e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d72:	f7ff fa2d 	bl	80001d0 <HAL_GetTick>
 8000d76:	1bc0      	subs	r0, r0, r7
 8000d78:	4540      	cmp	r0, r8
 8000d7a:	d9f5      	bls.n	8000d68 <HAL_RCC_ClockConfig+0xe8>
 8000d7c:	e7e7      	b.n	8000d4e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d7e:	f7ff fa27 	bl	80001d0 <HAL_GetTick>
 8000d82:	1bc0      	subs	r0, r0, r7
 8000d84:	4540      	cmp	r0, r8
 8000d86:	d8e2      	bhi.n	8000d4e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d88:	6863      	ldr	r3, [r4, #4]
 8000d8a:	f013 0f0c 	tst.w	r3, #12
 8000d8e:	d1f6      	bne.n	8000d7e <HAL_RCC_ClockConfig+0xfe>
 8000d90:	e785      	b.n	8000c9e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d92:	6813      	ldr	r3, [r2, #0]
 8000d94:	f023 0307 	bic.w	r3, r3, #7
 8000d98:	4333      	orrs	r3, r6
 8000d9a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d9c:	6813      	ldr	r3, [r2, #0]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d1a9      	bne.n	8000cfa <HAL_RCC_ClockConfig+0x7a>
 8000da6:	e780      	b.n	8000caa <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000da8:	6863      	ldr	r3, [r4, #4]
 8000daa:	68e9      	ldr	r1, [r5, #12]
 8000dac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000db0:	430b      	orrs	r3, r1
 8000db2:	6063      	str	r3, [r4, #4]
 8000db4:	e77e      	b.n	8000cb4 <HAL_RCC_ClockConfig+0x34>
 8000db6:	bf00      	nop
 8000db8:	40022000 	.word	0x40022000
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	080015b7 	.word	0x080015b7
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <HAL_RCC_GetHCLKFreq>:
}
 8000dc8:	4b01      	ldr	r3, [pc, #4]	; (8000dd0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000dca:	6818      	ldr	r0, [r3, #0]
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000dde:	5cd3      	ldrb	r3, [r2, r3]
 8000de0:	4a03      	ldr	r2, [pc, #12]	; (8000df0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000de2:	6810      	ldr	r0, [r2, #0]
}    
 8000de4:	40d8      	lsrs	r0, r3
 8000de6:	4770      	bx	lr
 8000de8:	40021000 	.word	0x40021000
 8000dec:	080015c7 	.word	0x080015c7
 8000df0:	20000008 	.word	0x20000008

08000df4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000dfe:	5cd3      	ldrb	r3, [r2, r3]
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e02:	6810      	ldr	r0, [r2, #0]
} 
 8000e04:	40d8      	lsrs	r0, r3
 8000e06:	4770      	bx	lr
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	080015c7 	.word	0x080015c7
 8000e10:	20000008 	.word	0x20000008

08000e14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000e14:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8000e16:	4604      	mov	r4, r0
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	d034      	beq.n	8000e86 <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8000e20:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000e24:	b90b      	cbnz	r3, 8000e2a <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000e26:	f000 fac9 	bl	80013bc <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e2a:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000e2c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000e2e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000e32:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e34:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e3a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000e3c:	6863      	ldr	r3, [r4, #4]
 8000e3e:	69a2      	ldr	r2, [r4, #24]
 8000e40:	4303      	orrs	r3, r0
 8000e42:	68e0      	ldr	r0, [r4, #12]
 8000e44:	4303      	orrs	r3, r0
 8000e46:	6920      	ldr	r0, [r4, #16]
 8000e48:	4303      	orrs	r3, r0
 8000e4a:	6960      	ldr	r0, [r4, #20]
 8000e4c:	4303      	orrs	r3, r0
 8000e4e:	69e0      	ldr	r0, [r4, #28]
 8000e50:	4303      	orrs	r3, r0
 8000e52:	6a20      	ldr	r0, [r4, #32]
 8000e54:	4303      	orrs	r3, r0
 8000e56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000e58:	4303      	orrs	r3, r0
 8000e5a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000e5e:	4303      	orrs	r3, r0
 8000e60:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e62:	0c12      	lsrs	r2, r2, #16
 8000e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e66:	f002 0204 	and.w	r2, r2, #4
 8000e6a:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000e6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000e6e:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8000e70:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e72:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e74:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e7a:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 8000e7c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000e7e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8000e80:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8000e84:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e86:	2001      	movs	r0, #1
}
 8000e88:	bd10      	pop	{r4, pc}
	...

08000e8c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e90:	6805      	ldr	r5, [r0, #0]
 8000e92:	68c2      	ldr	r2, [r0, #12]
 8000e94:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000e96:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ea0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000ea2:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000ea8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000eac:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000eb0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000eb6:	696b      	ldr	r3, [r5, #20]
 8000eb8:	6982      	ldr	r2, [r0, #24]
 8000eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000ec2:	4b40      	ldr	r3, [pc, #256]	; (8000fc4 <UART_SetConfig+0x138>)
{
 8000ec4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000ec6:	429d      	cmp	r5, r3
 8000ec8:	f04f 0419 	mov.w	r4, #25
 8000ecc:	d146      	bne.n	8000f5c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ece:	f7ff ff91 	bl	8000df4 <HAL_RCC_GetPCLK2Freq>
 8000ed2:	fb04 f300 	mul.w	r3, r4, r0
 8000ed6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000eda:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000ede:	00b6      	lsls	r6, r6, #2
 8000ee0:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ee4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ee8:	011e      	lsls	r6, r3, #4
 8000eea:	f7ff ff83 	bl	8000df4 <HAL_RCC_GetPCLK2Freq>
 8000eee:	4360      	muls	r0, r4
 8000ef0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	fbb0 f7f3 	udiv	r7, r0, r3
 8000efa:	f7ff ff7b 	bl	8000df4 <HAL_RCC_GetPCLK2Freq>
 8000efe:	4360      	muls	r0, r4
 8000f00:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f0a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f0e:	fb08 7313 	mls	r3, r8, r3, r7
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	3332      	adds	r3, #50	; 0x32
 8000f16:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f1a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000f1e:	f7ff ff69 	bl	8000df4 <HAL_RCC_GetPCLK2Freq>
 8000f22:	4360      	muls	r0, r4
 8000f24:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	fbb0 faf2 	udiv	sl, r0, r2
 8000f2e:	f7ff ff61 	bl	8000df4 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000f32:	4360      	muls	r0, r4
 8000f34:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f3e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f42:	fb08 a313 	mls	r3, r8, r3, sl
 8000f46:	011b      	lsls	r3, r3, #4
 8000f48:	3332      	adds	r3, #50	; 0x32
 8000f4a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	433b      	orrs	r3, r7
 8000f54:	4433      	add	r3, r6
 8000f56:	60ab      	str	r3, [r5, #8]
 8000f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5c:	f7ff ff3a 	bl	8000dd4 <HAL_RCC_GetPCLK1Freq>
 8000f60:	fb04 f300 	mul.w	r3, r4, r0
 8000f64:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000f68:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000f6c:	00b6      	lsls	r6, r6, #2
 8000f6e:	fbb3 f3f6 	udiv	r3, r3, r6
 8000f72:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f76:	011e      	lsls	r6, r3, #4
 8000f78:	f7ff ff2c 	bl	8000dd4 <HAL_RCC_GetPCLK1Freq>
 8000f7c:	4360      	muls	r0, r4
 8000f7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f88:	f7ff ff24 	bl	8000dd4 <HAL_RCC_GetPCLK1Freq>
 8000f8c:	4360      	muls	r0, r4
 8000f8e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f98:	fbb3 f3f8 	udiv	r3, r3, r8
 8000f9c:	fb08 7313 	mls	r3, r8, r3, r7
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	3332      	adds	r3, #50	; 0x32
 8000fa4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000fa8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000fac:	f7ff ff12 	bl	8000dd4 <HAL_RCC_GetPCLK1Freq>
 8000fb0:	4360      	muls	r0, r4
 8000fb2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	fbb0 faf2 	udiv	sl, r0, r2
 8000fbc:	f7ff ff0a 	bl	8000dd4 <HAL_RCC_GetPCLK1Freq>
 8000fc0:	e7b7      	b.n	8000f32 <UART_SetConfig+0xa6>
 8000fc2:	bf00      	nop
 8000fc4:	40013800 	.word	0x40013800

08000fc8 <HAL_UART_Init>:
{
 8000fc8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000fca:	4604      	mov	r4, r0
 8000fcc:	b340      	cbz	r0, 8001020 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000fce:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fd6:	b91b      	cbnz	r3, 8000fe0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000fd8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000fdc:	f000 fa18 	bl	8001410 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000fe0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000fe2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000fe4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000fe8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000fea:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ff0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000ff2:	f7ff ff4b 	bl	8000e8c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ff6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ff8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001002:	695a      	ldr	r2, [r3, #20]
 8001004:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001008:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001010:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001012:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001014:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001016:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800101a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800101e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001020:	2001      	movs	r0, #1
}
 8001022:	bd10      	pop	{r4, pc}

08001024 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x40 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001024:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001026:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((cmd<<4)&0xf0);
 800102a:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800102c:	f043 020c 	orr.w	r2, r3, #12
	data_l = ((cmd<<4)&0xf0);
 8001030:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001032:	f043 0308 	orr.w	r3, r3, #8
 8001036:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800103a:	f040 030c 	orr.w	r3, r0, #12
 800103e:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x08;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001042:	2364      	movs	r3, #100	; 0x64
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001044:	f040 0008 	orr.w	r0, r0, #8
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001048:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800104c:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	aa03      	add	r2, sp, #12
 8001054:	2304      	movs	r3, #4
 8001056:	2140      	movs	r1, #64	; 0x40
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <lcd_send_cmd+0x48>)
 800105a:	f7ff fb73 	bl	8000744 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 800105e:	2002      	movs	r0, #2
 8001060:	f7ff f8bc 	bl	80001dc <HAL_Delay>
}
 8001064:	b005      	add	sp, #20
 8001066:	f85d fb04 	ldr.w	pc, [sp], #4
 800106a:	bf00      	nop
 800106c:	2000002c 	.word	0x2000002c

08001070 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001072:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
	data_l = ((data<<4)&0xf0);
 8001076:	0100      	lsls	r0, r0, #4
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001078:	f043 020d 	orr.w	r2, r3, #13
	data_l = ((data<<4)&0xf0);
 800107c:	b2c0      	uxtb	r0, r0
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800107e:	f043 0309 	orr.w	r3, r3, #9
 8001082:	f88d 300d 	strb.w	r3, [sp, #13]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001086:	f040 030d 	orr.w	r3, r0, #13
 800108a:	f88d 300e 	strb.w	r3, [sp, #14]
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800108e:	2364      	movs	r3, #100	; 0x64
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001090:	f040 0009 	orr.w	r0, r0, #9
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001094:	f88d 200c 	strb.w	r2, [sp, #12]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001098:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	aa03      	add	r2, sp, #12
 80010a0:	2304      	movs	r3, #4
 80010a2:	2140      	movs	r1, #64	; 0x40
 80010a4:	4804      	ldr	r0, [pc, #16]	; (80010b8 <lcd_send_data+0x48>)
 80010a6:	f7ff fb4d 	bl	8000744 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80010aa:	2002      	movs	r0, #2
 80010ac:	f7ff f896 	bl	80001dc <HAL_Delay>
}
 80010b0:	b005      	add	sp, #20
 80010b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010b6:	bf00      	nop
 80010b8:	2000002c 	.word	0x2000002c

080010bc <lcd_init>:

void lcd_init (void)
{
 80010bc:	b508      	push	{r3, lr}
	lcd_send_cmd (0x02);
 80010be:	2002      	movs	r0, #2
 80010c0:	f7ff ffb0 	bl	8001024 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80010c4:	2028      	movs	r0, #40	; 0x28
 80010c6:	f7ff ffad 	bl	8001024 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80010ca:	200c      	movs	r0, #12
 80010cc:	f7ff ffaa 	bl	8001024 <lcd_send_cmd>
	lcd_send_cmd (0x80);
}
 80010d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lcd_send_cmd (0x80);
 80010d4:	2080      	movs	r0, #128	; 0x80
 80010d6:	f7ff bfa5 	b.w	8001024 <lcd_send_cmd>

080010da <lcd_send_string>:

void lcd_send_string (char *str)
{
 80010da:	b510      	push	{r4, lr}
 80010dc:	1e44      	subs	r4, r0, #1
	while (*str) lcd_send_data (*str++);
 80010de:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80010e2:	b900      	cbnz	r0, 80010e6 <lcd_send_string+0xc>
}
 80010e4:	bd10      	pop	{r4, pc}
	while (*str) lcd_send_data (*str++);
 80010e6:	f7ff ffc3 	bl	8001070 <lcd_send_data>
 80010ea:	e7f8      	b.n	80010de <lcd_send_string+0x4>

080010ec <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ec:	2302      	movs	r3, #2
{
 80010ee:	b510      	push	{r4, lr}
 80010f0:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f2:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	2301      	movs	r3, #1
 80010f6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80010f8:	2310      	movs	r3, #16
 80010fa:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010fc:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fe:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001100:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001102:	f7ff fbf5 	bl	80008f0 <HAL_RCC_OscConfig>
 8001106:	4601      	mov	r1, r0
 8001108:	b100      	cbz	r0, 800110c <SystemClock_Config+0x20>
 800110a:	e7fe      	b.n	800110a <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110c:	230f      	movs	r3, #15
 800110e:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001110:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001114:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001118:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800111a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800111c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800111e:	f7ff fdaf 	bl	8000c80 <HAL_RCC_ClockConfig>
 8001122:	4604      	mov	r4, r0
 8001124:	b100      	cbz	r0, 8001128 <SystemClock_Config+0x3c>
 8001126:	e7fe      	b.n	8001126 <SystemClock_Config+0x3a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001128:	f7ff fe4e 	bl	8000dc8 <HAL_RCC_GetHCLKFreq>
 800112c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001130:	fbb0 f0f3 	udiv	r0, r0, r3
 8001134:	f7ff f8aa 	bl	800028c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001138:	2004      	movs	r0, #4
 800113a:	f7ff f8bd 	bl	80002b8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800113e:	4622      	mov	r2, r4
 8001140:	4621      	mov	r1, r4
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	f7ff f86d 	bl	8000224 <HAL_NVIC_SetPriority>
}
 800114a:	b010      	add	sp, #64	; 0x40
 800114c:	bd10      	pop	{r4, pc}
	...

08001150 <main>:
{
 8001150:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 8001152:	f7ff f81f 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001156:	f7ff ffc9 	bl	80010ec <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b56      	ldr	r3, [pc, #344]	; (80012b4 <main+0x164>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 800115c:	f649 0180 	movw	r1, #39040	; 0x9880
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 8001162:	4855      	ldr	r0, [pc, #340]	; (80012b8 <main+0x168>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	f042 0204 	orr.w	r2, r2, #4
 8001168:	619a      	str	r2, [r3, #24]
 800116a:	699a      	ldr	r2, [r3, #24]
                          |EN_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS1_Pin D7_Pin D6_Pin D5_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|D7_Pin|D6_Pin|D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2402      	movs	r4, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	f002 0204 	and.w	r2, r2, #4
 8001172:	9200      	str	r2, [sp, #0]
 8001174:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	f042 0208 	orr.w	r2, r2, #8
 800117e:	619a      	str	r2, [r3, #24]
 8001180:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 800118c:	f7ff f986 	bl	800049c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|D4_Pin 
 8001190:	2200      	movs	r2, #0
 8001192:	f640 013b 	movw	r1, #2107	; 0x83b
 8001196:	4849      	ldr	r0, [pc, #292]	; (80012bc <main+0x16c>)
 8001198:	f7ff f980 	bl	800049c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CS1_Pin|D7_Pin|D6_Pin|D5_Pin;
 800119c:	f649 0380 	movw	r3, #39040	; 0x9880
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	a902      	add	r1, sp, #8
 80011a2:	4845      	ldr	r0, [pc, #276]	; (80012b8 <main+0x168>)
  GPIO_InitStruct.Pin = CS1_Pin|D7_Pin|D6_Pin|D5_Pin;
 80011a4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f7ff f897 	bl	80002dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin LD3_Pin D4_Pin 
                           EN_Pin RS_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|D4_Pin 
 80011ae:	f640 033b 	movw	r3, #2107	; 0x83b
                          |EN_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	a902      	add	r1, sp, #8
 80011b4:	4841      	ldr	r0, [pc, #260]	; (80012bc <main+0x16c>)
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|D4_Pin 
 80011b6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	9503      	str	r5, [sp, #12]

  /*Configure GPIO pins : S3_Pin S2_Pin */
  GPIO_InitStruct.Pin = S3_Pin|S2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011bc:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f7ff f88d 	bl	80002dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = S3_Pin|S2_Pin;
 80011c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	a902      	add	r1, sp, #8
 80011c8:	483c      	ldr	r0, [pc, #240]	; (80012bc <main+0x16c>)
  GPIO_InitStruct.Pin = S3_Pin|S2_Pin;
 80011ca:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f7ff f884 	bl	80002dc <HAL_GPIO_Init>

  /*Configure GPIO pin : S1_Pin */
  GPIO_InitStruct.Pin = S1_Pin;
 80011d4:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 80011d8:	4837      	ldr	r0, [pc, #220]	; (80012b8 <main+0x168>)
 80011da:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = S1_Pin;
 80011dc:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011de:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f7ff f87b 	bl	80002dc <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80011e6:	4836      	ldr	r0, [pc, #216]	; (80012c0 <main+0x170>)
  hi2c1.Init.ClockSpeed = 100000;
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <main+0x174>)
 80011ea:	f8df e0fc 	ldr.w	lr, [pc, #252]	; 80012e8 <main+0x198>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011ee:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80011f0:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80011f8:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011fa:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fc:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011fe:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001200:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001202:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001204:	f7ff fa1e 	bl	8000644 <HAL_I2C_Init>
 8001208:	b100      	cbz	r0, 800120c <main+0xbc>
 800120a:	e7fe      	b.n	800120a <main+0xba>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800120c:	f44f 7482 	mov.w	r4, #260	; 0x104
 8001210:	f44f 6680 	mov.w	r6, #1024	; 0x400
  hspi1.Instance = SPI1;
 8001214:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <main+0x178>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001216:	4a2d      	ldr	r2, [pc, #180]	; (80012cc <main+0x17c>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001218:	60d8      	str	r0, [r3, #12]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800121a:	e883 0054 	stmia.w	r3, {r2, r4, r6}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800121e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001222:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001224:	2218      	movs	r2, #24
 8001226:	61da      	str	r2, [r3, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001228:	220a      	movs	r2, #10
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800122a:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122c:	6158      	str	r0, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800122e:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001230:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001232:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001234:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001238:	f7ff fdec 	bl	8000e14 <HAL_SPI_Init>
 800123c:	b100      	cbz	r0, 8001240 <main+0xf0>
 800123e:	e7fe      	b.n	800123e <main+0xee>
  huart1.Init.BaudRate = 9600;
 8001240:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart1.Instance = USART1;
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <main+0x180>)
  huart1.Init.BaudRate = 9600;
 8001246:	4923      	ldr	r1, [pc, #140]	; (80012d4 <main+0x184>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001248:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 9600;
 800124a:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 800124e:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001250:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001252:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001254:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001256:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001258:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 800125a:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800125c:	f7ff feb4 	bl	8000fc8 <HAL_UART_Init>
 8001260:	b100      	cbz	r0, 8001264 <main+0x114>
 8001262:	e7fe      	b.n	8001262 <main+0x112>
  lcd_init();
 8001264:	f7ff ff2a 	bl	80010bc <lcd_init>
  lcd_send_cmd (0x01);
 8001268:	4628      	mov	r0, r5
 800126a:	f7ff fedb 	bl	8001024 <lcd_send_cmd>
  lcd_send_cmd (0x86);
 800126e:	2086      	movs	r0, #134	; 0x86
 8001270:	f7ff fed8 	bl	8001024 <lcd_send_cmd>
  lcd_send_string ("DSF");
 8001274:	4818      	ldr	r0, [pc, #96]	; (80012d8 <main+0x188>)
 8001276:	f7ff ff30 	bl	80010da <lcd_send_string>
  lcd_send_cmd (0xC2);
 800127a:	20c2      	movs	r0, #194	; 0xc2
 800127c:	f7ff fed2 	bl	8001024 <lcd_send_cmd>
  lcd_send_string ("LNNANO 2018");
 8001280:	4816      	ldr	r0, [pc, #88]	; (80012dc <main+0x18c>)
 8001282:	f7ff ff2a 	bl	80010da <lcd_send_string>
  HAL_Delay(2000);
 8001286:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800128a:	f7fe ffa7 	bl	80001dc <HAL_Delay>
  lcd_send_cmd (0x01);
 800128e:	4628      	mov	r0, r5
 8001290:	f7ff fec8 	bl	8001024 <lcd_send_cmd>
	  lcd_send_string ("LCD 16x2 I2C");
 8001294:	4d12      	ldr	r5, [pc, #72]	; (80012e0 <main+0x190>)
	  lcd_send_string ("Working!!");
 8001296:	4c13      	ldr	r4, [pc, #76]	; (80012e4 <main+0x194>)
	  lcd_send_cmd (0x80);
 8001298:	2080      	movs	r0, #128	; 0x80
 800129a:	f7ff fec3 	bl	8001024 <lcd_send_cmd>
	  lcd_send_string ("LCD 16x2 I2C");
 800129e:	4628      	mov	r0, r5
 80012a0:	f7ff ff1b 	bl	80010da <lcd_send_string>
	  lcd_send_cmd (0xC0);
 80012a4:	20c0      	movs	r0, #192	; 0xc0
 80012a6:	f7ff febd 	bl	8001024 <lcd_send_cmd>
	  lcd_send_string ("Working!!");
 80012aa:	4620      	mov	r0, r4
 80012ac:	f7ff ff15 	bl	80010da <lcd_send_string>
 80012b0:	e7f2      	b.n	8001298 <main+0x148>
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010800 	.word	0x40010800
 80012bc:	40010c00 	.word	0x40010c00
 80012c0:	2000002c 	.word	0x2000002c
 80012c4:	40005400 	.word	0x40005400
 80012c8:	200000c0 	.word	0x200000c0
 80012cc:	40013000 	.word	0x40013000
 80012d0:	20000080 	.word	0x20000080
 80012d4:	40013800 	.word	0x40013800
 80012d8:	08001590 	.word	0x08001590
 80012dc:	08001594 	.word	0x08001594
 80012e0:	080015a0 	.word	0x080015a0
 80012e4:	080015ad 	.word	0x080015ad
 80012e8:	000186a0 	.word	0x000186a0

080012ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012ec:	4b20      	ldr	r3, [pc, #128]	; (8001370 <HAL_MspInit+0x84>)
{
 80012ee:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012f0:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f2:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012f4:	f042 0201 	orr.w	r2, r2, #1
 80012f8:	619a      	str	r2, [r3, #24]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001304:	f7fe ff7c 	bl	8000200 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	f06f 000b 	mvn.w	r0, #11
 800130e:	4611      	mov	r1, r2
 8001310:	f7fe ff88 	bl	8000224 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	f06f 000a 	mvn.w	r0, #10
 800131a:	4611      	mov	r1, r2
 800131c:	f7fe ff82 	bl	8000224 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	f06f 0009 	mvn.w	r0, #9
 8001326:	4611      	mov	r1, r2
 8001328:	f7fe ff7c 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	f06f 0004 	mvn.w	r0, #4
 8001332:	4611      	mov	r1, r2
 8001334:	f7fe ff76 	bl	8000224 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	f06f 0003 	mvn.w	r0, #3
 800133e:	4611      	mov	r1, r2
 8001340:	f7fe ff70 	bl	8000224 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	f06f 0001 	mvn.w	r0, #1
 800134a:	4611      	mov	r1, r2
 800134c:	f7fe ff6a 	bl	8000224 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	f04f 30ff 	mov.w	r0, #4294967295
 8001356:	4611      	mov	r1, r2
 8001358:	f7fe ff64 	bl	8000224 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800135c:	4a05      	ldr	r2, [pc, #20]	; (8001374 <HAL_MspInit+0x88>)
 800135e:	6853      	ldr	r3, [r2, #4]
 8001360:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001368:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136a:	b003      	add	sp, #12
 800136c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000

08001378 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001378:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800137a:	6802      	ldr	r2, [r0, #0]
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <HAL_I2C_MspInit+0x38>)
 800137e:	429a      	cmp	r2, r3
 8001380:	d113      	bne.n	80013aa <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001382:	23c0      	movs	r3, #192	; 0xc0
 8001384:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001386:	2312      	movs	r3, #18
 8001388:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800138a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138c:	a902      	add	r1, sp, #8
 800138e:	4809      	ldr	r0, [pc, #36]	; (80013b4 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001390:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	f7fe ffa3 	bl	80002dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_I2C_MspInit+0x40>)
 8001398:	69da      	ldr	r2, [r3, #28]
 800139a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800139e:	61da      	str	r2, [r3, #28]
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013aa:	b007      	add	sp, #28
 80013ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80013b0:	40005400 	.word	0x40005400
 80013b4:	40010c00 	.word	0x40010c00
 80013b8:	40021000 	.word	0x40021000

080013bc <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80013be:	6802      	ldr	r2, [r0, #0]
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <HAL_SPI_MspInit+0x4c>)
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d11d      	bne.n	8001402 <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013c6:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80013ca:	699a      	ldr	r2, [r3, #24]
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80013d2:	619a      	str	r2, [r3, #24]
 80013d4:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	480d      	ldr	r0, [pc, #52]	; (800140c <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013e0:	2320      	movs	r3, #32
 80013e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f7fe ff76 	bl	80002dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f0:	2340      	movs	r3, #64	; 0x40
 80013f2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	a902      	add	r1, sp, #8
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f7fe ff6d 	bl	80002dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001402:	b007      	add	sp, #28
 8001404:	f85d fb04 	ldr.w	pc, [sp], #4
 8001408:	40013000 	.word	0x40013000
 800140c:	40010800 	.word	0x40010800

08001410 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001410:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001412:	6802      	ldr	r2, [r0, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_UART_MspInit+0x50>)
 8001416:	429a      	cmp	r2, r3
 8001418:	d11f      	bne.n	800145a <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800141a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800141e:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001426:	619a      	str	r2, [r3, #24]
 8001428:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	480e      	ldr	r0, [pc, #56]	; (8001464 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800142c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001438:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f7fe ff4b 	bl	80002dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800144c:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	a902      	add	r1, sp, #8
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001452:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001456:	f7fe ff41 	bl	80002dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800145a:	b007      	add	sp, #28
 800145c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001460:	40013800 	.word	0x40013800
 8001464:	40010800 	.word	0x40010800

08001468 <NMI_Handler>:
 8001468:	4770      	bx	lr

0800146a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800146a:	e7fe      	b.n	800146a <HardFault_Handler>

0800146c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800146c:	e7fe      	b.n	800146c <MemManage_Handler>

0800146e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800146e:	e7fe      	b.n	800146e <BusFault_Handler>

08001470 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001470:	e7fe      	b.n	8001470 <UsageFault_Handler>

08001472 <SVC_Handler>:
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:
 8001474:	4770      	bx	lr

08001476 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001476:	4770      	bx	lr

08001478 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001478:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147a:	f7fe fe9d 	bl	80001b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001482:	f7fe bf26 	b.w	80002d2 <HAL_SYSTICK_IRQHandler>
	...

08001488 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <SystemInit+0x40>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	f042 0201 	orr.w	r2, r2, #1
 8001490:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001492:	6859      	ldr	r1, [r3, #4]
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <SystemInit+0x44>)
 8001496:	400a      	ands	r2, r1
 8001498:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80014a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80014a4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014ac:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80014b4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80014b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80014ba:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <SystemInit+0x48>)
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000
 80014cc:	f8ff0000 	.word	0xf8ff0000
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014d6:	e003      	b.n	80014e0 <LoopCopyDataInit>

080014d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80014da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014de:	3104      	adds	r1, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014e0:	480a      	ldr	r0, [pc, #40]	; (800150c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80014e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014e8:	d3f6      	bcc.n	80014d8 <CopyDataInit>
  ldr r2, =_sbss
 80014ea:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014ec:	e002      	b.n	80014f4 <LoopFillZerobss>

080014ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014f0:	f842 3b04 	str.w	r3, [r2], #4

080014f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014f8:	d3f9      	bcc.n	80014ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014fa:	f7ff ffc5 	bl	8001488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f000 f80f 	bl	8001520 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001502:	f7ff fe25 	bl	8001150 <main>
  bx lr
 8001506:	4770      	bx	lr
  ldr r3, =_sidata
 8001508:	080015d8 	.word	0x080015d8
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001510:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001514:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001518:	20000118 	.word	0x20000118

0800151c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800151c:	e7fe      	b.n	800151c <ADC1_2_IRQHandler>
	...

08001520 <__libc_init_array>:
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	2500      	movs	r5, #0
 8001524:	4e0c      	ldr	r6, [pc, #48]	; (8001558 <__libc_init_array+0x38>)
 8001526:	4c0d      	ldr	r4, [pc, #52]	; (800155c <__libc_init_array+0x3c>)
 8001528:	1ba4      	subs	r4, r4, r6
 800152a:	10a4      	asrs	r4, r4, #2
 800152c:	42a5      	cmp	r5, r4
 800152e:	d109      	bne.n	8001544 <__libc_init_array+0x24>
 8001530:	f000 f81a 	bl	8001568 <_init>
 8001534:	2500      	movs	r5, #0
 8001536:	4e0a      	ldr	r6, [pc, #40]	; (8001560 <__libc_init_array+0x40>)
 8001538:	4c0a      	ldr	r4, [pc, #40]	; (8001564 <__libc_init_array+0x44>)
 800153a:	1ba4      	subs	r4, r4, r6
 800153c:	10a4      	asrs	r4, r4, #2
 800153e:	42a5      	cmp	r5, r4
 8001540:	d105      	bne.n	800154e <__libc_init_array+0x2e>
 8001542:	bd70      	pop	{r4, r5, r6, pc}
 8001544:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001548:	4798      	blx	r3
 800154a:	3501      	adds	r5, #1
 800154c:	e7ee      	b.n	800152c <__libc_init_array+0xc>
 800154e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001552:	4798      	blx	r3
 8001554:	3501      	adds	r5, #1
 8001556:	e7f2      	b.n	800153e <__libc_init_array+0x1e>
 8001558:	080015d0 	.word	0x080015d0
 800155c:	080015d0 	.word	0x080015d0
 8001560:	080015d0 	.word	0x080015d0
 8001564:	080015d4 	.word	0x080015d4

08001568 <_init>:
 8001568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156a:	bf00      	nop
 800156c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800156e:	bc08      	pop	{r3}
 8001570:	469e      	mov	lr, r3
 8001572:	4770      	bx	lr

08001574 <_fini>:
 8001574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001576:	bf00      	nop
 8001578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800157a:	bc08      	pop	{r3}
 800157c:	469e      	mov	lr, r3
 800157e:	4770      	bx	lr
