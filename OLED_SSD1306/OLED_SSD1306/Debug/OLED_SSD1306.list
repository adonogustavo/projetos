
OLED_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e5c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001098  08003f70  08003f70  00013f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005008  08005008  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800500c  0800500c  0001500c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  20000000  08005010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001f0  200001f4  08005204  000201f4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200003e4  08005204  000203e4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
  9 .debug_info   0003375c  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003a46  00000000  00000000  00053979  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a55b  00000000  00000000  000573bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c50  00000000  00000000  00061920  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001260  00000000  00000000  00062570  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006d38  00000000  00000000  000637d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007321  00000000  00000000  0006a508  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00071829  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b18  00000000  00000000  000718a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08003f54 	.word	0x08003f54

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08003f54 	.word	0x08003f54

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_InitTick+0x3c>)
{
 8000a84:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a86:	7818      	ldrb	r0, [r3, #0]
 8000a88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a90:	4a0b      	ldr	r2, [pc, #44]	; (8000ac0 <HAL_InitTick+0x40>)
 8000a92:	6810      	ldr	r0, [r2, #0]
 8000a94:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a98:	f000 f892 	bl	8000bc0 <HAL_SYSTICK_Config>
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	b958      	cbnz	r0, 8000ab8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa0:	2d0f      	cmp	r5, #15
 8000aa2:	d809      	bhi.n	8000ab8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	4629      	mov	r1, r5
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	f000 f854 	bl	8000b58 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <HAL_InitTick+0x44>)
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	601d      	str	r5, [r3, #0]
 8000ab6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ab8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000aba:	bd38      	pop	{r3, r4, r5, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <HAL_Init+0x20>)
{
 8000aca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000acc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ace:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	f043 0310 	orr.w	r3, r3, #16
 8000ad4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad6:	f000 f82d 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff ffd0 	bl	8000a80 <HAL_InitTick>
  HAL_MspInit();
 8000ae0:	f001 f83e 	bl	8001b60 <HAL_MspInit>
}
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	bd08      	pop	{r3, pc}
 8000ae8:	40022000 	.word	0x40022000

08000aec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000aec:	4a03      	ldr	r2, [pc, #12]	; (8000afc <HAL_IncTick+0x10>)
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <HAL_IncTick+0x14>)
 8000af0:	6811      	ldr	r1, [r2, #0]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	440b      	add	r3, r1
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200002dc 	.word	0x200002dc
 8000b00:	20000000 	.word	0x20000000

08000b04 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b04:	4b01      	ldr	r3, [pc, #4]	; (8000b0c <HAL_GetTick+0x8>)
 8000b06:	6818      	ldr	r0, [r3, #0]
}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	200002dc 	.word	0x200002dc

08000b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b10:	b538      	push	{r3, r4, r5, lr}
 8000b12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b14:	f7ff fff6 	bl	8000b04 <HAL_GetTick>
 8000b18:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1c:	bf1e      	ittt	ne
 8000b1e:	4b04      	ldrne	r3, [pc, #16]	; (8000b30 <HAL_Delay+0x20>)
 8000b20:	781b      	ldrbne	r3, [r3, #0]
 8000b22:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b24:	f7ff ffee 	bl	8000b04 <HAL_GetTick>
 8000b28:	1b40      	subs	r0, r0, r5
 8000b2a:	4284      	cmp	r4, r0
 8000b2c:	d8fa      	bhi.n	8000b24 <HAL_Delay+0x14>
  {
  }
}
 8000b2e:	bd38      	pop	{r3, r4, r5, pc}
 8000b30:	20000000 	.word	0x20000000

08000b34 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b34:	4a07      	ldr	r2, [pc, #28]	; (8000b54 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b36:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b3a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b42:	041b      	lsls	r3, r3, #16
 8000b44:	0c1b      	lsrs	r3, r3, #16
 8000b46:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b4e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b50:	60d3      	str	r3, [r2, #12]
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5a:	b530      	push	{r4, r5, lr}
 8000b5c:	68dc      	ldr	r4, [r3, #12]
 8000b5e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b62:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	bf28      	it	cs
 8000b6c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b6e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b74:	bf98      	it	ls
 8000b76:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	fa05 f303 	lsl.w	r3, r5, r3
 8000b7c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b80:	bf88      	it	hi
 8000b82:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4019      	ands	r1, r3
 8000b86:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b88:	fa05 f404 	lsl.w	r4, r5, r4
 8000b8c:	3c01      	subs	r4, #1
 8000b8e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b90:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b92:	ea42 0201 	orr.w	r2, r2, r1
 8000b96:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9a:	bfaf      	iteee	ge
 8000b9c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	4b06      	ldrlt	r3, [pc, #24]	; (8000bbc <HAL_NVIC_SetPriority+0x64>)
 8000ba2:	f000 000f 	andlt.w	r0, r0, #15
 8000ba6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	bfa5      	ittet	ge
 8000baa:	b2d2      	uxtbge	r2, r2
 8000bac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb2:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000bb6:	bd30      	pop	{r4, r5, pc}
 8000bb8:	e000ed00 	.word	0xe000ed00
 8000bbc:	e000ed14 	.word	0xe000ed14

08000bc0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	3801      	subs	r0, #1
 8000bc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bc6:	d20a      	bcs.n	8000bde <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc8:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e010 	.word	0xe000e010
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000bee:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	bf0c      	ite	eq
 8000bf4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000bf8:	f022 0204 	bicne.w	r2, r2, #4
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	4770      	bx	lr
 8000c00:	e000e010 	.word	0xe000e010

08000c04 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000c04:	4770      	bx	lr

08000c06 <HAL_SYSTICK_IRQHandler>:
{
 8000c06:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000c08:	f7ff fffc 	bl	8000c04 <HAL_SYSTICK_Callback>
 8000c0c:	bd08      	pop	{r3, pc}
	...

08000c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000c14:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000c16:	4616      	mov	r6, r2
 8000c18:	4b65      	ldr	r3, [pc, #404]	; (8000db0 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c1a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000dc0 <HAL_GPIO_Init+0x1b0>
 8000c1e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000dc4 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000c22:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000c28:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c2c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000c30:	45a0      	cmp	r8, r4
 8000c32:	d17f      	bne.n	8000d34 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000c34:	684d      	ldr	r5, [r1, #4]
 8000c36:	2d12      	cmp	r5, #18
 8000c38:	f000 80af 	beq.w	8000d9a <HAL_GPIO_Init+0x18a>
 8000c3c:	f200 8088 	bhi.w	8000d50 <HAL_GPIO_Init+0x140>
 8000c40:	2d02      	cmp	r5, #2
 8000c42:	f000 80a7 	beq.w	8000d94 <HAL_GPIO_Init+0x184>
 8000c46:	d87c      	bhi.n	8000d42 <HAL_GPIO_Init+0x132>
 8000c48:	2d00      	cmp	r5, #0
 8000c4a:	f000 808e 	beq.w	8000d6a <HAL_GPIO_Init+0x15a>
 8000c4e:	2d01      	cmp	r5, #1
 8000c50:	f000 809e 	beq.w	8000d90 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c54:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c58:	2cff      	cmp	r4, #255	; 0xff
 8000c5a:	bf93      	iteet	ls
 8000c5c:	4682      	movls	sl, r0
 8000c5e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000c62:	3d08      	subhi	r5, #8
 8000c64:	f8d0 b000 	ldrls.w	fp, [r0]
 8000c68:	bf92      	itee	ls
 8000c6a:	00b5      	lslls	r5, r6, #2
 8000c6c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000c70:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c72:	fa09 f805 	lsl.w	r8, r9, r5
 8000c76:	ea2b 0808 	bic.w	r8, fp, r8
 8000c7a:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c7e:	bf88      	it	hi
 8000c80:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c84:	ea48 0505 	orr.w	r5, r8, r5
 8000c88:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c8c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000c90:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000c94:	d04e      	beq.n	8000d34 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c96:	4d47      	ldr	r5, [pc, #284]	; (8000db4 <HAL_GPIO_Init+0x1a4>)
 8000c98:	4f46      	ldr	r7, [pc, #280]	; (8000db4 <HAL_GPIO_Init+0x1a4>)
 8000c9a:	69ad      	ldr	r5, [r5, #24]
 8000c9c:	f026 0803 	bic.w	r8, r6, #3
 8000ca0:	f045 0501 	orr.w	r5, r5, #1
 8000ca4:	61bd      	str	r5, [r7, #24]
 8000ca6:	69bd      	ldr	r5, [r7, #24]
 8000ca8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000cac:	f005 0501 	and.w	r5, r5, #1
 8000cb0:	9501      	str	r5, [sp, #4]
 8000cb2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000cb6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cba:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000cbc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000cc0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000cc4:	fa09 f90b 	lsl.w	r9, r9, fp
 8000cc8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ccc:	4d3a      	ldr	r5, [pc, #232]	; (8000db8 <HAL_GPIO_Init+0x1a8>)
 8000cce:	42a8      	cmp	r0, r5
 8000cd0:	d068      	beq.n	8000da4 <HAL_GPIO_Init+0x194>
 8000cd2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cd6:	42a8      	cmp	r0, r5
 8000cd8:	d066      	beq.n	8000da8 <HAL_GPIO_Init+0x198>
 8000cda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000cde:	42a8      	cmp	r0, r5
 8000ce0:	d064      	beq.n	8000dac <HAL_GPIO_Init+0x19c>
 8000ce2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ce6:	42a8      	cmp	r0, r5
 8000ce8:	bf0c      	ite	eq
 8000cea:	2503      	moveq	r5, #3
 8000cec:	2504      	movne	r5, #4
 8000cee:	fa05 f50b 	lsl.w	r5, r5, fp
 8000cf2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000cf6:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cfa:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cfc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000d00:	bf14      	ite	ne
 8000d02:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d04:	43a5      	biceq	r5, r4
 8000d06:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d08:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d0a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000d0e:	bf14      	ite	ne
 8000d10:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d12:	43a5      	biceq	r5, r4
 8000d14:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d16:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d18:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d1c:	bf14      	ite	ne
 8000d1e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d20:	43a5      	biceq	r5, r4
 8000d22:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d24:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d26:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d2a:	bf14      	ite	ne
 8000d2c:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d2e:	ea25 0404 	biceq.w	r4, r5, r4
 8000d32:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000d34:	3601      	adds	r6, #1
 8000d36:	2e10      	cmp	r6, #16
 8000d38:	f47f af73 	bne.w	8000c22 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000d3c:	b003      	add	sp, #12
 8000d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000d42:	2d03      	cmp	r5, #3
 8000d44:	d022      	beq.n	8000d8c <HAL_GPIO_Init+0x17c>
 8000d46:	2d11      	cmp	r5, #17
 8000d48:	d184      	bne.n	8000c54 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d4a:	68ca      	ldr	r2, [r1, #12]
 8000d4c:	3204      	adds	r2, #4
          break;
 8000d4e:	e781      	b.n	8000c54 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000d50:	4f1a      	ldr	r7, [pc, #104]	; (8000dbc <HAL_GPIO_Init+0x1ac>)
 8000d52:	42bd      	cmp	r5, r7
 8000d54:	d009      	beq.n	8000d6a <HAL_GPIO_Init+0x15a>
 8000d56:	d812      	bhi.n	8000d7e <HAL_GPIO_Init+0x16e>
 8000d58:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000dc8 <HAL_GPIO_Init+0x1b8>
 8000d5c:	454d      	cmp	r5, r9
 8000d5e:	d004      	beq.n	8000d6a <HAL_GPIO_Init+0x15a>
 8000d60:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000d64:	454d      	cmp	r5, r9
 8000d66:	f47f af75 	bne.w	8000c54 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d6a:	688a      	ldr	r2, [r1, #8]
 8000d6c:	b1c2      	cbz	r2, 8000da0 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d6e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000d70:	bf0c      	ite	eq
 8000d72:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000d76:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d7a:	2208      	movs	r2, #8
 8000d7c:	e76a      	b.n	8000c54 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000d7e:	4575      	cmp	r5, lr
 8000d80:	d0f3      	beq.n	8000d6a <HAL_GPIO_Init+0x15a>
 8000d82:	4565      	cmp	r5, ip
 8000d84:	d0f1      	beq.n	8000d6a <HAL_GPIO_Init+0x15a>
 8000d86:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000dcc <HAL_GPIO_Init+0x1bc>
 8000d8a:	e7eb      	b.n	8000d64 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	e761      	b.n	8000c54 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d90:	68ca      	ldr	r2, [r1, #12]
          break;
 8000d92:	e75f      	b.n	8000c54 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d94:	68ca      	ldr	r2, [r1, #12]
 8000d96:	3208      	adds	r2, #8
          break;
 8000d98:	e75c      	b.n	8000c54 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d9a:	68ca      	ldr	r2, [r1, #12]
 8000d9c:	320c      	adds	r2, #12
          break;
 8000d9e:	e759      	b.n	8000c54 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000da0:	2204      	movs	r2, #4
 8000da2:	e757      	b.n	8000c54 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000da4:	2500      	movs	r5, #0
 8000da6:	e7a2      	b.n	8000cee <HAL_GPIO_Init+0xde>
 8000da8:	2501      	movs	r5, #1
 8000daa:	e7a0      	b.n	8000cee <HAL_GPIO_Init+0xde>
 8000dac:	2502      	movs	r5, #2
 8000dae:	e79e      	b.n	8000cee <HAL_GPIO_Init+0xde>
 8000db0:	40010400 	.word	0x40010400
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	10210000 	.word	0x10210000
 8000dc0:	10310000 	.word	0x10310000
 8000dc4:	10320000 	.word	0x10320000
 8000dc8:	10110000 	.word	0x10110000
 8000dcc:	10220000 	.word	0x10220000

08000dd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dd0:	b10a      	cbz	r2, 8000dd6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000dd2:	6101      	str	r1, [r0, #16]
 8000dd4:	4770      	bx	lr
 8000dd6:	0409      	lsls	r1, r1, #16
 8000dd8:	e7fb      	b.n	8000dd2 <HAL_GPIO_WritePin+0x2>

08000dda <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000dda:	6802      	ldr	r2, [r0, #0]
 8000ddc:	6953      	ldr	r3, [r2, #20]
 8000dde:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000de2:	d00d      	beq.n	8000e00 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000de4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000de8:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000dea:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000dec:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000dee:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000df4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000df8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	4770      	bx	lr
  }
  return HAL_OK;
 8000e00:	4618      	mov	r0, r3
}
 8000e02:	4770      	bx	lr

08000e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e08:	4604      	mov	r4, r0
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000e0e:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000e12:	b28e      	uxth	r6, r1
 8000e14:	6825      	ldr	r5, [r4, #0]
 8000e16:	f1b8 0f01 	cmp.w	r8, #1
 8000e1a:	bf0c      	ite	eq
 8000e1c:	696b      	ldreq	r3, [r5, #20]
 8000e1e:	69ab      	ldrne	r3, [r5, #24]
 8000e20:	ea36 0303 	bics.w	r3, r6, r3
 8000e24:	bf14      	ite	ne
 8000e26:	2001      	movne	r0, #1
 8000e28:	2000      	moveq	r0, #0
 8000e2a:	b908      	cbnz	r0, 8000e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000e30:	696b      	ldr	r3, [r5, #20]
 8000e32:	055a      	lsls	r2, r3, #21
 8000e34:	d512      	bpl.n	8000e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e36:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000e38:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e3e:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e40:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000e44:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000e46:	2304      	movs	r3, #4
 8000e48:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000e4a:	2300      	movs	r3, #0
      return HAL_ERROR;
 8000e4c:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 8000e4e:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000e50:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000e54:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000e5c:	1c7b      	adds	r3, r7, #1
 8000e5e:	d0d9      	beq.n	8000e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e60:	b94f      	cbnz	r7, 8000e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e62:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000e64:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000e66:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000e68:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000e6c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000e70:	2003      	movs	r0, #3
 8000e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000e76:	f7ff fe45 	bl	8000b04 <HAL_GetTick>
 8000e7a:	eba0 0009 	sub.w	r0, r0, r9
 8000e7e:	4287      	cmp	r7, r0
 8000e80:	d2c8      	bcs.n	8000e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8000e82:	e7ee      	b.n	8000e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08000e84 <I2C_WaitOnFlagUntilTimeout>:
{
 8000e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e88:	4604      	mov	r4, r0
 8000e8a:	4690      	mov	r8, r2
 8000e8c:	461f      	mov	r7, r3
 8000e8e:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000e90:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000e94:	b28d      	uxth	r5, r1
 8000e96:	6823      	ldr	r3, [r4, #0]
 8000e98:	f1b9 0f01 	cmp.w	r9, #1
 8000e9c:	bf0c      	ite	eq
 8000e9e:	695b      	ldreq	r3, [r3, #20]
 8000ea0:	699b      	ldrne	r3, [r3, #24]
 8000ea2:	ea35 0303 	bics.w	r3, r5, r3
 8000ea6:	bf0c      	ite	eq
 8000ea8:	2301      	moveq	r3, #1
 8000eaa:	2300      	movne	r3, #0
 8000eac:	4543      	cmp	r3, r8
 8000eae:	d002      	beq.n	8000eb6 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000eb0:	2000      	movs	r0, #0
}
 8000eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000eb6:	1c7b      	adds	r3, r7, #1
 8000eb8:	d0ed      	beq.n	8000e96 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000eba:	b95f      	cbnz	r7, 8000ed4 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ebc:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000ebe:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000ec0:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000ec2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000ec6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000eca:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ecc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ed4:	f7ff fe16 	bl	8000b04 <HAL_GetTick>
 8000ed8:	1b80      	subs	r0, r0, r6
 8000eda:	4287      	cmp	r7, r0
 8000edc:	d2db      	bcs.n	8000e96 <I2C_WaitOnFlagUntilTimeout+0x12>
 8000ede:	e7ed      	b.n	8000ebc <I2C_WaitOnFlagUntilTimeout+0x38>

08000ee0 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000ee0:	b570      	push	{r4, r5, r6, lr}
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	460d      	mov	r5, r1
 8000ee6:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000ee8:	6823      	ldr	r3, [r4, #0]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	061b      	lsls	r3, r3, #24
 8000eee:	d501      	bpl.n	8000ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	f7ff ff70 	bl	8000dda <I2C_IsAcknowledgeFailed>
 8000efa:	b9a8      	cbnz	r0, 8000f28 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000efc:	1c6a      	adds	r2, r5, #1
 8000efe:	d0f3      	beq.n	8000ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f00:	b965      	cbnz	r5, 8000f1c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f02:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000f04:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f06:	f043 0320 	orr.w	r3, r3, #32
 8000f0a:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f0c:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000f0e:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f10:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000f12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000f16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000f1a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f1c:	f7ff fdf2 	bl	8000b04 <HAL_GetTick>
 8000f20:	1b80      	subs	r0, r0, r6
 8000f22:	4285      	cmp	r5, r0
 8000f24:	d2e0      	bcs.n	8000ee8 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000f26:	e7ec      	b.n	8000f02 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000f28:	2001      	movs	r0, #1
}
 8000f2a:	bd70      	pop	{r4, r5, r6, pc}

08000f2c <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8000f2c:	b570      	push	{r4, r5, r6, lr}
 8000f2e:	4604      	mov	r4, r0
 8000f30:	460d      	mov	r5, r1
 8000f32:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	075b      	lsls	r3, r3, #29
 8000f3a:	d501      	bpl.n	8000f40 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000f40:	4620      	mov	r0, r4
 8000f42:	f7ff ff4a 	bl	8000dda <I2C_IsAcknowledgeFailed>
 8000f46:	b9a8      	cbnz	r0, 8000f74 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000f48:	1c6a      	adds	r2, r5, #1
 8000f4a:	d0f3      	beq.n	8000f34 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f4c:	b965      	cbnz	r5, 8000f68 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000f50:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000f52:	f043 0320 	orr.w	r3, r3, #32
 8000f56:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f58:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 8000f5a:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f5c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000f5e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000f62:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000f66:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f68:	f7ff fdcc 	bl	8000b04 <HAL_GetTick>
 8000f6c:	1b80      	subs	r0, r0, r6
 8000f6e:	4285      	cmp	r5, r0
 8000f70:	d2e0      	bcs.n	8000f34 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8000f72:	e7ec      	b.n	8000f4e <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000f74:	2001      	movs	r0, #1
}
 8000f76:	bd70      	pop	{r4, r5, r6, pc}

08000f78 <HAL_I2C_Init>:
{
 8000f78:	b538      	push	{r3, r4, r5, lr}
  if(hi2c == NULL)
 8000f7a:	4604      	mov	r4, r0
 8000f7c:	b908      	cbnz	r0, 8000f82 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000f7e:	2001      	movs	r0, #1
 8000f80:	bd38      	pop	{r3, r4, r5, pc}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000f82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f86:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f8a:	b91b      	cbnz	r3, 8000f94 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000f8c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000f90:	f000 fe2c 	bl	8001bec <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f94:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8000f96:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000f9c:	6813      	ldr	r3, [r2, #0]
 8000f9e:	f023 0301 	bic.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000fa4:	f000 fbb0 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000fa8:	6863      	ldr	r3, [r4, #4]
 8000faa:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <HAL_I2C_Init+0xf0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d830      	bhi.n	8001012 <HAL_I2C_Init+0x9a>
 8000fb0:	4a2e      	ldr	r2, [pc, #184]	; (800106c <HAL_I2C_Init+0xf4>)
 8000fb2:	4290      	cmp	r0, r2
 8000fb4:	d9e3      	bls.n	8000f7e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000fb6:	4a2e      	ldr	r2, [pc, #184]	; (8001070 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->CR2 = freqrange;
 8000fb8:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000fba:	fbb0 f2f2 	udiv	r2, r0, r2
  hi2c->Instance->CR2 = freqrange;
 8000fbe:	604a      	str	r2, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000fc0:	3201      	adds	r2, #1
 8000fc2:	620a      	str	r2, [r1, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000fc4:	4a28      	ldr	r2, [pc, #160]	; (8001068 <HAL_I2C_Init+0xf0>)
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d832      	bhi.n	8001032 <HAL_I2C_Init+0xba>
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd2:	1c43      	adds	r3, r0, #1
 8000fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd8:	2b04      	cmp	r3, #4
 8000fda:	bf38      	it	cc
 8000fdc:	2304      	movcc	r3, #4
 8000fde:	61cb      	str	r3, [r1, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fe0:	6a22      	ldr	r2, [r4, #32]
 8000fe2:	69e3      	ldr	r3, [r4, #28]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000fe4:	2000      	movs	r0, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000fea:	68e2      	ldr	r2, [r4, #12]
 8000fec:	6923      	ldr	r3, [r4, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	608b      	str	r3, [r1, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000ff2:	69a2      	ldr	r2, [r4, #24]
 8000ff4:	6963      	ldr	r3, [r4, #20]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000ffa:	680b      	ldr	r3, [r1, #0]
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	600b      	str	r3, [r1, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001002:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001004:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001006:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800100a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800100c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8001010:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001012:	4a18      	ldr	r2, [pc, #96]	; (8001074 <HAL_I2C_Init+0xfc>)
 8001014:	4290      	cmp	r0, r2
 8001016:	d9b2      	bls.n	8000f7e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8001018:	4d15      	ldr	r5, [pc, #84]	; (8001070 <HAL_I2C_Init+0xf8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800101a:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 800101e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->CR2 = freqrange;
 8001022:	6821      	ldr	r1, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001024:	436a      	muls	r2, r5
  hi2c->Instance->CR2 = freqrange;
 8001026:	604d      	str	r5, [r1, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001028:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800102c:	fbb2 f2f5 	udiv	r2, r2, r5
 8001030:	e7c6      	b.n	8000fc0 <HAL_I2C_Init+0x48>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001032:	68a2      	ldr	r2, [r4, #8]
 8001034:	b952      	cbnz	r2, 800104c <HAL_I2C_Init+0xd4>
 8001036:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800103a:	fbb0 f0f3 	udiv	r0, r0, r3
 800103e:	1c43      	adds	r3, r0, #1
 8001040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001044:	b16b      	cbz	r3, 8001062 <HAL_I2C_Init+0xea>
 8001046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800104a:	e7c8      	b.n	8000fde <HAL_I2C_Init+0x66>
 800104c:	2219      	movs	r2, #25
 800104e:	4353      	muls	r3, r2
 8001050:	fbb0 f0f3 	udiv	r0, r0, r3
 8001054:	1c43      	adds	r3, r0, #1
 8001056:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800105a:	b113      	cbz	r3, 8001062 <HAL_I2C_Init+0xea>
 800105c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001060:	e7bd      	b.n	8000fde <HAL_I2C_Init+0x66>
 8001062:	2301      	movs	r3, #1
 8001064:	e7bb      	b.n	8000fde <HAL_I2C_Init+0x66>
 8001066:	bf00      	nop
 8001068:	000186a0 	.word	0x000186a0
 800106c:	001e847f 	.word	0x001e847f
 8001070:	000f4240 	.word	0x000f4240
 8001074:	003d08ff 	.word	0x003d08ff

08001078 <HAL_I2C_Master_Transmit>:
{
 8001078:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800107c:	4604      	mov	r4, r0
 800107e:	461f      	mov	r7, r3
 8001080:	460d      	mov	r5, r1
 8001082:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8001084:	f7ff fd3e 	bl	8000b04 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001088:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 800108c:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 800108e:	2b20      	cmp	r3, #32
 8001090:	d004      	beq.n	800109c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8001092:	2502      	movs	r5, #2
}
 8001094:	4628      	mov	r0, r5
 8001096:	b004      	add	sp, #16
 8001098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800109c:	9000      	str	r0, [sp, #0]
 800109e:	2319      	movs	r3, #25
 80010a0:	2201      	movs	r2, #1
 80010a2:	495d      	ldr	r1, [pc, #372]	; (8001218 <HAL_I2C_Master_Transmit+0x1a0>)
 80010a4:	4620      	mov	r0, r4
 80010a6:	f7ff feed 	bl	8000e84 <I2C_WaitOnFlagUntilTimeout>
 80010aa:	2800      	cmp	r0, #0
 80010ac:	d1f1      	bne.n	8001092 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 80010ae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d0ed      	beq.n	8001092 <HAL_I2C_Master_Transmit+0x1a>
 80010b6:	2301      	movs	r3, #1
 80010b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80010c2:	bf5e      	ittt	pl
 80010c4:	681a      	ldrpl	r2, [r3, #0]
 80010c6:	f042 0201 	orrpl.w	r2, r2, #1
 80010ca:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010d2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010d4:	2221      	movs	r2, #33	; 0x21
 80010d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010da:	2210      	movs	r2, #16
 80010dc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010e0:	2200      	movs	r2, #0
 80010e2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010e4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 80010e8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80010ea:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80010ec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80010ee:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80010f2:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80010f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80010f6:	2a04      	cmp	r2, #4
 80010f8:	d004      	beq.n	8001104 <HAL_I2C_Master_Transmit+0x8c>
 80010fa:	2a01      	cmp	r2, #1
 80010fc:	d002      	beq.n	8001104 <HAL_I2C_Master_Transmit+0x8c>
 80010fe:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001102:	d104      	bne.n	800110e <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e002      	b.n	8001114 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800110e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001110:	2a12      	cmp	r2, #18
 8001112:	d0f7      	beq.n	8001104 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001114:	9600      	str	r6, [sp, #0]
 8001116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001118:	2200      	movs	r2, #0
 800111a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800111e:	4620      	mov	r0, r4
 8001120:	f7ff feb0 	bl	8000e84 <I2C_WaitOnFlagUntilTimeout>
 8001124:	bb28      	cbnz	r0, 8001172 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001126:	6923      	ldr	r3, [r4, #16]
 8001128:	6822      	ldr	r2, [r4, #0]
 800112a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800112e:	d112      	bne.n	8001156 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001130:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8001134:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001136:	4633      	mov	r3, r6
 8001138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800113a:	4938      	ldr	r1, [pc, #224]	; (800121c <HAL_I2C_Master_Transmit+0x1a4>)
 800113c:	4620      	mov	r0, r4
 800113e:	f7ff fe61 	bl	8000e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001142:	4605      	mov	r5, r0
 8001144:	b9a0      	cbnz	r0, 8001170 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	9003      	str	r0, [sp, #12]
 800114a:	695a      	ldr	r2, [r3, #20]
 800114c:	9203      	str	r2, [sp, #12]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	9303      	str	r3, [sp, #12]
 8001152:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8001154:	e050      	b.n	80011f8 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001156:	11eb      	asrs	r3, r5, #7
 8001158:	f003 0306 	and.w	r3, r3, #6
 800115c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8001160:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001162:	492f      	ldr	r1, [pc, #188]	; (8001220 <HAL_I2C_Master_Transmit+0x1a8>)
 8001164:	4633      	mov	r3, r6
 8001166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001168:	4620      	mov	r0, r4
 800116a:	f7ff fe4b 	bl	8000e04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800116e:	b148      	cbz	r0, 8001184 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001170:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001174:	2b04      	cmp	r3, #4
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	d107      	bne.n	800118c <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 800117c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8001180:	2501      	movs	r5, #1
 8001182:	e787      	b.n	8001094 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001184:	6823      	ldr	r3, [r4, #0]
 8001186:	b2ed      	uxtb	r5, r5
 8001188:	611d      	str	r5, [r3, #16]
 800118a:	e7d4      	b.n	8001136 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 800118c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8001190:	2503      	movs	r5, #3
 8001192:	e77f      	b.n	8001094 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001194:	4632      	mov	r2, r6
 8001196:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001198:	4620      	mov	r0, r4
 800119a:	f7ff fea1 	bl	8000ee0 <I2C_WaitOnTXEFlagUntilTimeout>
 800119e:	b140      	cbz	r0, 80011b2 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80011a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d1f4      	bne.n	8001190 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80011a6:	6822      	ldr	r2, [r4, #0]
 80011a8:	6813      	ldr	r3, [r2, #0]
 80011aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ae:	6013      	str	r3, [r2, #0]
 80011b0:	e7e6      	b.n	8001180 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80011b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80011b4:	6820      	ldr	r0, [r4, #0]
 80011b6:	1c4b      	adds	r3, r1, #1
 80011b8:	6263      	str	r3, [r4, #36]	; 0x24
 80011ba:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 80011bc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80011be:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 80011c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80011c2:	3b01      	subs	r3, #1
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011c8:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 80011ca:	1e53      	subs	r3, r2, #1
 80011cc:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011ce:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 80011d0:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011d2:	d50a      	bpl.n	80011ea <HAL_I2C_Master_Transmit+0x172>
 80011d4:	b14b      	cbz	r3, 80011ea <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80011d6:	1c8b      	adds	r3, r1, #2
 80011d8:	6263      	str	r3, [r4, #36]	; 0x24
 80011da:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 80011dc:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 80011de:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 80011e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80011e2:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80011e4:	3b01      	subs	r3, #1
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011ea:	4632      	mov	r2, r6
 80011ec:	990a      	ldr	r1, [sp, #40]	; 0x28
 80011ee:	4620      	mov	r0, r4
 80011f0:	f7ff fe9c 	bl	8000f2c <I2C_WaitOnBTFFlagUntilTimeout>
 80011f4:	2800      	cmp	r0, #0
 80011f6:	d1d3      	bne.n	80011a0 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 80011f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1ca      	bne.n	8001194 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80011fe:	6821      	ldr	r1, [r4, #0]
 8001200:	680a      	ldr	r2, [r1, #0]
 8001202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001206:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001208:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800120a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800120e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001212:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8001216:	e73d      	b.n	8001094 <HAL_I2C_Master_Transmit+0x1c>
 8001218:	00100002 	.word	0x00100002
 800121c:	00010002 	.word	0x00010002
 8001220:	00010008 	.word	0x00010008

08001224 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001224:	6803      	ldr	r3, [r0, #0]
{
 8001226:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	07db      	lsls	r3, r3, #31
{
 800122c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122e:	d410      	bmi.n	8001252 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001230:	682b      	ldr	r3, [r5, #0]
 8001232:	079f      	lsls	r7, r3, #30
 8001234:	d45e      	bmi.n	80012f4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001236:	682b      	ldr	r3, [r5, #0]
 8001238:	0719      	lsls	r1, r3, #28
 800123a:	f100 8095 	bmi.w	8001368 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123e:	682b      	ldr	r3, [r5, #0]
 8001240:	075a      	lsls	r2, r3, #29
 8001242:	f100 80bf 	bmi.w	80013c4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001246:	69ea      	ldr	r2, [r5, #28]
 8001248:	2a00      	cmp	r2, #0
 800124a:	f040 812d 	bne.w	80014a8 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800124e:	2000      	movs	r0, #0
 8001250:	e014      	b.n	800127c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001252:	4c90      	ldr	r4, [pc, #576]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001254:	6863      	ldr	r3, [r4, #4]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d007      	beq.n	800126e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800125e:	6863      	ldr	r3, [r4, #4]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	2b08      	cmp	r3, #8
 8001266:	d10c      	bne.n	8001282 <HAL_RCC_OscConfig+0x5e>
 8001268:	6863      	ldr	r3, [r4, #4]
 800126a:	03de      	lsls	r6, r3, #15
 800126c:	d509      	bpl.n	8001282 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126e:	6823      	ldr	r3, [r4, #0]
 8001270:	039c      	lsls	r4, r3, #14
 8001272:	d5dd      	bpl.n	8001230 <HAL_RCC_OscConfig+0xc>
 8001274:	686b      	ldr	r3, [r5, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1da      	bne.n	8001230 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800127a:	2001      	movs	r0, #1
}
 800127c:	b002      	add	sp, #8
 800127e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001282:	686b      	ldr	r3, [r5, #4]
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001288:	d110      	bne.n	80012ac <HAL_RCC_OscConfig+0x88>
 800128a:	6823      	ldr	r3, [r4, #0]
 800128c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001290:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001292:	f7ff fc37 	bl	8000b04 <HAL_GetTick>
 8001296:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001298:	6823      	ldr	r3, [r4, #0]
 800129a:	0398      	lsls	r0, r3, #14
 800129c:	d4c8      	bmi.n	8001230 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800129e:	f7ff fc31 	bl	8000b04 <HAL_GetTick>
 80012a2:	1b80      	subs	r0, r0, r6
 80012a4:	2864      	cmp	r0, #100	; 0x64
 80012a6:	d9f7      	bls.n	8001298 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80012a8:	2003      	movs	r0, #3
 80012aa:	e7e7      	b.n	800127c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ac:	b99b      	cbnz	r3, 80012d6 <HAL_RCC_OscConfig+0xb2>
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b4:	6023      	str	r3, [r4, #0]
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012bc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80012be:	f7ff fc21 	bl	8000b04 <HAL_GetTick>
 80012c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	0399      	lsls	r1, r3, #14
 80012c8:	d5b2      	bpl.n	8001230 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ca:	f7ff fc1b 	bl	8000b04 <HAL_GetTick>
 80012ce:	1b80      	subs	r0, r0, r6
 80012d0:	2864      	cmp	r0, #100	; 0x64
 80012d2:	d9f7      	bls.n	80012c4 <HAL_RCC_OscConfig+0xa0>
 80012d4:	e7e8      	b.n	80012a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	d103      	bne.n	80012e6 <HAL_RCC_OscConfig+0xc2>
 80012de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e2:	6023      	str	r3, [r4, #0]
 80012e4:	e7d1      	b.n	800128a <HAL_RCC_OscConfig+0x66>
 80012e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ea:	6023      	str	r3, [r4, #0]
 80012ec:	6823      	ldr	r3, [r4, #0]
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f2:	e7cd      	b.n	8001290 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012f4:	4c67      	ldr	r4, [pc, #412]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80012f6:	6863      	ldr	r3, [r4, #4]
 80012f8:	f013 0f0c 	tst.w	r3, #12
 80012fc:	d007      	beq.n	800130e <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012fe:	6863      	ldr	r3, [r4, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d110      	bne.n	800132a <HAL_RCC_OscConfig+0x106>
 8001308:	6863      	ldr	r3, [r4, #4]
 800130a:	03da      	lsls	r2, r3, #15
 800130c:	d40d      	bmi.n	800132a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	079b      	lsls	r3, r3, #30
 8001312:	d502      	bpl.n	800131a <HAL_RCC_OscConfig+0xf6>
 8001314:	692b      	ldr	r3, [r5, #16]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d1af      	bne.n	800127a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131a:	6823      	ldr	r3, [r4, #0]
 800131c:	696a      	ldr	r2, [r5, #20]
 800131e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001322:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001326:	6023      	str	r3, [r4, #0]
 8001328:	e785      	b.n	8001236 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800132a:	692a      	ldr	r2, [r5, #16]
 800132c:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <HAL_RCC_OscConfig+0x274>)
 800132e:	b16a      	cbz	r2, 800134c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001330:	2201      	movs	r2, #1
 8001332:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001334:	f7ff fbe6 	bl	8000b04 <HAL_GetTick>
 8001338:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133a:	6823      	ldr	r3, [r4, #0]
 800133c:	079f      	lsls	r7, r3, #30
 800133e:	d4ec      	bmi.n	800131a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001340:	f7ff fbe0 	bl	8000b04 <HAL_GetTick>
 8001344:	1b80      	subs	r0, r0, r6
 8001346:	2802      	cmp	r0, #2
 8001348:	d9f7      	bls.n	800133a <HAL_RCC_OscConfig+0x116>
 800134a:	e7ad      	b.n	80012a8 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800134c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800134e:	f7ff fbd9 	bl	8000b04 <HAL_GetTick>
 8001352:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001354:	6823      	ldr	r3, [r4, #0]
 8001356:	0798      	lsls	r0, r3, #30
 8001358:	f57f af6d 	bpl.w	8001236 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fbd2 	bl	8000b04 <HAL_GetTick>
 8001360:	1b80      	subs	r0, r0, r6
 8001362:	2802      	cmp	r0, #2
 8001364:	d9f6      	bls.n	8001354 <HAL_RCC_OscConfig+0x130>
 8001366:	e79f      	b.n	80012a8 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001368:	69aa      	ldr	r2, [r5, #24]
 800136a:	4c4a      	ldr	r4, [pc, #296]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 800136c:	4b4b      	ldr	r3, [pc, #300]	; (800149c <HAL_RCC_OscConfig+0x278>)
 800136e:	b1da      	cbz	r2, 80013a8 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001374:	f7ff fbc6 	bl	8000b04 <HAL_GetTick>
 8001378:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800137a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800137c:	079b      	lsls	r3, r3, #30
 800137e:	d50d      	bpl.n	800139c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001380:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001384:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <HAL_RCC_OscConfig+0x27c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	fbb3 f3f2 	udiv	r3, r3, r2
 800138c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800138e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001390:	9b01      	ldr	r3, [sp, #4]
 8001392:	1e5a      	subs	r2, r3, #1
 8001394:	9201      	str	r2, [sp, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f9      	bne.n	800138e <HAL_RCC_OscConfig+0x16a>
 800139a:	e750      	b.n	800123e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800139c:	f7ff fbb2 	bl	8000b04 <HAL_GetTick>
 80013a0:	1b80      	subs	r0, r0, r6
 80013a2:	2802      	cmp	r0, #2
 80013a4:	d9e9      	bls.n	800137a <HAL_RCC_OscConfig+0x156>
 80013a6:	e77f      	b.n	80012a8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80013a8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80013aa:	f7ff fbab 	bl	8000b04 <HAL_GetTick>
 80013ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013b2:	079f      	lsls	r7, r3, #30
 80013b4:	f57f af43 	bpl.w	800123e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013b8:	f7ff fba4 	bl	8000b04 <HAL_GetTick>
 80013bc:	1b80      	subs	r0, r0, r6
 80013be:	2802      	cmp	r0, #2
 80013c0:	d9f6      	bls.n	80013b0 <HAL_RCC_OscConfig+0x18c>
 80013c2:	e771      	b.n	80012a8 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c4:	4c33      	ldr	r4, [pc, #204]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80013c6:	69e3      	ldr	r3, [r4, #28]
 80013c8:	00d8      	lsls	r0, r3, #3
 80013ca:	d424      	bmi.n	8001416 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80013cc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	69e3      	ldr	r3, [r4, #28]
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	61e3      	str	r3, [r4, #28]
 80013d6:	69e3      	ldr	r3, [r4, #28]
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e0:	4e30      	ldr	r6, [pc, #192]	; (80014a4 <HAL_RCC_OscConfig+0x280>)
 80013e2:	6833      	ldr	r3, [r6, #0]
 80013e4:	05d9      	lsls	r1, r3, #23
 80013e6:	d518      	bpl.n	800141a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e8:	68eb      	ldr	r3, [r5, #12]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d126      	bne.n	800143c <HAL_RCC_OscConfig+0x218>
 80013ee:	6a23      	ldr	r3, [r4, #32]
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80013f6:	f7ff fb85 	bl	8000b04 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80013fe:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001400:	6a23      	ldr	r3, [r4, #32]
 8001402:	079b      	lsls	r3, r3, #30
 8001404:	d53f      	bpl.n	8001486 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001406:	2f00      	cmp	r7, #0
 8001408:	f43f af1d 	beq.w	8001246 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800140c:	69e3      	ldr	r3, [r4, #28]
 800140e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001412:	61e3      	str	r3, [r4, #28]
 8001414:	e717      	b.n	8001246 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001416:	2700      	movs	r7, #0
 8001418:	e7e2      	b.n	80013e0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800141a:	6833      	ldr	r3, [r6, #0]
 800141c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001420:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001422:	f7ff fb6f 	bl	8000b04 <HAL_GetTick>
 8001426:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001428:	6833      	ldr	r3, [r6, #0]
 800142a:	05da      	lsls	r2, r3, #23
 800142c:	d4dc      	bmi.n	80013e8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800142e:	f7ff fb69 	bl	8000b04 <HAL_GetTick>
 8001432:	eba0 0008 	sub.w	r0, r0, r8
 8001436:	2864      	cmp	r0, #100	; 0x64
 8001438:	d9f6      	bls.n	8001428 <HAL_RCC_OscConfig+0x204>
 800143a:	e735      	b.n	80012a8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800143c:	b9ab      	cbnz	r3, 800146a <HAL_RCC_OscConfig+0x246>
 800143e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001440:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6223      	str	r3, [r4, #32]
 800144a:	6a23      	ldr	r3, [r4, #32]
 800144c:	f023 0304 	bic.w	r3, r3, #4
 8001450:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001452:	f7ff fb57 	bl	8000b04 <HAL_GetTick>
 8001456:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	6a23      	ldr	r3, [r4, #32]
 800145a:	0798      	lsls	r0, r3, #30
 800145c:	d5d3      	bpl.n	8001406 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145e:	f7ff fb51 	bl	8000b04 <HAL_GetTick>
 8001462:	1b80      	subs	r0, r0, r6
 8001464:	4540      	cmp	r0, r8
 8001466:	d9f7      	bls.n	8001458 <HAL_RCC_OscConfig+0x234>
 8001468:	e71e      	b.n	80012a8 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146a:	2b05      	cmp	r3, #5
 800146c:	6a23      	ldr	r3, [r4, #32]
 800146e:	d103      	bne.n	8001478 <HAL_RCC_OscConfig+0x254>
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6223      	str	r3, [r4, #32]
 8001476:	e7ba      	b.n	80013ee <HAL_RCC_OscConfig+0x1ca>
 8001478:	f023 0301 	bic.w	r3, r3, #1
 800147c:	6223      	str	r3, [r4, #32]
 800147e:	6a23      	ldr	r3, [r4, #32]
 8001480:	f023 0304 	bic.w	r3, r3, #4
 8001484:	e7b6      	b.n	80013f4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff fb3d 	bl	8000b04 <HAL_GetTick>
 800148a:	eba0 0008 	sub.w	r0, r0, r8
 800148e:	42b0      	cmp	r0, r6
 8001490:	d9b6      	bls.n	8001400 <HAL_RCC_OscConfig+0x1dc>
 8001492:	e709      	b.n	80012a8 <HAL_RCC_OscConfig+0x84>
 8001494:	40021000 	.word	0x40021000
 8001498:	42420000 	.word	0x42420000
 800149c:	42420480 	.word	0x42420480
 80014a0:	20000008 	.word	0x20000008
 80014a4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a8:	4c22      	ldr	r4, [pc, #136]	; (8001534 <HAL_RCC_OscConfig+0x310>)
 80014aa:	6863      	ldr	r3, [r4, #4]
 80014ac:	f003 030c 	and.w	r3, r3, #12
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	f43f aee2 	beq.w	800127a <HAL_RCC_OscConfig+0x56>
 80014b6:	2300      	movs	r3, #0
 80014b8:	4e1f      	ldr	r6, [pc, #124]	; (8001538 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ba:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80014bc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014be:	d12b      	bne.n	8001518 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb20 	bl	8000b04 <HAL_GetTick>
 80014c4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	0199      	lsls	r1, r3, #6
 80014ca:	d41f      	bmi.n	800150c <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014cc:	6a2b      	ldr	r3, [r5, #32]
 80014ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d2:	d105      	bne.n	80014e0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014d4:	6862      	ldr	r2, [r4, #4]
 80014d6:	68a9      	ldr	r1, [r5, #8]
 80014d8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80014dc:	430a      	orrs	r2, r1
 80014de:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80014e2:	6862      	ldr	r2, [r4, #4]
 80014e4:	430b      	orrs	r3, r1
 80014e6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80014ea:	4313      	orrs	r3, r2
 80014ec:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80014ee:	2301      	movs	r3, #1
 80014f0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb07 	bl	8000b04 <HAL_GetTick>
 80014f6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	019a      	lsls	r2, r3, #6
 80014fc:	f53f aea7 	bmi.w	800124e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001500:	f7ff fb00 	bl	8000b04 <HAL_GetTick>
 8001504:	1b40      	subs	r0, r0, r5
 8001506:	2802      	cmp	r0, #2
 8001508:	d9f6      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2d4>
 800150a:	e6cd      	b.n	80012a8 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff fafa 	bl	8000b04 <HAL_GetTick>
 8001510:	1bc0      	subs	r0, r0, r7
 8001512:	2802      	cmp	r0, #2
 8001514:	d9d7      	bls.n	80014c6 <HAL_RCC_OscConfig+0x2a2>
 8001516:	e6c7      	b.n	80012a8 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001518:	f7ff faf4 	bl	8000b04 <HAL_GetTick>
 800151c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	019b      	lsls	r3, r3, #6
 8001522:	f57f ae94 	bpl.w	800124e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff faed 	bl	8000b04 <HAL_GetTick>
 800152a:	1b40      	subs	r0, r0, r5
 800152c:	2802      	cmp	r0, #2
 800152e:	d9f6      	bls.n	800151e <HAL_RCC_OscConfig+0x2fa>
 8001530:	e6ba      	b.n	80012a8 <HAL_RCC_OscConfig+0x84>
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	42420060 	.word	0x42420060

0800153c <HAL_RCC_GetSysClockFreq>:
{
 800153c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800153e:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001540:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001542:	ac02      	add	r4, sp, #8
 8001544:	f103 0510 	add.w	r5, r3, #16
 8001548:	4622      	mov	r2, r4
 800154a:	6818      	ldr	r0, [r3, #0]
 800154c:	6859      	ldr	r1, [r3, #4]
 800154e:	3308      	adds	r3, #8
 8001550:	c203      	stmia	r2!, {r0, r1}
 8001552:	42ab      	cmp	r3, r5
 8001554:	4614      	mov	r4, r2
 8001556:	d1f7      	bne.n	8001548 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001558:	2301      	movs	r3, #1
 800155a:	f88d 3004 	strb.w	r3, [sp, #4]
 800155e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001560:	4911      	ldr	r1, [pc, #68]	; (80015a8 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001562:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001566:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001568:	f003 020c 	and.w	r2, r3, #12
 800156c:	2a08      	cmp	r2, #8
 800156e:	d117      	bne.n	80015a0 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001570:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001574:	a806      	add	r0, sp, #24
 8001576:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001578:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800157a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800157e:	d50c      	bpl.n	800159a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001580:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001582:	480a      	ldr	r0, [pc, #40]	; (80015ac <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001584:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001588:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800158a:	aa06      	add	r2, sp, #24
 800158c:	4413      	add	r3, r2
 800158e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001592:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001596:	b007      	add	sp, #28
 8001598:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_RCC_GetSysClockFreq+0x74>)
 800159c:	4350      	muls	r0, r2
 800159e:	e7fa      	b.n	8001596 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80015a2:	e7f8      	b.n	8001596 <HAL_RCC_GetSysClockFreq+0x5a>
 80015a4:	08003f70 	.word	0x08003f70
 80015a8:	40021000 	.word	0x40021000
 80015ac:	007a1200 	.word	0x007a1200
 80015b0:	003d0900 	.word	0x003d0900

080015b4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015b4:	4a4d      	ldr	r2, [pc, #308]	; (80016ec <HAL_RCC_ClockConfig+0x138>)
{
 80015b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015ba:	6813      	ldr	r3, [r2, #0]
{
 80015bc:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	428b      	cmp	r3, r1
{
 80015c4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80015c6:	d328      	bcc.n	800161a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c8:	682a      	ldr	r2, [r5, #0]
 80015ca:	0791      	lsls	r1, r2, #30
 80015cc:	d432      	bmi.n	8001634 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ce:	07d2      	lsls	r2, r2, #31
 80015d0:	d438      	bmi.n	8001644 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80015d2:	4a46      	ldr	r2, [pc, #280]	; (80016ec <HAL_RCC_ClockConfig+0x138>)
 80015d4:	6813      	ldr	r3, [r2, #0]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	429e      	cmp	r6, r3
 80015dc:	d373      	bcc.n	80016c6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015de:	682a      	ldr	r2, [r5, #0]
 80015e0:	4c43      	ldr	r4, [pc, #268]	; (80016f0 <HAL_RCC_ClockConfig+0x13c>)
 80015e2:	f012 0f04 	tst.w	r2, #4
 80015e6:	d179      	bne.n	80016dc <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	0713      	lsls	r3, r2, #28
 80015ea:	d506      	bpl.n	80015fa <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ec:	6863      	ldr	r3, [r4, #4]
 80015ee:	692a      	ldr	r2, [r5, #16]
 80015f0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80015f4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80015f8:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015fa:	f7ff ff9f 	bl	800153c <HAL_RCC_GetSysClockFreq>
 80015fe:	6863      	ldr	r3, [r4, #4]
 8001600:	4a3c      	ldr	r2, [pc, #240]	; (80016f4 <HAL_RCC_ClockConfig+0x140>)
 8001602:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001606:	5cd3      	ldrb	r3, [r2, r3]
 8001608:	40d8      	lsrs	r0, r3
 800160a:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_RCC_ClockConfig+0x144>)
 800160c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800160e:	2000      	movs	r0, #0
 8001610:	f7ff fa36 	bl	8000a80 <HAL_InitTick>
  return HAL_OK;
 8001614:	2000      	movs	r0, #0
}
 8001616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800161a:	6813      	ldr	r3, [r2, #0]
 800161c:	f023 0307 	bic.w	r3, r3, #7
 8001620:	430b      	orrs	r3, r1
 8001622:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001624:	6813      	ldr	r3, [r2, #0]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	4299      	cmp	r1, r3
 800162c:	d0cc      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800162e:	2001      	movs	r0, #1
 8001630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001634:	492e      	ldr	r1, [pc, #184]	; (80016f0 <HAL_RCC_ClockConfig+0x13c>)
 8001636:	68a8      	ldr	r0, [r5, #8]
 8001638:	684b      	ldr	r3, [r1, #4]
 800163a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800163e:	4303      	orrs	r3, r0
 8001640:	604b      	str	r3, [r1, #4]
 8001642:	e7c4      	b.n	80015ce <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001644:	686a      	ldr	r2, [r5, #4]
 8001646:	4c2a      	ldr	r4, [pc, #168]	; (80016f0 <HAL_RCC_ClockConfig+0x13c>)
 8001648:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164c:	d11c      	bne.n	8001688 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001652:	d0ec      	beq.n	800162e <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001654:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001656:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800165a:	f023 0303 	bic.w	r3, r3, #3
 800165e:	4313      	orrs	r3, r2
 8001660:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001662:	f7ff fa4f 	bl	8000b04 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001666:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001668:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166a:	2b01      	cmp	r3, #1
 800166c:	d114      	bne.n	8001698 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800166e:	6863      	ldr	r3, [r4, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b04      	cmp	r3, #4
 8001676:	d0ac      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001678:	f7ff fa44 	bl	8000b04 <HAL_GetTick>
 800167c:	1bc0      	subs	r0, r0, r7
 800167e:	4540      	cmp	r0, r8
 8001680:	d9f5      	bls.n	800166e <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001682:	2003      	movs	r0, #3
 8001684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001688:	2a02      	cmp	r2, #2
 800168a:	d102      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800168c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001690:	e7df      	b.n	8001652 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001692:	f013 0f02 	tst.w	r3, #2
 8001696:	e7dc      	b.n	8001652 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001698:	2b02      	cmp	r3, #2
 800169a:	d10f      	bne.n	80016bc <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169c:	6863      	ldr	r3, [r4, #4]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b08      	cmp	r3, #8
 80016a4:	d095      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a6:	f7ff fa2d 	bl	8000b04 <HAL_GetTick>
 80016aa:	1bc0      	subs	r0, r0, r7
 80016ac:	4540      	cmp	r0, r8
 80016ae:	d9f5      	bls.n	800169c <HAL_RCC_ClockConfig+0xe8>
 80016b0:	e7e7      	b.n	8001682 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b2:	f7ff fa27 	bl	8000b04 <HAL_GetTick>
 80016b6:	1bc0      	subs	r0, r0, r7
 80016b8:	4540      	cmp	r0, r8
 80016ba:	d8e2      	bhi.n	8001682 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016bc:	6863      	ldr	r3, [r4, #4]
 80016be:	f013 0f0c 	tst.w	r3, #12
 80016c2:	d1f6      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xfe>
 80016c4:	e785      	b.n	80015d2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	6813      	ldr	r3, [r2, #0]
 80016c8:	f023 0307 	bic.w	r3, r3, #7
 80016cc:	4333      	orrs	r3, r6
 80016ce:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016d0:	6813      	ldr	r3, [r2, #0]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	429e      	cmp	r6, r3
 80016d8:	d1a9      	bne.n	800162e <HAL_RCC_ClockConfig+0x7a>
 80016da:	e780      	b.n	80015de <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016dc:	6863      	ldr	r3, [r4, #4]
 80016de:	68e9      	ldr	r1, [r5, #12]
 80016e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016e4:	430b      	orrs	r3, r1
 80016e6:	6063      	str	r3, [r4, #4]
 80016e8:	e77e      	b.n	80015e8 <HAL_RCC_ClockConfig+0x34>
 80016ea:	bf00      	nop
 80016ec:	40022000 	.word	0x40022000
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08004380 	.word	0x08004380
 80016f8:	20000008 	.word	0x20000008

080016fc <HAL_RCC_GetHCLKFreq>:
}
 80016fc:	4b01      	ldr	r3, [pc, #4]	; (8001704 <HAL_RCC_GetHCLKFreq+0x8>)
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	20000008 	.word	0x20000008

08001708 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <HAL_RCC_GetPCLK1Freq+0x14>)
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <HAL_RCC_GetPCLK1Freq+0x18>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001712:	5cd3      	ldrb	r3, [r2, r3]
 8001714:	4a03      	ldr	r2, [pc, #12]	; (8001724 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001716:	6810      	ldr	r0, [r2, #0]
}    
 8001718:	40d8      	lsrs	r0, r3
 800171a:	4770      	bx	lr
 800171c:	40021000 	.word	0x40021000
 8001720:	08004390 	.word	0x08004390
 8001724:	20000008 	.word	0x20000008

08001728 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <HAL_RCC_GetPCLK2Freq+0x14>)
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <HAL_RCC_GetPCLK2Freq+0x18>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001732:	5cd3      	ldrb	r3, [r2, r3]
 8001734:	4a03      	ldr	r2, [pc, #12]	; (8001744 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001736:	6810      	ldr	r0, [r2, #0]
} 
 8001738:	40d8      	lsrs	r0, r3
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000
 8001740:	08004390 	.word	0x08004390
 8001744:	20000008 	.word	0x20000008

08001748 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001748:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800174a:	4604      	mov	r4, r0
 800174c:	2800      	cmp	r0, #0
 800174e:	d034      	beq.n	80017ba <HAL_SPI_Init+0x72>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001754:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001758:	b90b      	cbnz	r3, 800175e <HAL_SPI_Init+0x16>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800175a:	f000 fa69 	bl	8001c30 <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 800175e:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001760:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001762:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001766:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001768:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800176a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800176e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001770:	6863      	ldr	r3, [r4, #4]
 8001772:	69a2      	ldr	r2, [r4, #24]
 8001774:	4303      	orrs	r3, r0
 8001776:	68e0      	ldr	r0, [r4, #12]
 8001778:	4303      	orrs	r3, r0
 800177a:	6920      	ldr	r0, [r4, #16]
 800177c:	4303      	orrs	r3, r0
 800177e:	6960      	ldr	r0, [r4, #20]
 8001780:	4303      	orrs	r3, r0
 8001782:	69e0      	ldr	r0, [r4, #28]
 8001784:	4303      	orrs	r3, r0
 8001786:	6a20      	ldr	r0, [r4, #32]
 8001788:	4303      	orrs	r3, r0
 800178a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800178c:	4303      	orrs	r3, r0
 800178e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001792:	4303      	orrs	r3, r0
 8001794:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001796:	0c12      	lsrs	r2, r2, #16
 8001798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800179a:	f002 0204 	and.w	r2, r2, #4
 800179e:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80017a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80017a2:	604a      	str	r2, [r1, #4]
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80017a4:	610b      	str	r3, [r1, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017a6:	69cb      	ldr	r3, [r1, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017a8:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017ae:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 80017b0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017b2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80017b4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 80017b8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017ba:	2001      	movs	r0, #1
}
 80017bc:	bd10      	pop	{r4, pc}
	...

080017c0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017c4:	6805      	ldr	r5, [r0, #0]
 80017c6:	68c2      	ldr	r2, [r0, #12]
 80017c8:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017ca:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80017cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017d0:	4313      	orrs	r3, r2
 80017d2:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017d4:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 80017d6:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017d8:	430b      	orrs	r3, r1
 80017da:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80017dc:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 80017e0:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80017e4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80017e6:	4313      	orrs	r3, r2
 80017e8:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80017ea:	696b      	ldr	r3, [r5, #20]
 80017ec:	6982      	ldr	r2, [r0, #24]
 80017ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f2:	4313      	orrs	r3, r2
 80017f4:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <UART_SetConfig+0x138>)
{
 80017f8:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 80017fa:	429d      	cmp	r5, r3
 80017fc:	f04f 0419 	mov.w	r4, #25
 8001800:	d146      	bne.n	8001890 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001802:	f7ff ff91 	bl	8001728 <HAL_RCC_GetPCLK2Freq>
 8001806:	fb04 f300 	mul.w	r3, r4, r0
 800180a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800180e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001812:	00b6      	lsls	r6, r6, #2
 8001814:	fbb3 f3f6 	udiv	r3, r3, r6
 8001818:	fbb3 f3f8 	udiv	r3, r3, r8
 800181c:	011e      	lsls	r6, r3, #4
 800181e:	f7ff ff83 	bl	8001728 <HAL_RCC_GetPCLK2Freq>
 8001822:	4360      	muls	r0, r4
 8001824:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	fbb0 f7f3 	udiv	r7, r0, r3
 800182e:	f7ff ff7b 	bl	8001728 <HAL_RCC_GetPCLK2Freq>
 8001832:	4360      	muls	r0, r4
 8001834:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	fbb0 f3f3 	udiv	r3, r0, r3
 800183e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001842:	fb08 7313 	mls	r3, r8, r3, r7
 8001846:	011b      	lsls	r3, r3, #4
 8001848:	3332      	adds	r3, #50	; 0x32
 800184a:	fbb3 f3f8 	udiv	r3, r3, r8
 800184e:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001852:	f7ff ff69 	bl	8001728 <HAL_RCC_GetPCLK2Freq>
 8001856:	4360      	muls	r0, r4
 8001858:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800185c:	0092      	lsls	r2, r2, #2
 800185e:	fbb0 faf2 	udiv	sl, r0, r2
 8001862:	f7ff ff61 	bl	8001728 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001866:	4360      	muls	r0, r4
 8001868:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001872:	fbb3 f3f8 	udiv	r3, r3, r8
 8001876:	fb08 a313 	mls	r3, r8, r3, sl
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	3332      	adds	r3, #50	; 0x32
 800187e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	433b      	orrs	r3, r7
 8001888:	4433      	add	r3, r6
 800188a:	60ab      	str	r3, [r5, #8]
 800188c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001890:	f7ff ff3a 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 8001894:	fb04 f300 	mul.w	r3, r4, r0
 8001898:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800189c:	f04f 0864 	mov.w	r8, #100	; 0x64
 80018a0:	00b6      	lsls	r6, r6, #2
 80018a2:	fbb3 f3f6 	udiv	r3, r3, r6
 80018a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80018aa:	011e      	lsls	r6, r3, #4
 80018ac:	f7ff ff2c 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 80018b0:	4360      	muls	r0, r4
 80018b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	fbb0 f7f3 	udiv	r7, r0, r3
 80018bc:	f7ff ff24 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 80018c0:	4360      	muls	r0, r4
 80018c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018cc:	fbb3 f3f8 	udiv	r3, r3, r8
 80018d0:	fb08 7313 	mls	r3, r8, r3, r7
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	3332      	adds	r3, #50	; 0x32
 80018d8:	fbb3 f3f8 	udiv	r3, r3, r8
 80018dc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80018e0:	f7ff ff12 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 80018e4:	4360      	muls	r0, r4
 80018e6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	fbb0 faf2 	udiv	sl, r0, r2
 80018f0:	f7ff ff0a 	bl	8001708 <HAL_RCC_GetPCLK1Freq>
 80018f4:	e7b7      	b.n	8001866 <UART_SetConfig+0xa6>
 80018f6:	bf00      	nop
 80018f8:	40013800 	.word	0x40013800

080018fc <HAL_UART_Init>:
{
 80018fc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80018fe:	4604      	mov	r4, r0
 8001900:	b340      	cbz	r0, 8001954 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001902:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001906:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800190a:	b91b      	cbnz	r3, 8001914 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800190c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001910:	f000 f9b8 	bl	8001c84 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001914:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001916:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001918:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800191c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800191e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001924:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001926:	f7ff ff4b 	bl	80017c0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800192a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800192c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800193c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001944:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8001946:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001948:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800194a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800194e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001952:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001954:	2001      	movs	r0, #1
}
 8001956:	bd10      	pop	{r4, pc}

08001958 <draw>:

/*
 Function which responds for drawing
 */
 void draw(void)
 {
 8001958:	b513      	push	{r0, r1, r4, lr}
      u8g_SetFont(&u8g,u8g_font_profont10);//set current font
 800195a:	4c08      	ldr	r4, [pc, #32]	; (800197c <draw+0x24>)
 800195c:	4908      	ldr	r1, [pc, #32]	; (8001980 <draw+0x28>)
 800195e:	4620      	mov	r0, r4
 8001960:	f000 fb8e 	bl	8002080 <u8g_SetFont>
      u8g_DrawBitmapP(&u8g,0,0,16,64, star);
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <draw+0x2c>)
 8001966:	2200      	movs	r2, #0
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	2340      	movs	r3, #64	; 0x40
 800196c:	4611      	mov	r1, r2
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	4620      	mov	r0, r4
 8001972:	2310      	movs	r3, #16
 8001974:	f000 fa3d 	bl	8001df2 <u8g_DrawBitmapP>
 }
 8001978:	b002      	add	sp, #8
 800197a:	bd10      	pop	{r4, pc}
 800197c:	20000210 	.word	0x20000210
 8001980:	080043da 	.word	0x080043da
 8001984:	08003f80 	.word	0x08003f80

08001988 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001988:	2302      	movs	r3, #2
{
 800198a:	b510      	push	{r4, lr}
 800198c:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800198e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001990:	2301      	movs	r3, #1
 8001992:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001994:	2310      	movs	r3, #16
 8001996:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001998:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800199c:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199e:	f7ff fc41 	bl	8001224 <HAL_RCC_OscConfig>
 80019a2:	4601      	mov	r1, r0
 80019a4:	b100      	cbz	r0, 80019a8 <SystemClock_Config+0x20>
 80019a6:	e7fe      	b.n	80019a6 <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a8:	230f      	movs	r3, #15
 80019aa:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019b0:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b2:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019b4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019b8:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019ba:	f7ff fdfb 	bl	80015b4 <HAL_RCC_ClockConfig>
 80019be:	4604      	mov	r4, r0
 80019c0:	b100      	cbz	r0, 80019c4 <SystemClock_Config+0x3c>
 80019c2:	e7fe      	b.n	80019c2 <SystemClock_Config+0x3a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80019c4:	f7ff fe9a 	bl	80016fc <HAL_RCC_GetHCLKFreq>
 80019c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80019d0:	f7ff f8f6 	bl	8000bc0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80019d4:	2004      	movs	r0, #4
 80019d6:	f7ff f909 	bl	8000bec <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80019da:	4622      	mov	r2, r4
 80019dc:	4621      	mov	r1, r4
 80019de:	f04f 30ff 	mov.w	r0, #4294967295
 80019e2:	f7ff f8b9 	bl	8000b58 <HAL_NVIC_SetPriority>
}
 80019e6:	b010      	add	sp, #64	; 0x40
 80019e8:	bd10      	pop	{r4, pc}
	...

080019ec <main>:
{
 80019ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 80019ee:	f7ff f86b 	bl	8000ac8 <HAL_Init>
  SystemClock_Config();
 80019f2:	f7ff ffc9 	bl	8001988 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	4b4d      	ldr	r3, [pc, #308]	; (8001b2c <main+0x140>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 80019f8:	f649 0180 	movw	r1, #39040	; 0x9880
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 80019fe:	484c      	ldr	r0, [pc, #304]	; (8001b30 <main+0x144>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	f042 0204 	orr.w	r2, r2, #4
 8001a04:	619a      	str	r2, [r3, #24]
 8001a06:	699a      	ldr	r2, [r3, #24]
                          |EN_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS1_Pin D7_Pin D6_Pin D5_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|D7_Pin|D6_Pin|D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2402      	movs	r4, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	f002 0204 	and.w	r2, r2, #4
 8001a0e:	9200      	str	r2, [sp, #0]
 8001a10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	f042 0208 	orr.w	r2, r2, #8
 8001a1a:	619a      	str	r2, [r3, #24]
 8001a1c:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOA, CS1_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 8001a28:	f7ff f9d2 	bl	8000dd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|D4_Pin 
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f640 013b 	movw	r1, #2107	; 0x83b
 8001a32:	4840      	ldr	r0, [pc, #256]	; (8001b34 <main+0x148>)
 8001a34:	f7ff f9cc 	bl	8000dd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = CS1_Pin|D7_Pin|D6_Pin|D5_Pin;
 8001a38:	f649 0380 	movw	r3, #39040	; 0x9880
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	a902      	add	r1, sp, #8
 8001a3e:	483c      	ldr	r0, [pc, #240]	; (8001b30 <main+0x144>)
  GPIO_InitStruct.Pin = CS1_Pin|D7_Pin|D6_Pin|D5_Pin;
 8001a40:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a42:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f7ff f8e3 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin LD3_Pin D4_Pin 
                           EN_Pin RS_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|D4_Pin 
 8001a4a:	f640 033b 	movw	r3, #2107	; 0x83b
                          |EN_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4e:	a902      	add	r1, sp, #8
 8001a50:	4838      	ldr	r0, [pc, #224]	; (8001b34 <main+0x148>)
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|D4_Pin 
 8001a52:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	9503      	str	r5, [sp, #12]

  /*Configure GPIO pins : S3_Pin S2_Pin */
  GPIO_InitStruct.Pin = S3_Pin|S2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a58:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5a:	f7ff f8d9 	bl	8000c10 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = S3_Pin|S2_Pin;
 8001a5e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	a902      	add	r1, sp, #8
 8001a64:	4833      	ldr	r0, [pc, #204]	; (8001b34 <main+0x148>)
  GPIO_InitStruct.Pin = S3_Pin|S2_Pin;
 8001a66:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f7ff f8d0 	bl	8000c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : S1_Pin */
  GPIO_InitStruct.Pin = S1_Pin;
 8001a70:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8001a74:	482e      	ldr	r0, [pc, #184]	; (8001b30 <main+0x144>)
 8001a76:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = S1_Pin;
 8001a78:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	9404      	str	r4, [sp, #16]
  hi2c1.Init.ClockSpeed = 400000;
 8001a7e:	4e2e      	ldr	r6, [pc, #184]	; (8001b38 <main+0x14c>)
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f7ff f8c6 	bl	8000c10 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001a84:	482d      	ldr	r0, [pc, #180]	; (8001b3c <main+0x150>)
  hi2c1.Init.ClockSpeed = 400000;
 8001a86:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <main+0x154>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a88:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 8001a8a:	e880 0048 	stmia.w	r0, {r3, r6}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001a92:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a94:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a96:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a98:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a9a:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a9c:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a9e:	f7ff fa6b 	bl	8000f78 <HAL_I2C_Init>
 8001aa2:	b100      	cbz	r0, 8001aa6 <main+0xba>
 8001aa4:	e7fe      	b.n	8001aa4 <main+0xb8>
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001aa6:	f44f 7482 	mov.w	r4, #260	; 0x104
 8001aaa:	f44f 6580 	mov.w	r5, #1024	; 0x400
  hspi1.Instance = SPI1;
 8001aae:	4b25      	ldr	r3, [pc, #148]	; (8001b44 <main+0x158>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001ab0:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <main+0x15c>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ab2:	60d8      	str	r0, [r3, #12]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001ab4:	e883 0034 	stmia.w	r3, {r2, r4, r5}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001abc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001abe:	2218      	movs	r2, #24
 8001ac0:	61da      	str	r2, [r3, #28]
  hspi1.Init.CRCPolynomial = 10;
 8001ac2:	220a      	movs	r2, #10
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ac4:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ac6:	6158      	str	r0, [r3, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ac8:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aca:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001acc:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ace:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 8001ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ad2:	f7ff fe39 	bl	8001748 <HAL_SPI_Init>
 8001ad6:	b100      	cbz	r0, 8001ada <main+0xee>
 8001ad8:	e7fe      	b.n	8001ad8 <main+0xec>
  huart1.Init.BaudRate = 9600;
 8001ada:	f44f 5216 	mov.w	r2, #9600	; 0x2580
  huart1.Instance = USART1;
 8001ade:	4b1b      	ldr	r3, [pc, #108]	; (8001b4c <main+0x160>)
  huart1.Init.BaudRate = 9600;
 8001ae0:	491b      	ldr	r1, [pc, #108]	; (8001b50 <main+0x164>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 9600;
 8001ae4:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aea:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aec:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af0:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001af2:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001af4:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001af6:	f7ff ff01 	bl	80018fc <HAL_UART_Init>
 8001afa:	b100      	cbz	r0, 8001afe <main+0x112>
 8001afc:	e7fe      	b.n	8001afc <main+0x110>
  u8g_InitComFn(&u8g, &u8g_dev_ssd1306_128x64_i2c, u8g_com_hw_i2c_fn); //here we init our u8glib driver
 8001afe:	4a15      	ldr	r2, [pc, #84]	; (8001b54 <main+0x168>)
 8001b00:	4915      	ldr	r1, [pc, #84]	; (8001b58 <main+0x16c>)
 8001b02:	4816      	ldr	r0, [pc, #88]	; (8001b5c <main+0x170>)
 8001b04:	f000 fb58 	bl	80021b8 <u8g_InitComFn>
  HAL_Delay(100);
 8001b08:	2064      	movs	r0, #100	; 0x64
 8001b0a:	f7ff f801 	bl	8000b10 <HAL_Delay>
  u8g_FirstPage(&u8g);
 8001b0e:	4813      	ldr	r0, [pc, #76]	; (8001b5c <main+0x170>)
 8001b10:	f000 fb7c 	bl	800220c <u8g_FirstPage>
	 } while ( u8g_NextPage(&u8g) );
 8001b14:	4c11      	ldr	r4, [pc, #68]	; (8001b5c <main+0x170>)
	draw();
 8001b16:	f7ff ff1f 	bl	8001958 <draw>
	 } while ( u8g_NextPage(&u8g) );
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f000 fb79 	bl	8002212 <u8g_NextPage>
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d1f8      	bne.n	8001b16 <main+0x12a>
 u8g_Delay(10);
 8001b24:	200a      	movs	r0, #10
 8001b26:	f000 f90f 	bl	8001d48 <u8g_Delay>
 8001b2a:	e7fe      	b.n	8001b2a <main+0x13e>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010800 	.word	0x40010800
 8001b34:	40010c00 	.word	0x40010c00
 8001b38:	00061a80 	.word	0x00061a80
 8001b3c:	200002e0 	.word	0x200002e0
 8001b40:	40005400 	.word	0x40005400
 8001b44:	20000388 	.word	0x20000388
 8001b48:	40013000 	.word	0x40013000
 8001b4c:	20000340 	.word	0x20000340
 8001b50:	40013800 	.word	0x40013800
 8001b54:	08001d4d 	.word	0x08001d4d
 8001b58:	2000000c 	.word	0x2000000c
 8001b5c:	20000210 	.word	0x20000210

08001b60 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b60:	4b20      	ldr	r3, [pc, #128]	; (8001be4 <HAL_MspInit+0x84>)
{
 8001b62:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b64:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b66:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	619a      	str	r2, [r3, #24]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b78:	f7fe ffdc 	bl	8000b34 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f06f 000b 	mvn.w	r0, #11
 8001b82:	4611      	mov	r1, r2
 8001b84:	f7fe ffe8 	bl	8000b58 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f06f 000a 	mvn.w	r0, #10
 8001b8e:	4611      	mov	r1, r2
 8001b90:	f7fe ffe2 	bl	8000b58 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f06f 0009 	mvn.w	r0, #9
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	f7fe ffdc 	bl	8000b58 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f06f 0004 	mvn.w	r0, #4
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	f7fe ffd6 	bl	8000b58 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f06f 0003 	mvn.w	r0, #3
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	f7fe ffd0 	bl	8000b58 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f06f 0001 	mvn.w	r0, #1
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	f7fe ffca 	bl	8000b58 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bca:	4611      	mov	r1, r2
 8001bcc:	f7fe ffc4 	bl	8000b58 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bd0:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <HAL_MspInit+0x88>)
 8001bd2:	6853      	ldr	r3, [r2, #4]
 8001bd4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bde:	b003      	add	sp, #12
 8001be0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000

08001bec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001bee:	6802      	ldr	r2, [r0, #0]
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_I2C_MspInit+0x38>)
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d113      	bne.n	8001c1e <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf6:	23c0      	movs	r3, #192	; 0xc0
 8001bf8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfa:	2312      	movs	r3, #18
 8001bfc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfe:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	a902      	add	r1, sp, #8
 8001c02:	4809      	ldr	r0, [pc, #36]	; (8001c28 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c04:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	f7ff f803 	bl	8000c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_I2C_MspInit+0x40>)
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001c12:	61da      	str	r2, [r3, #28]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c1e:	b007      	add	sp, #28
 8001c20:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c24:	40005400 	.word	0x40005400
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40021000 	.word	0x40021000

08001c30 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001c32:	6802      	ldr	r2, [r0, #0]
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <HAL_SPI_MspInit+0x4c>)
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d11d      	bne.n	8001c76 <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c3a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8001c3e:	699a      	ldr	r2, [r3, #24]
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c40:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c46:	619a      	str	r2, [r3, #24]
 8001c48:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	480d      	ldr	r0, [pc, #52]	; (8001c80 <HAL_SPI_MspInit+0x50>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c54:	2320      	movs	r3, #32
 8001c56:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c60:	f7fe ffd6 	bl	8000c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c64:	2340      	movs	r3, #64	; 0x40
 8001c66:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c68:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	a902      	add	r1, sp, #8
 8001c6c:	4804      	ldr	r0, [pc, #16]	; (8001c80 <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f7fe ffcd 	bl	8000c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c76:	b007      	add	sp, #28
 8001c78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c7c:	40013000 	.word	0x40013000
 8001c80:	40010800 	.word	0x40010800

08001c84 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001c86:	6802      	ldr	r2, [r0, #0]
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_UART_MspInit+0x50>)
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d11f      	bne.n	8001cce <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c8e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001c92:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c9a:	619a      	str	r2, [r3, #24]
 8001c9c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	480e      	ldr	r0, [pc, #56]	; (8001cd8 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cac:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f7fe ffab 	bl	8000c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cbe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc0:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	a902      	add	r1, sp, #8
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cca:	f7fe ffa1 	bl	8000c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cce:	b007      	add	sp, #28
 8001cd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cd4:	40013800 	.word	0x40013800
 8001cd8:	40010800 	.word	0x40010800

08001cdc <NMI_Handler>:
 8001cdc:	4770      	bx	lr

08001cde <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001cde:	e7fe      	b.n	8001cde <HardFault_Handler>

08001ce0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001ce0:	e7fe      	b.n	8001ce0 <MemManage_Handler>

08001ce2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001ce2:	e7fe      	b.n	8001ce2 <BusFault_Handler>

08001ce4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001ce4:	e7fe      	b.n	8001ce4 <UsageFault_Handler>

08001ce6 <SVC_Handler>:
 8001ce6:	4770      	bx	lr

08001ce8 <DebugMon_Handler>:
 8001ce8:	4770      	bx	lr

08001cea <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001cea:	4770      	bx	lr

08001cec <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001cec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cee:	f7fe fefd 	bl	8000aec <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001cf6:	f7fe bf86 	b.w	8000c06 <HAL_SYSTICK_IRQHandler>
	...

08001cfc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <SystemInit+0x40>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001d06:	6859      	ldr	r1, [r3, #4]
 8001d08:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <SystemInit+0x44>)
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d18:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d20:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001d28:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001d2a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d2e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <SystemInit+0x48>)
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	f8ff0000 	.word	0xf8ff0000
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <u8g_Delay>:

 static uint8_t control = 0;
 void u8g_Delay(uint16_t val)  
 {  

  HAL_Delay(val);
 8001d48:	f7fe bee2 	b.w	8000b10 <HAL_Delay>

08001d4c <u8g_com_hw_i2c_fn>:
      for (i = 0; i < 10000; i++);
 }  


 uint8_t u8g_com_hw_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
 {  
 8001d4c:	b510      	push	{r4, lr}
  switch(msg)  
 8001d4e:	3902      	subs	r1, #2
 {  
 8001d50:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
  switch(msg)  
 8001d54:	2905      	cmp	r1, #5
 8001d56:	d807      	bhi.n	8001d68 <u8g_com_hw_i2c_fn+0x1c>
 8001d58:	e8df f001 	tbb	[pc, r1]
 8001d5c:	0c060603 	.word	0x0c060603
 8001d60:	1c1c      	.short	0x1c1c
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <u8g_com_hw_i2c_fn+0x6c>)
    u8g_MicroDelay();  
    break;  

   case U8G_COM_MSG_ADDRESS:           /* define cmd (arg_val = 0) or data mode (arg_val = 1) */  
    u8g_10MicroDelay();  
    if (arg_val == 0)
 8001d64:	b922      	cbnz	r2, 8001d70 <u8g_com_hw_i2c_fn+0x24>
    {  
         control = 0;
    }  
    else  
    {
         control = 0x40;
 8001d66:	701a      	strb	r2, [r3, #0]
   }

    break;  
  }  
  return 1;  
 }
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f50d 7d7c 	add.w	sp, sp, #1008	; 0x3f0
 8001d6e:	bd10      	pop	{r4, pc}
         control = 0x40;
 8001d70:	2240      	movs	r2, #64	; 0x40
 8001d72:	e7f8      	b.n	8001d66 <u8g_com_hw_i2c_fn+0x1a>
        buffer[0] = control;
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <u8g_com_hw_i2c_fn+0x6c>)
        buffer[1] = arg_val;
 8001d76:	f88d 2009 	strb.w	r2, [sp, #9]
        buffer[0] = control;
 8001d7a:	781b      	ldrb	r3, [r3, #0]
        HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t*) buffer, 2, I2C_TIMEOUT);
 8001d7c:	aa02      	add	r2, sp, #8
        buffer[0] = control;
 8001d7e:	f88d 3008 	strb.w	r3, [sp, #8]
        HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t*) buffer, 2, I2C_TIMEOUT);
 8001d82:	f242 7310 	movw	r3, #10000	; 0x2710
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2302      	movs	r3, #2
           HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t *)buffer, arg_val, I2C_TIMEOUT);
 8001d8a:	2178      	movs	r1, #120	; 0x78
 8001d8c:	480b      	ldr	r0, [pc, #44]	; (8001dbc <u8g_com_hw_i2c_fn+0x70>)
 8001d8e:	f7ff f973 	bl	8001078 <HAL_I2C_Master_Transmit>
    break;  
 8001d92:	e7e9      	b.n	8001d68 <u8g_com_hw_i2c_fn+0x1c>
           buffer[0] = control;
 8001d94:	4908      	ldr	r1, [pc, #32]	; (8001db8 <u8g_com_hw_i2c_fn+0x6c>)
 8001d96:	a802      	add	r0, sp, #8
 8001d98:	7809      	ldrb	r1, [r1, #0]
 8001d9a:	7001      	strb	r1, [r0, #0]
           for (int i = 1; i <= arg_val; i++)
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4291      	cmp	r1, r2
 8001da0:	dd05      	ble.n	8001dae <u8g_com_hw_i2c_fn+0x62>
           HAL_I2C_Master_Transmit(&I2C_HANDLER, DEVICE_ADDRESS, (uint8_t *)buffer, arg_val, I2C_TIMEOUT);
 8001da2:	f242 7310 	movw	r3, #10000	; 0x2710
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	4613      	mov	r3, r2
 8001daa:	4602      	mov	r2, r0
 8001dac:	e7ed      	b.n	8001d8a <u8g_com_hw_i2c_fn+0x3e>
                buffer[i] = *(ptr++);
 8001dae:	f813 4b01 	ldrb.w	r4, [r3], #1
 8001db2:	5444      	strb	r4, [r0, r1]
           for (int i = 1; i <= arg_val; i++)
 8001db4:	3101      	adds	r1, #1
 8001db6:	e7f2      	b.n	8001d9e <u8g_com_hw_i2c_fn+0x52>
 8001db8:	2000024c 	.word	0x2000024c
 8001dbc:	200002e0 	.word	0x200002e0

08001dc0 <u8g_DrawHBitmapP>:
  }
}


void u8g_DrawHBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, const u8g_pgm_uint8_t *bitmap)
{
 8001dc0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001dc4:	4607      	mov	r7, r0
 8001dc6:	460d      	mov	r5, r1
 8001dc8:	4690      	mov	r8, r2
 8001dca:	461c      	mov	r4, r3
 8001dcc:	9e08      	ldr	r6, [sp, #32]
  while( cnt > 0 )
 8001dce:	b914      	cbnz	r4, 8001dd6 <u8g_DrawHBitmapP+0x16>
    u8g_Draw8Pixel(u8g, x, y, 0, u8g_pgm_read(bitmap));
    bitmap++;
    cnt--;
    x+=8;
  }
}
 8001dd0:	b002      	add	sp, #8
 8001dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    u8g_Draw8Pixel(u8g, x, y, 0, u8g_pgm_read(bitmap));
 8001dd6:	f816 3b01 	ldrb.w	r3, [r6], #1
 8001dda:	4629      	mov	r1, r5
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	4642      	mov	r2, r8
 8001de0:	2300      	movs	r3, #0
 8001de2:	4638      	mov	r0, r7
    cnt--;
 8001de4:	3c01      	subs	r4, #1
    x+=8;
 8001de6:	3508      	adds	r5, #8
    u8g_Draw8Pixel(u8g, x, y, 0, u8g_pgm_read(bitmap));
 8001de8:	f000 fa1e 	bl	8002228 <u8g_Draw8Pixel>
    cnt--;
 8001dec:	b2e4      	uxtb	r4, r4
    x+=8;
 8001dee:	b2ed      	uxtb	r5, r5
 8001df0:	e7ed      	b.n	8001dce <u8g_DrawHBitmapP+0xe>

08001df2 <u8g_DrawBitmapP>:

void u8g_DrawBitmapP(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t cnt, u8g_uint_t h, const u8g_pgm_uint8_t *bitmap)
{
 8001df2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001df6:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8001dfa:	461e      	mov	r6, r3
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	9500      	str	r5, [sp, #0]
 8001e00:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
{
 8001e04:	4680      	mov	r8, r0
 8001e06:	4689      	mov	r9, r1
 8001e08:	4614      	mov	r4, r2
 8001e0a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  if ( u8g_IsBBXIntersection(u8g, x, y, cnt*8, h) == 0 )
 8001e0c:	f000 f813 	bl	8001e36 <u8g_IsBBXIntersection>
 8001e10:	b118      	cbz	r0, 8001e1a <u8g_DrawBitmapP+0x28>
 8001e12:	4425      	add	r5, r4
 8001e14:	b2ed      	uxtb	r5, r5
    return;
  while( h > 0 )
 8001e16:	42ac      	cmp	r4, r5
 8001e18:	d102      	bne.n	8001e20 <u8g_DrawBitmapP+0x2e>
    u8g_DrawHBitmapP(u8g, x, y, cnt, bitmap);
    bitmap += cnt;
    y++;
    h--;
  }
}
 8001e1a:	b003      	add	sp, #12
 8001e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    u8g_DrawHBitmapP(u8g, x, y, cnt, bitmap);
 8001e20:	9700      	str	r7, [sp, #0]
 8001e22:	4622      	mov	r2, r4
 8001e24:	4633      	mov	r3, r6
 8001e26:	4649      	mov	r1, r9
 8001e28:	4640      	mov	r0, r8
    y++;
 8001e2a:	3401      	adds	r4, #1
    u8g_DrawHBitmapP(u8g, x, y, cnt, bitmap);
 8001e2c:	f7ff ffc8 	bl	8001dc0 <u8g_DrawHBitmapP>
 8001e30:	4437      	add	r7, r6
    y++;
 8001e32:	b2e4      	uxtb	r4, r4
 8001e34:	e7ef      	b.n	8001e16 <u8g_DrawBitmapP+0x24>

08001e36 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8001e36:	b570      	push	{r4, r5, r6, lr}
  register u8g_uint_t tmp;
  tmp = y;
  tmp += h;
  tmp--;
 8001e38:	f89d 4010 	ldrb.w	r4, [sp, #16]
  if ( v0 <= a1 )
 8001e3c:	f890 603b 	ldrb.w	r6, [r0, #59]	; 0x3b
  tmp--;
 8001e40:	3c01      	subs	r4, #1
 8001e42:	4414      	add	r4, r2
  if ( v0 <= a1 )
 8001e44:	4296      	cmp	r6, r2
  tmp--;
 8001e46:	b2e4      	uxtb	r4, r4
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8001e48:	f890 5039 	ldrb.w	r5, [r0, #57]	; 0x39
  if ( v0 <= a1 )
 8001e4c:	d30f      	bcc.n	8001e6e <u8g_IsBBXIntersection+0x38>
    if ( v1 >= a0 )
 8001e4e:	42ac      	cmp	r4, r5
 8001e50:	d201      	bcs.n	8001e56 <u8g_IsBBXIntersection+0x20>
      if ( v0 > v1 )
 8001e52:	42a2      	cmp	r2, r4
 8001e54:	d90d      	bls.n	8001e72 <u8g_IsBBXIntersection+0x3c>
    return 0; 
  
  tmp = x;
  tmp += w;
  tmp--;
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8001e56:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
  if ( v0 <= a1 )
 8001e5a:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
  tmp--;
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	440b      	add	r3, r1
  if ( v0 <= a1 )
 8001e62:	4288      	cmp	r0, r1
  tmp--;
 8001e64:	b2db      	uxtb	r3, r3
  if ( v0 <= a1 )
 8001e66:	d206      	bcs.n	8001e76 <u8g_IsBBXIntersection+0x40>
    if ( v1 >= a0 )
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d206      	bcs.n	8001e7a <u8g_IsBBXIntersection+0x44>
 8001e6c:	e001      	b.n	8001e72 <u8g_IsBBXIntersection+0x3c>
 8001e6e:	42ac      	cmp	r4, r5
 8001e70:	d2ef      	bcs.n	8001e52 <u8g_IsBBXIntersection+0x1c>
    return 0; 
 8001e72:	2000      	movs	r0, #0
 8001e74:	bd70      	pop	{r4, r5, r6, pc}
    if ( v1 >= a0 )
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d204      	bcs.n	8001e84 <u8g_IsBBXIntersection+0x4e>
    return 0; 
 8001e7a:	4299      	cmp	r1, r3
 8001e7c:	bf94      	ite	ls
 8001e7e:	2000      	movls	r0, #0
 8001e80:	2001      	movhi	r0, #1
 8001e82:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8001e84:	2001      	movs	r0, #1
 8001e86:	bd70      	pop	{r4, r5, r6, pc}

08001e88 <u8g_InitCom>:
*/

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 8001e88:	b410      	push	{r4}
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8001e8a:	688c      	ldr	r4, [r1, #8]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	46a4      	mov	ip, r4
 8001e90:	2101      	movs	r1, #1
}
 8001e92:	bc10      	pop	{r4}
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8001e94:	4760      	bx	ip

08001e96 <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 8001e96:	b410      	push	{r4}
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 8001e98:	688c      	ldr	r4, [r1, #8]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	46a4      	mov	ip, r4
 8001e9e:	2103      	movs	r1, #3
}
 8001ea0:	bc10      	pop	{r4}
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 8001ea2:	4760      	bx	ip

08001ea4 <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8001ea4:	2300      	movs	r3, #0
{
 8001ea6:	b410      	push	{r4}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8001ea8:	688c      	ldr	r4, [r1, #8]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	46a4      	mov	ip, r4
 8001eae:	2104      	movs	r1, #4
}
 8001eb0:	bc10      	pop	{r4}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8001eb2:	4760      	bx	ip

08001eb4 <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8001eb4:	b410      	push	{r4}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8001eb6:	688c      	ldr	r4, [r1, #8]
 8001eb8:	2300      	movs	r3, #0
 8001eba:	46a4      	mov	ip, r4
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2104      	movs	r1, #4
}
 8001ec0:	bc10      	pop	{r4}
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8001ec2:	4760      	bx	ip

08001ec4 <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8001ec4:	b410      	push	{r4}
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8001ec6:	688c      	ldr	r4, [r1, #8]
 8001ec8:	2300      	movs	r3, #0
 8001eca:	46a4      	mov	ip, r4
 8001ecc:	2102      	movs	r1, #2
}
 8001ece:	bc10      	pop	{r4}
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8001ed0:	4760      	bx	ip

08001ed2 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8001ed2:	b410      	push	{r4}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 8001ed4:	688c      	ldr	r4, [r1, #8]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	46a4      	mov	ip, r4
 8001eda:	2105      	movs	r1, #5
}
 8001edc:	bc10      	pop	{r4}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 8001ede:	4760      	bx	ip

08001ee0 <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 8001ee0:	b410      	push	{r4}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 8001ee2:	688c      	ldr	r4, [r1, #8]
 8001ee4:	2106      	movs	r1, #6
 8001ee6:	46a4      	mov	ip, r4
}
 8001ee8:	bc10      	pop	{r4}
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 8001eea:	4760      	bx	ip

08001eec <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 8001eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eee:	4605      	mov	r5, r0
 8001ef0:	460e      	mov	r6, r1
 8001ef2:	1e57      	subs	r7, r2, #1
  uint8_t is_escape = 0;
 8001ef4:	2000      	movs	r0, #0
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 8001ef6:	f817 4f01 	ldrb.w	r4, [r7, #1]!
    if ( is_escape == 0 )
 8001efa:	b950      	cbnz	r0, 8001f12 <u8g_WriteEscSeqP+0x26>
    {
      if ( value != 255 )
 8001efc:	2cff      	cmp	r4, #255	; 0xff
 8001efe:	d038      	beq.n	8001f72 <u8g_WriteEscSeqP+0x86>
    }
    else
    {
      if ( value == 255 )
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8001f00:	4622      	mov	r2, r4
 8001f02:	4631      	mov	r1, r6
 8001f04:	4628      	mov	r0, r5
 8001f06:	f7ff ffe4 	bl	8001ed2 <u8g_WriteByte>
 8001f0a:	2800      	cmp	r0, #0
 8001f0c:	d1f2      	bne.n	8001ef4 <u8g_WriteEscSeqP+0x8>
          return 0;
 8001f0e:	2000      	movs	r0, #0
      is_escape = 0;
    }
    esc_seq++;
  }
  return 1;
}
 8001f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ( value == 255 )
 8001f12:	2cff      	cmp	r4, #255	; 0xff
 8001f14:	d0f4      	beq.n	8001f00 <u8g_WriteEscSeqP+0x14>
      else if ( value == 254 )
 8001f16:	2cfe      	cmp	r4, #254	; 0xfe
 8001f18:	d0fa      	beq.n	8001f10 <u8g_WriteEscSeqP+0x24>
      else if ( value >= 0x0f0 )
 8001f1a:	2cef      	cmp	r4, #239	; 0xef
 8001f1c:	d8ea      	bhi.n	8001ef4 <u8g_WriteEscSeqP+0x8>
      else if ( value >= 0xe0  )
 8001f1e:	2cdf      	cmp	r4, #223	; 0xdf
 8001f20:	d906      	bls.n	8001f30 <u8g_WriteEscSeqP+0x44>
        u8g_SetAddress(u8g, dev, value & 0x0f);
 8001f22:	f004 020f 	and.w	r2, r4, #15
 8001f26:	4631      	mov	r1, r6
 8001f28:	4628      	mov	r0, r5
 8001f2a:	f7ff ffcb 	bl	8001ec4 <u8g_SetAddress>
 8001f2e:	e7e1      	b.n	8001ef4 <u8g_WriteEscSeqP+0x8>
      else if ( value >= 0xd0 )
 8001f30:	2ccf      	cmp	r4, #207	; 0xcf
 8001f32:	d906      	bls.n	8001f42 <u8g_WriteEscSeqP+0x56>
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8001f34:	f004 020f 	and.w	r2, r4, #15
 8001f38:	4631      	mov	r1, r6
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	f7ff ffab 	bl	8001e96 <u8g_SetChipSelect>
 8001f40:	e7d8      	b.n	8001ef4 <u8g_WriteEscSeqP+0x8>
      else if ( value >= 0xc0 )
 8001f42:	2cbf      	cmp	r4, #191	; 0xbf
 8001f44:	d912      	bls.n	8001f6c <u8g_WriteEscSeqP+0x80>
 8001f46:	0124      	lsls	r4, r4, #4
        value+=2;
 8001f48:	3402      	adds	r4, #2
        u8g_SetResetLow(u8g, dev);
 8001f4a:	4631      	mov	r1, r6
 8001f4c:	4628      	mov	r0, r5
        u8g_Delay(value);
 8001f4e:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        u8g_SetResetLow(u8g, dev);
 8001f52:	f7ff ffa7 	bl	8001ea4 <u8g_SetResetLow>
        u8g_Delay(value);
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7ff fef6 	bl	8001d48 <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 8001f5c:	4631      	mov	r1, r6
 8001f5e:	4628      	mov	r0, r5
 8001f60:	f7ff ffa8 	bl	8001eb4 <u8g_SetResetHigh>
        u8g_Delay(value);
 8001f64:	4620      	mov	r0, r4
 8001f66:	f7ff feef 	bl	8001d48 <u8g_Delay>
 8001f6a:	e7c3      	b.n	8001ef4 <u8g_WriteEscSeqP+0x8>
      else if ( value <= 127 )
 8001f6c:	0623      	lsls	r3, r4, #24
 8001f6e:	d4c1      	bmi.n	8001ef4 <u8g_WriteEscSeqP+0x8>
 8001f70:	e7f8      	b.n	8001f64 <u8g_WriteEscSeqP+0x78>
        is_escape = 1;
 8001f72:	2001      	movs	r0, #1
    value = u8g_pgm_read(esc_seq);
 8001f74:	e7bf      	b.n	8001ef6 <u8g_WriteEscSeqP+0xa>

08001f76 <u8g_com_null_fn>:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
}
 8001f76:	2001      	movs	r0, #1
 8001f78:	4770      	bx	lr
	...

08001f7c <u8g_dev_ssd1306_128x64_fn>:
  U8G_ESC_CS(0),             /* disable chip, bugfix 12 nov 2014 */
  U8G_ESC_END                /* end of sequence */
};

uint8_t u8g_dev_ssd1306_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8001f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f80:	4698      	mov	r8, r3
  switch(msg)
 8001f82:	f1a2 030a 	sub.w	r3, r2, #10
{
 8001f86:	4605      	mov	r5, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	4616      	mov	r6, r2
  switch(msg)
 8001f8c:	2b0b      	cmp	r3, #11
 8001f8e:	d80f      	bhi.n	8001fb0 <u8g_dev_ssd1306_128x64_fn+0x34>
 8001f90:	e8df f003 	tbb	[pc, r3]
 8001f94:	0e0e0e06 	.word	0x0e0e0e06
 8001f98:	3a320e0e 	.word	0x3a320e0e
 8001f9c:	160e0e0e 	.word	0x160e0e0e
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f7ff ff71 	bl	8001e88 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_adafruit2_init_seq);
 8001fa6:	4a1a      	ldr	r2, [pc, #104]	; (8002010 <u8g_dev_ssd1306_128x64_fn+0x94>)
 8001fa8:	4621      	mov	r1, r4
 8001faa:	4628      	mov	r0, r5
 8001fac:	f7ff ff9e 	bl	8001eec <u8g_WriteEscSeqP>
      return 1;
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
      return 1;
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8001fb0:	4643      	mov	r3, r8
 8001fb2:	4632      	mov	r2, r6
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	4628      	mov	r0, r5
}
 8001fb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 8001fbc:	f000 b9fa 	b.w	80023b4 <u8g_dev_pb8v1_base_fn>
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8001fc0:	684f      	ldr	r7, [r1, #4]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_data_start);    
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <u8g_dev_ssd1306_128x64_fn+0x98>)
 8001fc4:	f7ff ff92 	bl	8001eec <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 8001fc8:	793a      	ldrb	r2, [r7, #4]
 8001fca:	4621      	mov	r1, r4
 8001fcc:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 8001fd0:	4628      	mov	r0, r5
 8001fd2:	f7ff ff7e 	bl	8001ed2 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4621      	mov	r1, r4
 8001fda:	4628      	mov	r0, r5
 8001fdc:	f7ff ff72 	bl	8001ec4 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8001fe0:	4622      	mov	r2, r4
 8001fe2:	4629      	mov	r1, r5
 8001fe4:	4638      	mov	r0, r7
 8001fe6:	f000 f98d 	bl	8002304 <u8g_pb_WriteBuffer>
 8001fea:	b178      	cbz	r0, 800200c <u8g_dev_ssd1306_128x64_fn+0x90>
        u8g_SetChipSelect(u8g, dev, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	4621      	mov	r1, r4
 8001ff0:	4628      	mov	r0, r5
 8001ff2:	f7ff ff50 	bl	8001e96 <u8g_SetChipSelect>
      break;
 8001ff6:	e7db      	b.n	8001fb0 <u8g_dev_ssd1306_128x64_fn+0x34>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8001ff8:	4a07      	ldr	r2, [pc, #28]	; (8002018 <u8g_dev_ssd1306_128x64_fn+0x9c>)
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8001ffa:	4621      	mov	r1, r4
 8001ffc:	4628      	mov	r0, r5
 8001ffe:	f7ff ff75 	bl	8001eec <u8g_WriteEscSeqP>
      return 1;
 8002002:	2001      	movs	r0, #1
 8002004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <u8g_dev_ssd1306_128x64_fn+0xa0>)
 800200a:	e7f6      	b.n	8001ffa <u8g_dev_ssd1306_128x64_fn+0x7e>
}
 800200c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002010:	08004398 	.word	0x08004398
 8002014:	080043be 	.word	0x080043be
 8002018:	080043d1 	.word	0x080043d1
 800201c:	080043c6 	.word	0x080043c6

08002020 <u8g_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
  return 0;
}
 8002020:	2000      	movs	r0, #0
 8002022:	4770      	bx	lr

08002024 <u8g_UpdateRefHeight>:
  if ( u8g->font == NULL )
 8002024:	6883      	ldr	r3, [r0, #8]
 8002026:	b1c3      	cbz	r3, 800205a <u8g_UpdateRefHeight+0x36>
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 8002028:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800202c:	b9b2      	cbnz	r2, 800205c <u8g_UpdateRefHeight+0x38>
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 800202e:	795a      	ldrb	r2, [r3, #5]
 8002030:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 8002034:	7b1b      	ldrb	r3, [r3, #12]
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 8002036:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 800203a:	f990 202a 	ldrsb.w	r2, [r0, #42]	; 0x2a
 800203e:	f990 3029 	ldrsb.w	r3, [r0, #41]	; 0x29
 8002042:	1a9b      	subs	r3, r3, r2
  if ( u8g->font_line_spacing_factor != 64 )
 8002044:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 8002048:	b29b      	uxth	r3, r3
  if ( u8g->font_line_spacing_factor != 64 )
 800204a:	2a40      	cmp	r2, #64	; 0x40
    ls &= 255;
 800204c:	bf1e      	ittt	ne
 800204e:	b2db      	uxtbne	r3, r3
    ls *= u8g->font_line_spacing_factor;
 8002050:	4353      	mulne	r3, r2
    ls >>= 6;
 8002052:	f3c3 138f 	ubfxne	r3, r3, #6, #16
  u8g->line_spacing = ls;
 8002056:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 800205a:	4770      	bx	lr
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 800205c:	2a01      	cmp	r2, #1
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 800205e:	bf0b      	itete	eq
 8002060:	7bda      	ldrbeq	r2, [r3, #15]
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 8002062:	7b5a      	ldrbne	r2, [r3, #13]
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 8002064:	f880 2029 	strbeq.w	r2, [r0, #41]	; 0x29
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 8002068:	f880 2029 	strbne.w	r2, [r0, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 800206c:	bf0c      	ite	eq
 800206e:	7c1b      	ldrbeq	r3, [r3, #16]
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 8002070:	7b9b      	ldrbne	r3, [r3, #14]
 8002072:	e7e0      	b.n	8002036 <u8g_UpdateRefHeight+0x12>

08002074 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8002074:	4b01      	ldr	r3, [pc, #4]	; (800207c <u8g_SetFontPosBaseline+0x8>)
 8002076:	6243      	str	r3, [r0, #36]	; 0x24
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	08002021 	.word	0x08002021

08002080 <u8g_SetFont>:
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
  if ( u8g->font != font )
 8002080:	6883      	ldr	r3, [r0, #8]
{
 8002082:	b510      	push	{r4, lr}
  if ( u8g->font != font )
 8002084:	428b      	cmp	r3, r1
 8002086:	d004      	beq.n	8002092 <u8g_SetFont+0x12>
  {
    u8g->font = font;
 8002088:	6081      	str	r1, [r0, #8]
    u8g_UpdateRefHeight(u8g);
 800208a:	f7ff ffcb 	bl	8002024 <u8g_UpdateRefHeight>
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 800208e:	4b01      	ldr	r3, [pc, #4]	; (8002094 <u8g_SetFont+0x14>)
 8002090:	6243      	str	r3, [r0, #36]	; 0x24
 8002092:	bd10      	pop	{r4, pc}
 8002094:	08002021 	.word	0x08002021

08002098 <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8002098:	b410      	push	{r4}
  return dev->dev_fn(u8g, dev, msg, arg); 
 800209a:	680c      	ldr	r4, [r1, #0]
 800209c:	46a4      	mov	ip, r4
}
 800209e:	bc10      	pop	{r4}
  return dev->dev_fn(u8g, dev, msg, arg); 
 80020a0:	4760      	bx	ip

080020a2 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 80020a2:	b538      	push	{r3, r4, r5, lr}
 80020a4:	4604      	mov	r4, r0
 80020a6:	460d      	mov	r5, r1
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80020a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80020aa:	2002      	movs	r0, #2
 80020ac:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 80020ae:	4629      	mov	r1, r5
 80020b0:	220a      	movs	r2, #10
 80020b2:	2300      	movs	r3, #0
 80020b4:	4620      	mov	r0, r4
 80020b6:	f7ff ffef 	bl	8002098 <u8g_call_dev_fn>
 80020ba:	4605      	mov	r5, r0
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 80020bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020be:	2003      	movs	r0, #3
 80020c0:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80020c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020c4:	2000      	movs	r0, #0
 80020c6:	4798      	blx	r3
  return r;
}
 80020c8:	4628      	mov	r0, r5
 80020ca:	bd38      	pop	{r3, r4, r5, pc}

080020cc <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 80020cc:	b570      	push	{r4, r5, r6, lr}
 80020ce:	4604      	mov	r4, r0
 80020d0:	460d      	mov	r5, r1
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80020d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80020d4:	2002      	movs	r0, #2
 80020d6:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 80020d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020da:	2001      	movs	r0, #1
 80020dc:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 80020de:	4629      	mov	r1, r5
 80020e0:	2300      	movs	r3, #0
 80020e2:	2214      	movs	r2, #20
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff ffd7 	bl	8002098 <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 80020ea:	f104 0338 	add.w	r3, r4, #56	; 0x38
 80020ee:	4629      	mov	r1, r5
 80020f0:	4620      	mov	r0, r4
 80020f2:	2217      	movs	r2, #23
 80020f4:	f7ff ffd0 	bl	8002098 <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 80020f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80020fa:	2000      	movs	r0, #0
}
 80020fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002100:	4718      	bx	r3

08002102 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8002102:	b570      	push	{r4, r5, r6, lr}
 8002104:	4604      	mov	r4, r0
 8002106:	460e      	mov	r6, r1
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8002108:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800210a:	2002      	movs	r0, #2
 800210c:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 800210e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002110:	2001      	movs	r0, #1
 8002112:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 8002114:	2300      	movs	r3, #0
 8002116:	2215      	movs	r2, #21
 8002118:	4631      	mov	r1, r6
 800211a:	4620      	mov	r0, r4
 800211c:	f7ff ffbc 	bl	8002098 <u8g_call_dev_fn>
  if ( r != 0 )
 8002120:	4605      	mov	r5, r0
 8002122:	b130      	cbz	r0, 8002132 <u8g_NextPageLL+0x30>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8002124:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8002128:	2217      	movs	r2, #23
 800212a:	4631      	mov	r1, r6
 800212c:	4620      	mov	r0, r4
 800212e:	f7ff ffb3 	bl	8002098 <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8002132:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002134:	2000      	movs	r0, #0
 8002136:	4798      	blx	r3
  return r;
}
 8002138:	4628      	mov	r0, r5
 800213a:	bd70      	pop	{r4, r5, r6, pc}

0800213c <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 800213c:	b507      	push	{r0, r1, r2, lr}
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 800213e:	2246      	movs	r2, #70	; 0x46
 8002140:	f10d 0307 	add.w	r3, sp, #7
 8002144:	f7ff ffa8 	bl	8002098 <u8g_call_dev_fn>
  return r;
}
 8002148:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800214c:	b003      	add	sp, #12
 800214e:	f85d fb04 	ldr.w	pc, [sp], #4

08002152 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8002152:	b507      	push	{r0, r1, r2, lr}
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 8002154:	2247      	movs	r2, #71	; 0x47
 8002156:	f10d 0307 	add.w	r3, sp, #7
 800215a:	f7ff ff9d 	bl	8002098 <u8g_call_dev_fn>
  return r;
}
 800215e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002162:	b003      	add	sp, #12
 8002164:	f85d fb04 	ldr.w	pc, [sp], #4

08002168 <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 8002168:	2300      	movs	r3, #0
 800216a:	2248      	movs	r2, #72	; 0x48
 800216c:	f7ff bf94 	b.w	8002098 <u8g_call_dev_fn>

08002170 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 8002170:	b510      	push	{r4, lr}
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 8002172:	6841      	ldr	r1, [r0, #4]
{
 8002174:	4604      	mov	r4, r0
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 8002176:	f7ff ffe1 	bl	800213c <u8g_GetWidthLL>
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 800217a:	6861      	ldr	r1, [r4, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 800217c:	7020      	strb	r0, [r4, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff ffe7 	bl	8002152 <u8g_GetHeightLL>
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8002184:	6861      	ldr	r1, [r4, #4]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 8002186:	7060      	strb	r0, [r4, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8002188:	4620      	mov	r0, r4
 800218a:	f7ff ffed 	bl	8002168 <u8g_GetModeLL>
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800218e:	f104 0338 	add.w	r3, r4, #56	; 0x38
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8002192:	74e0      	strb	r0, [r4, #19]
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8002194:	6861      	ldr	r1, [r4, #4]
 8002196:	4620      	mov	r0, r4
}
 8002198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 800219c:	2217      	movs	r2, #23
 800219e:	f7ff bf7b 	b.w	8002098 <u8g_call_dev_fn>

080021a2 <u8g_Begin>:
  u8g->state_cb = u8g_state_dummy_cb;

}

uint8_t u8g_Begin(u8g_t *u8g)
{
 80021a2:	b510      	push	{r4, lr}
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 80021a4:	6841      	ldr	r1, [r0, #4]
{
 80021a6:	4604      	mov	r4, r0
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 80021a8:	f7ff ff7b 	bl	80020a2 <u8g_InitLL>
 80021ac:	b118      	cbz	r0, 80021b6 <u8g_Begin+0x14>
    return 0;
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 80021ae:	4620      	mov	r0, r4
 80021b0:	f7ff ffde 	bl	8002170 <u8g_UpdateDimension>
  return 1;
 80021b4:	2001      	movs	r0, #1
}
 80021b6:	bd10      	pop	{r4, pc}

080021b8 <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 80021b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u8g->cursor_encoding = 34;
 80021bc:	2322      	movs	r3, #34	; 0x22
  u8g->font = NULL;
 80021be:	2500      	movs	r5, #0
  u8g->cursor_fg_color = 1;
 80021c0:	2601      	movs	r6, #1
  u8g->font = NULL;
 80021c2:	6085      	str	r5, [r0, #8]
  u8g->cursor_font = NULL;
 80021c4:	60c5      	str	r5, [r0, #12]
  u8g->cursor_bg_color = 0;
 80021c6:	7445      	strb	r5, [r0, #17]
  u8g->cursor_fg_color = 1;
 80021c8:	7406      	strb	r6, [r0, #16]
  u8g->cursor_encoding = 34;
 80021ca:	7483      	strb	r3, [r0, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 80021cc:	6185      	str	r5, [r0, #24]
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
  u8g->arg_pixel.color = idx;
 80021ce:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
{
 80021d2:	4604      	mov	r4, r0
 80021d4:	460f      	mov	r7, r1
 80021d6:	4690      	mov	r8, r2
  u8g_SetFontPosBaseline(u8g);
 80021d8:	f7ff ff4c 	bl	8002074 <u8g_SetFontPosBaseline>
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 80021dc:	2340      	movs	r3, #64	; 0x40
 80021de:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  u8g->state_cb = u8g_state_dummy_cb;
 80021e2:	4b09      	ldr	r3, [pc, #36]	; (8002208 <u8g_InitComFn+0x50>)
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 80021e4:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 80021e8:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
  u8g->font_ref_descent = 0;
 80021ec:	f884 502a 	strb.w	r5, [r4, #42]	; 0x2a
  u8g->line_spacing = 0;
 80021f0:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  u8g->state_cb = u8g_state_dummy_cb;
 80021f4:	6363      	str	r3, [r4, #52]	; 0x34
  u8g->dev = dev;
 80021f6:	6067      	str	r7, [r4, #4]
  return u8g_Begin(u8g);
 80021f8:	4620      	mov	r0, r4
  u8g->dev->com_fn = com_fn;
 80021fa:	f8c7 8008 	str.w	r8, [r7, #8]
}
 80021fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return u8g_Begin(u8g);
 8002202:	f7ff bfce 	b.w	80021a2 <u8g_Begin>
 8002206:	bf00      	nop
 8002208:	0800242d 	.word	0x0800242d

0800220c <u8g_FirstPage>:
  u8g_FirstPageLL(u8g, u8g->dev);
 800220c:	6841      	ldr	r1, [r0, #4]
 800220e:	f7ff bf5d 	b.w	80020cc <u8g_FirstPageLL>

08002212 <u8g_NextPage>:
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8002212:	6983      	ldr	r3, [r0, #24]
{
 8002214:	b510      	push	{r4, lr}
 8002216:	4604      	mov	r4, r0
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8002218:	b103      	cbz	r3, 800221c <u8g_NextPage+0xa>
    u8g->cursor_fn(u8g);
 800221a:	4798      	blx	r3
  return u8g_NextPageLL(u8g, u8g->dev);
 800221c:	6861      	ldr	r1, [r4, #4]
 800221e:	4620      	mov	r0, r4
}
 8002220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return u8g_NextPageLL(u8g, u8g->dev);
 8002224:	f7ff bf6d 	b.w	8002102 <u8g_NextPageLL>

08002228 <u8g_Draw8Pixel>:
{
 8002228:	b470      	push	{r4, r5, r6}
 800222a:	f89d 600c 	ldrb.w	r6, [sp, #12]
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 800222e:	6845      	ldr	r5, [r0, #4]
  arg->x = x;
 8002230:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
  arg->y = y;
 8002234:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
  arg->dir = dir;
 8002238:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  arg->pixel = pixel;
 800223c:	f880 602f 	strb.w	r6, [r0, #47]	; 0x2f
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8002240:	4629      	mov	r1, r5
}
 8002242:	bc70      	pop	{r4, r5, r6}
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 8002244:	f100 032d 	add.w	r3, r0, #45	; 0x2d
 8002248:	223b      	movs	r2, #59	; 0x3b
 800224a:	f7ff bf25 	b.w	8002098 <u8g_call_dev_fn>

0800224e <u8g_page_First>:
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
  p->page_y0 = 0;
 800224e:	2200      	movs	r2, #0
  p->page_y1 = p->page_height;
  p->page_y1--;
 8002250:	7803      	ldrb	r3, [r0, #0]
  p->page_y0 = 0;
 8002252:	7082      	strb	r2, [r0, #2]
  p->page_y1--;
 8002254:	3b01      	subs	r3, #1
 8002256:	70c3      	strb	r3, [r0, #3]
  p->page = 0;
 8002258:	7102      	strb	r2, [r0, #4]
 800225a:	4770      	bx	lr

0800225c <u8g_page_Next>:
}

uint8_t u8g_page_Next(u8g_page_t * p)
{
 800225c:	b510      	push	{r4, lr}
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 800225e:	7881      	ldrb	r1, [r0, #2]
 8002260:	7802      	ldrb	r2, [r0, #0]
  if ( p->page_y0 >= p->total_height )
 8002262:	7844      	ldrb	r4, [r0, #1]
  p->page_y0 += p->page_height;
 8002264:	4411      	add	r1, r2
 8002266:	b2c9      	uxtb	r1, r1
  if ( p->page_y0 >= p->total_height )
 8002268:	42a1      	cmp	r1, r4
  p->page_y0 += p->page_height;
 800226a:	7081      	strb	r1, [r0, #2]
  if ( p->page_y0 >= p->total_height )
 800226c:	d20d      	bcs.n	800228a <u8g_page_Next+0x2e>
    return 0;
  p->page++;
 800226e:	7903      	ldrb	r3, [r0, #4]
 8002270:	3301      	adds	r3, #1
 8002272:	7103      	strb	r3, [r0, #4]
  y1 = p->page_y1;
 8002274:	78c3      	ldrb	r3, [r0, #3]
  y1 += p->page_height;
 8002276:	4413      	add	r3, r2
 8002278:	b2db      	uxtb	r3, r3
  if ( y1 >= p->total_height )
 800227a:	429c      	cmp	r4, r3
  {
    y1 = p->total_height;
    y1--;
 800227c:	bf9c      	itt	ls
 800227e:	f104 33ff 	addls.w	r3, r4, #4294967295
 8002282:	b2db      	uxtbls	r3, r3
  }
  p->page_y1 = y1;
 8002284:	70c3      	strb	r3, [r0, #3]
  
  return 1;
 8002286:	2001      	movs	r0, #1
 8002288:	bd10      	pop	{r4, pc}
    return 0;
 800228a:	2000      	movs	r0, #0
}
 800228c:	bd10      	pop	{r4, pc}

0800228e <u8g_pb_Clear>:
  uint8_t *ptr = (uint8_t *)b->buf;
  uint8_t *end_ptr = ptr;
  end_ptr += b->width;
  do
  {
    *ptr++ = 0;
 800228e:	2100      	movs	r1, #0
  uint8_t *ptr = (uint8_t *)b->buf;
 8002290:	6883      	ldr	r3, [r0, #8]
  end_ptr += b->width;
 8002292:	7942      	ldrb	r2, [r0, #5]
 8002294:	441a      	add	r2, r3
    *ptr++ = 0;
 8002296:	f803 1b01 	strb.w	r1, [r3], #1
  } while( ptr != end_ptr );
 800229a:	429a      	cmp	r2, r3
 800229c:	d1fb      	bne.n	8002296 <u8g_pb_Clear+0x8>
}
 800229e:	4770      	bx	lr

080022a0 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 80022a0:	b510      	push	{r4, lr}
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 80022a2:	78c3      	ldrb	r3, [r0, #3]
  c2 = v1 >= pb->p.page_y0;
 80022a4:	7884      	ldrb	r4, [r0, #2]
  c1 = v0 <= pb->p.page_y1;
 80022a6:	428b      	cmp	r3, r1
 80022a8:	bf34      	ite	cc
 80022aa:	2300      	movcc	r3, #0
 80022ac:	2301      	movcs	r3, #1
  c3 = v0 > v1;
 80022ae:	4291      	cmp	r1, r2
 80022b0:	bf94      	ite	ls
 80022b2:	2100      	movls	r1, #0
 80022b4:	2101      	movhi	r1, #1
  tmp = c1;
  c1 &= c2;
  c2 &= c3;
  c3 &= tmp;
  c1 |= c2;
  c1 |= c3;
 80022b6:	ea43 0001 	orr.w	r0, r3, r1
 80022ba:	4294      	cmp	r4, r2
 80022bc:	bf8c      	ite	hi
 80022be:	2000      	movhi	r0, #0
 80022c0:	f000 0001 	andls.w	r0, r0, #1
 80022c4:	400b      	ands	r3, r1
  return c1 & 1;
}
 80022c6:	4318      	orrs	r0, r3
 80022c8:	bd10      	pop	{r4, pc}

080022ca <u8g_pb_GetPageBox>:
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
  box->x0 = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	700b      	strb	r3, [r1, #0]
  box->y0 = pb->p.page_y0;
 80022ce:	7883      	ldrb	r3, [r0, #2]
 80022d0:	704b      	strb	r3, [r1, #1]
  box->x1 = pb->width;
  box->x1--;
 80022d2:	7943      	ldrb	r3, [r0, #5]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	708b      	strb	r3, [r1, #2]
  box->y1 = pb->p.page_y1;
 80022d8:	78c3      	ldrb	r3, [r0, #3]
 80022da:	70cb      	strb	r3, [r1, #3]
 80022dc:	4770      	bx	lr

080022de <u8g_pb_Is8PixelVisible>:
uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
  v1 = v0;
  switch( arg_pixel->dir )
 80022de:	78ca      	ldrb	r2, [r1, #3]
  v0 = arg_pixel->y;
 80022e0:	784b      	ldrb	r3, [r1, #1]
  switch( arg_pixel->dir )
 80022e2:	2a01      	cmp	r2, #1
 80022e4:	d003      	beq.n	80022ee <u8g_pb_Is8PixelVisible+0x10>
 80022e6:	2a03      	cmp	r2, #3
 80022e8:	d007      	beq.n	80022fa <u8g_pb_Is8PixelVisible+0x1c>
  v1 = v0;
 80022ea:	461a      	mov	r2, r3
 80022ec:	e002      	b.n	80022f4 <u8g_pb_Is8PixelVisible+0x16>
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 80022ee:	f103 0208 	add.w	r2, r3, #8
 80022f2:	b2d2      	uxtb	r2, r2
      break;
    case 3: 
      v0 -= 8;
      break;
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 80022f4:	4619      	mov	r1, r3
 80022f6:	f7ff bfd3 	b.w	80022a0 <u8g_pb_IsYIntersection>
      v0 -= 8;
 80022fa:	f1a3 0108 	sub.w	r1, r3, #8
  v1 = v0;
 80022fe:	461a      	mov	r2, r3
      v0 -= 8;
 8002300:	b2cb      	uxtb	r3, r1
      break;
 8002302:	e7f7      	b.n	80022f4 <u8g_pb_Is8PixelVisible+0x16>

08002304 <u8g_pb_WriteBuffer>:
}



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8002304:	b410      	push	{r4}
 8002306:	460c      	mov	r4, r1
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8002308:	6883      	ldr	r3, [r0, #8]
{
 800230a:	4611      	mov	r1, r2
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 800230c:	7942      	ldrb	r2, [r0, #5]
 800230e:	4620      	mov	r0, r4
}
 8002310:	bc10      	pop	{r4}
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8002312:	f7ff bde5 	b.w	8001ee0 <u8g_WriteSequence>

08002316 <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8002316:	b510      	push	{r4, lr}
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8002318:	6884      	ldr	r4, [r0, #8]
  
  y -= b->p.page_y0;
 800231a:	7880      	ldrb	r0, [r0, #2]
 800231c:	1a10      	subs	r0, r2, r0
  mask = 1;
  y &= 0x07;
  mask <<= y;
 800231e:	2201      	movs	r2, #1
 8002320:	f000 0007 	and.w	r0, r0, #7
 8002324:	4082      	lsls	r2, r0
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	5c60      	ldrb	r0, [r4, r1]
  ptr += x;
  if ( color_index )
 800232a:	b113      	cbz	r3, 8002332 <u8g_pb8v1_set_pixel+0x1c>
  {
    *ptr |= mask;
 800232c:	4302      	orrs	r2, r0
  }
  else
  {
    mask ^=0xff;
    *ptr &= mask;
 800232e:	5462      	strb	r2, [r4, r1]
 8002330:	bd10      	pop	{r4, pc}
 8002332:	ea20 0202 	bic.w	r2, r0, r2
 8002336:	e7fa      	b.n	800232e <u8g_pb8v1_set_pixel+0x18>

08002338 <u8g_pb8v1_SetPixel>:
  }
}


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8002338:	b410      	push	{r4}
 800233a:	460b      	mov	r3, r1
  if ( arg_pixel->y < b->p.page_y0 )
 800233c:	784a      	ldrb	r2, [r1, #1]
 800233e:	7881      	ldrb	r1, [r0, #2]
 8002340:	4291      	cmp	r1, r2
 8002342:	d80a      	bhi.n	800235a <u8g_pb8v1_SetPixel+0x22>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8002344:	78c1      	ldrb	r1, [r0, #3]
 8002346:	4291      	cmp	r1, r2
 8002348:	d307      	bcc.n	800235a <u8g_pb8v1_SetPixel+0x22>
    return;
  if ( arg_pixel->x >= b->width )
 800234a:	7819      	ldrb	r1, [r3, #0]
 800234c:	7944      	ldrb	r4, [r0, #5]
 800234e:	428c      	cmp	r4, r1
 8002350:	d903      	bls.n	800235a <u8g_pb8v1_SetPixel+0x22>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8002352:	791b      	ldrb	r3, [r3, #4]
}
 8002354:	bc10      	pop	{r4}
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8002356:	f7ff bfde 	b.w	8002316 <u8g_pb8v1_set_pixel>
}
 800235a:	bc10      	pop	{r4}
 800235c:	4770      	bx	lr

0800235e <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 800235e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  register uint8_t pixel = arg_pixel->pixel;
  u8g_uint_t dx = 0;
  u8g_uint_t dy = 0;
  
  switch( arg_pixel->dir )
 8002362:	78cb      	ldrb	r3, [r1, #3]
{
 8002364:	4680      	mov	r8, r0
 8002366:	460c      	mov	r4, r1
  register uint8_t pixel = arg_pixel->pixel;
 8002368:	788d      	ldrb	r5, [r1, #2]
  switch( arg_pixel->dir )
 800236a:	2b03      	cmp	r3, #3
 800236c:	d81f      	bhi.n	80023ae <u8g_pb8v1_Set8PixelOpt2+0x50>
 800236e:	e8df f003 	tbb	[pc, r3]
 8002372:	1602      	.short	0x1602
 8002374:	1c19      	.short	0x1c19
  u8g_uint_t dy = 0;
 8002376:	2600      	movs	r6, #0
  {
    case 0: dx++; break;
 8002378:	2701      	movs	r7, #1
    case 3: dy--; break;
  }
  
  do
  {
    if ( pixel & 128 )
 800237a:	062b      	lsls	r3, r5, #24
 800237c:	d503      	bpl.n	8002386 <u8g_pb8v1_Set8PixelOpt2+0x28>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 800237e:	4621      	mov	r1, r4
 8002380:	4640      	mov	r0, r8
 8002382:	f7ff ffd9 	bl	8002338 <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 8002386:	7823      	ldrb	r3, [r4, #0]
    arg_pixel->y += dy;
    pixel <<= 1;
 8002388:	006d      	lsls	r5, r5, #1
    arg_pixel->x += dx;
 800238a:	443b      	add	r3, r7
 800238c:	7023      	strb	r3, [r4, #0]
    arg_pixel->y += dy;
 800238e:	7863      	ldrb	r3, [r4, #1]
  } while( pixel != 0  );
 8002390:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    arg_pixel->y += dy;
 8002394:	4433      	add	r3, r6
 8002396:	7063      	strb	r3, [r4, #1]
  } while( pixel != 0  );
 8002398:	d1ef      	bne.n	800237a <u8g_pb8v1_Set8PixelOpt2+0x1c>
  
}
 800239a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case 1: dy++; break;
 800239e:	2601      	movs	r6, #1
  u8g_uint_t dx = 0;
 80023a0:	2700      	movs	r7, #0
    case 3: dy--; break;
 80023a2:	e7ea      	b.n	800237a <u8g_pb8v1_Set8PixelOpt2+0x1c>
  u8g_uint_t dy = 0;
 80023a4:	2600      	movs	r6, #0
    case 2: dx--; break;
 80023a6:	27ff      	movs	r7, #255	; 0xff
 80023a8:	e7e7      	b.n	800237a <u8g_pb8v1_Set8PixelOpt2+0x1c>
    case 3: dy--; break;
 80023aa:	26ff      	movs	r6, #255	; 0xff
 80023ac:	e7f8      	b.n	80023a0 <u8g_pb8v1_Set8PixelOpt2+0x42>
  u8g_uint_t dy = 0;
 80023ae:	2600      	movs	r6, #0
  u8g_uint_t dx = 0;
 80023b0:	4637      	mov	r7, r6
 80023b2:	e7e2      	b.n	800237a <u8g_pb8v1_Set8PixelOpt2+0x1c>

080023b4 <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
  switch(msg)
 80023b4:	2a32      	cmp	r2, #50	; 0x32
{
 80023b6:	b538      	push	{r3, r4, r5, lr}
 80023b8:	461d      	mov	r5, r3
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 80023ba:	684c      	ldr	r4, [r1, #4]
  switch(msg)
 80023bc:	d01e      	beq.n	80023fc <u8g_dev_pb8v1_base_fn+0x48>
 80023be:	d80c      	bhi.n	80023da <u8g_dev_pb8v1_base_fn+0x26>
 80023c0:	2a15      	cmp	r2, #21
 80023c2:	d020      	beq.n	8002406 <u8g_dev_pb8v1_base_fn+0x52>
 80023c4:	2a17      	cmp	r2, #23
 80023c6:	d027      	beq.n	8002418 <u8g_dev_pb8v1_base_fn+0x64>
 80023c8:	2a14      	cmp	r2, #20
 80023ca:	d115      	bne.n	80023f8 <u8g_dev_pb8v1_base_fn+0x44>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 80023cc:	4620      	mov	r0, r4
 80023ce:	f7ff ff5e 	bl	800228e <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 80023d2:	4620      	mov	r0, r4
 80023d4:	f7ff ff3b 	bl	800224e <u8g_page_First>
 80023d8:	e00e      	b.n	80023f8 <u8g_dev_pb8v1_base_fn+0x44>
  switch(msg)
 80023da:	2a46      	cmp	r2, #70	; 0x46
 80023dc:	d021      	beq.n	8002422 <u8g_dev_pb8v1_base_fn+0x6e>
 80023de:	2a47      	cmp	r2, #71	; 0x47
 80023e0:	d022      	beq.n	8002428 <u8g_dev_pb8v1_base_fn+0x74>
 80023e2:	2a3b      	cmp	r2, #59	; 0x3b
 80023e4:	d108      	bne.n	80023f8 <u8g_dev_pb8v1_base_fn+0x44>
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 80023e6:	4619      	mov	r1, r3
 80023e8:	4620      	mov	r0, r4
 80023ea:	f7ff ff78 	bl	80022de <u8g_pb_Is8PixelVisible>
 80023ee:	b118      	cbz	r0, 80023f8 <u8g_dev_pb8v1_base_fn+0x44>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 80023f0:	4629      	mov	r1, r5
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7ff ffb3 	bl	800235e <u8g_pb8v1_Set8PixelOpt2>
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
  }
  return 1;
 80023f8:	2001      	movs	r0, #1
}
 80023fa:	bd38      	pop	{r3, r4, r5, pc}
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 80023fc:	4619      	mov	r1, r3
 80023fe:	4620      	mov	r0, r4
 8002400:	f7ff ff9a 	bl	8002338 <u8g_pb8v1_SetPixel>
 8002404:	e7f8      	b.n	80023f8 <u8g_dev_pb8v1_base_fn+0x44>
      if ( u8g_page_Next(&(pb->p)) == 0 )
 8002406:	4620      	mov	r0, r4
 8002408:	f7ff ff28 	bl	800225c <u8g_page_Next>
 800240c:	2800      	cmp	r0, #0
 800240e:	d0f4      	beq.n	80023fa <u8g_dev_pb8v1_base_fn+0x46>
      u8g_pb_Clear(pb);
 8002410:	4620      	mov	r0, r4
 8002412:	f7ff ff3c 	bl	800228e <u8g_pb_Clear>
 8002416:	e7ef      	b.n	80023f8 <u8g_dev_pb8v1_base_fn+0x44>
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 8002418:	4619      	mov	r1, r3
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff ff55 	bl	80022ca <u8g_pb_GetPageBox>
 8002420:	e7ea      	b.n	80023f8 <u8g_dev_pb8v1_base_fn+0x44>
      *((u8g_uint_t *)arg) = pb->width;
 8002422:	7963      	ldrb	r3, [r4, #5]
      *((u8g_uint_t *)arg) = pb->p.total_height;
 8002424:	702b      	strb	r3, [r5, #0]
 8002426:	e7e7      	b.n	80023f8 <u8g_dev_pb8v1_base_fn+0x44>
 8002428:	7863      	ldrb	r3, [r4, #1]
 800242a:	e7fb      	b.n	8002424 <u8g_dev_pb8v1_base_fn+0x70>

0800242c <u8g_state_dummy_cb>:
 800242c:	4770      	bx	lr
	...

08002430 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002430:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002432:	e003      	b.n	800243c <LoopCopyDataInit>

08002434 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002436:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002438:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800243a:	3104      	adds	r1, #4

0800243c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800243c:	480a      	ldr	r0, [pc, #40]	; (8002468 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002440:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002442:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002444:	d3f6      	bcc.n	8002434 <CopyDataInit>
  ldr r2, =_sbss
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002448:	e002      	b.n	8002450 <LoopFillZerobss>

0800244a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800244a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800244c:	f842 3b04 	str.w	r3, [r2], #4

08002450 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002452:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002454:	d3f9      	bcc.n	800244a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002456:	f7ff fc51 	bl	8001cfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800245a:	f000 f80f 	bl	800247c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800245e:	f7ff fac5 	bl	80019ec <main>
  bx lr
 8002462:	4770      	bx	lr
  ldr r3, =_sidata
 8002464:	08005010 	.word	0x08005010
  ldr r0, =_sdata
 8002468:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800246c:	200001f4 	.word	0x200001f4
  ldr r2, =_sbss
 8002470:	200001f4 	.word	0x200001f4
  ldr r3, = _ebss
 8002474:	200003e4 	.word	0x200003e4

08002478 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002478:	e7fe      	b.n	8002478 <ADC1_2_IRQHandler>
	...

0800247c <__libc_init_array>:
 800247c:	b570      	push	{r4, r5, r6, lr}
 800247e:	2500      	movs	r5, #0
 8002480:	4e0c      	ldr	r6, [pc, #48]	; (80024b4 <__libc_init_array+0x38>)
 8002482:	4c0d      	ldr	r4, [pc, #52]	; (80024b8 <__libc_init_array+0x3c>)
 8002484:	1ba4      	subs	r4, r4, r6
 8002486:	10a4      	asrs	r4, r4, #2
 8002488:	42a5      	cmp	r5, r4
 800248a:	d109      	bne.n	80024a0 <__libc_init_array+0x24>
 800248c:	f001 fd62 	bl	8003f54 <_init>
 8002490:	2500      	movs	r5, #0
 8002492:	4e0a      	ldr	r6, [pc, #40]	; (80024bc <__libc_init_array+0x40>)
 8002494:	4c0a      	ldr	r4, [pc, #40]	; (80024c0 <__libc_init_array+0x44>)
 8002496:	1ba4      	subs	r4, r4, r6
 8002498:	10a4      	asrs	r4, r4, #2
 800249a:	42a5      	cmp	r5, r4
 800249c:	d105      	bne.n	80024aa <__libc_init_array+0x2e>
 800249e:	bd70      	pop	{r4, r5, r6, pc}
 80024a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024a4:	4798      	blx	r3
 80024a6:	3501      	adds	r5, #1
 80024a8:	e7ee      	b.n	8002488 <__libc_init_array+0xc>
 80024aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024ae:	4798      	blx	r3
 80024b0:	3501      	adds	r5, #1
 80024b2:	e7f2      	b.n	800249a <__libc_init_array+0x1e>
 80024b4:	08005008 	.word	0x08005008
 80024b8:	08005008 	.word	0x08005008
 80024bc:	08005008 	.word	0x08005008
 80024c0:	0800500c 	.word	0x0800500c

080024c4 <memset>:
 80024c4:	4603      	mov	r3, r0
 80024c6:	4402      	add	r2, r0
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d100      	bne.n	80024ce <memset+0xa>
 80024cc:	4770      	bx	lr
 80024ce:	f803 1b01 	strb.w	r1, [r3], #1
 80024d2:	e7f9      	b.n	80024c8 <memset+0x4>

080024d4 <__cvt>:
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024da:	461e      	mov	r6, r3
 80024dc:	bfbb      	ittet	lt
 80024de:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80024e2:	461e      	movlt	r6, r3
 80024e4:	2300      	movge	r3, #0
 80024e6:	232d      	movlt	r3, #45	; 0x2d
 80024e8:	b088      	sub	sp, #32
 80024ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80024ec:	9912      	ldr	r1, [sp, #72]	; 0x48
 80024ee:	f027 0720 	bic.w	r7, r7, #32
 80024f2:	2f46      	cmp	r7, #70	; 0x46
 80024f4:	4614      	mov	r4, r2
 80024f6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80024f8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80024fc:	700b      	strb	r3, [r1, #0]
 80024fe:	d004      	beq.n	800250a <__cvt+0x36>
 8002500:	2f45      	cmp	r7, #69	; 0x45
 8002502:	d100      	bne.n	8002506 <__cvt+0x32>
 8002504:	3501      	adds	r5, #1
 8002506:	2302      	movs	r3, #2
 8002508:	e000      	b.n	800250c <__cvt+0x38>
 800250a:	2303      	movs	r3, #3
 800250c:	aa07      	add	r2, sp, #28
 800250e:	9204      	str	r2, [sp, #16]
 8002510:	aa06      	add	r2, sp, #24
 8002512:	9203      	str	r2, [sp, #12]
 8002514:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8002518:	4622      	mov	r2, r4
 800251a:	4633      	mov	r3, r6
 800251c:	f000 fba8 	bl	8002c70 <_dtoa_r>
 8002520:	2f47      	cmp	r7, #71	; 0x47
 8002522:	4680      	mov	r8, r0
 8002524:	d102      	bne.n	800252c <__cvt+0x58>
 8002526:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002528:	07db      	lsls	r3, r3, #31
 800252a:	d526      	bpl.n	800257a <__cvt+0xa6>
 800252c:	2f46      	cmp	r7, #70	; 0x46
 800252e:	eb08 0905 	add.w	r9, r8, r5
 8002532:	d111      	bne.n	8002558 <__cvt+0x84>
 8002534:	f898 3000 	ldrb.w	r3, [r8]
 8002538:	2b30      	cmp	r3, #48	; 0x30
 800253a:	d10a      	bne.n	8002552 <__cvt+0x7e>
 800253c:	2200      	movs	r2, #0
 800253e:	2300      	movs	r3, #0
 8002540:	4620      	mov	r0, r4
 8002542:	4631      	mov	r1, r6
 8002544:	f7fe fa2c 	bl	80009a0 <__aeabi_dcmpeq>
 8002548:	b918      	cbnz	r0, 8002552 <__cvt+0x7e>
 800254a:	f1c5 0501 	rsb	r5, r5, #1
 800254e:	f8ca 5000 	str.w	r5, [sl]
 8002552:	f8da 3000 	ldr.w	r3, [sl]
 8002556:	4499      	add	r9, r3
 8002558:	2200      	movs	r2, #0
 800255a:	2300      	movs	r3, #0
 800255c:	4620      	mov	r0, r4
 800255e:	4631      	mov	r1, r6
 8002560:	f7fe fa1e 	bl	80009a0 <__aeabi_dcmpeq>
 8002564:	b938      	cbnz	r0, 8002576 <__cvt+0xa2>
 8002566:	2230      	movs	r2, #48	; 0x30
 8002568:	9b07      	ldr	r3, [sp, #28]
 800256a:	4599      	cmp	r9, r3
 800256c:	d905      	bls.n	800257a <__cvt+0xa6>
 800256e:	1c59      	adds	r1, r3, #1
 8002570:	9107      	str	r1, [sp, #28]
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e7f8      	b.n	8002568 <__cvt+0x94>
 8002576:	f8cd 901c 	str.w	r9, [sp, #28]
 800257a:	4640      	mov	r0, r8
 800257c:	9b07      	ldr	r3, [sp, #28]
 800257e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002580:	eba3 0308 	sub.w	r3, r3, r8
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	b008      	add	sp, #32
 8002588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800258c <__exponent>:
 800258c:	4603      	mov	r3, r0
 800258e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002590:	2900      	cmp	r1, #0
 8002592:	f803 2b02 	strb.w	r2, [r3], #2
 8002596:	bfb6      	itet	lt
 8002598:	222d      	movlt	r2, #45	; 0x2d
 800259a:	222b      	movge	r2, #43	; 0x2b
 800259c:	4249      	neglt	r1, r1
 800259e:	2909      	cmp	r1, #9
 80025a0:	7042      	strb	r2, [r0, #1]
 80025a2:	dd21      	ble.n	80025e8 <__exponent+0x5c>
 80025a4:	f10d 0207 	add.w	r2, sp, #7
 80025a8:	4617      	mov	r7, r2
 80025aa:	260a      	movs	r6, #10
 80025ac:	fb91 f5f6 	sdiv	r5, r1, r6
 80025b0:	fb06 1115 	mls	r1, r6, r5, r1
 80025b4:	2d09      	cmp	r5, #9
 80025b6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80025ba:	f802 1c01 	strb.w	r1, [r2, #-1]
 80025be:	f102 34ff 	add.w	r4, r2, #4294967295
 80025c2:	4629      	mov	r1, r5
 80025c4:	dc09      	bgt.n	80025da <__exponent+0x4e>
 80025c6:	3130      	adds	r1, #48	; 0x30
 80025c8:	3a02      	subs	r2, #2
 80025ca:	f804 1c01 	strb.w	r1, [r4, #-1]
 80025ce:	42ba      	cmp	r2, r7
 80025d0:	461c      	mov	r4, r3
 80025d2:	d304      	bcc.n	80025de <__exponent+0x52>
 80025d4:	1a20      	subs	r0, r4, r0
 80025d6:	b003      	add	sp, #12
 80025d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025da:	4622      	mov	r2, r4
 80025dc:	e7e6      	b.n	80025ac <__exponent+0x20>
 80025de:	f812 1b01 	ldrb.w	r1, [r2], #1
 80025e2:	f803 1b01 	strb.w	r1, [r3], #1
 80025e6:	e7f2      	b.n	80025ce <__exponent+0x42>
 80025e8:	2230      	movs	r2, #48	; 0x30
 80025ea:	461c      	mov	r4, r3
 80025ec:	4411      	add	r1, r2
 80025ee:	f804 2b02 	strb.w	r2, [r4], #2
 80025f2:	7059      	strb	r1, [r3, #1]
 80025f4:	e7ee      	b.n	80025d4 <__exponent+0x48>
	...

080025f8 <_printf_float>:
 80025f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025fc:	b091      	sub	sp, #68	; 0x44
 80025fe:	460c      	mov	r4, r1
 8002600:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8002602:	4693      	mov	fp, r2
 8002604:	461e      	mov	r6, r3
 8002606:	4605      	mov	r5, r0
 8002608:	f001 f906 	bl	8003818 <_localeconv_r>
 800260c:	6803      	ldr	r3, [r0, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	9309      	str	r3, [sp, #36]	; 0x24
 8002612:	f7fd fd9d 	bl	8000150 <strlen>
 8002616:	2300      	movs	r3, #0
 8002618:	930e      	str	r3, [sp, #56]	; 0x38
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	900a      	str	r0, [sp, #40]	; 0x28
 800261e:	3307      	adds	r3, #7
 8002620:	f023 0307 	bic.w	r3, r3, #7
 8002624:	f103 0208 	add.w	r2, r3, #8
 8002628:	f894 8018 	ldrb.w	r8, [r4, #24]
 800262c:	f8d4 a000 	ldr.w	sl, [r4]
 8002630:	603a      	str	r2, [r7, #0]
 8002632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002636:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800263a:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 800263e:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8002640:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002644:	930b      	str	r3, [sp, #44]	; 0x2c
 8002646:	f04f 32ff 	mov.w	r2, #4294967295
 800264a:	4ba6      	ldr	r3, [pc, #664]	; (80028e4 <_printf_float+0x2ec>)
 800264c:	4638      	mov	r0, r7
 800264e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002650:	f7fe f9d8 	bl	8000a04 <__aeabi_dcmpun>
 8002654:	2800      	cmp	r0, #0
 8002656:	f040 81f7 	bne.w	8002a48 <_printf_float+0x450>
 800265a:	f04f 32ff 	mov.w	r2, #4294967295
 800265e:	4ba1      	ldr	r3, [pc, #644]	; (80028e4 <_printf_float+0x2ec>)
 8002660:	4638      	mov	r0, r7
 8002662:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002664:	f7fe f9b0 	bl	80009c8 <__aeabi_dcmple>
 8002668:	2800      	cmp	r0, #0
 800266a:	f040 81ed 	bne.w	8002a48 <_printf_float+0x450>
 800266e:	2200      	movs	r2, #0
 8002670:	2300      	movs	r3, #0
 8002672:	4638      	mov	r0, r7
 8002674:	4649      	mov	r1, r9
 8002676:	f7fe f99d 	bl	80009b4 <__aeabi_dcmplt>
 800267a:	b110      	cbz	r0, 8002682 <_printf_float+0x8a>
 800267c:	232d      	movs	r3, #45	; 0x2d
 800267e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002682:	4b99      	ldr	r3, [pc, #612]	; (80028e8 <_printf_float+0x2f0>)
 8002684:	4f99      	ldr	r7, [pc, #612]	; (80028ec <_printf_float+0x2f4>)
 8002686:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800268a:	bf98      	it	ls
 800268c:	461f      	movls	r7, r3
 800268e:	2303      	movs	r3, #3
 8002690:	f04f 0900 	mov.w	r9, #0
 8002694:	6123      	str	r3, [r4, #16]
 8002696:	f02a 0304 	bic.w	r3, sl, #4
 800269a:	6023      	str	r3, [r4, #0]
 800269c:	9600      	str	r6, [sp, #0]
 800269e:	465b      	mov	r3, fp
 80026a0:	aa0f      	add	r2, sp, #60	; 0x3c
 80026a2:	4621      	mov	r1, r4
 80026a4:	4628      	mov	r0, r5
 80026a6:	f000 f9df 	bl	8002a68 <_printf_common>
 80026aa:	3001      	adds	r0, #1
 80026ac:	f040 809a 	bne.w	80027e4 <_printf_float+0x1ec>
 80026b0:	f04f 30ff 	mov.w	r0, #4294967295
 80026b4:	b011      	add	sp, #68	; 0x44
 80026b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ba:	6862      	ldr	r2, [r4, #4]
 80026bc:	a80e      	add	r0, sp, #56	; 0x38
 80026be:	1c53      	adds	r3, r2, #1
 80026c0:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 80026c4:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 80026c8:	d141      	bne.n	800274e <_printf_float+0x156>
 80026ca:	2206      	movs	r2, #6
 80026cc:	6062      	str	r2, [r4, #4]
 80026ce:	2100      	movs	r1, #0
 80026d0:	6023      	str	r3, [r4, #0]
 80026d2:	9301      	str	r3, [sp, #4]
 80026d4:	6863      	ldr	r3, [r4, #4]
 80026d6:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80026da:	9005      	str	r0, [sp, #20]
 80026dc:	9202      	str	r2, [sp, #8]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	463a      	mov	r2, r7
 80026e2:	464b      	mov	r3, r9
 80026e4:	9106      	str	r1, [sp, #24]
 80026e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80026ea:	f8cd e00c 	str.w	lr, [sp, #12]
 80026ee:	4628      	mov	r0, r5
 80026f0:	f7ff fef0 	bl	80024d4 <__cvt>
 80026f4:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80026f8:	2b47      	cmp	r3, #71	; 0x47
 80026fa:	4607      	mov	r7, r0
 80026fc:	d109      	bne.n	8002712 <_printf_float+0x11a>
 80026fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002700:	1cd8      	adds	r0, r3, #3
 8002702:	db02      	blt.n	800270a <_printf_float+0x112>
 8002704:	6862      	ldr	r2, [r4, #4]
 8002706:	4293      	cmp	r3, r2
 8002708:	dd59      	ble.n	80027be <_printf_float+0x1c6>
 800270a:	f1a8 0802 	sub.w	r8, r8, #2
 800270e:	fa5f f888 	uxtb.w	r8, r8
 8002712:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002716:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002718:	d836      	bhi.n	8002788 <_printf_float+0x190>
 800271a:	3901      	subs	r1, #1
 800271c:	4642      	mov	r2, r8
 800271e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002722:	910d      	str	r1, [sp, #52]	; 0x34
 8002724:	f7ff ff32 	bl	800258c <__exponent>
 8002728:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800272a:	4681      	mov	r9, r0
 800272c:	1883      	adds	r3, r0, r2
 800272e:	2a01      	cmp	r2, #1
 8002730:	6123      	str	r3, [r4, #16]
 8002732:	dc02      	bgt.n	800273a <_printf_float+0x142>
 8002734:	6822      	ldr	r2, [r4, #0]
 8002736:	07d1      	lsls	r1, r2, #31
 8002738:	d501      	bpl.n	800273e <_printf_float+0x146>
 800273a:	3301      	adds	r3, #1
 800273c:	6123      	str	r3, [r4, #16]
 800273e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0aa      	beq.n	800269c <_printf_float+0xa4>
 8002746:	232d      	movs	r3, #45	; 0x2d
 8002748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800274c:	e7a6      	b.n	800269c <_printf_float+0xa4>
 800274e:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8002752:	d002      	beq.n	800275a <_printf_float+0x162>
 8002754:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002758:	d1b9      	bne.n	80026ce <_printf_float+0xd6>
 800275a:	b19a      	cbz	r2, 8002784 <_printf_float+0x18c>
 800275c:	2100      	movs	r1, #0
 800275e:	9106      	str	r1, [sp, #24]
 8002760:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8002764:	e88d 000c 	stmia.w	sp, {r2, r3}
 8002768:	6023      	str	r3, [r4, #0]
 800276a:	9005      	str	r0, [sp, #20]
 800276c:	463a      	mov	r2, r7
 800276e:	f8cd 8010 	str.w	r8, [sp, #16]
 8002772:	f8cd e00c 	str.w	lr, [sp, #12]
 8002776:	9102      	str	r1, [sp, #8]
 8002778:	464b      	mov	r3, r9
 800277a:	4628      	mov	r0, r5
 800277c:	f7ff feaa 	bl	80024d4 <__cvt>
 8002780:	4607      	mov	r7, r0
 8002782:	e7bc      	b.n	80026fe <_printf_float+0x106>
 8002784:	2201      	movs	r2, #1
 8002786:	e7a1      	b.n	80026cc <_printf_float+0xd4>
 8002788:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800278c:	d119      	bne.n	80027c2 <_printf_float+0x1ca>
 800278e:	2900      	cmp	r1, #0
 8002790:	6863      	ldr	r3, [r4, #4]
 8002792:	dd0c      	ble.n	80027ae <_printf_float+0x1b6>
 8002794:	6121      	str	r1, [r4, #16]
 8002796:	b913      	cbnz	r3, 800279e <_printf_float+0x1a6>
 8002798:	6822      	ldr	r2, [r4, #0]
 800279a:	07d2      	lsls	r2, r2, #31
 800279c:	d502      	bpl.n	80027a4 <_printf_float+0x1ac>
 800279e:	3301      	adds	r3, #1
 80027a0:	440b      	add	r3, r1
 80027a2:	6123      	str	r3, [r4, #16]
 80027a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027a6:	f04f 0900 	mov.w	r9, #0
 80027aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80027ac:	e7c7      	b.n	800273e <_printf_float+0x146>
 80027ae:	b913      	cbnz	r3, 80027b6 <_printf_float+0x1be>
 80027b0:	6822      	ldr	r2, [r4, #0]
 80027b2:	07d0      	lsls	r0, r2, #31
 80027b4:	d501      	bpl.n	80027ba <_printf_float+0x1c2>
 80027b6:	3302      	adds	r3, #2
 80027b8:	e7f3      	b.n	80027a2 <_printf_float+0x1aa>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e7f1      	b.n	80027a2 <_printf_float+0x1aa>
 80027be:	f04f 0867 	mov.w	r8, #103	; 0x67
 80027c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80027c6:	4293      	cmp	r3, r2
 80027c8:	db05      	blt.n	80027d6 <_printf_float+0x1de>
 80027ca:	6822      	ldr	r2, [r4, #0]
 80027cc:	6123      	str	r3, [r4, #16]
 80027ce:	07d1      	lsls	r1, r2, #31
 80027d0:	d5e8      	bpl.n	80027a4 <_printf_float+0x1ac>
 80027d2:	3301      	adds	r3, #1
 80027d4:	e7e5      	b.n	80027a2 <_printf_float+0x1aa>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	bfcc      	ite	gt
 80027da:	2301      	movgt	r3, #1
 80027dc:	f1c3 0302 	rsble	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	e7de      	b.n	80027a2 <_printf_float+0x1aa>
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	055a      	lsls	r2, r3, #21
 80027e8:	d407      	bmi.n	80027fa <_printf_float+0x202>
 80027ea:	6923      	ldr	r3, [r4, #16]
 80027ec:	463a      	mov	r2, r7
 80027ee:	4659      	mov	r1, fp
 80027f0:	4628      	mov	r0, r5
 80027f2:	47b0      	blx	r6
 80027f4:	3001      	adds	r0, #1
 80027f6:	d12a      	bne.n	800284e <_printf_float+0x256>
 80027f8:	e75a      	b.n	80026b0 <_printf_float+0xb8>
 80027fa:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80027fe:	f240 80dc 	bls.w	80029ba <_printf_float+0x3c2>
 8002802:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002806:	2200      	movs	r2, #0
 8002808:	2300      	movs	r3, #0
 800280a:	f7fe f8c9 	bl	80009a0 <__aeabi_dcmpeq>
 800280e:	2800      	cmp	r0, #0
 8002810:	d039      	beq.n	8002886 <_printf_float+0x28e>
 8002812:	2301      	movs	r3, #1
 8002814:	4a36      	ldr	r2, [pc, #216]	; (80028f0 <_printf_float+0x2f8>)
 8002816:	4659      	mov	r1, fp
 8002818:	4628      	mov	r0, r5
 800281a:	47b0      	blx	r6
 800281c:	3001      	adds	r0, #1
 800281e:	f43f af47 	beq.w	80026b0 <_printf_float+0xb8>
 8002822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002826:	429a      	cmp	r2, r3
 8002828:	db02      	blt.n	8002830 <_printf_float+0x238>
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	07d8      	lsls	r0, r3, #31
 800282e:	d50e      	bpl.n	800284e <_printf_float+0x256>
 8002830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002832:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002834:	4659      	mov	r1, fp
 8002836:	4628      	mov	r0, r5
 8002838:	47b0      	blx	r6
 800283a:	3001      	adds	r0, #1
 800283c:	f43f af38 	beq.w	80026b0 <_printf_float+0xb8>
 8002840:	2700      	movs	r7, #0
 8002842:	f104 081a 	add.w	r8, r4, #26
 8002846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002848:	3b01      	subs	r3, #1
 800284a:	429f      	cmp	r7, r3
 800284c:	db11      	blt.n	8002872 <_printf_float+0x27a>
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	079f      	lsls	r7, r3, #30
 8002852:	d508      	bpl.n	8002866 <_printf_float+0x26e>
 8002854:	2700      	movs	r7, #0
 8002856:	f104 0819 	add.w	r8, r4, #25
 800285a:	68e3      	ldr	r3, [r4, #12]
 800285c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	429f      	cmp	r7, r3
 8002862:	f2c0 80e7 	blt.w	8002a34 <_printf_float+0x43c>
 8002866:	68e0      	ldr	r0, [r4, #12]
 8002868:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800286a:	4298      	cmp	r0, r3
 800286c:	bfb8      	it	lt
 800286e:	4618      	movlt	r0, r3
 8002870:	e720      	b.n	80026b4 <_printf_float+0xbc>
 8002872:	2301      	movs	r3, #1
 8002874:	4642      	mov	r2, r8
 8002876:	4659      	mov	r1, fp
 8002878:	4628      	mov	r0, r5
 800287a:	47b0      	blx	r6
 800287c:	3001      	adds	r0, #1
 800287e:	f43f af17 	beq.w	80026b0 <_printf_float+0xb8>
 8002882:	3701      	adds	r7, #1
 8002884:	e7df      	b.n	8002846 <_printf_float+0x24e>
 8002886:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002888:	2b00      	cmp	r3, #0
 800288a:	dc33      	bgt.n	80028f4 <_printf_float+0x2fc>
 800288c:	2301      	movs	r3, #1
 800288e:	4a18      	ldr	r2, [pc, #96]	; (80028f0 <_printf_float+0x2f8>)
 8002890:	4659      	mov	r1, fp
 8002892:	4628      	mov	r0, r5
 8002894:	47b0      	blx	r6
 8002896:	3001      	adds	r0, #1
 8002898:	f43f af0a 	beq.w	80026b0 <_printf_float+0xb8>
 800289c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800289e:	b923      	cbnz	r3, 80028aa <_printf_float+0x2b2>
 80028a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028a2:	b913      	cbnz	r3, 80028aa <_printf_float+0x2b2>
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	07d9      	lsls	r1, r3, #31
 80028a8:	d5d1      	bpl.n	800284e <_printf_float+0x256>
 80028aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028ae:	4659      	mov	r1, fp
 80028b0:	4628      	mov	r0, r5
 80028b2:	47b0      	blx	r6
 80028b4:	3001      	adds	r0, #1
 80028b6:	f43f aefb 	beq.w	80026b0 <_printf_float+0xb8>
 80028ba:	f04f 0800 	mov.w	r8, #0
 80028be:	f104 091a 	add.w	r9, r4, #26
 80028c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80028c4:	425b      	negs	r3, r3
 80028c6:	4598      	cmp	r8, r3
 80028c8:	db01      	blt.n	80028ce <_printf_float+0x2d6>
 80028ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028cc:	e78e      	b.n	80027ec <_printf_float+0x1f4>
 80028ce:	2301      	movs	r3, #1
 80028d0:	464a      	mov	r2, r9
 80028d2:	4659      	mov	r1, fp
 80028d4:	4628      	mov	r0, r5
 80028d6:	47b0      	blx	r6
 80028d8:	3001      	adds	r0, #1
 80028da:	f43f aee9 	beq.w	80026b0 <_printf_float+0xb8>
 80028de:	f108 0801 	add.w	r8, r8, #1
 80028e2:	e7ee      	b.n	80028c2 <_printf_float+0x2ca>
 80028e4:	7fefffff 	.word	0x7fefffff
 80028e8:	08004dda 	.word	0x08004dda
 80028ec:	08004dde 	.word	0x08004dde
 80028f0:	08004dea 	.word	0x08004dea
 80028f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80028f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80028f8:	429a      	cmp	r2, r3
 80028fa:	bfa8      	it	ge
 80028fc:	461a      	movge	r2, r3
 80028fe:	2a00      	cmp	r2, #0
 8002900:	4690      	mov	r8, r2
 8002902:	dc36      	bgt.n	8002972 <_printf_float+0x37a>
 8002904:	f04f 0a00 	mov.w	sl, #0
 8002908:	f104 031a 	add.w	r3, r4, #26
 800290c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8002910:	930b      	str	r3, [sp, #44]	; 0x2c
 8002912:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002916:	eba9 0308 	sub.w	r3, r9, r8
 800291a:	459a      	cmp	sl, r3
 800291c:	db31      	blt.n	8002982 <_printf_float+0x38a>
 800291e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002922:	429a      	cmp	r2, r3
 8002924:	db38      	blt.n	8002998 <_printf_float+0x3a0>
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	07da      	lsls	r2, r3, #31
 800292a:	d435      	bmi.n	8002998 <_printf_float+0x3a0>
 800292c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800292e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002930:	eba3 0209 	sub.w	r2, r3, r9
 8002934:	eba3 0801 	sub.w	r8, r3, r1
 8002938:	4590      	cmp	r8, r2
 800293a:	bfa8      	it	ge
 800293c:	4690      	movge	r8, r2
 800293e:	f1b8 0f00 	cmp.w	r8, #0
 8002942:	dc31      	bgt.n	80029a8 <_printf_float+0x3b0>
 8002944:	2700      	movs	r7, #0
 8002946:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800294a:	f104 091a 	add.w	r9, r4, #26
 800294e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	eba3 0308 	sub.w	r3, r3, r8
 8002958:	429f      	cmp	r7, r3
 800295a:	f6bf af78 	bge.w	800284e <_printf_float+0x256>
 800295e:	2301      	movs	r3, #1
 8002960:	464a      	mov	r2, r9
 8002962:	4659      	mov	r1, fp
 8002964:	4628      	mov	r0, r5
 8002966:	47b0      	blx	r6
 8002968:	3001      	adds	r0, #1
 800296a:	f43f aea1 	beq.w	80026b0 <_printf_float+0xb8>
 800296e:	3701      	adds	r7, #1
 8002970:	e7ed      	b.n	800294e <_printf_float+0x356>
 8002972:	4613      	mov	r3, r2
 8002974:	4659      	mov	r1, fp
 8002976:	463a      	mov	r2, r7
 8002978:	4628      	mov	r0, r5
 800297a:	47b0      	blx	r6
 800297c:	3001      	adds	r0, #1
 800297e:	d1c1      	bne.n	8002904 <_printf_float+0x30c>
 8002980:	e696      	b.n	80026b0 <_printf_float+0xb8>
 8002982:	2301      	movs	r3, #1
 8002984:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002986:	4659      	mov	r1, fp
 8002988:	4628      	mov	r0, r5
 800298a:	47b0      	blx	r6
 800298c:	3001      	adds	r0, #1
 800298e:	f43f ae8f 	beq.w	80026b0 <_printf_float+0xb8>
 8002992:	f10a 0a01 	add.w	sl, sl, #1
 8002996:	e7bc      	b.n	8002912 <_printf_float+0x31a>
 8002998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800299a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800299c:	4659      	mov	r1, fp
 800299e:	4628      	mov	r0, r5
 80029a0:	47b0      	blx	r6
 80029a2:	3001      	adds	r0, #1
 80029a4:	d1c2      	bne.n	800292c <_printf_float+0x334>
 80029a6:	e683      	b.n	80026b0 <_printf_float+0xb8>
 80029a8:	4643      	mov	r3, r8
 80029aa:	eb07 0209 	add.w	r2, r7, r9
 80029ae:	4659      	mov	r1, fp
 80029b0:	4628      	mov	r0, r5
 80029b2:	47b0      	blx	r6
 80029b4:	3001      	adds	r0, #1
 80029b6:	d1c5      	bne.n	8002944 <_printf_float+0x34c>
 80029b8:	e67a      	b.n	80026b0 <_printf_float+0xb8>
 80029ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80029bc:	2a01      	cmp	r2, #1
 80029be:	dc01      	bgt.n	80029c4 <_printf_float+0x3cc>
 80029c0:	07db      	lsls	r3, r3, #31
 80029c2:	d534      	bpl.n	8002a2e <_printf_float+0x436>
 80029c4:	2301      	movs	r3, #1
 80029c6:	463a      	mov	r2, r7
 80029c8:	4659      	mov	r1, fp
 80029ca:	4628      	mov	r0, r5
 80029cc:	47b0      	blx	r6
 80029ce:	3001      	adds	r0, #1
 80029d0:	f43f ae6e 	beq.w	80026b0 <_printf_float+0xb8>
 80029d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80029d8:	4659      	mov	r1, fp
 80029da:	4628      	mov	r0, r5
 80029dc:	47b0      	blx	r6
 80029de:	3001      	adds	r0, #1
 80029e0:	f43f ae66 	beq.w	80026b0 <_printf_float+0xb8>
 80029e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80029e8:	2200      	movs	r2, #0
 80029ea:	2300      	movs	r3, #0
 80029ec:	f7fd ffd8 	bl	80009a0 <__aeabi_dcmpeq>
 80029f0:	b150      	cbz	r0, 8002a08 <_printf_float+0x410>
 80029f2:	2700      	movs	r7, #0
 80029f4:	f104 081a 	add.w	r8, r4, #26
 80029f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80029fa:	3b01      	subs	r3, #1
 80029fc:	429f      	cmp	r7, r3
 80029fe:	db0c      	blt.n	8002a1a <_printf_float+0x422>
 8002a00:	464b      	mov	r3, r9
 8002a02:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002a06:	e6f2      	b.n	80027ee <_printf_float+0x1f6>
 8002a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a0a:	1c7a      	adds	r2, r7, #1
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	4659      	mov	r1, fp
 8002a10:	4628      	mov	r0, r5
 8002a12:	47b0      	blx	r6
 8002a14:	3001      	adds	r0, #1
 8002a16:	d1f3      	bne.n	8002a00 <_printf_float+0x408>
 8002a18:	e64a      	b.n	80026b0 <_printf_float+0xb8>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	4642      	mov	r2, r8
 8002a1e:	4659      	mov	r1, fp
 8002a20:	4628      	mov	r0, r5
 8002a22:	47b0      	blx	r6
 8002a24:	3001      	adds	r0, #1
 8002a26:	f43f ae43 	beq.w	80026b0 <_printf_float+0xb8>
 8002a2a:	3701      	adds	r7, #1
 8002a2c:	e7e4      	b.n	80029f8 <_printf_float+0x400>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	463a      	mov	r2, r7
 8002a32:	e7ec      	b.n	8002a0e <_printf_float+0x416>
 8002a34:	2301      	movs	r3, #1
 8002a36:	4642      	mov	r2, r8
 8002a38:	4659      	mov	r1, fp
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	47b0      	blx	r6
 8002a3e:	3001      	adds	r0, #1
 8002a40:	f43f ae36 	beq.w	80026b0 <_printf_float+0xb8>
 8002a44:	3701      	adds	r7, #1
 8002a46:	e708      	b.n	800285a <_printf_float+0x262>
 8002a48:	463a      	mov	r2, r7
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	4638      	mov	r0, r7
 8002a4e:	4649      	mov	r1, r9
 8002a50:	f7fd ffd8 	bl	8000a04 <__aeabi_dcmpun>
 8002a54:	2800      	cmp	r0, #0
 8002a56:	f43f ae30 	beq.w	80026ba <_printf_float+0xc2>
 8002a5a:	4b01      	ldr	r3, [pc, #4]	; (8002a60 <_printf_float+0x468>)
 8002a5c:	4f01      	ldr	r7, [pc, #4]	; (8002a64 <_printf_float+0x46c>)
 8002a5e:	e612      	b.n	8002686 <_printf_float+0x8e>
 8002a60:	08004de2 	.word	0x08004de2
 8002a64:	08004de6 	.word	0x08004de6

08002a68 <_printf_common>:
 8002a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a6c:	4691      	mov	r9, r2
 8002a6e:	461f      	mov	r7, r3
 8002a70:	688a      	ldr	r2, [r1, #8]
 8002a72:	690b      	ldr	r3, [r1, #16]
 8002a74:	4606      	mov	r6, r0
 8002a76:	4293      	cmp	r3, r2
 8002a78:	bfb8      	it	lt
 8002a7a:	4613      	movlt	r3, r2
 8002a7c:	f8c9 3000 	str.w	r3, [r9]
 8002a80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a84:	460c      	mov	r4, r1
 8002a86:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a8a:	b112      	cbz	r2, 8002a92 <_printf_common+0x2a>
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f8c9 3000 	str.w	r3, [r9]
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	0699      	lsls	r1, r3, #26
 8002a96:	bf42      	ittt	mi
 8002a98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002a9c:	3302      	addmi	r3, #2
 8002a9e:	f8c9 3000 	strmi.w	r3, [r9]
 8002aa2:	6825      	ldr	r5, [r4, #0]
 8002aa4:	f015 0506 	ands.w	r5, r5, #6
 8002aa8:	d107      	bne.n	8002aba <_printf_common+0x52>
 8002aaa:	f104 0a19 	add.w	sl, r4, #25
 8002aae:	68e3      	ldr	r3, [r4, #12]
 8002ab0:	f8d9 2000 	ldr.w	r2, [r9]
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	429d      	cmp	r5, r3
 8002ab8:	db2a      	blt.n	8002b10 <_printf_common+0xa8>
 8002aba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002abe:	6822      	ldr	r2, [r4, #0]
 8002ac0:	3300      	adds	r3, #0
 8002ac2:	bf18      	it	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	0692      	lsls	r2, r2, #26
 8002ac8:	d42f      	bmi.n	8002b2a <_printf_common+0xc2>
 8002aca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ace:	4639      	mov	r1, r7
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	47c0      	blx	r8
 8002ad4:	3001      	adds	r0, #1
 8002ad6:	d022      	beq.n	8002b1e <_printf_common+0xb6>
 8002ad8:	6823      	ldr	r3, [r4, #0]
 8002ada:	68e5      	ldr	r5, [r4, #12]
 8002adc:	f003 0306 	and.w	r3, r3, #6
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	bf18      	it	ne
 8002ae4:	2500      	movne	r5, #0
 8002ae6:	f8d9 2000 	ldr.w	r2, [r9]
 8002aea:	f04f 0900 	mov.w	r9, #0
 8002aee:	bf08      	it	eq
 8002af0:	1aad      	subeq	r5, r5, r2
 8002af2:	68a3      	ldr	r3, [r4, #8]
 8002af4:	6922      	ldr	r2, [r4, #16]
 8002af6:	bf08      	it	eq
 8002af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002afc:	4293      	cmp	r3, r2
 8002afe:	bfc4      	itt	gt
 8002b00:	1a9b      	subgt	r3, r3, r2
 8002b02:	18ed      	addgt	r5, r5, r3
 8002b04:	341a      	adds	r4, #26
 8002b06:	454d      	cmp	r5, r9
 8002b08:	d11b      	bne.n	8002b42 <_printf_common+0xda>
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b10:	2301      	movs	r3, #1
 8002b12:	4652      	mov	r2, sl
 8002b14:	4639      	mov	r1, r7
 8002b16:	4630      	mov	r0, r6
 8002b18:	47c0      	blx	r8
 8002b1a:	3001      	adds	r0, #1
 8002b1c:	d103      	bne.n	8002b26 <_printf_common+0xbe>
 8002b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b26:	3501      	adds	r5, #1
 8002b28:	e7c1      	b.n	8002aae <_printf_common+0x46>
 8002b2a:	2030      	movs	r0, #48	; 0x30
 8002b2c:	18e1      	adds	r1, r4, r3
 8002b2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b38:	4422      	add	r2, r4
 8002b3a:	3302      	adds	r3, #2
 8002b3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b40:	e7c3      	b.n	8002aca <_printf_common+0x62>
 8002b42:	2301      	movs	r3, #1
 8002b44:	4622      	mov	r2, r4
 8002b46:	4639      	mov	r1, r7
 8002b48:	4630      	mov	r0, r6
 8002b4a:	47c0      	blx	r8
 8002b4c:	3001      	adds	r0, #1
 8002b4e:	d0e6      	beq.n	8002b1e <_printf_common+0xb6>
 8002b50:	f109 0901 	add.w	r9, r9, #1
 8002b54:	e7d7      	b.n	8002b06 <_printf_common+0x9e>

08002b56 <quorem>:
 8002b56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b5a:	6903      	ldr	r3, [r0, #16]
 8002b5c:	690c      	ldr	r4, [r1, #16]
 8002b5e:	4680      	mov	r8, r0
 8002b60:	429c      	cmp	r4, r3
 8002b62:	f300 8082 	bgt.w	8002c6a <quorem+0x114>
 8002b66:	3c01      	subs	r4, #1
 8002b68:	f101 0714 	add.w	r7, r1, #20
 8002b6c:	f100 0614 	add.w	r6, r0, #20
 8002b70:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002b74:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002b78:	3501      	adds	r5, #1
 8002b7a:	fbb0 f5f5 	udiv	r5, r0, r5
 8002b7e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002b82:	eb06 030e 	add.w	r3, r6, lr
 8002b86:	eb07 090e 	add.w	r9, r7, lr
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	b38d      	cbz	r5, 8002bf2 <quorem+0x9c>
 8002b8e:	f04f 0a00 	mov.w	sl, #0
 8002b92:	4638      	mov	r0, r7
 8002b94:	46b4      	mov	ip, r6
 8002b96:	46d3      	mov	fp, sl
 8002b98:	f850 2b04 	ldr.w	r2, [r0], #4
 8002b9c:	b293      	uxth	r3, r2
 8002b9e:	fb05 a303 	mla	r3, r5, r3, sl
 8002ba2:	0c12      	lsrs	r2, r2, #16
 8002ba4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002ba8:	fb05 a202 	mla	r2, r5, r2, sl
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	ebab 0303 	sub.w	r3, fp, r3
 8002bb2:	f8bc b000 	ldrh.w	fp, [ip]
 8002bb6:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002bba:	445b      	add	r3, fp
 8002bbc:	fa1f fb82 	uxth.w	fp, r2
 8002bc0:	f8dc 2000 	ldr.w	r2, [ip]
 8002bc4:	4581      	cmp	r9, r0
 8002bc6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002bca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002bd4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002bd8:	f84c 3b04 	str.w	r3, [ip], #4
 8002bdc:	d2dc      	bcs.n	8002b98 <quorem+0x42>
 8002bde:	f856 300e 	ldr.w	r3, [r6, lr]
 8002be2:	b933      	cbnz	r3, 8002bf2 <quorem+0x9c>
 8002be4:	9b01      	ldr	r3, [sp, #4]
 8002be6:	3b04      	subs	r3, #4
 8002be8:	429e      	cmp	r6, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	d331      	bcc.n	8002c52 <quorem+0xfc>
 8002bee:	f8c8 4010 	str.w	r4, [r8, #16]
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	f001 f839 	bl	8003c6a <__mcmp>
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	db26      	blt.n	8002c4a <quorem+0xf4>
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	f04f 0e00 	mov.w	lr, #0
 8002c02:	3501      	adds	r5, #1
 8002c04:	f857 1b04 	ldr.w	r1, [r7], #4
 8002c08:	f8d0 c000 	ldr.w	ip, [r0]
 8002c0c:	b28b      	uxth	r3, r1
 8002c0e:	ebae 0303 	sub.w	r3, lr, r3
 8002c12:	fa1f f28c 	uxth.w	r2, ip
 8002c16:	4413      	add	r3, r2
 8002c18:	0c0a      	lsrs	r2, r1, #16
 8002c1a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002c1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c28:	45b9      	cmp	r9, r7
 8002c2a:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8002c2e:	f840 3b04 	str.w	r3, [r0], #4
 8002c32:	d2e7      	bcs.n	8002c04 <quorem+0xae>
 8002c34:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002c38:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002c3c:	b92a      	cbnz	r2, 8002c4a <quorem+0xf4>
 8002c3e:	3b04      	subs	r3, #4
 8002c40:	429e      	cmp	r6, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	d30b      	bcc.n	8002c5e <quorem+0x108>
 8002c46:	f8c8 4010 	str.w	r4, [r8, #16]
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	b003      	add	sp, #12
 8002c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	3b04      	subs	r3, #4
 8002c56:	2a00      	cmp	r2, #0
 8002c58:	d1c9      	bne.n	8002bee <quorem+0x98>
 8002c5a:	3c01      	subs	r4, #1
 8002c5c:	e7c4      	b.n	8002be8 <quorem+0x92>
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	3b04      	subs	r3, #4
 8002c62:	2a00      	cmp	r2, #0
 8002c64:	d1ef      	bne.n	8002c46 <quorem+0xf0>
 8002c66:	3c01      	subs	r4, #1
 8002c68:	e7ea      	b.n	8002c40 <quorem+0xea>
 8002c6a:	2000      	movs	r0, #0
 8002c6c:	e7ee      	b.n	8002c4c <quorem+0xf6>
	...

08002c70 <_dtoa_r>:
 8002c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c74:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8002c76:	b095      	sub	sp, #84	; 0x54
 8002c78:	4604      	mov	r4, r0
 8002c7a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8002c7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002c80:	b93e      	cbnz	r6, 8002c92 <_dtoa_r+0x22>
 8002c82:	2010      	movs	r0, #16
 8002c84:	f000 fdd6 	bl	8003834 <malloc>
 8002c88:	6260      	str	r0, [r4, #36]	; 0x24
 8002c8a:	6046      	str	r6, [r0, #4]
 8002c8c:	6086      	str	r6, [r0, #8]
 8002c8e:	6006      	str	r6, [r0, #0]
 8002c90:	60c6      	str	r6, [r0, #12]
 8002c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c94:	6819      	ldr	r1, [r3, #0]
 8002c96:	b151      	cbz	r1, 8002cae <_dtoa_r+0x3e>
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	4093      	lsls	r3, r2
 8002c9e:	604a      	str	r2, [r1, #4]
 8002ca0:	608b      	str	r3, [r1, #8]
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f000 fe0d 	bl	80038c2 <_Bfree>
 8002ca8:	2200      	movs	r2, #0
 8002caa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	9b03      	ldr	r3, [sp, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bfb7      	itett	lt
 8002cb4:	2301      	movlt	r3, #1
 8002cb6:	2300      	movge	r3, #0
 8002cb8:	602b      	strlt	r3, [r5, #0]
 8002cba:	9b03      	ldrlt	r3, [sp, #12]
 8002cbc:	bfae      	itee	ge
 8002cbe:	602b      	strge	r3, [r5, #0]
 8002cc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002cc4:	9303      	strlt	r3, [sp, #12]
 8002cc6:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002cca:	4bab      	ldr	r3, [pc, #684]	; (8002f78 <_dtoa_r+0x308>)
 8002ccc:	ea33 0309 	bics.w	r3, r3, r9
 8002cd0:	d11b      	bne.n	8002d0a <_dtoa_r+0x9a>
 8002cd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8002cd6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	9b02      	ldr	r3, [sp, #8]
 8002cdc:	b923      	cbnz	r3, 8002ce8 <_dtoa_r+0x78>
 8002cde:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	f000 8583 	beq.w	80037ee <_dtoa_r+0xb7e>
 8002ce8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002cea:	b953      	cbnz	r3, 8002d02 <_dtoa_r+0x92>
 8002cec:	4ba3      	ldr	r3, [pc, #652]	; (8002f7c <_dtoa_r+0x30c>)
 8002cee:	e021      	b.n	8002d34 <_dtoa_r+0xc4>
 8002cf0:	4ba3      	ldr	r3, [pc, #652]	; (8002f80 <_dtoa_r+0x310>)
 8002cf2:	9306      	str	r3, [sp, #24]
 8002cf4:	3308      	adds	r3, #8
 8002cf6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	9806      	ldr	r0, [sp, #24]
 8002cfc:	b015      	add	sp, #84	; 0x54
 8002cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d02:	4b9e      	ldr	r3, [pc, #632]	; (8002f7c <_dtoa_r+0x30c>)
 8002d04:	9306      	str	r3, [sp, #24]
 8002d06:	3303      	adds	r3, #3
 8002d08:	e7f5      	b.n	8002cf6 <_dtoa_r+0x86>
 8002d0a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2300      	movs	r3, #0
 8002d12:	4630      	mov	r0, r6
 8002d14:	4639      	mov	r1, r7
 8002d16:	f7fd fe43 	bl	80009a0 <__aeabi_dcmpeq>
 8002d1a:	4680      	mov	r8, r0
 8002d1c:	b160      	cbz	r0, 8002d38 <_dtoa_r+0xc8>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 855e 	beq.w	80037e8 <_dtoa_r+0xb78>
 8002d2c:	4b95      	ldr	r3, [pc, #596]	; (8002f84 <_dtoa_r+0x314>)
 8002d2e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	9306      	str	r3, [sp, #24]
 8002d36:	e7e0      	b.n	8002cfa <_dtoa_r+0x8a>
 8002d38:	ab12      	add	r3, sp, #72	; 0x48
 8002d3a:	9301      	str	r3, [sp, #4]
 8002d3c:	ab13      	add	r3, sp, #76	; 0x4c
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	4632      	mov	r2, r6
 8002d42:	463b      	mov	r3, r7
 8002d44:	4620      	mov	r0, r4
 8002d46:	f001 f809 	bl	8003d5c <__d2b>
 8002d4a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8002d4e:	4682      	mov	sl, r0
 8002d50:	2d00      	cmp	r5, #0
 8002d52:	d07d      	beq.n	8002e50 <_dtoa_r+0x1e0>
 8002d54:	4630      	mov	r0, r6
 8002d56:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002d5a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002d5e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002d62:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002d66:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	4b86      	ldr	r3, [pc, #536]	; (8002f88 <_dtoa_r+0x318>)
 8002d6e:	f7fd f9fb 	bl	8000168 <__aeabi_dsub>
 8002d72:	a37b      	add	r3, pc, #492	; (adr r3, 8002f60 <_dtoa_r+0x2f0>)
 8002d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d78:	f7fd fbaa 	bl	80004d0 <__aeabi_dmul>
 8002d7c:	a37a      	add	r3, pc, #488	; (adr r3, 8002f68 <_dtoa_r+0x2f8>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd f9f3 	bl	800016c <__adddf3>
 8002d86:	4606      	mov	r6, r0
 8002d88:	4628      	mov	r0, r5
 8002d8a:	460f      	mov	r7, r1
 8002d8c:	f7fd fb3a 	bl	8000404 <__aeabi_i2d>
 8002d90:	a377      	add	r3, pc, #476	; (adr r3, 8002f70 <_dtoa_r+0x300>)
 8002d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d96:	f7fd fb9b 	bl	80004d0 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4630      	mov	r0, r6
 8002da0:	4639      	mov	r1, r7
 8002da2:	f7fd f9e3 	bl	800016c <__adddf3>
 8002da6:	4606      	mov	r6, r0
 8002da8:	460f      	mov	r7, r1
 8002daa:	f7fd fe41 	bl	8000a30 <__aeabi_d2iz>
 8002dae:	2200      	movs	r2, #0
 8002db0:	4683      	mov	fp, r0
 8002db2:	2300      	movs	r3, #0
 8002db4:	4630      	mov	r0, r6
 8002db6:	4639      	mov	r1, r7
 8002db8:	f7fd fdfc 	bl	80009b4 <__aeabi_dcmplt>
 8002dbc:	b158      	cbz	r0, 8002dd6 <_dtoa_r+0x166>
 8002dbe:	4658      	mov	r0, fp
 8002dc0:	f7fd fb20 	bl	8000404 <__aeabi_i2d>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	4630      	mov	r0, r6
 8002dca:	4639      	mov	r1, r7
 8002dcc:	f7fd fde8 	bl	80009a0 <__aeabi_dcmpeq>
 8002dd0:	b908      	cbnz	r0, 8002dd6 <_dtoa_r+0x166>
 8002dd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002dd6:	f1bb 0f16 	cmp.w	fp, #22
 8002dda:	d858      	bhi.n	8002e8e <_dtoa_r+0x21e>
 8002ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002de0:	496a      	ldr	r1, [pc, #424]	; (8002f8c <_dtoa_r+0x31c>)
 8002de2:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8002de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002dea:	f7fd fe01 	bl	80009f0 <__aeabi_dcmpgt>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d04f      	beq.n	8002e92 <_dtoa_r+0x222>
 8002df2:	2300      	movs	r3, #0
 8002df4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002df8:	930d      	str	r3, [sp, #52]	; 0x34
 8002dfa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002dfc:	1b5d      	subs	r5, r3, r5
 8002dfe:	1e6b      	subs	r3, r5, #1
 8002e00:	9307      	str	r3, [sp, #28]
 8002e02:	bf43      	ittte	mi
 8002e04:	2300      	movmi	r3, #0
 8002e06:	f1c5 0801 	rsbmi	r8, r5, #1
 8002e0a:	9307      	strmi	r3, [sp, #28]
 8002e0c:	f04f 0800 	movpl.w	r8, #0
 8002e10:	f1bb 0f00 	cmp.w	fp, #0
 8002e14:	db3f      	blt.n	8002e96 <_dtoa_r+0x226>
 8002e16:	9b07      	ldr	r3, [sp, #28]
 8002e18:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8002e1c:	445b      	add	r3, fp
 8002e1e:	9307      	str	r3, [sp, #28]
 8002e20:	2300      	movs	r3, #0
 8002e22:	9308      	str	r3, [sp, #32]
 8002e24:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002e26:	2b09      	cmp	r3, #9
 8002e28:	f200 80b4 	bhi.w	8002f94 <_dtoa_r+0x324>
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	bfc4      	itt	gt
 8002e30:	3b04      	subgt	r3, #4
 8002e32:	931e      	strgt	r3, [sp, #120]	; 0x78
 8002e34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002e36:	bfc8      	it	gt
 8002e38:	2600      	movgt	r6, #0
 8002e3a:	f1a3 0302 	sub.w	r3, r3, #2
 8002e3e:	bfd8      	it	le
 8002e40:	2601      	movle	r6, #1
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	f200 80b2 	bhi.w	8002fac <_dtoa_r+0x33c>
 8002e48:	e8df f003 	tbb	[pc, r3]
 8002e4c:	782d8684 	.word	0x782d8684
 8002e50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002e52:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8002e54:	441d      	add	r5, r3
 8002e56:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002e5a:	2b20      	cmp	r3, #32
 8002e5c:	dd11      	ble.n	8002e82 <_dtoa_r+0x212>
 8002e5e:	9a02      	ldr	r2, [sp, #8]
 8002e60:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002e64:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002e68:	fa22 f000 	lsr.w	r0, r2, r0
 8002e6c:	fa09 f303 	lsl.w	r3, r9, r3
 8002e70:	4318      	orrs	r0, r3
 8002e72:	f7fd fab7 	bl	80003e4 <__aeabi_ui2d>
 8002e76:	2301      	movs	r3, #1
 8002e78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002e7c:	3d01      	subs	r5, #1
 8002e7e:	9310      	str	r3, [sp, #64]	; 0x40
 8002e80:	e773      	b.n	8002d6a <_dtoa_r+0xfa>
 8002e82:	f1c3 0020 	rsb	r0, r3, #32
 8002e86:	9b02      	ldr	r3, [sp, #8]
 8002e88:	fa03 f000 	lsl.w	r0, r3, r0
 8002e8c:	e7f1      	b.n	8002e72 <_dtoa_r+0x202>
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e7b2      	b.n	8002df8 <_dtoa_r+0x188>
 8002e92:	900d      	str	r0, [sp, #52]	; 0x34
 8002e94:	e7b1      	b.n	8002dfa <_dtoa_r+0x18a>
 8002e96:	f1cb 0300 	rsb	r3, fp, #0
 8002e9a:	9308      	str	r3, [sp, #32]
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	eba8 080b 	sub.w	r8, r8, fp
 8002ea2:	930c      	str	r3, [sp, #48]	; 0x30
 8002ea4:	e7be      	b.n	8002e24 <_dtoa_r+0x1b4>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8002eaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f340 8080 	ble.w	8002fb2 <_dtoa_r+0x342>
 8002eb2:	4699      	mov	r9, r3
 8002eb4:	9304      	str	r3, [sp, #16]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2104      	movs	r1, #4
 8002eba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002ebc:	606a      	str	r2, [r5, #4]
 8002ebe:	f101 0214 	add.w	r2, r1, #20
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d97a      	bls.n	8002fbc <_dtoa_r+0x34c>
 8002ec6:	6869      	ldr	r1, [r5, #4]
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f000 fcc6 	bl	800385a <_Balloc>
 8002ece:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ed0:	6028      	str	r0, [r5, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f1b9 0f0e 	cmp.w	r9, #14
 8002ed8:	9306      	str	r3, [sp, #24]
 8002eda:	f200 80f0 	bhi.w	80030be <_dtoa_r+0x44e>
 8002ede:	2e00      	cmp	r6, #0
 8002ee0:	f000 80ed 	beq.w	80030be <_dtoa_r+0x44e>
 8002ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ee8:	f1bb 0f00 	cmp.w	fp, #0
 8002eec:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002ef0:	dd79      	ble.n	8002fe6 <_dtoa_r+0x376>
 8002ef2:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <_dtoa_r+0x31c>)
 8002ef4:	f00b 030f 	and.w	r3, fp, #15
 8002ef8:	ea4f 162b 	mov.w	r6, fp, asr #4
 8002efc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002f00:	06f0      	lsls	r0, r6, #27
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002f0a:	d55c      	bpl.n	8002fc6 <_dtoa_r+0x356>
 8002f0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002f10:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <_dtoa_r+0x320>)
 8002f12:	2503      	movs	r5, #3
 8002f14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002f18:	f7fd fc04 	bl	8000724 <__aeabi_ddiv>
 8002f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f20:	f006 060f 	and.w	r6, r6, #15
 8002f24:	4f1a      	ldr	r7, [pc, #104]	; (8002f90 <_dtoa_r+0x320>)
 8002f26:	2e00      	cmp	r6, #0
 8002f28:	d14f      	bne.n	8002fca <_dtoa_r+0x35a>
 8002f2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f32:	f7fd fbf7 	bl	8000724 <__aeabi_ddiv>
 8002f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f3a:	e06e      	b.n	800301a <_dtoa_r+0x3aa>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8002f40:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002f42:	445b      	add	r3, fp
 8002f44:	f103 0901 	add.w	r9, r3, #1
 8002f48:	9304      	str	r3, [sp, #16]
 8002f4a:	464b      	mov	r3, r9
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	bfb8      	it	lt
 8002f50:	2301      	movlt	r3, #1
 8002f52:	e7b0      	b.n	8002eb6 <_dtoa_r+0x246>
 8002f54:	2300      	movs	r3, #0
 8002f56:	e7a7      	b.n	8002ea8 <_dtoa_r+0x238>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e7f0      	b.n	8002f3e <_dtoa_r+0x2ce>
 8002f5c:	f3af 8000 	nop.w
 8002f60:	636f4361 	.word	0x636f4361
 8002f64:	3fd287a7 	.word	0x3fd287a7
 8002f68:	8b60c8b3 	.word	0x8b60c8b3
 8002f6c:	3fc68a28 	.word	0x3fc68a28
 8002f70:	509f79fb 	.word	0x509f79fb
 8002f74:	3fd34413 	.word	0x3fd34413
 8002f78:	7ff00000 	.word	0x7ff00000
 8002f7c:	08004df5 	.word	0x08004df5
 8002f80:	08004dec 	.word	0x08004dec
 8002f84:	08004deb 	.word	0x08004deb
 8002f88:	3ff80000 	.word	0x3ff80000
 8002f8c:	08004e28 	.word	0x08004e28
 8002f90:	08004e00 	.word	0x08004e00
 8002f94:	2601      	movs	r6, #1
 8002f96:	2300      	movs	r3, #0
 8002f98:	9609      	str	r6, [sp, #36]	; 0x24
 8002f9a:	931e      	str	r3, [sp, #120]	; 0x78
 8002f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	9304      	str	r3, [sp, #16]
 8002fa4:	4699      	mov	r9, r3
 8002fa6:	2312      	movs	r3, #18
 8002fa8:	921f      	str	r2, [sp, #124]	; 0x7c
 8002faa:	e784      	b.n	8002eb6 <_dtoa_r+0x246>
 8002fac:	2301      	movs	r3, #1
 8002fae:	9309      	str	r3, [sp, #36]	; 0x24
 8002fb0:	e7f4      	b.n	8002f9c <_dtoa_r+0x32c>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	9304      	str	r3, [sp, #16]
 8002fb6:	4699      	mov	r9, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	e7f5      	b.n	8002fa8 <_dtoa_r+0x338>
 8002fbc:	686a      	ldr	r2, [r5, #4]
 8002fbe:	0049      	lsls	r1, r1, #1
 8002fc0:	3201      	adds	r2, #1
 8002fc2:	606a      	str	r2, [r5, #4]
 8002fc4:	e77b      	b.n	8002ebe <_dtoa_r+0x24e>
 8002fc6:	2502      	movs	r5, #2
 8002fc8:	e7ac      	b.n	8002f24 <_dtoa_r+0x2b4>
 8002fca:	07f1      	lsls	r1, r6, #31
 8002fcc:	d508      	bpl.n	8002fe0 <_dtoa_r+0x370>
 8002fce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fd6:	f7fd fa7b 	bl	80004d0 <__aeabi_dmul>
 8002fda:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002fde:	3501      	adds	r5, #1
 8002fe0:	1076      	asrs	r6, r6, #1
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	e79f      	b.n	8002f26 <_dtoa_r+0x2b6>
 8002fe6:	f000 80a5 	beq.w	8003134 <_dtoa_r+0x4c4>
 8002fea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002fee:	f1cb 0600 	rsb	r6, fp, #0
 8002ff2:	4ba2      	ldr	r3, [pc, #648]	; (800327c <_dtoa_r+0x60c>)
 8002ff4:	f006 020f 	and.w	r2, r6, #15
 8002ff8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f7fd fa66 	bl	80004d0 <__aeabi_dmul>
 8003004:	2502      	movs	r5, #2
 8003006:	2300      	movs	r3, #0
 8003008:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800300c:	4f9c      	ldr	r7, [pc, #624]	; (8003280 <_dtoa_r+0x610>)
 800300e:	1136      	asrs	r6, r6, #4
 8003010:	2e00      	cmp	r6, #0
 8003012:	f040 8084 	bne.w	800311e <_dtoa_r+0x4ae>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d18d      	bne.n	8002f36 <_dtoa_r+0x2c6>
 800301a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 808b 	beq.w	8003138 <_dtoa_r+0x4c8>
 8003022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003026:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800302a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800302e:	2200      	movs	r2, #0
 8003030:	4b94      	ldr	r3, [pc, #592]	; (8003284 <_dtoa_r+0x614>)
 8003032:	f7fd fcbf 	bl	80009b4 <__aeabi_dcmplt>
 8003036:	2800      	cmp	r0, #0
 8003038:	d07e      	beq.n	8003138 <_dtoa_r+0x4c8>
 800303a:	f1b9 0f00 	cmp.w	r9, #0
 800303e:	d07b      	beq.n	8003138 <_dtoa_r+0x4c8>
 8003040:	9b04      	ldr	r3, [sp, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	dd37      	ble.n	80030b6 <_dtoa_r+0x446>
 8003046:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800304a:	2200      	movs	r2, #0
 800304c:	4b8e      	ldr	r3, [pc, #568]	; (8003288 <_dtoa_r+0x618>)
 800304e:	f7fd fa3f 	bl	80004d0 <__aeabi_dmul>
 8003052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003056:	9e04      	ldr	r6, [sp, #16]
 8003058:	f10b 37ff 	add.w	r7, fp, #4294967295
 800305c:	3501      	adds	r5, #1
 800305e:	4628      	mov	r0, r5
 8003060:	f7fd f9d0 	bl	8000404 <__aeabi_i2d>
 8003064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003068:	f7fd fa32 	bl	80004d0 <__aeabi_dmul>
 800306c:	4b87      	ldr	r3, [pc, #540]	; (800328c <_dtoa_r+0x61c>)
 800306e:	2200      	movs	r2, #0
 8003070:	f7fd f87c 	bl	800016c <__adddf3>
 8003074:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800307a:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 800307e:	950b      	str	r5, [sp, #44]	; 0x2c
 8003080:	2e00      	cmp	r6, #0
 8003082:	d15c      	bne.n	800313e <_dtoa_r+0x4ce>
 8003084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003088:	2200      	movs	r2, #0
 800308a:	4b81      	ldr	r3, [pc, #516]	; (8003290 <_dtoa_r+0x620>)
 800308c:	f7fd f86c 	bl	8000168 <__aeabi_dsub>
 8003090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003092:	462b      	mov	r3, r5
 8003094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003098:	f7fd fcaa 	bl	80009f0 <__aeabi_dcmpgt>
 800309c:	2800      	cmp	r0, #0
 800309e:	f040 82f7 	bne.w	8003690 <_dtoa_r+0xa20>
 80030a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80030ac:	f7fd fc82 	bl	80009b4 <__aeabi_dcmplt>
 80030b0:	2800      	cmp	r0, #0
 80030b2:	f040 82eb 	bne.w	800368c <_dtoa_r+0xa1c>
 80030b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80030ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f2c0 8150 	blt.w	8003366 <_dtoa_r+0x6f6>
 80030c6:	f1bb 0f0e 	cmp.w	fp, #14
 80030ca:	f300 814c 	bgt.w	8003366 <_dtoa_r+0x6f6>
 80030ce:	4b6b      	ldr	r3, [pc, #428]	; (800327c <_dtoa_r+0x60c>)
 80030d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80030dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f280 80da 	bge.w	8003298 <_dtoa_r+0x628>
 80030e4:	f1b9 0f00 	cmp.w	r9, #0
 80030e8:	f300 80d6 	bgt.w	8003298 <_dtoa_r+0x628>
 80030ec:	f040 82cd 	bne.w	800368a <_dtoa_r+0xa1a>
 80030f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030f4:	2200      	movs	r2, #0
 80030f6:	4b66      	ldr	r3, [pc, #408]	; (8003290 <_dtoa_r+0x620>)
 80030f8:	f7fd f9ea 	bl	80004d0 <__aeabi_dmul>
 80030fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003100:	f7fd fc6c 	bl	80009dc <__aeabi_dcmpge>
 8003104:	464e      	mov	r6, r9
 8003106:	464f      	mov	r7, r9
 8003108:	2800      	cmp	r0, #0
 800310a:	f040 82a4 	bne.w	8003656 <_dtoa_r+0x9e6>
 800310e:	9b06      	ldr	r3, [sp, #24]
 8003110:	9a06      	ldr	r2, [sp, #24]
 8003112:	1c5d      	adds	r5, r3, #1
 8003114:	2331      	movs	r3, #49	; 0x31
 8003116:	f10b 0b01 	add.w	fp, fp, #1
 800311a:	7013      	strb	r3, [r2, #0]
 800311c:	e29f      	b.n	800365e <_dtoa_r+0x9ee>
 800311e:	07f2      	lsls	r2, r6, #31
 8003120:	d505      	bpl.n	800312e <_dtoa_r+0x4be>
 8003122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003126:	f7fd f9d3 	bl	80004d0 <__aeabi_dmul>
 800312a:	2301      	movs	r3, #1
 800312c:	3501      	adds	r5, #1
 800312e:	1076      	asrs	r6, r6, #1
 8003130:	3708      	adds	r7, #8
 8003132:	e76d      	b.n	8003010 <_dtoa_r+0x3a0>
 8003134:	2502      	movs	r5, #2
 8003136:	e770      	b.n	800301a <_dtoa_r+0x3aa>
 8003138:	465f      	mov	r7, fp
 800313a:	464e      	mov	r6, r9
 800313c:	e78f      	b.n	800305e <_dtoa_r+0x3ee>
 800313e:	9a06      	ldr	r2, [sp, #24]
 8003140:	4b4e      	ldr	r3, [pc, #312]	; (800327c <_dtoa_r+0x60c>)
 8003142:	4432      	add	r2, r6
 8003144:	9211      	str	r2, [sp, #68]	; 0x44
 8003146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003148:	1e71      	subs	r1, r6, #1
 800314a:	2a00      	cmp	r2, #0
 800314c:	d048      	beq.n	80031e0 <_dtoa_r+0x570>
 800314e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	2000      	movs	r0, #0
 8003158:	494e      	ldr	r1, [pc, #312]	; (8003294 <_dtoa_r+0x624>)
 800315a:	f7fd fae3 	bl	8000724 <__aeabi_ddiv>
 800315e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003162:	f7fd f801 	bl	8000168 <__aeabi_dsub>
 8003166:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800316a:	9d06      	ldr	r5, [sp, #24]
 800316c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003170:	f7fd fc5e 	bl	8000a30 <__aeabi_d2iz>
 8003174:	4606      	mov	r6, r0
 8003176:	f7fd f945 	bl	8000404 <__aeabi_i2d>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003182:	f7fc fff1 	bl	8000168 <__aeabi_dsub>
 8003186:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800318a:	3630      	adds	r6, #48	; 0x30
 800318c:	f805 6b01 	strb.w	r6, [r5], #1
 8003190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003194:	f7fd fc0e 	bl	80009b4 <__aeabi_dcmplt>
 8003198:	2800      	cmp	r0, #0
 800319a:	d164      	bne.n	8003266 <_dtoa_r+0x5f6>
 800319c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80031a0:	2000      	movs	r0, #0
 80031a2:	4938      	ldr	r1, [pc, #224]	; (8003284 <_dtoa_r+0x614>)
 80031a4:	f7fc ffe0 	bl	8000168 <__aeabi_dsub>
 80031a8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80031ac:	f7fd fc02 	bl	80009b4 <__aeabi_dcmplt>
 80031b0:	2800      	cmp	r0, #0
 80031b2:	f040 80b9 	bne.w	8003328 <_dtoa_r+0x6b8>
 80031b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031b8:	429d      	cmp	r5, r3
 80031ba:	f43f af7c 	beq.w	80030b6 <_dtoa_r+0x446>
 80031be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80031c2:	2200      	movs	r2, #0
 80031c4:	4b30      	ldr	r3, [pc, #192]	; (8003288 <_dtoa_r+0x618>)
 80031c6:	f7fd f983 	bl	80004d0 <__aeabi_dmul>
 80031ca:	2200      	movs	r2, #0
 80031cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80031d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031d4:	4b2c      	ldr	r3, [pc, #176]	; (8003288 <_dtoa_r+0x618>)
 80031d6:	f7fd f97b 	bl	80004d0 <__aeabi_dmul>
 80031da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80031de:	e7c5      	b.n	800316c <_dtoa_r+0x4fc>
 80031e0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80031e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80031ec:	f7fd f970 	bl	80004d0 <__aeabi_dmul>
 80031f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80031f4:	9d06      	ldr	r5, [sp, #24]
 80031f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80031fa:	f7fd fc19 	bl	8000a30 <__aeabi_d2iz>
 80031fe:	4606      	mov	r6, r0
 8003200:	f7fd f900 	bl	8000404 <__aeabi_i2d>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800320c:	f7fc ffac 	bl	8000168 <__aeabi_dsub>
 8003210:	3630      	adds	r6, #48	; 0x30
 8003212:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003214:	f805 6b01 	strb.w	r6, [r5], #1
 8003218:	42ab      	cmp	r3, r5
 800321a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	d124      	bne.n	800326e <_dtoa_r+0x5fe>
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <_dtoa_r+0x624>)
 8003226:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800322a:	f7fc ff9f 	bl	800016c <__adddf3>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003236:	f7fd fbdb 	bl	80009f0 <__aeabi_dcmpgt>
 800323a:	2800      	cmp	r0, #0
 800323c:	d174      	bne.n	8003328 <_dtoa_r+0x6b8>
 800323e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003242:	2000      	movs	r0, #0
 8003244:	4913      	ldr	r1, [pc, #76]	; (8003294 <_dtoa_r+0x624>)
 8003246:	f7fc ff8f 	bl	8000168 <__aeabi_dsub>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003252:	f7fd fbaf 	bl	80009b4 <__aeabi_dcmplt>
 8003256:	2800      	cmp	r0, #0
 8003258:	f43f af2d 	beq.w	80030b6 <_dtoa_r+0x446>
 800325c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	2b30      	cmp	r3, #48	; 0x30
 8003264:	d001      	beq.n	800326a <_dtoa_r+0x5fa>
 8003266:	46bb      	mov	fp, r7
 8003268:	e04d      	b.n	8003306 <_dtoa_r+0x696>
 800326a:	4615      	mov	r5, r2
 800326c:	e7f6      	b.n	800325c <_dtoa_r+0x5ec>
 800326e:	4b06      	ldr	r3, [pc, #24]	; (8003288 <_dtoa_r+0x618>)
 8003270:	f7fd f92e 	bl	80004d0 <__aeabi_dmul>
 8003274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003278:	e7bd      	b.n	80031f6 <_dtoa_r+0x586>
 800327a:	bf00      	nop
 800327c:	08004e28 	.word	0x08004e28
 8003280:	08004e00 	.word	0x08004e00
 8003284:	3ff00000 	.word	0x3ff00000
 8003288:	40240000 	.word	0x40240000
 800328c:	401c0000 	.word	0x401c0000
 8003290:	40140000 	.word	0x40140000
 8003294:	3fe00000 	.word	0x3fe00000
 8003298:	9d06      	ldr	r5, [sp, #24]
 800329a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800329e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80032a2:	4630      	mov	r0, r6
 80032a4:	4639      	mov	r1, r7
 80032a6:	f7fd fa3d 	bl	8000724 <__aeabi_ddiv>
 80032aa:	f7fd fbc1 	bl	8000a30 <__aeabi_d2iz>
 80032ae:	4680      	mov	r8, r0
 80032b0:	f7fd f8a8 	bl	8000404 <__aeabi_i2d>
 80032b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80032b8:	f7fd f90a 	bl	80004d0 <__aeabi_dmul>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4630      	mov	r0, r6
 80032c2:	4639      	mov	r1, r7
 80032c4:	f7fc ff50 	bl	8000168 <__aeabi_dsub>
 80032c8:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80032cc:	f805 6b01 	strb.w	r6, [r5], #1
 80032d0:	9e06      	ldr	r6, [sp, #24]
 80032d2:	4602      	mov	r2, r0
 80032d4:	1bae      	subs	r6, r5, r6
 80032d6:	45b1      	cmp	r9, r6
 80032d8:	460b      	mov	r3, r1
 80032da:	d137      	bne.n	800334c <_dtoa_r+0x6dc>
 80032dc:	f7fc ff46 	bl	800016c <__adddf3>
 80032e0:	4606      	mov	r6, r0
 80032e2:	460f      	mov	r7, r1
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032ec:	f7fd fb62 	bl	80009b4 <__aeabi_dcmplt>
 80032f0:	b9c8      	cbnz	r0, 8003326 <_dtoa_r+0x6b6>
 80032f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032f6:	4632      	mov	r2, r6
 80032f8:	463b      	mov	r3, r7
 80032fa:	f7fd fb51 	bl	80009a0 <__aeabi_dcmpeq>
 80032fe:	b110      	cbz	r0, 8003306 <_dtoa_r+0x696>
 8003300:	f018 0f01 	tst.w	r8, #1
 8003304:	d10f      	bne.n	8003326 <_dtoa_r+0x6b6>
 8003306:	4651      	mov	r1, sl
 8003308:	4620      	mov	r0, r4
 800330a:	f000 fada 	bl	80038c2 <_Bfree>
 800330e:	2300      	movs	r3, #0
 8003310:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003312:	702b      	strb	r3, [r5, #0]
 8003314:	f10b 0301 	add.w	r3, fp, #1
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800331c:	2b00      	cmp	r3, #0
 800331e:	f43f acec 	beq.w	8002cfa <_dtoa_r+0x8a>
 8003322:	601d      	str	r5, [r3, #0]
 8003324:	e4e9      	b.n	8002cfa <_dtoa_r+0x8a>
 8003326:	465f      	mov	r7, fp
 8003328:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800332c:	1e6b      	subs	r3, r5, #1
 800332e:	2a39      	cmp	r2, #57	; 0x39
 8003330:	d106      	bne.n	8003340 <_dtoa_r+0x6d0>
 8003332:	9a06      	ldr	r2, [sp, #24]
 8003334:	429a      	cmp	r2, r3
 8003336:	d107      	bne.n	8003348 <_dtoa_r+0x6d8>
 8003338:	2330      	movs	r3, #48	; 0x30
 800333a:	7013      	strb	r3, [r2, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	3701      	adds	r7, #1
 8003340:	781a      	ldrb	r2, [r3, #0]
 8003342:	3201      	adds	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e78e      	b.n	8003266 <_dtoa_r+0x5f6>
 8003348:	461d      	mov	r5, r3
 800334a:	e7ed      	b.n	8003328 <_dtoa_r+0x6b8>
 800334c:	2200      	movs	r2, #0
 800334e:	4bb5      	ldr	r3, [pc, #724]	; (8003624 <_dtoa_r+0x9b4>)
 8003350:	f7fd f8be 	bl	80004d0 <__aeabi_dmul>
 8003354:	2200      	movs	r2, #0
 8003356:	2300      	movs	r3, #0
 8003358:	4606      	mov	r6, r0
 800335a:	460f      	mov	r7, r1
 800335c:	f7fd fb20 	bl	80009a0 <__aeabi_dcmpeq>
 8003360:	2800      	cmp	r0, #0
 8003362:	d09c      	beq.n	800329e <_dtoa_r+0x62e>
 8003364:	e7cf      	b.n	8003306 <_dtoa_r+0x696>
 8003366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003368:	2a00      	cmp	r2, #0
 800336a:	f000 8129 	beq.w	80035c0 <_dtoa_r+0x950>
 800336e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003370:	2a01      	cmp	r2, #1
 8003372:	f300 810e 	bgt.w	8003592 <_dtoa_r+0x922>
 8003376:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003378:	2a00      	cmp	r2, #0
 800337a:	f000 8106 	beq.w	800358a <_dtoa_r+0x91a>
 800337e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003382:	4645      	mov	r5, r8
 8003384:	9e08      	ldr	r6, [sp, #32]
 8003386:	9a07      	ldr	r2, [sp, #28]
 8003388:	2101      	movs	r1, #1
 800338a:	441a      	add	r2, r3
 800338c:	4620      	mov	r0, r4
 800338e:	4498      	add	r8, r3
 8003390:	9207      	str	r2, [sp, #28]
 8003392:	f000 fb36 	bl	8003a02 <__i2b>
 8003396:	4607      	mov	r7, r0
 8003398:	2d00      	cmp	r5, #0
 800339a:	dd0b      	ble.n	80033b4 <_dtoa_r+0x744>
 800339c:	9b07      	ldr	r3, [sp, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	dd08      	ble.n	80033b4 <_dtoa_r+0x744>
 80033a2:	42ab      	cmp	r3, r5
 80033a4:	bfa8      	it	ge
 80033a6:	462b      	movge	r3, r5
 80033a8:	9a07      	ldr	r2, [sp, #28]
 80033aa:	eba8 0803 	sub.w	r8, r8, r3
 80033ae:	1aed      	subs	r5, r5, r3
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	9307      	str	r3, [sp, #28]
 80033b4:	9b08      	ldr	r3, [sp, #32]
 80033b6:	b1fb      	cbz	r3, 80033f8 <_dtoa_r+0x788>
 80033b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 8104 	beq.w	80035c8 <_dtoa_r+0x958>
 80033c0:	2e00      	cmp	r6, #0
 80033c2:	dd11      	ble.n	80033e8 <_dtoa_r+0x778>
 80033c4:	4639      	mov	r1, r7
 80033c6:	4632      	mov	r2, r6
 80033c8:	4620      	mov	r0, r4
 80033ca:	f000 fbaf 	bl	8003b2c <__pow5mult>
 80033ce:	4652      	mov	r2, sl
 80033d0:	4601      	mov	r1, r0
 80033d2:	4607      	mov	r7, r0
 80033d4:	4620      	mov	r0, r4
 80033d6:	f000 fb1d 	bl	8003a14 <__multiply>
 80033da:	4651      	mov	r1, sl
 80033dc:	900a      	str	r0, [sp, #40]	; 0x28
 80033de:	4620      	mov	r0, r4
 80033e0:	f000 fa6f 	bl	80038c2 <_Bfree>
 80033e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033e6:	469a      	mov	sl, r3
 80033e8:	9b08      	ldr	r3, [sp, #32]
 80033ea:	1b9a      	subs	r2, r3, r6
 80033ec:	d004      	beq.n	80033f8 <_dtoa_r+0x788>
 80033ee:	4651      	mov	r1, sl
 80033f0:	4620      	mov	r0, r4
 80033f2:	f000 fb9b 	bl	8003b2c <__pow5mult>
 80033f6:	4682      	mov	sl, r0
 80033f8:	2101      	movs	r1, #1
 80033fa:	4620      	mov	r0, r4
 80033fc:	f000 fb01 	bl	8003a02 <__i2b>
 8003400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003402:	4606      	mov	r6, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	f340 80e1 	ble.w	80035cc <_dtoa_r+0x95c>
 800340a:	461a      	mov	r2, r3
 800340c:	4601      	mov	r1, r0
 800340e:	4620      	mov	r0, r4
 8003410:	f000 fb8c 	bl	8003b2c <__pow5mult>
 8003414:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003416:	4606      	mov	r6, r0
 8003418:	2b01      	cmp	r3, #1
 800341a:	f340 80da 	ble.w	80035d2 <_dtoa_r+0x962>
 800341e:	2300      	movs	r3, #0
 8003420:	9308      	str	r3, [sp, #32]
 8003422:	6933      	ldr	r3, [r6, #16]
 8003424:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003428:	6918      	ldr	r0, [r3, #16]
 800342a:	f000 fa9c 	bl	8003966 <__hi0bits>
 800342e:	f1c0 0020 	rsb	r0, r0, #32
 8003432:	9b07      	ldr	r3, [sp, #28]
 8003434:	4418      	add	r0, r3
 8003436:	f010 001f 	ands.w	r0, r0, #31
 800343a:	f000 80f0 	beq.w	800361e <_dtoa_r+0x9ae>
 800343e:	f1c0 0320 	rsb	r3, r0, #32
 8003442:	2b04      	cmp	r3, #4
 8003444:	f340 80e2 	ble.w	800360c <_dtoa_r+0x99c>
 8003448:	9b07      	ldr	r3, [sp, #28]
 800344a:	f1c0 001c 	rsb	r0, r0, #28
 800344e:	4480      	add	r8, r0
 8003450:	4405      	add	r5, r0
 8003452:	4403      	add	r3, r0
 8003454:	9307      	str	r3, [sp, #28]
 8003456:	f1b8 0f00 	cmp.w	r8, #0
 800345a:	dd05      	ble.n	8003468 <_dtoa_r+0x7f8>
 800345c:	4651      	mov	r1, sl
 800345e:	4642      	mov	r2, r8
 8003460:	4620      	mov	r0, r4
 8003462:	f000 fbb1 	bl	8003bc8 <__lshift>
 8003466:	4682      	mov	sl, r0
 8003468:	9b07      	ldr	r3, [sp, #28]
 800346a:	2b00      	cmp	r3, #0
 800346c:	dd05      	ble.n	800347a <_dtoa_r+0x80a>
 800346e:	4631      	mov	r1, r6
 8003470:	461a      	mov	r2, r3
 8003472:	4620      	mov	r0, r4
 8003474:	f000 fba8 	bl	8003bc8 <__lshift>
 8003478:	4606      	mov	r6, r0
 800347a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80d3 	beq.w	8003628 <_dtoa_r+0x9b8>
 8003482:	4631      	mov	r1, r6
 8003484:	4650      	mov	r0, sl
 8003486:	f000 fbf0 	bl	8003c6a <__mcmp>
 800348a:	2800      	cmp	r0, #0
 800348c:	f280 80cc 	bge.w	8003628 <_dtoa_r+0x9b8>
 8003490:	2300      	movs	r3, #0
 8003492:	4651      	mov	r1, sl
 8003494:	220a      	movs	r2, #10
 8003496:	4620      	mov	r0, r4
 8003498:	f000 fa2a 	bl	80038f0 <__multadd>
 800349c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800349e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80034a2:	4682      	mov	sl, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 81a9 	beq.w	80037fc <_dtoa_r+0xb8c>
 80034aa:	2300      	movs	r3, #0
 80034ac:	4639      	mov	r1, r7
 80034ae:	220a      	movs	r2, #10
 80034b0:	4620      	mov	r0, r4
 80034b2:	f000 fa1d 	bl	80038f0 <__multadd>
 80034b6:	9b04      	ldr	r3, [sp, #16]
 80034b8:	4607      	mov	r7, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	dc03      	bgt.n	80034c6 <_dtoa_r+0x856>
 80034be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	f300 80b9 	bgt.w	8003638 <_dtoa_r+0x9c8>
 80034c6:	2d00      	cmp	r5, #0
 80034c8:	dd05      	ble.n	80034d6 <_dtoa_r+0x866>
 80034ca:	4639      	mov	r1, r7
 80034cc:	462a      	mov	r2, r5
 80034ce:	4620      	mov	r0, r4
 80034d0:	f000 fb7a 	bl	8003bc8 <__lshift>
 80034d4:	4607      	mov	r7, r0
 80034d6:	9b08      	ldr	r3, [sp, #32]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8110 	beq.w	80036fe <_dtoa_r+0xa8e>
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4620      	mov	r0, r4
 80034e2:	f000 f9ba 	bl	800385a <_Balloc>
 80034e6:	4605      	mov	r5, r0
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	f107 010c 	add.w	r1, r7, #12
 80034ee:	3202      	adds	r2, #2
 80034f0:	0092      	lsls	r2, r2, #2
 80034f2:	300c      	adds	r0, #12
 80034f4:	f000 f9a6 	bl	8003844 <memcpy>
 80034f8:	2201      	movs	r2, #1
 80034fa:	4629      	mov	r1, r5
 80034fc:	4620      	mov	r0, r4
 80034fe:	f000 fb63 	bl	8003bc8 <__lshift>
 8003502:	9707      	str	r7, [sp, #28]
 8003504:	4607      	mov	r7, r0
 8003506:	9b02      	ldr	r3, [sp, #8]
 8003508:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	9308      	str	r3, [sp, #32]
 8003512:	4631      	mov	r1, r6
 8003514:	4650      	mov	r0, sl
 8003516:	f7ff fb1e 	bl	8002b56 <quorem>
 800351a:	9907      	ldr	r1, [sp, #28]
 800351c:	4605      	mov	r5, r0
 800351e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003522:	4650      	mov	r0, sl
 8003524:	f000 fba1 	bl	8003c6a <__mcmp>
 8003528:	463a      	mov	r2, r7
 800352a:	9002      	str	r0, [sp, #8]
 800352c:	4631      	mov	r1, r6
 800352e:	4620      	mov	r0, r4
 8003530:	f000 fbb5 	bl	8003c9e <__mdiff>
 8003534:	68c3      	ldr	r3, [r0, #12]
 8003536:	4602      	mov	r2, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	f040 80e2 	bne.w	8003702 <_dtoa_r+0xa92>
 800353e:	4601      	mov	r1, r0
 8003540:	9009      	str	r0, [sp, #36]	; 0x24
 8003542:	4650      	mov	r0, sl
 8003544:	f000 fb91 	bl	8003c6a <__mcmp>
 8003548:	4603      	mov	r3, r0
 800354a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800354c:	4611      	mov	r1, r2
 800354e:	4620      	mov	r0, r4
 8003550:	9309      	str	r3, [sp, #36]	; 0x24
 8003552:	f000 f9b6 	bl	80038c2 <_Bfree>
 8003556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003558:	2b00      	cmp	r3, #0
 800355a:	f040 80d4 	bne.w	8003706 <_dtoa_r+0xa96>
 800355e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003560:	2a00      	cmp	r2, #0
 8003562:	f040 80d0 	bne.w	8003706 <_dtoa_r+0xa96>
 8003566:	9a08      	ldr	r2, [sp, #32]
 8003568:	2a00      	cmp	r2, #0
 800356a:	f040 80cc 	bne.w	8003706 <_dtoa_r+0xa96>
 800356e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003572:	f000 80e8 	beq.w	8003746 <_dtoa_r+0xad6>
 8003576:	9b02      	ldr	r3, [sp, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	dd01      	ble.n	8003580 <_dtoa_r+0x910>
 800357c:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003580:	f108 0501 	add.w	r5, r8, #1
 8003584:	f888 9000 	strb.w	r9, [r8]
 8003588:	e06b      	b.n	8003662 <_dtoa_r+0x9f2>
 800358a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800358c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003590:	e6f7      	b.n	8003382 <_dtoa_r+0x712>
 8003592:	9b08      	ldr	r3, [sp, #32]
 8003594:	f109 36ff 	add.w	r6, r9, #4294967295
 8003598:	42b3      	cmp	r3, r6
 800359a:	bfb7      	itett	lt
 800359c:	9b08      	ldrlt	r3, [sp, #32]
 800359e:	1b9e      	subge	r6, r3, r6
 80035a0:	1af2      	sublt	r2, r6, r3
 80035a2:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80035a4:	bfbf      	itttt	lt
 80035a6:	9608      	strlt	r6, [sp, #32]
 80035a8:	189b      	addlt	r3, r3, r2
 80035aa:	930c      	strlt	r3, [sp, #48]	; 0x30
 80035ac:	2600      	movlt	r6, #0
 80035ae:	f1b9 0f00 	cmp.w	r9, #0
 80035b2:	bfb9      	ittee	lt
 80035b4:	eba8 0509 	sublt.w	r5, r8, r9
 80035b8:	2300      	movlt	r3, #0
 80035ba:	4645      	movge	r5, r8
 80035bc:	464b      	movge	r3, r9
 80035be:	e6e2      	b.n	8003386 <_dtoa_r+0x716>
 80035c0:	9e08      	ldr	r6, [sp, #32]
 80035c2:	4645      	mov	r5, r8
 80035c4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80035c6:	e6e7      	b.n	8003398 <_dtoa_r+0x728>
 80035c8:	9a08      	ldr	r2, [sp, #32]
 80035ca:	e710      	b.n	80033ee <_dtoa_r+0x77e>
 80035cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	dc18      	bgt.n	8003604 <_dtoa_r+0x994>
 80035d2:	9b02      	ldr	r3, [sp, #8]
 80035d4:	b9b3      	cbnz	r3, 8003604 <_dtoa_r+0x994>
 80035d6:	9b03      	ldr	r3, [sp, #12]
 80035d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035dc:	b9a3      	cbnz	r3, 8003608 <_dtoa_r+0x998>
 80035de:	9b03      	ldr	r3, [sp, #12]
 80035e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035e4:	0d1b      	lsrs	r3, r3, #20
 80035e6:	051b      	lsls	r3, r3, #20
 80035e8:	b12b      	cbz	r3, 80035f6 <_dtoa_r+0x986>
 80035ea:	9b07      	ldr	r3, [sp, #28]
 80035ec:	f108 0801 	add.w	r8, r8, #1
 80035f0:	3301      	adds	r3, #1
 80035f2:	9307      	str	r3, [sp, #28]
 80035f4:	2301      	movs	r3, #1
 80035f6:	9308      	str	r3, [sp, #32]
 80035f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f47f af11 	bne.w	8003422 <_dtoa_r+0x7b2>
 8003600:	2001      	movs	r0, #1
 8003602:	e716      	b.n	8003432 <_dtoa_r+0x7c2>
 8003604:	2300      	movs	r3, #0
 8003606:	e7f6      	b.n	80035f6 <_dtoa_r+0x986>
 8003608:	9b02      	ldr	r3, [sp, #8]
 800360a:	e7f4      	b.n	80035f6 <_dtoa_r+0x986>
 800360c:	f43f af23 	beq.w	8003456 <_dtoa_r+0x7e6>
 8003610:	9a07      	ldr	r2, [sp, #28]
 8003612:	331c      	adds	r3, #28
 8003614:	441a      	add	r2, r3
 8003616:	4498      	add	r8, r3
 8003618:	441d      	add	r5, r3
 800361a:	4613      	mov	r3, r2
 800361c:	e71a      	b.n	8003454 <_dtoa_r+0x7e4>
 800361e:	4603      	mov	r3, r0
 8003620:	e7f6      	b.n	8003610 <_dtoa_r+0x9a0>
 8003622:	bf00      	nop
 8003624:	40240000 	.word	0x40240000
 8003628:	f1b9 0f00 	cmp.w	r9, #0
 800362c:	dc33      	bgt.n	8003696 <_dtoa_r+0xa26>
 800362e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003630:	2b02      	cmp	r3, #2
 8003632:	dd30      	ble.n	8003696 <_dtoa_r+0xa26>
 8003634:	f8cd 9010 	str.w	r9, [sp, #16]
 8003638:	9b04      	ldr	r3, [sp, #16]
 800363a:	b963      	cbnz	r3, 8003656 <_dtoa_r+0x9e6>
 800363c:	4631      	mov	r1, r6
 800363e:	2205      	movs	r2, #5
 8003640:	4620      	mov	r0, r4
 8003642:	f000 f955 	bl	80038f0 <__multadd>
 8003646:	4601      	mov	r1, r0
 8003648:	4606      	mov	r6, r0
 800364a:	4650      	mov	r0, sl
 800364c:	f000 fb0d 	bl	8003c6a <__mcmp>
 8003650:	2800      	cmp	r0, #0
 8003652:	f73f ad5c 	bgt.w	800310e <_dtoa_r+0x49e>
 8003656:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003658:	9d06      	ldr	r5, [sp, #24]
 800365a:	ea6f 0b03 	mvn.w	fp, r3
 800365e:	2300      	movs	r3, #0
 8003660:	9307      	str	r3, [sp, #28]
 8003662:	4631      	mov	r1, r6
 8003664:	4620      	mov	r0, r4
 8003666:	f000 f92c 	bl	80038c2 <_Bfree>
 800366a:	2f00      	cmp	r7, #0
 800366c:	f43f ae4b 	beq.w	8003306 <_dtoa_r+0x696>
 8003670:	9b07      	ldr	r3, [sp, #28]
 8003672:	b12b      	cbz	r3, 8003680 <_dtoa_r+0xa10>
 8003674:	42bb      	cmp	r3, r7
 8003676:	d003      	beq.n	8003680 <_dtoa_r+0xa10>
 8003678:	4619      	mov	r1, r3
 800367a:	4620      	mov	r0, r4
 800367c:	f000 f921 	bl	80038c2 <_Bfree>
 8003680:	4639      	mov	r1, r7
 8003682:	4620      	mov	r0, r4
 8003684:	f000 f91d 	bl	80038c2 <_Bfree>
 8003688:	e63d      	b.n	8003306 <_dtoa_r+0x696>
 800368a:	2600      	movs	r6, #0
 800368c:	4637      	mov	r7, r6
 800368e:	e7e2      	b.n	8003656 <_dtoa_r+0x9e6>
 8003690:	46bb      	mov	fp, r7
 8003692:	4637      	mov	r7, r6
 8003694:	e53b      	b.n	800310e <_dtoa_r+0x49e>
 8003696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003698:	f8cd 9010 	str.w	r9, [sp, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	f47f af12 	bne.w	80034c6 <_dtoa_r+0x856>
 80036a2:	9d06      	ldr	r5, [sp, #24]
 80036a4:	4631      	mov	r1, r6
 80036a6:	4650      	mov	r0, sl
 80036a8:	f7ff fa55 	bl	8002b56 <quorem>
 80036ac:	9b06      	ldr	r3, [sp, #24]
 80036ae:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80036b2:	f805 9b01 	strb.w	r9, [r5], #1
 80036b6:	9a04      	ldr	r2, [sp, #16]
 80036b8:	1aeb      	subs	r3, r5, r3
 80036ba:	429a      	cmp	r2, r3
 80036bc:	f300 8081 	bgt.w	80037c2 <_dtoa_r+0xb52>
 80036c0:	9b06      	ldr	r3, [sp, #24]
 80036c2:	2a01      	cmp	r2, #1
 80036c4:	bfac      	ite	ge
 80036c6:	189b      	addge	r3, r3, r2
 80036c8:	3301      	addlt	r3, #1
 80036ca:	4698      	mov	r8, r3
 80036cc:	2300      	movs	r3, #0
 80036ce:	9307      	str	r3, [sp, #28]
 80036d0:	4651      	mov	r1, sl
 80036d2:	2201      	movs	r2, #1
 80036d4:	4620      	mov	r0, r4
 80036d6:	f000 fa77 	bl	8003bc8 <__lshift>
 80036da:	4631      	mov	r1, r6
 80036dc:	4682      	mov	sl, r0
 80036de:	f000 fac4 	bl	8003c6a <__mcmp>
 80036e2:	2800      	cmp	r0, #0
 80036e4:	dc34      	bgt.n	8003750 <_dtoa_r+0xae0>
 80036e6:	d102      	bne.n	80036ee <_dtoa_r+0xa7e>
 80036e8:	f019 0f01 	tst.w	r9, #1
 80036ec:	d130      	bne.n	8003750 <_dtoa_r+0xae0>
 80036ee:	4645      	mov	r5, r8
 80036f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80036f4:	1e6a      	subs	r2, r5, #1
 80036f6:	2b30      	cmp	r3, #48	; 0x30
 80036f8:	d1b3      	bne.n	8003662 <_dtoa_r+0x9f2>
 80036fa:	4615      	mov	r5, r2
 80036fc:	e7f8      	b.n	80036f0 <_dtoa_r+0xa80>
 80036fe:	4638      	mov	r0, r7
 8003700:	e6ff      	b.n	8003502 <_dtoa_r+0x892>
 8003702:	2301      	movs	r3, #1
 8003704:	e722      	b.n	800354c <_dtoa_r+0x8dc>
 8003706:	9a02      	ldr	r2, [sp, #8]
 8003708:	2a00      	cmp	r2, #0
 800370a:	db04      	blt.n	8003716 <_dtoa_r+0xaa6>
 800370c:	d128      	bne.n	8003760 <_dtoa_r+0xaf0>
 800370e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003710:	bb32      	cbnz	r2, 8003760 <_dtoa_r+0xaf0>
 8003712:	9a08      	ldr	r2, [sp, #32]
 8003714:	bb22      	cbnz	r2, 8003760 <_dtoa_r+0xaf0>
 8003716:	2b00      	cmp	r3, #0
 8003718:	f77f af32 	ble.w	8003580 <_dtoa_r+0x910>
 800371c:	4651      	mov	r1, sl
 800371e:	2201      	movs	r2, #1
 8003720:	4620      	mov	r0, r4
 8003722:	f000 fa51 	bl	8003bc8 <__lshift>
 8003726:	4631      	mov	r1, r6
 8003728:	4682      	mov	sl, r0
 800372a:	f000 fa9e 	bl	8003c6a <__mcmp>
 800372e:	2800      	cmp	r0, #0
 8003730:	dc05      	bgt.n	800373e <_dtoa_r+0xace>
 8003732:	f47f af25 	bne.w	8003580 <_dtoa_r+0x910>
 8003736:	f019 0f01 	tst.w	r9, #1
 800373a:	f43f af21 	beq.w	8003580 <_dtoa_r+0x910>
 800373e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003742:	f47f af1b 	bne.w	800357c <_dtoa_r+0x90c>
 8003746:	2339      	movs	r3, #57	; 0x39
 8003748:	f108 0801 	add.w	r8, r8, #1
 800374c:	f808 3c01 	strb.w	r3, [r8, #-1]
 8003750:	4645      	mov	r5, r8
 8003752:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003756:	1e6a      	subs	r2, r5, #1
 8003758:	2b39      	cmp	r3, #57	; 0x39
 800375a:	d03a      	beq.n	80037d2 <_dtoa_r+0xb62>
 800375c:	3301      	adds	r3, #1
 800375e:	e03f      	b.n	80037e0 <_dtoa_r+0xb70>
 8003760:	2b00      	cmp	r3, #0
 8003762:	f108 0501 	add.w	r5, r8, #1
 8003766:	dd05      	ble.n	8003774 <_dtoa_r+0xb04>
 8003768:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800376c:	d0eb      	beq.n	8003746 <_dtoa_r+0xad6>
 800376e:	f109 0901 	add.w	r9, r9, #1
 8003772:	e707      	b.n	8003584 <_dtoa_r+0x914>
 8003774:	9b06      	ldr	r3, [sp, #24]
 8003776:	9a04      	ldr	r2, [sp, #16]
 8003778:	1aeb      	subs	r3, r5, r3
 800377a:	4293      	cmp	r3, r2
 800377c:	46a8      	mov	r8, r5
 800377e:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003782:	d0a5      	beq.n	80036d0 <_dtoa_r+0xa60>
 8003784:	4651      	mov	r1, sl
 8003786:	2300      	movs	r3, #0
 8003788:	220a      	movs	r2, #10
 800378a:	4620      	mov	r0, r4
 800378c:	f000 f8b0 	bl	80038f0 <__multadd>
 8003790:	9b07      	ldr	r3, [sp, #28]
 8003792:	4682      	mov	sl, r0
 8003794:	42bb      	cmp	r3, r7
 8003796:	f04f 020a 	mov.w	r2, #10
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	9907      	ldr	r1, [sp, #28]
 80037a0:	4620      	mov	r0, r4
 80037a2:	d104      	bne.n	80037ae <_dtoa_r+0xb3e>
 80037a4:	f000 f8a4 	bl	80038f0 <__multadd>
 80037a8:	9007      	str	r0, [sp, #28]
 80037aa:	4607      	mov	r7, r0
 80037ac:	e6b1      	b.n	8003512 <_dtoa_r+0x8a2>
 80037ae:	f000 f89f 	bl	80038f0 <__multadd>
 80037b2:	2300      	movs	r3, #0
 80037b4:	9007      	str	r0, [sp, #28]
 80037b6:	220a      	movs	r2, #10
 80037b8:	4639      	mov	r1, r7
 80037ba:	4620      	mov	r0, r4
 80037bc:	f000 f898 	bl	80038f0 <__multadd>
 80037c0:	e7f3      	b.n	80037aa <_dtoa_r+0xb3a>
 80037c2:	4651      	mov	r1, sl
 80037c4:	2300      	movs	r3, #0
 80037c6:	220a      	movs	r2, #10
 80037c8:	4620      	mov	r0, r4
 80037ca:	f000 f891 	bl	80038f0 <__multadd>
 80037ce:	4682      	mov	sl, r0
 80037d0:	e768      	b.n	80036a4 <_dtoa_r+0xa34>
 80037d2:	9b06      	ldr	r3, [sp, #24]
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d105      	bne.n	80037e4 <_dtoa_r+0xb74>
 80037d8:	2331      	movs	r3, #49	; 0x31
 80037da:	9a06      	ldr	r2, [sp, #24]
 80037dc:	f10b 0b01 	add.w	fp, fp, #1
 80037e0:	7013      	strb	r3, [r2, #0]
 80037e2:	e73e      	b.n	8003662 <_dtoa_r+0x9f2>
 80037e4:	4615      	mov	r5, r2
 80037e6:	e7b4      	b.n	8003752 <_dtoa_r+0xae2>
 80037e8:	4b09      	ldr	r3, [pc, #36]	; (8003810 <_dtoa_r+0xba0>)
 80037ea:	f7ff baa3 	b.w	8002d34 <_dtoa_r+0xc4>
 80037ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f47f aa7d 	bne.w	8002cf0 <_dtoa_r+0x80>
 80037f6:	4b07      	ldr	r3, [pc, #28]	; (8003814 <_dtoa_r+0xba4>)
 80037f8:	f7ff ba9c 	b.w	8002d34 <_dtoa_r+0xc4>
 80037fc:	9b04      	ldr	r3, [sp, #16]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f73f af4f 	bgt.w	80036a2 <_dtoa_r+0xa32>
 8003804:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003806:	2b02      	cmp	r3, #2
 8003808:	f77f af4b 	ble.w	80036a2 <_dtoa_r+0xa32>
 800380c:	e714      	b.n	8003638 <_dtoa_r+0x9c8>
 800380e:	bf00      	nop
 8003810:	08004dea 	.word	0x08004dea
 8003814:	08004dec 	.word	0x08004dec

08003818 <_localeconv_r>:
 8003818:	4b04      	ldr	r3, [pc, #16]	; (800382c <_localeconv_r+0x14>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6a18      	ldr	r0, [r3, #32]
 800381e:	4b04      	ldr	r3, [pc, #16]	; (8003830 <_localeconv_r+0x18>)
 8003820:	2800      	cmp	r0, #0
 8003822:	bf08      	it	eq
 8003824:	4618      	moveq	r0, r3
 8003826:	30f0      	adds	r0, #240	; 0xf0
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	20000024 	.word	0x20000024
 8003830:	20000088 	.word	0x20000088

08003834 <malloc>:
 8003834:	4b02      	ldr	r3, [pc, #8]	; (8003840 <malloc+0xc>)
 8003836:	4601      	mov	r1, r0
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	f000 baed 	b.w	8003e18 <_malloc_r>
 800383e:	bf00      	nop
 8003840:	20000024 	.word	0x20000024

08003844 <memcpy>:
 8003844:	b510      	push	{r4, lr}
 8003846:	1e43      	subs	r3, r0, #1
 8003848:	440a      	add	r2, r1
 800384a:	4291      	cmp	r1, r2
 800384c:	d100      	bne.n	8003850 <memcpy+0xc>
 800384e:	bd10      	pop	{r4, pc}
 8003850:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003854:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003858:	e7f7      	b.n	800384a <memcpy+0x6>

0800385a <_Balloc>:
 800385a:	b570      	push	{r4, r5, r6, lr}
 800385c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800385e:	4604      	mov	r4, r0
 8003860:	460e      	mov	r6, r1
 8003862:	b93d      	cbnz	r5, 8003874 <_Balloc+0x1a>
 8003864:	2010      	movs	r0, #16
 8003866:	f7ff ffe5 	bl	8003834 <malloc>
 800386a:	6260      	str	r0, [r4, #36]	; 0x24
 800386c:	6045      	str	r5, [r0, #4]
 800386e:	6085      	str	r5, [r0, #8]
 8003870:	6005      	str	r5, [r0, #0]
 8003872:	60c5      	str	r5, [r0, #12]
 8003874:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003876:	68eb      	ldr	r3, [r5, #12]
 8003878:	b183      	cbz	r3, 800389c <_Balloc+0x42>
 800387a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003882:	b9b8      	cbnz	r0, 80038b4 <_Balloc+0x5a>
 8003884:	2101      	movs	r1, #1
 8003886:	fa01 f506 	lsl.w	r5, r1, r6
 800388a:	1d6a      	adds	r2, r5, #5
 800388c:	0092      	lsls	r2, r2, #2
 800388e:	4620      	mov	r0, r4
 8003890:	f000 fab3 	bl	8003dfa <_calloc_r>
 8003894:	b160      	cbz	r0, 80038b0 <_Balloc+0x56>
 8003896:	6046      	str	r6, [r0, #4]
 8003898:	6085      	str	r5, [r0, #8]
 800389a:	e00e      	b.n	80038ba <_Balloc+0x60>
 800389c:	2221      	movs	r2, #33	; 0x21
 800389e:	2104      	movs	r1, #4
 80038a0:	4620      	mov	r0, r4
 80038a2:	f000 faaa 	bl	8003dfa <_calloc_r>
 80038a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038a8:	60e8      	str	r0, [r5, #12]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e4      	bne.n	800387a <_Balloc+0x20>
 80038b0:	2000      	movs	r0, #0
 80038b2:	bd70      	pop	{r4, r5, r6, pc}
 80038b4:	6802      	ldr	r2, [r0, #0]
 80038b6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80038ba:	2300      	movs	r3, #0
 80038bc:	6103      	str	r3, [r0, #16]
 80038be:	60c3      	str	r3, [r0, #12]
 80038c0:	bd70      	pop	{r4, r5, r6, pc}

080038c2 <_Bfree>:
 80038c2:	b570      	push	{r4, r5, r6, lr}
 80038c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80038c6:	4606      	mov	r6, r0
 80038c8:	460d      	mov	r5, r1
 80038ca:	b93c      	cbnz	r4, 80038dc <_Bfree+0x1a>
 80038cc:	2010      	movs	r0, #16
 80038ce:	f7ff ffb1 	bl	8003834 <malloc>
 80038d2:	6270      	str	r0, [r6, #36]	; 0x24
 80038d4:	6044      	str	r4, [r0, #4]
 80038d6:	6084      	str	r4, [r0, #8]
 80038d8:	6004      	str	r4, [r0, #0]
 80038da:	60c4      	str	r4, [r0, #12]
 80038dc:	b13d      	cbz	r5, 80038ee <_Bfree+0x2c>
 80038de:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80038e0:	686a      	ldr	r2, [r5, #4]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038e8:	6029      	str	r1, [r5, #0]
 80038ea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80038ee:	bd70      	pop	{r4, r5, r6, pc}

080038f0 <__multadd>:
 80038f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f4:	461f      	mov	r7, r3
 80038f6:	4606      	mov	r6, r0
 80038f8:	460c      	mov	r4, r1
 80038fa:	2300      	movs	r3, #0
 80038fc:	690d      	ldr	r5, [r1, #16]
 80038fe:	f101 0e14 	add.w	lr, r1, #20
 8003902:	f8de 0000 	ldr.w	r0, [lr]
 8003906:	3301      	adds	r3, #1
 8003908:	b281      	uxth	r1, r0
 800390a:	fb02 7101 	mla	r1, r2, r1, r7
 800390e:	0c00      	lsrs	r0, r0, #16
 8003910:	0c0f      	lsrs	r7, r1, #16
 8003912:	fb02 7000 	mla	r0, r2, r0, r7
 8003916:	b289      	uxth	r1, r1
 8003918:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800391c:	429d      	cmp	r5, r3
 800391e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003922:	f84e 1b04 	str.w	r1, [lr], #4
 8003926:	dcec      	bgt.n	8003902 <__multadd+0x12>
 8003928:	b1d7      	cbz	r7, 8003960 <__multadd+0x70>
 800392a:	68a3      	ldr	r3, [r4, #8]
 800392c:	429d      	cmp	r5, r3
 800392e:	db12      	blt.n	8003956 <__multadd+0x66>
 8003930:	6861      	ldr	r1, [r4, #4]
 8003932:	4630      	mov	r0, r6
 8003934:	3101      	adds	r1, #1
 8003936:	f7ff ff90 	bl	800385a <_Balloc>
 800393a:	4680      	mov	r8, r0
 800393c:	6922      	ldr	r2, [r4, #16]
 800393e:	f104 010c 	add.w	r1, r4, #12
 8003942:	3202      	adds	r2, #2
 8003944:	0092      	lsls	r2, r2, #2
 8003946:	300c      	adds	r0, #12
 8003948:	f7ff ff7c 	bl	8003844 <memcpy>
 800394c:	4621      	mov	r1, r4
 800394e:	4630      	mov	r0, r6
 8003950:	f7ff ffb7 	bl	80038c2 <_Bfree>
 8003954:	4644      	mov	r4, r8
 8003956:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800395a:	3501      	adds	r5, #1
 800395c:	615f      	str	r7, [r3, #20]
 800395e:	6125      	str	r5, [r4, #16]
 8003960:	4620      	mov	r0, r4
 8003962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003966 <__hi0bits>:
 8003966:	0c02      	lsrs	r2, r0, #16
 8003968:	0412      	lsls	r2, r2, #16
 800396a:	4603      	mov	r3, r0
 800396c:	b9b2      	cbnz	r2, 800399c <__hi0bits+0x36>
 800396e:	0403      	lsls	r3, r0, #16
 8003970:	2010      	movs	r0, #16
 8003972:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003976:	bf04      	itt	eq
 8003978:	021b      	lsleq	r3, r3, #8
 800397a:	3008      	addeq	r0, #8
 800397c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003980:	bf04      	itt	eq
 8003982:	011b      	lsleq	r3, r3, #4
 8003984:	3004      	addeq	r0, #4
 8003986:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800398a:	bf04      	itt	eq
 800398c:	009b      	lsleq	r3, r3, #2
 800398e:	3002      	addeq	r0, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	db06      	blt.n	80039a2 <__hi0bits+0x3c>
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	d503      	bpl.n	80039a0 <__hi0bits+0x3a>
 8003998:	3001      	adds	r0, #1
 800399a:	4770      	bx	lr
 800399c:	2000      	movs	r0, #0
 800399e:	e7e8      	b.n	8003972 <__hi0bits+0xc>
 80039a0:	2020      	movs	r0, #32
 80039a2:	4770      	bx	lr

080039a4 <__lo0bits>:
 80039a4:	6803      	ldr	r3, [r0, #0]
 80039a6:	4601      	mov	r1, r0
 80039a8:	f013 0207 	ands.w	r2, r3, #7
 80039ac:	d00b      	beq.n	80039c6 <__lo0bits+0x22>
 80039ae:	07da      	lsls	r2, r3, #31
 80039b0:	d423      	bmi.n	80039fa <__lo0bits+0x56>
 80039b2:	0798      	lsls	r0, r3, #30
 80039b4:	bf49      	itett	mi
 80039b6:	085b      	lsrmi	r3, r3, #1
 80039b8:	089b      	lsrpl	r3, r3, #2
 80039ba:	2001      	movmi	r0, #1
 80039bc:	600b      	strmi	r3, [r1, #0]
 80039be:	bf5c      	itt	pl
 80039c0:	600b      	strpl	r3, [r1, #0]
 80039c2:	2002      	movpl	r0, #2
 80039c4:	4770      	bx	lr
 80039c6:	b298      	uxth	r0, r3
 80039c8:	b9a8      	cbnz	r0, 80039f6 <__lo0bits+0x52>
 80039ca:	2010      	movs	r0, #16
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 80039d2:	bf04      	itt	eq
 80039d4:	0a1b      	lsreq	r3, r3, #8
 80039d6:	3008      	addeq	r0, #8
 80039d8:	071a      	lsls	r2, r3, #28
 80039da:	bf04      	itt	eq
 80039dc:	091b      	lsreq	r3, r3, #4
 80039de:	3004      	addeq	r0, #4
 80039e0:	079a      	lsls	r2, r3, #30
 80039e2:	bf04      	itt	eq
 80039e4:	089b      	lsreq	r3, r3, #2
 80039e6:	3002      	addeq	r0, #2
 80039e8:	07da      	lsls	r2, r3, #31
 80039ea:	d402      	bmi.n	80039f2 <__lo0bits+0x4e>
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	d006      	beq.n	80039fe <__lo0bits+0x5a>
 80039f0:	3001      	adds	r0, #1
 80039f2:	600b      	str	r3, [r1, #0]
 80039f4:	4770      	bx	lr
 80039f6:	4610      	mov	r0, r2
 80039f8:	e7e9      	b.n	80039ce <__lo0bits+0x2a>
 80039fa:	2000      	movs	r0, #0
 80039fc:	4770      	bx	lr
 80039fe:	2020      	movs	r0, #32
 8003a00:	4770      	bx	lr

08003a02 <__i2b>:
 8003a02:	b510      	push	{r4, lr}
 8003a04:	460c      	mov	r4, r1
 8003a06:	2101      	movs	r1, #1
 8003a08:	f7ff ff27 	bl	800385a <_Balloc>
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	6144      	str	r4, [r0, #20]
 8003a10:	6102      	str	r2, [r0, #16]
 8003a12:	bd10      	pop	{r4, pc}

08003a14 <__multiply>:
 8003a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a18:	4614      	mov	r4, r2
 8003a1a:	690a      	ldr	r2, [r1, #16]
 8003a1c:	6923      	ldr	r3, [r4, #16]
 8003a1e:	4689      	mov	r9, r1
 8003a20:	429a      	cmp	r2, r3
 8003a22:	bfbe      	ittt	lt
 8003a24:	460b      	movlt	r3, r1
 8003a26:	46a1      	movlt	r9, r4
 8003a28:	461c      	movlt	r4, r3
 8003a2a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003a2e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003a32:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003a36:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003a3a:	eb07 060a 	add.w	r6, r7, sl
 8003a3e:	429e      	cmp	r6, r3
 8003a40:	bfc8      	it	gt
 8003a42:	3101      	addgt	r1, #1
 8003a44:	f7ff ff09 	bl	800385a <_Balloc>
 8003a48:	f100 0514 	add.w	r5, r0, #20
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	2200      	movs	r2, #0
 8003a50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003a54:	4543      	cmp	r3, r8
 8003a56:	d316      	bcc.n	8003a86 <__multiply+0x72>
 8003a58:	f104 0214 	add.w	r2, r4, #20
 8003a5c:	f109 0114 	add.w	r1, r9, #20
 8003a60:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8003a64:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	9c01      	ldr	r4, [sp, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	4294      	cmp	r4, r2
 8003a70:	d80c      	bhi.n	8003a8c <__multiply+0x78>
 8003a72:	2e00      	cmp	r6, #0
 8003a74:	dd03      	ble.n	8003a7e <__multiply+0x6a>
 8003a76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d054      	beq.n	8003b28 <__multiply+0x114>
 8003a7e:	6106      	str	r6, [r0, #16]
 8003a80:	b003      	add	sp, #12
 8003a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a86:	f843 2b04 	str.w	r2, [r3], #4
 8003a8a:	e7e3      	b.n	8003a54 <__multiply+0x40>
 8003a8c:	f8b3 a000 	ldrh.w	sl, [r3]
 8003a90:	3204      	adds	r2, #4
 8003a92:	f1ba 0f00 	cmp.w	sl, #0
 8003a96:	d020      	beq.n	8003ada <__multiply+0xc6>
 8003a98:	46ae      	mov	lr, r5
 8003a9a:	4689      	mov	r9, r1
 8003a9c:	f04f 0c00 	mov.w	ip, #0
 8003aa0:	f859 4b04 	ldr.w	r4, [r9], #4
 8003aa4:	f8be b000 	ldrh.w	fp, [lr]
 8003aa8:	b2a3      	uxth	r3, r4
 8003aaa:	fb0a b303 	mla	r3, sl, r3, fp
 8003aae:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8003ab2:	f8de 4000 	ldr.w	r4, [lr]
 8003ab6:	4463      	add	r3, ip
 8003ab8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003abc:	fb0a c40b 	mla	r4, sl, fp, ip
 8003ac0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003aca:	454f      	cmp	r7, r9
 8003acc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8003ad0:	f84e 3b04 	str.w	r3, [lr], #4
 8003ad4:	d8e4      	bhi.n	8003aa0 <__multiply+0x8c>
 8003ad6:	f8ce c000 	str.w	ip, [lr]
 8003ada:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8003ade:	f1b9 0f00 	cmp.w	r9, #0
 8003ae2:	d01f      	beq.n	8003b24 <__multiply+0x110>
 8003ae4:	46ae      	mov	lr, r5
 8003ae6:	468c      	mov	ip, r1
 8003ae8:	f04f 0a00 	mov.w	sl, #0
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	f8bc 4000 	ldrh.w	r4, [ip]
 8003af2:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	fb09 b404 	mla	r4, r9, r4, fp
 8003afc:	44a2      	add	sl, r4
 8003afe:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8003b02:	f84e 3b04 	str.w	r3, [lr], #4
 8003b06:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003b0a:	f8be 4000 	ldrh.w	r4, [lr]
 8003b0e:	0c1b      	lsrs	r3, r3, #16
 8003b10:	fb09 4303 	mla	r3, r9, r3, r4
 8003b14:	4567      	cmp	r7, ip
 8003b16:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8003b1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003b1e:	d8e6      	bhi.n	8003aee <__multiply+0xda>
 8003b20:	f8ce 3000 	str.w	r3, [lr]
 8003b24:	3504      	adds	r5, #4
 8003b26:	e7a0      	b.n	8003a6a <__multiply+0x56>
 8003b28:	3e01      	subs	r6, #1
 8003b2a:	e7a2      	b.n	8003a72 <__multiply+0x5e>

08003b2c <__pow5mult>:
 8003b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b30:	4615      	mov	r5, r2
 8003b32:	f012 0203 	ands.w	r2, r2, #3
 8003b36:	4606      	mov	r6, r0
 8003b38:	460f      	mov	r7, r1
 8003b3a:	d007      	beq.n	8003b4c <__pow5mult+0x20>
 8003b3c:	4c21      	ldr	r4, [pc, #132]	; (8003bc4 <__pow5mult+0x98>)
 8003b3e:	3a01      	subs	r2, #1
 8003b40:	2300      	movs	r3, #0
 8003b42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003b46:	f7ff fed3 	bl	80038f0 <__multadd>
 8003b4a:	4607      	mov	r7, r0
 8003b4c:	10ad      	asrs	r5, r5, #2
 8003b4e:	d035      	beq.n	8003bbc <__pow5mult+0x90>
 8003b50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003b52:	b93c      	cbnz	r4, 8003b64 <__pow5mult+0x38>
 8003b54:	2010      	movs	r0, #16
 8003b56:	f7ff fe6d 	bl	8003834 <malloc>
 8003b5a:	6270      	str	r0, [r6, #36]	; 0x24
 8003b5c:	6044      	str	r4, [r0, #4]
 8003b5e:	6084      	str	r4, [r0, #8]
 8003b60:	6004      	str	r4, [r0, #0]
 8003b62:	60c4      	str	r4, [r0, #12]
 8003b64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003b68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003b6c:	b94c      	cbnz	r4, 8003b82 <__pow5mult+0x56>
 8003b6e:	f240 2171 	movw	r1, #625	; 0x271
 8003b72:	4630      	mov	r0, r6
 8003b74:	f7ff ff45 	bl	8003a02 <__i2b>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8003b80:	6003      	str	r3, [r0, #0]
 8003b82:	f04f 0800 	mov.w	r8, #0
 8003b86:	07eb      	lsls	r3, r5, #31
 8003b88:	d50a      	bpl.n	8003ba0 <__pow5mult+0x74>
 8003b8a:	4639      	mov	r1, r7
 8003b8c:	4622      	mov	r2, r4
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f7ff ff40 	bl	8003a14 <__multiply>
 8003b94:	4681      	mov	r9, r0
 8003b96:	4639      	mov	r1, r7
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f7ff fe92 	bl	80038c2 <_Bfree>
 8003b9e:	464f      	mov	r7, r9
 8003ba0:	106d      	asrs	r5, r5, #1
 8003ba2:	d00b      	beq.n	8003bbc <__pow5mult+0x90>
 8003ba4:	6820      	ldr	r0, [r4, #0]
 8003ba6:	b938      	cbnz	r0, 8003bb8 <__pow5mult+0x8c>
 8003ba8:	4622      	mov	r2, r4
 8003baa:	4621      	mov	r1, r4
 8003bac:	4630      	mov	r0, r6
 8003bae:	f7ff ff31 	bl	8003a14 <__multiply>
 8003bb2:	6020      	str	r0, [r4, #0]
 8003bb4:	f8c0 8000 	str.w	r8, [r0]
 8003bb8:	4604      	mov	r4, r0
 8003bba:	e7e4      	b.n	8003b86 <__pow5mult+0x5a>
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bc2:	bf00      	nop
 8003bc4:	08004ef0 	.word	0x08004ef0

08003bc8 <__lshift>:
 8003bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bcc:	460c      	mov	r4, r1
 8003bce:	4607      	mov	r7, r0
 8003bd0:	4616      	mov	r6, r2
 8003bd2:	6923      	ldr	r3, [r4, #16]
 8003bd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003bd8:	eb0a 0903 	add.w	r9, sl, r3
 8003bdc:	6849      	ldr	r1, [r1, #4]
 8003bde:	68a3      	ldr	r3, [r4, #8]
 8003be0:	f109 0501 	add.w	r5, r9, #1
 8003be4:	42ab      	cmp	r3, r5
 8003be6:	db31      	blt.n	8003c4c <__lshift+0x84>
 8003be8:	4638      	mov	r0, r7
 8003bea:	f7ff fe36 	bl	800385a <_Balloc>
 8003bee:	2200      	movs	r2, #0
 8003bf0:	4680      	mov	r8, r0
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	f100 0314 	add.w	r3, r0, #20
 8003bf8:	4552      	cmp	r2, sl
 8003bfa:	db2a      	blt.n	8003c52 <__lshift+0x8a>
 8003bfc:	6920      	ldr	r0, [r4, #16]
 8003bfe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003c02:	f104 0114 	add.w	r1, r4, #20
 8003c06:	f016 021f 	ands.w	r2, r6, #31
 8003c0a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8003c0e:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8003c12:	d022      	beq.n	8003c5a <__lshift+0x92>
 8003c14:	2000      	movs	r0, #0
 8003c16:	f1c2 0c20 	rsb	ip, r2, #32
 8003c1a:	680e      	ldr	r6, [r1, #0]
 8003c1c:	4096      	lsls	r6, r2
 8003c1e:	4330      	orrs	r0, r6
 8003c20:	f843 0b04 	str.w	r0, [r3], #4
 8003c24:	f851 0b04 	ldr.w	r0, [r1], #4
 8003c28:	458e      	cmp	lr, r1
 8003c2a:	fa20 f00c 	lsr.w	r0, r0, ip
 8003c2e:	d8f4      	bhi.n	8003c1a <__lshift+0x52>
 8003c30:	6018      	str	r0, [r3, #0]
 8003c32:	b108      	cbz	r0, 8003c38 <__lshift+0x70>
 8003c34:	f109 0502 	add.w	r5, r9, #2
 8003c38:	3d01      	subs	r5, #1
 8003c3a:	4638      	mov	r0, r7
 8003c3c:	f8c8 5010 	str.w	r5, [r8, #16]
 8003c40:	4621      	mov	r1, r4
 8003c42:	f7ff fe3e 	bl	80038c2 <_Bfree>
 8003c46:	4640      	mov	r0, r8
 8003c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c4c:	3101      	adds	r1, #1
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	e7c8      	b.n	8003be4 <__lshift+0x1c>
 8003c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003c56:	3201      	adds	r2, #1
 8003c58:	e7ce      	b.n	8003bf8 <__lshift+0x30>
 8003c5a:	3b04      	subs	r3, #4
 8003c5c:	f851 2b04 	ldr.w	r2, [r1], #4
 8003c60:	458e      	cmp	lr, r1
 8003c62:	f843 2f04 	str.w	r2, [r3, #4]!
 8003c66:	d8f9      	bhi.n	8003c5c <__lshift+0x94>
 8003c68:	e7e6      	b.n	8003c38 <__lshift+0x70>

08003c6a <__mcmp>:
 8003c6a:	6903      	ldr	r3, [r0, #16]
 8003c6c:	690a      	ldr	r2, [r1, #16]
 8003c6e:	b530      	push	{r4, r5, lr}
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	d10c      	bne.n	8003c8e <__mcmp+0x24>
 8003c74:	0092      	lsls	r2, r2, #2
 8003c76:	3014      	adds	r0, #20
 8003c78:	3114      	adds	r1, #20
 8003c7a:	1884      	adds	r4, r0, r2
 8003c7c:	4411      	add	r1, r2
 8003c7e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003c82:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003c86:	4295      	cmp	r5, r2
 8003c88:	d003      	beq.n	8003c92 <__mcmp+0x28>
 8003c8a:	d305      	bcc.n	8003c98 <__mcmp+0x2e>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	bd30      	pop	{r4, r5, pc}
 8003c92:	42a0      	cmp	r0, r4
 8003c94:	d3f3      	bcc.n	8003c7e <__mcmp+0x14>
 8003c96:	e7fa      	b.n	8003c8e <__mcmp+0x24>
 8003c98:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9c:	e7f7      	b.n	8003c8e <__mcmp+0x24>

08003c9e <__mdiff>:
 8003c9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca2:	460d      	mov	r5, r1
 8003ca4:	4607      	mov	r7, r0
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4628      	mov	r0, r5
 8003caa:	4614      	mov	r4, r2
 8003cac:	f7ff ffdd 	bl	8003c6a <__mcmp>
 8003cb0:	1e06      	subs	r6, r0, #0
 8003cb2:	d108      	bne.n	8003cc6 <__mdiff+0x28>
 8003cb4:	4631      	mov	r1, r6
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f7ff fdcf 	bl	800385a <_Balloc>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	6146      	str	r6, [r0, #20]
 8003cc0:	6103      	str	r3, [r0, #16]
 8003cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc6:	bfa4      	itt	ge
 8003cc8:	4623      	movge	r3, r4
 8003cca:	462c      	movge	r4, r5
 8003ccc:	4638      	mov	r0, r7
 8003cce:	6861      	ldr	r1, [r4, #4]
 8003cd0:	bfa6      	itte	ge
 8003cd2:	461d      	movge	r5, r3
 8003cd4:	2600      	movge	r6, #0
 8003cd6:	2601      	movlt	r6, #1
 8003cd8:	f7ff fdbf 	bl	800385a <_Balloc>
 8003cdc:	f04f 0c00 	mov.w	ip, #0
 8003ce0:	60c6      	str	r6, [r0, #12]
 8003ce2:	692b      	ldr	r3, [r5, #16]
 8003ce4:	6926      	ldr	r6, [r4, #16]
 8003ce6:	f104 0214 	add.w	r2, r4, #20
 8003cea:	f105 0914 	add.w	r9, r5, #20
 8003cee:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003cf2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003cf6:	f100 0114 	add.w	r1, r0, #20
 8003cfa:	f852 ab04 	ldr.w	sl, [r2], #4
 8003cfe:	f859 5b04 	ldr.w	r5, [r9], #4
 8003d02:	fa1f f38a 	uxth.w	r3, sl
 8003d06:	4463      	add	r3, ip
 8003d08:	b2ac      	uxth	r4, r5
 8003d0a:	1b1b      	subs	r3, r3, r4
 8003d0c:	0c2c      	lsrs	r4, r5, #16
 8003d0e:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003d12:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8003d1c:	45c8      	cmp	r8, r9
 8003d1e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003d22:	4696      	mov	lr, r2
 8003d24:	f841 4b04 	str.w	r4, [r1], #4
 8003d28:	d8e7      	bhi.n	8003cfa <__mdiff+0x5c>
 8003d2a:	45be      	cmp	lr, r7
 8003d2c:	d305      	bcc.n	8003d3a <__mdiff+0x9c>
 8003d2e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003d32:	b18b      	cbz	r3, 8003d58 <__mdiff+0xba>
 8003d34:	6106      	str	r6, [r0, #16]
 8003d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003d3e:	b2a2      	uxth	r2, r4
 8003d40:	4462      	add	r2, ip
 8003d42:	1413      	asrs	r3, r2, #16
 8003d44:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003d48:	b292      	uxth	r2, r2
 8003d4a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003d4e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003d52:	f841 2b04 	str.w	r2, [r1], #4
 8003d56:	e7e8      	b.n	8003d2a <__mdiff+0x8c>
 8003d58:	3e01      	subs	r6, #1
 8003d5a:	e7e8      	b.n	8003d2e <__mdiff+0x90>

08003d5c <__d2b>:
 8003d5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003d60:	461c      	mov	r4, r3
 8003d62:	2101      	movs	r1, #1
 8003d64:	4690      	mov	r8, r2
 8003d66:	9e08      	ldr	r6, [sp, #32]
 8003d68:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003d6a:	f7ff fd76 	bl	800385a <_Balloc>
 8003d6e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003d72:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003d76:	4607      	mov	r7, r0
 8003d78:	bb34      	cbnz	r4, 8003dc8 <__d2b+0x6c>
 8003d7a:	9201      	str	r2, [sp, #4]
 8003d7c:	f1b8 0f00 	cmp.w	r8, #0
 8003d80:	d027      	beq.n	8003dd2 <__d2b+0x76>
 8003d82:	a802      	add	r0, sp, #8
 8003d84:	f840 8d08 	str.w	r8, [r0, #-8]!
 8003d88:	f7ff fe0c 	bl	80039a4 <__lo0bits>
 8003d8c:	9900      	ldr	r1, [sp, #0]
 8003d8e:	b1f0      	cbz	r0, 8003dce <__d2b+0x72>
 8003d90:	9a01      	ldr	r2, [sp, #4]
 8003d92:	f1c0 0320 	rsb	r3, r0, #32
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	430b      	orrs	r3, r1
 8003d9c:	40c2      	lsrs	r2, r0
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	9201      	str	r2, [sp, #4]
 8003da2:	9b01      	ldr	r3, [sp, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf14      	ite	ne
 8003da8:	2102      	movne	r1, #2
 8003daa:	2101      	moveq	r1, #1
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	6139      	str	r1, [r7, #16]
 8003db0:	b1c4      	cbz	r4, 8003de4 <__d2b+0x88>
 8003db2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003db6:	4404      	add	r4, r0
 8003db8:	6034      	str	r4, [r6, #0]
 8003dba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003dbe:	6028      	str	r0, [r5, #0]
 8003dc0:	4638      	mov	r0, r7
 8003dc2:	b002      	add	sp, #8
 8003dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dc8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003dcc:	e7d5      	b.n	8003d7a <__d2b+0x1e>
 8003dce:	6179      	str	r1, [r7, #20]
 8003dd0:	e7e7      	b.n	8003da2 <__d2b+0x46>
 8003dd2:	a801      	add	r0, sp, #4
 8003dd4:	f7ff fde6 	bl	80039a4 <__lo0bits>
 8003dd8:	2101      	movs	r1, #1
 8003dda:	9b01      	ldr	r3, [sp, #4]
 8003ddc:	6139      	str	r1, [r7, #16]
 8003dde:	617b      	str	r3, [r7, #20]
 8003de0:	3020      	adds	r0, #32
 8003de2:	e7e5      	b.n	8003db0 <__d2b+0x54>
 8003de4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003de8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003dec:	6030      	str	r0, [r6, #0]
 8003dee:	6918      	ldr	r0, [r3, #16]
 8003df0:	f7ff fdb9 	bl	8003966 <__hi0bits>
 8003df4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003df8:	e7e1      	b.n	8003dbe <__d2b+0x62>

08003dfa <_calloc_r>:
 8003dfa:	b538      	push	{r3, r4, r5, lr}
 8003dfc:	fb02 f401 	mul.w	r4, r2, r1
 8003e00:	4621      	mov	r1, r4
 8003e02:	f000 f809 	bl	8003e18 <_malloc_r>
 8003e06:	4605      	mov	r5, r0
 8003e08:	b118      	cbz	r0, 8003e12 <_calloc_r+0x18>
 8003e0a:	4622      	mov	r2, r4
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	f7fe fb59 	bl	80024c4 <memset>
 8003e12:	4628      	mov	r0, r5
 8003e14:	bd38      	pop	{r3, r4, r5, pc}
	...

08003e18 <_malloc_r>:
 8003e18:	b570      	push	{r4, r5, r6, lr}
 8003e1a:	1ccd      	adds	r5, r1, #3
 8003e1c:	f025 0503 	bic.w	r5, r5, #3
 8003e20:	3508      	adds	r5, #8
 8003e22:	2d0c      	cmp	r5, #12
 8003e24:	bf38      	it	cc
 8003e26:	250c      	movcc	r5, #12
 8003e28:	2d00      	cmp	r5, #0
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	db01      	blt.n	8003e32 <_malloc_r+0x1a>
 8003e2e:	42a9      	cmp	r1, r5
 8003e30:	d903      	bls.n	8003e3a <_malloc_r+0x22>
 8003e32:	230c      	movs	r3, #12
 8003e34:	6033      	str	r3, [r6, #0]
 8003e36:	2000      	movs	r0, #0
 8003e38:	bd70      	pop	{r4, r5, r6, pc}
 8003e3a:	f000 f86d 	bl	8003f18 <__malloc_lock>
 8003e3e:	4a23      	ldr	r2, [pc, #140]	; (8003ecc <_malloc_r+0xb4>)
 8003e40:	6814      	ldr	r4, [r2, #0]
 8003e42:	4621      	mov	r1, r4
 8003e44:	b991      	cbnz	r1, 8003e6c <_malloc_r+0x54>
 8003e46:	4c22      	ldr	r4, [pc, #136]	; (8003ed0 <_malloc_r+0xb8>)
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	b91b      	cbnz	r3, 8003e54 <_malloc_r+0x3c>
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f000 f841 	bl	8003ed4 <_sbrk_r>
 8003e52:	6020      	str	r0, [r4, #0]
 8003e54:	4629      	mov	r1, r5
 8003e56:	4630      	mov	r0, r6
 8003e58:	f000 f83c 	bl	8003ed4 <_sbrk_r>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d126      	bne.n	8003eae <_malloc_r+0x96>
 8003e60:	230c      	movs	r3, #12
 8003e62:	4630      	mov	r0, r6
 8003e64:	6033      	str	r3, [r6, #0]
 8003e66:	f000 f858 	bl	8003f1a <__malloc_unlock>
 8003e6a:	e7e4      	b.n	8003e36 <_malloc_r+0x1e>
 8003e6c:	680b      	ldr	r3, [r1, #0]
 8003e6e:	1b5b      	subs	r3, r3, r5
 8003e70:	d41a      	bmi.n	8003ea8 <_malloc_r+0x90>
 8003e72:	2b0b      	cmp	r3, #11
 8003e74:	d90f      	bls.n	8003e96 <_malloc_r+0x7e>
 8003e76:	600b      	str	r3, [r1, #0]
 8003e78:	18cc      	adds	r4, r1, r3
 8003e7a:	50cd      	str	r5, [r1, r3]
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	f000 f84c 	bl	8003f1a <__malloc_unlock>
 8003e82:	f104 000b 	add.w	r0, r4, #11
 8003e86:	1d23      	adds	r3, r4, #4
 8003e88:	f020 0007 	bic.w	r0, r0, #7
 8003e8c:	1ac3      	subs	r3, r0, r3
 8003e8e:	d01b      	beq.n	8003ec8 <_malloc_r+0xb0>
 8003e90:	425a      	negs	r2, r3
 8003e92:	50e2      	str	r2, [r4, r3]
 8003e94:	bd70      	pop	{r4, r5, r6, pc}
 8003e96:	428c      	cmp	r4, r1
 8003e98:	bf0b      	itete	eq
 8003e9a:	6863      	ldreq	r3, [r4, #4]
 8003e9c:	684b      	ldrne	r3, [r1, #4]
 8003e9e:	6013      	streq	r3, [r2, #0]
 8003ea0:	6063      	strne	r3, [r4, #4]
 8003ea2:	bf18      	it	ne
 8003ea4:	460c      	movne	r4, r1
 8003ea6:	e7e9      	b.n	8003e7c <_malloc_r+0x64>
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	6849      	ldr	r1, [r1, #4]
 8003eac:	e7ca      	b.n	8003e44 <_malloc_r+0x2c>
 8003eae:	1cc4      	adds	r4, r0, #3
 8003eb0:	f024 0403 	bic.w	r4, r4, #3
 8003eb4:	42a0      	cmp	r0, r4
 8003eb6:	d005      	beq.n	8003ec4 <_malloc_r+0xac>
 8003eb8:	1a21      	subs	r1, r4, r0
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f000 f80a 	bl	8003ed4 <_sbrk_r>
 8003ec0:	3001      	adds	r0, #1
 8003ec2:	d0cd      	beq.n	8003e60 <_malloc_r+0x48>
 8003ec4:	6025      	str	r5, [r4, #0]
 8003ec6:	e7d9      	b.n	8003e7c <_malloc_r+0x64>
 8003ec8:	bd70      	pop	{r4, r5, r6, pc}
 8003eca:	bf00      	nop
 8003ecc:	200002d0 	.word	0x200002d0
 8003ed0:	200002d4 	.word	0x200002d4

08003ed4 <_sbrk_r>:
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	4c05      	ldr	r4, [pc, #20]	; (8003ef0 <_sbrk_r+0x1c>)
 8003eda:	4605      	mov	r5, r0
 8003edc:	4608      	mov	r0, r1
 8003ede:	6023      	str	r3, [r4, #0]
 8003ee0:	f000 f82a 	bl	8003f38 <_sbrk>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d102      	bne.n	8003eee <_sbrk_r+0x1a>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	b103      	cbz	r3, 8003eee <_sbrk_r+0x1a>
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	bd38      	pop	{r3, r4, r5, pc}
 8003ef0:	200003e0 	.word	0x200003e0

08003ef4 <__ascii_mbtowc>:
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	b901      	cbnz	r1, 8003efa <__ascii_mbtowc+0x6>
 8003ef8:	a901      	add	r1, sp, #4
 8003efa:	b142      	cbz	r2, 8003f0e <__ascii_mbtowc+0x1a>
 8003efc:	b14b      	cbz	r3, 8003f12 <__ascii_mbtowc+0x1e>
 8003efe:	7813      	ldrb	r3, [r2, #0]
 8003f00:	600b      	str	r3, [r1, #0]
 8003f02:	7812      	ldrb	r2, [r2, #0]
 8003f04:	1c10      	adds	r0, r2, #0
 8003f06:	bf18      	it	ne
 8003f08:	2001      	movne	r0, #1
 8003f0a:	b002      	add	sp, #8
 8003f0c:	4770      	bx	lr
 8003f0e:	4610      	mov	r0, r2
 8003f10:	e7fb      	b.n	8003f0a <__ascii_mbtowc+0x16>
 8003f12:	f06f 0001 	mvn.w	r0, #1
 8003f16:	e7f8      	b.n	8003f0a <__ascii_mbtowc+0x16>

08003f18 <__malloc_lock>:
 8003f18:	4770      	bx	lr

08003f1a <__malloc_unlock>:
 8003f1a:	4770      	bx	lr

08003f1c <__ascii_wctomb>:
 8003f1c:	b149      	cbz	r1, 8003f32 <__ascii_wctomb+0x16>
 8003f1e:	2aff      	cmp	r2, #255	; 0xff
 8003f20:	bf8b      	itete	hi
 8003f22:	238a      	movhi	r3, #138	; 0x8a
 8003f24:	700a      	strbls	r2, [r1, #0]
 8003f26:	6003      	strhi	r3, [r0, #0]
 8003f28:	2001      	movls	r0, #1
 8003f2a:	bf88      	it	hi
 8003f2c:	f04f 30ff 	movhi.w	r0, #4294967295
 8003f30:	4770      	bx	lr
 8003f32:	4608      	mov	r0, r1
 8003f34:	4770      	bx	lr
	...

08003f38 <_sbrk>:
 8003f38:	4b04      	ldr	r3, [pc, #16]	; (8003f4c <_sbrk+0x14>)
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	b909      	cbnz	r1, 8003f44 <_sbrk+0xc>
 8003f40:	4903      	ldr	r1, [pc, #12]	; (8003f50 <_sbrk+0x18>)
 8003f42:	6019      	str	r1, [r3, #0]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	4402      	add	r2, r0
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	4770      	bx	lr
 8003f4c:	200002d8 	.word	0x200002d8
 8003f50:	200003e4 	.word	0x200003e4

08003f54 <_init>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	bf00      	nop
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr

08003f60 <_fini>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	bf00      	nop
 8003f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f66:	bc08      	pop	{r3}
 8003f68:	469e      	mov	lr, r3
 8003f6a:	4770      	bx	lr
