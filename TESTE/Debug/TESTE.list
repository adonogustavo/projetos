
TESTE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08004478  08004478  00014478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004484  08004484  00014484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08004488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000ddc  2000000c  08004494  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000de8  08004494  00020de8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000279ff  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003d3d  00000000  00000000  00047a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000016c0  00000000  00000000  0004b778  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001538  00000000  00000000  0004ce38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000ae48  00000000  00000000  0004e370  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000942e  00000000  00000000  000591b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000625e6  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00005f68  00000000  00000000  00062664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004460 	.word	0x08004460

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08004460 	.word	0x08004460

08000210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000214:	2003      	movs	r0, #3
 8000216:	f000 f8f2 	bl	80003fe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800021a:	2000      	movs	r0, #0
 800021c:	f003 ff60 	bl	80040e0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000220:	f003 febe 	bl	8003fa0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000224:	2300      	movs	r3, #0
}
 8000226:	4618      	mov	r0, r3
 8000228:	bd80      	pop	{r7, pc}
	...

0800022c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000230:	4b06      	ldr	r3, [pc, #24]	; (800024c <HAL_IncTick+0x20>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	461a      	mov	r2, r3
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <HAL_IncTick+0x24>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4413      	add	r3, r2
 800023c:	4a04      	ldr	r2, [pc, #16]	; (8000250 <HAL_IncTick+0x24>)
 800023e:	6013      	str	r3, [r2, #0]
}
 8000240:	bf00      	nop
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	20000000 	.word	0x20000000
 8000250:	20000114 	.word	0x20000114

08000254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  return uwTick;
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <HAL_GetTick+0x14>)
 800025a:	681b      	ldr	r3, [r3, #0]
}
 800025c:	4618      	mov	r0, r3
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	20000114 	.word	0x20000114

0800026c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000274:	f7ff ffee 	bl	8000254 <HAL_GetTick>
 8000278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000284:	d005      	beq.n	8000292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000286:	4b09      	ldr	r3, [pc, #36]	; (80002ac <HAL_Delay+0x40>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	461a      	mov	r2, r3
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	4413      	add	r3, r2
 8000290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000292:	bf00      	nop
 8000294:	f7ff ffde 	bl	8000254 <HAL_GetTick>
 8000298:	4602      	mov	r2, r0
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	1ad2      	subs	r2, r2, r3
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d3f7      	bcc.n	8000294 <HAL_Delay+0x28>
  {
  }
}
 80002a4:	bf00      	nop
 80002a6:	3710      	adds	r7, #16
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	20000000 	.word	0x20000000

080002b0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f003 0307 	and.w	r3, r3, #7
 80002be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002c0:	4b0b      	ldr	r3, [pc, #44]	; (80002f0 <NVIC_SetPriorityGrouping+0x40>)
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002cc:	4013      	ands	r3, r2
 80002ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <NVIC_SetPriorityGrouping+0x44>)
 80002da:	4313      	orrs	r3, r2
 80002dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002de:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <NVIC_SetPriorityGrouping+0x40>)
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	60d3      	str	r3, [r2, #12]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000ed00 	.word	0xe000ed00
 80002f4:	05fa0000 	.word	0x05fa0000

080002f8 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002fc:	4b04      	ldr	r3, [pc, #16]	; (8000310 <NVIC_GetPriorityGrouping+0x18>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	0a1b      	lsrs	r3, r3, #8
 8000302:	f003 0307 	and.w	r3, r3, #7
}
 8000306:	4618      	mov	r0, r3
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800031e:	4909      	ldr	r1, [pc, #36]	; (8000344 <NVIC_EnableIRQ+0x30>)
 8000320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000324:	095b      	lsrs	r3, r3, #5
 8000326:	79fa      	ldrb	r2, [r7, #7]
 8000328:	f002 021f 	and.w	r2, r2, #31
 800032c:	2001      	movs	r0, #1
 800032e:	fa00 f202 	lsl.w	r2, r0, r2
 8000332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000e100 	.word	0xe000e100

08000348 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	6039      	str	r1, [r7, #0]
 8000352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000358:	2b00      	cmp	r3, #0
 800035a:	da0b      	bge.n	8000374 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035c:	490d      	ldr	r1, [pc, #52]	; (8000394 <NVIC_SetPriority+0x4c>)
 800035e:	79fb      	ldrb	r3, [r7, #7]
 8000360:	f003 030f 	and.w	r3, r3, #15
 8000364:	3b04      	subs	r3, #4
 8000366:	683a      	ldr	r2, [r7, #0]
 8000368:	b2d2      	uxtb	r2, r2
 800036a:	0112      	lsls	r2, r2, #4
 800036c:	b2d2      	uxtb	r2, r2
 800036e:	440b      	add	r3, r1
 8000370:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000372:	e009      	b.n	8000388 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000374:	4908      	ldr	r1, [pc, #32]	; (8000398 <NVIC_SetPriority+0x50>)
 8000376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037a:	683a      	ldr	r2, [r7, #0]
 800037c:	b2d2      	uxtb	r2, r2
 800037e:	0112      	lsls	r2, r2, #4
 8000380:	b2d2      	uxtb	r2, r2
 8000382:	440b      	add	r3, r1
 8000384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr
 8000394:	e000ed00 	.word	0xe000ed00
 8000398:	e000e100 	.word	0xe000e100

0800039c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800039c:	b480      	push	{r7}
 800039e:	b089      	sub	sp, #36	; 0x24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	f003 0307 	and.w	r3, r3, #7
 80003ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003b0:	69fb      	ldr	r3, [r7, #28]
 80003b2:	f1c3 0307 	rsb	r3, r3, #7
 80003b6:	2b04      	cmp	r3, #4
 80003b8:	bf28      	it	cs
 80003ba:	2304      	movcs	r3, #4
 80003bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003be:	69fb      	ldr	r3, [r7, #28]
 80003c0:	3304      	adds	r3, #4
 80003c2:	2b06      	cmp	r3, #6
 80003c4:	d902      	bls.n	80003cc <NVIC_EncodePriority+0x30>
 80003c6:	69fb      	ldr	r3, [r7, #28]
 80003c8:	3b03      	subs	r3, #3
 80003ca:	e000      	b.n	80003ce <NVIC_EncodePriority+0x32>
 80003cc:	2300      	movs	r3, #0
 80003ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003d0:	2201      	movs	r2, #1
 80003d2:	69bb      	ldr	r3, [r7, #24]
 80003d4:	fa02 f303 	lsl.w	r3, r2, r3
 80003d8:	1e5a      	subs	r2, r3, #1
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	401a      	ands	r2, r3
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003e2:	2101      	movs	r1, #1
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ea:	1e59      	subs	r1, r3, #1
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003f0:	4313      	orrs	r3, r2
         );
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3724      	adds	r7, #36	; 0x24
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003fe:	b580      	push	{r7, lr}
 8000400:	b082      	sub	sp, #8
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff ff52 	bl	80002b0 <NVIC_SetPriorityGrouping>
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}

08000414 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
 8000420:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000426:	f7ff ff67 	bl	80002f8 <NVIC_GetPriorityGrouping>
 800042a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	68b9      	ldr	r1, [r7, #8]
 8000430:	6978      	ldr	r0, [r7, #20]
 8000432:	f7ff ffb3 	bl	800039c <NVIC_EncodePriority>
 8000436:	4602      	mov	r2, r0
 8000438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800043c:	4611      	mov	r1, r2
 800043e:	4618      	mov	r0, r3
 8000440:	f7ff ff82 	bl	8000348 <NVIC_SetPriority>
}
 8000444:	bf00      	nop
 8000446:	3718      	adds	r7, #24
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}

0800044c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff5a 	bl	8000314 <NVIC_EnableIRQ>
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.  
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	60bb      	str	r3, [r7, #8]
        
  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	2b00      	cmp	r3, #0
 8000488:	d026      	beq.n	80004d8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)    
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000490:	2b00      	cmp	r3, #0
 8000492:	d021      	beq.n	80004d8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);  
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	687a      	ldr	r2, [r7, #4]
 800049a:	6812      	ldr	r2, [r2, #0]
 800049c:	6812      	ldr	r2, [r2, #0]
 800049e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80004a2:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004a8:	f043 0201 	orr.w	r2, r3, #1
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2201      	movs	r2, #1
 80004b6:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2204      	movs	r2, #4
 80004bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2200      	movs	r2, #0
 80004c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d003      	beq.n	80004d8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	695b      	ldr	r3, [r3, #20]
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f003 0320 	and.w	r3, r3, #32
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d026      	beq.n	8000530 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)    
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d021      	beq.n	8000530 <HAL_DMA2D_IRQHandler+0xc8>
    {  
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	6812      	ldr	r2, [r2, #0]
 80004f4:	6812      	ldr	r2, [r2, #0]
 80004f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80004fa:	601a      	str	r2, [r3, #0]
  
      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2220      	movs	r2, #32
 8000502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;    
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000508:	f043 0202 	orr.w	r2, r3, #2
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2204      	movs	r2, #4
 8000514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2200      	movs	r2, #0
 800051c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d003      	beq.n	8000530 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	695b      	ldr	r3, [r3, #20]
 800052c:	6878      	ldr	r0, [r7, #4]
 800052e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f003 0308 	and.w	r3, r3, #8
 8000536:	2b00      	cmp	r3, #0
 8000538:	d026      	beq.n	8000588 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)    
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000540:	2b00      	cmp	r3, #0
 8000542:	d021      	beq.n	8000588 <HAL_DMA2D_IRQHandler+0x120>
    {    
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	6812      	ldr	r2, [r2, #0]
 800054c:	6812      	ldr	r2, [r2, #0]
 800054e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000552:	601a      	str	r2, [r3, #0]
  
      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2208      	movs	r2, #8
 800055a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;    
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000560:	f043 0204 	orr.w	r2, r3, #4
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2204      	movs	r2, #4
 800056c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2200      	movs	r2, #0
 8000574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	695b      	ldr	r3, [r3, #20]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d003      	beq.n	8000588 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	695b      	ldr	r3, [r3, #20]
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	4798      	blx	r3
      }
    }
  }  
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	2b00      	cmp	r3, #0
 8000590:	d013      	beq.n	80005ba <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)    
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00e      	beq.n	80005ba <HAL_DMA2D_IRQHandler+0x152>
    {    
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	6812      	ldr	r2, [r2, #0]
 80005a4:	6812      	ldr	r2, [r2, #0]
 80005a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80005aa:	601a      	str	r2, [r3, #0]
  
      /* Clear the transfer watermark flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2204      	movs	r2, #4
 80005b2:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f000 f853 	bl	8000660 <HAL_DMA2D_LineEventCallback>
    }
  }  
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d024      	beq.n	800060e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)    
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d01f      	beq.n	800060e <HAL_DMA2D_IRQHandler+0x1a6>
    {   
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	6812      	ldr	r2, [r2, #0]
 80005d6:	6812      	ldr	r2, [r2, #0]
 80005d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80005dc:	601a      	str	r2, [r3, #0]
  
      /* Clear the transfer complete flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2202      	movs	r2, #2
 80005e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2201      	movs	r2, #1
 80005f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2200      	movs	r2, #0
 80005fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferCpltCallback != NULL)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d003      	beq.n	800060e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	4798      	blx	r3
      }         
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f003 0310 	and.w	r3, r3, #16
 8000614:	2b00      	cmp	r3, #0
 8000616:	d01f      	beq.n	8000658 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)    
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800061e:	2b00      	cmp	r3, #0
 8000620:	d01a      	beq.n	8000658 <HAL_DMA2D_IRQHandler+0x1f0>
    {    
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	6812      	ldr	r2, [r2, #0]
 800062a:	6812      	ldr	r2, [r2, #0]
 800062c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000630:	601a      	str	r2, [r3, #0]
  
      /* Clear the CLUT transfer complete flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	2210      	movs	r2, #16
 8000638:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2201      	movs	r2, #1
 8000646:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f000 f80e 	bl	8000674 <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }  
  
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);
  
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);
  
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
} 
 800067c:	bf00      	nop
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr

08000688 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000688:	b480      	push	{r7}
 800068a:	b089      	sub	sp, #36	; 0x24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
 80006a6:	e175      	b.n	8000994 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80006a8:	2201      	movs	r2, #1
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80006bc:	693a      	ldr	r2, [r7, #16]
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	f040 8164 	bne.w	800098e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d003      	beq.n	80006d6 <HAL_GPIO_Init+0x4e>
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	685b      	ldr	r3, [r3, #4]
 80006d2:	2b12      	cmp	r3, #18
 80006d4:	d123      	bne.n	800071e <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	08da      	lsrs	r2, r3, #3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3208      	adds	r2, #8
 80006de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	220f      	movs	r2, #15
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	43db      	mvns	r3, r3
 80006f4:	69ba      	ldr	r2, [r7, #24]
 80006f6:	4013      	ands	r3, r2
 80006f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	691a      	ldr	r2, [r3, #16]
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	f003 0307 	and.w	r3, r3, #7
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	69ba      	ldr	r2, [r7, #24]
 800070c:	4313      	orrs	r3, r2
 800070e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	08da      	lsrs	r2, r3, #3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3208      	adds	r2, #8
 8000718:	69b9      	ldr	r1, [r7, #24]
 800071a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	2203      	movs	r2, #3
 800072a:	fa02 f303 	lsl.w	r3, r2, r3
 800072e:	43db      	mvns	r3, r3
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	4013      	ands	r3, r2
 8000734:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f003 0203 	and.w	r2, r3, #3
 800073e:	69fb      	ldr	r3, [r7, #28]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	69ba      	ldr	r2, [r7, #24]
 8000748:	4313      	orrs	r3, r2
 800074a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	69ba      	ldr	r2, [r7, #24]
 8000750:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d00b      	beq.n	8000772 <HAL_GPIO_Init+0xea>
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	2b02      	cmp	r3, #2
 8000760:	d007      	beq.n	8000772 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000766:	2b11      	cmp	r3, #17
 8000768:	d003      	beq.n	8000772 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b12      	cmp	r3, #18
 8000770:	d130      	bne.n	80007d4 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	2203      	movs	r2, #3
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	43db      	mvns	r3, r3
 8000784:	69ba      	ldr	r2, [r7, #24]
 8000786:	4013      	ands	r3, r2
 8000788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	fa02 f303 	lsl.w	r3, r2, r3
 8000796:	69ba      	ldr	r2, [r7, #24]
 8000798:	4313      	orrs	r3, r2
 800079a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	69ba      	ldr	r2, [r7, #24]
 80007a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007a8:	2201      	movs	r2, #1
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	69ba      	ldr	r2, [r7, #24]
 80007b4:	4013      	ands	r3, r2
 80007b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	091b      	lsrs	r3, r3, #4
 80007be:	f003 0201 	and.w	r2, r3, #1
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	69ba      	ldr	r2, [r7, #24]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	2203      	movs	r2, #3
 80007e0:	fa02 f303 	lsl.w	r3, r2, r3
 80007e4:	43db      	mvns	r3, r3
 80007e6:	69ba      	ldr	r2, [r7, #24]
 80007e8:	4013      	ands	r3, r2
 80007ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	689a      	ldr	r2, [r3, #8]
 80007f0:	69fb      	ldr	r3, [r7, #28]
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	69ba      	ldr	r2, [r7, #24]
 8000802:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	2b00      	cmp	r3, #0
 800080e:	f000 80be 	beq.w	800098e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4a65      	ldr	r2, [pc, #404]	; (80009a8 <HAL_GPIO_Init+0x320>)
 8000814:	4b64      	ldr	r3, [pc, #400]	; (80009a8 <HAL_GPIO_Init+0x320>)
 8000816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b62      	ldr	r3, [pc, #392]	; (80009a8 <HAL_GPIO_Init+0x320>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800082a:	4a60      	ldr	r2, [pc, #384]	; (80009ac <HAL_GPIO_Init+0x324>)
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	089b      	lsrs	r3, r3, #2
 8000830:	3302      	adds	r3, #2
 8000832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000836:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f003 0303 	and.w	r3, r3, #3
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	220f      	movs	r2, #15
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	4013      	ands	r3, r2
 800084c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a57      	ldr	r2, [pc, #348]	; (80009b0 <HAL_GPIO_Init+0x328>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d037      	beq.n	80008c6 <HAL_GPIO_Init+0x23e>
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4a56      	ldr	r2, [pc, #344]	; (80009b4 <HAL_GPIO_Init+0x32c>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d031      	beq.n	80008c2 <HAL_GPIO_Init+0x23a>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a55      	ldr	r2, [pc, #340]	; (80009b8 <HAL_GPIO_Init+0x330>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d02b      	beq.n	80008be <HAL_GPIO_Init+0x236>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a54      	ldr	r2, [pc, #336]	; (80009bc <HAL_GPIO_Init+0x334>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d025      	beq.n	80008ba <HAL_GPIO_Init+0x232>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a53      	ldr	r2, [pc, #332]	; (80009c0 <HAL_GPIO_Init+0x338>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d01f      	beq.n	80008b6 <HAL_GPIO_Init+0x22e>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4a52      	ldr	r2, [pc, #328]	; (80009c4 <HAL_GPIO_Init+0x33c>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d019      	beq.n	80008b2 <HAL_GPIO_Init+0x22a>
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a51      	ldr	r2, [pc, #324]	; (80009c8 <HAL_GPIO_Init+0x340>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d013      	beq.n	80008ae <HAL_GPIO_Init+0x226>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a50      	ldr	r2, [pc, #320]	; (80009cc <HAL_GPIO_Init+0x344>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d00d      	beq.n	80008aa <HAL_GPIO_Init+0x222>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a4f      	ldr	r2, [pc, #316]	; (80009d0 <HAL_GPIO_Init+0x348>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d007      	beq.n	80008a6 <HAL_GPIO_Init+0x21e>
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4a4e      	ldr	r2, [pc, #312]	; (80009d4 <HAL_GPIO_Init+0x34c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d101      	bne.n	80008a2 <HAL_GPIO_Init+0x21a>
 800089e:	2309      	movs	r3, #9
 80008a0:	e012      	b.n	80008c8 <HAL_GPIO_Init+0x240>
 80008a2:	230a      	movs	r3, #10
 80008a4:	e010      	b.n	80008c8 <HAL_GPIO_Init+0x240>
 80008a6:	2308      	movs	r3, #8
 80008a8:	e00e      	b.n	80008c8 <HAL_GPIO_Init+0x240>
 80008aa:	2307      	movs	r3, #7
 80008ac:	e00c      	b.n	80008c8 <HAL_GPIO_Init+0x240>
 80008ae:	2306      	movs	r3, #6
 80008b0:	e00a      	b.n	80008c8 <HAL_GPIO_Init+0x240>
 80008b2:	2305      	movs	r3, #5
 80008b4:	e008      	b.n	80008c8 <HAL_GPIO_Init+0x240>
 80008b6:	2304      	movs	r3, #4
 80008b8:	e006      	b.n	80008c8 <HAL_GPIO_Init+0x240>
 80008ba:	2303      	movs	r3, #3
 80008bc:	e004      	b.n	80008c8 <HAL_GPIO_Init+0x240>
 80008be:	2302      	movs	r3, #2
 80008c0:	e002      	b.n	80008c8 <HAL_GPIO_Init+0x240>
 80008c2:	2301      	movs	r3, #1
 80008c4:	e000      	b.n	80008c8 <HAL_GPIO_Init+0x240>
 80008c6:	2300      	movs	r3, #0
 80008c8:	69fa      	ldr	r2, [r7, #28]
 80008ca:	f002 0203 	and.w	r2, r2, #3
 80008ce:	0092      	lsls	r2, r2, #2
 80008d0:	4093      	lsls	r3, r2
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4313      	orrs	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80008d8:	4934      	ldr	r1, [pc, #208]	; (80009ac <HAL_GPIO_Init+0x324>)
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	089b      	lsrs	r3, r3, #2
 80008de:	3302      	adds	r3, #2
 80008e0:	69ba      	ldr	r2, [r7, #24]
 80008e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008e6:	4b3c      	ldr	r3, [pc, #240]	; (80009d8 <HAL_GPIO_Init+0x350>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	43db      	mvns	r3, r3
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	4013      	ands	r3, r2
 80008f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	4313      	orrs	r3, r2
 8000908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800090a:	4a33      	ldr	r2, [pc, #204]	; (80009d8 <HAL_GPIO_Init+0x350>)
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000910:	4b31      	ldr	r3, [pc, #196]	; (80009d8 <HAL_GPIO_Init+0x350>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	43db      	mvns	r3, r3
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	4013      	ands	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000928:	2b00      	cmp	r3, #0
 800092a:	d003      	beq.n	8000934 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000934:	4a28      	ldr	r2, [pc, #160]	; (80009d8 <HAL_GPIO_Init+0x350>)
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800093a:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <HAL_GPIO_Init+0x350>)
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	43db      	mvns	r3, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4013      	ands	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d003      	beq.n	800095e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000956:	69ba      	ldr	r2, [r7, #24]
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	4313      	orrs	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <HAL_GPIO_Init+0x350>)
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_GPIO_Init+0x350>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	43db      	mvns	r3, r3
 800096e:	69ba      	ldr	r2, [r7, #24]
 8000970:	4013      	ands	r3, r2
 8000972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800097c:	2b00      	cmp	r3, #0
 800097e:	d003      	beq.n	8000988 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000980:	69ba      	ldr	r2, [r7, #24]
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000988:	4a13      	ldr	r2, [pc, #76]	; (80009d8 <HAL_GPIO_Init+0x350>)
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	3301      	adds	r3, #1
 8000992:	61fb      	str	r3, [r7, #28]
 8000994:	69fb      	ldr	r3, [r7, #28]
 8000996:	2b0f      	cmp	r3, #15
 8000998:	f67f ae86 	bls.w	80006a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800099c:	bf00      	nop
 800099e:	3724      	adds	r7, #36	; 0x24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40013800 	.word	0x40013800
 80009b0:	40020000 	.word	0x40020000
 80009b4:	40020400 	.word	0x40020400
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020c00 	.word	0x40020c00
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40021400 	.word	0x40021400
 80009c8:	40021800 	.word	0x40021800
 80009cc:	40021c00 	.word	0x40021c00
 80009d0:	40022000 	.word	0x40022000
 80009d4:	40022400 	.word	0x40022400
 80009d8:	40013c00 	.word	0x40013c00

080009dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	807b      	strh	r3, [r7, #2]
 80009e8:	4613      	mov	r3, r2
 80009ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009ec:	787b      	ldrb	r3, [r7, #1]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009f2:	887a      	ldrh	r2, [r7, #2]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80009f8:	e003      	b.n	8000a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80009fa:	887b      	ldrh	r3, [r7, #2]
 80009fc:	041a      	lsls	r2, r3, #16
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	619a      	str	r2, [r3, #24]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr

08000a0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	b083      	sub	sp, #12
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	6078      	str	r0, [r7, #4]
 8000a16:	460b      	mov	r3, r1
 8000a18:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	887b      	ldrh	r3, [r7, #2]
 8000a20:	405a      	eors	r2, r3
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	615a      	str	r2, [r3, #20]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b086      	sub	sp, #24
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	613b      	str	r3, [r7, #16]
  uint32_t i = 0 , interrupt = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]

  /* ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fd82 	bl	8002556 <USB_GetMode>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	f040 80eb 	bne.w	8000c30 <HAL_HCD_IRQHandler+0x1fe>
  {
    /* avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fd64 	bl	800252c <USB_ReadInterrupts>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	f000 80e1 	beq.w	8000c2e <HAL_HCD_IRQHandler+0x1fc>
    {
      return;
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fd5b 	bl	800252c <USB_ReadInterrupts>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000a80:	d104      	bne.n	8000a8c <HAL_HCD_IRQHandler+0x5a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a8a:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fd4b 	bl	800252c <USB_ReadInterrupts>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000aa0:	d104      	bne.n	8000aac <HAL_HCD_IRQHandler+0x7a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000aaa:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fd3b 	bl	800252c <USB_ReadInterrupts>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000abc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000ac0:	d104      	bne.n	8000acc <HAL_HCD_IRQHandler+0x9a>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000aca:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 fd2b 	bl	800252c <USB_ReadInterrupts>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d103      	bne.n	8000ae8 <HAL_HCD_IRQHandler+0xb6>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 fd1d 	bl	800252c <USB_ReadInterrupts>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000afc:	d118      	bne.n	8000b30 <HAL_HCD_IRQHandler+0xfe>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000b04:	461a      	mov	r2, r3
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000b12:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f003 fbc5 	bl	80042a4 <HAL_HCD_Disconnect_Callback>
       USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2101      	movs	r1, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 fd26 	bl	8002572 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f001 fcf9 	bl	800252c <USB_ReadInterrupts>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b44:	d102      	bne.n	8000b4c <HAL_HCD_IRQHandler+0x11a>
    {
      HCD_Port_IRQHandler (hhcd);
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f001 f85e 	bl	8001c08 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fceb 	bl	800252c <USB_ReadInterrupts>
 8000b56:	4603      	mov	r3, r0
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	2b08      	cmp	r3, #8
 8000b5e:	d106      	bne.n	8000b6e <HAL_HCD_IRQHandler+0x13c>
    {
      HAL_HCD_SOF_Callback(hhcd);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f003 fb83 	bl	800426c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2208      	movs	r2, #8
 8000b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 fcda 	bl	800252c <USB_ReadInterrupts>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b82:	d136      	bne.n	8000bf2 <HAL_HCD_IRQHandler+0x1c0>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fd63 	bl	8002654 <USB_HC_ReadInterrupt>
 8000b8e:	60f8      	str	r0, [r7, #12]
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e023      	b.n	8000bde <HAL_HCD_IRQHandler+0x1ac>
      {
        if (interrupt & (1 << i))
 8000b96:	2201      	movs	r2, #1
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d017      	beq.n	8000bd8 <HAL_HCD_IRQHandler+0x1a6>
        {
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	015a      	lsls	r2, r3, #5
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4413      	add	r3, r2
 8000bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d006      	beq.n	8000bcc <HAL_HCD_IRQHandler+0x19a>
          {
            HCD_HC_IN_IRQHandler (hhcd, i);
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 f88a 	bl	8000cde <HCD_HC_IN_IRQHandler>
 8000bca:	e005      	b.n	8000bd8 <HAL_HCD_IRQHandler+0x1a6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler (hhcd, i);
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f000 fc0a 	bl	80013ec <HCD_HC_OUT_IRQHandler>
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	617b      	str	r3, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d8d6      	bhi.n	8000b96 <HAL_HCD_IRQHandler+0x164>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bf0:	615a      	str	r2, [r3, #20]
    }

        /* Handle Rx Queue Level Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fc98 	bl	800252c <USB_ReadInterrupts>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	2b10      	cmp	r3, #16
 8000c04:	d114      	bne.n	8000c30 <HAL_HCD_IRQHandler+0x1fe>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	6812      	ldr	r2, [r2, #0]
 8000c0e:	6992      	ldr	r2, [r2, #24]
 8000c10:	f022 0210 	bic.w	r2, r2, #16
 8000c14:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler (hhcd);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 ff44 	bl	8001aa4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	6992      	ldr	r2, [r2, #24]
 8000c26:	f042 0210 	orr.w	r2, r2, #16
 8000c2a:	619a      	str	r2, [r3, #24]
 8000c2c:	e000      	b.n	8000c30 <HAL_HCD_IRQHandler+0x1fe>
      return;
 8000c2e:	bf00      	nop
    }
  }
}
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hhcd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hhcd);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d101      	bne.n	8000c74 <HAL_HCD_Start+0x16>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e013      	b.n	8000c9c <HAL_HCD_Start+0x3e>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fbbf 	bl	8002404 <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 fcaa 	bl	80025e6 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d101      	bne.n	8000cba <HAL_HCD_Stop+0x16>
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	e00d      	b.n	8000cd6 <HAL_HCD_Stop+0x32>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fddd 	bl	8002886 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler   (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8000cde:	b590      	push	{r4, r7, lr}
 8000ce0:	b085      	sub	sp, #20
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]

  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	015a      	lsls	r2, r3, #5
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d01a      	beq.n	8000d40 <HCD_HC_IN_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	015a      	lsls	r2, r3, #5
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4413      	add	r3, r2
 8000d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d16:	461a      	mov	r2, r3
 8000d18:	2304      	movs	r3, #4
 8000d1a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	015a      	lsls	r2, r3, #5
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4413      	add	r3, r2
 8000d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d28:	4619      	mov	r1, r3
 8000d2a:	78fb      	ldrb	r3, [r7, #3]
 8000d2c:	015a      	lsls	r2, r3, #5
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4413      	add	r3, r2
 8000d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	60cb      	str	r3, [r1, #12]
 8000d3e:	e094      	b.n	8000e6a <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	015a      	lsls	r2, r3, #5
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 0320 	and.w	r3, r3, #32
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d009      	beq.n	8000d6a <HCD_HC_IN_IRQHandler+0x8c>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8000d56:	78fb      	ldrb	r3, [r7, #3]
 8000d58:	015a      	lsls	r2, r3, #5
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d62:	461a      	mov	r2, r3
 8000d64:	2320      	movs	r3, #32
 8000d66:	6093      	str	r3, [r2, #8]
 8000d68:	e07f      	b.n	8000e6a <HCD_HC_IN_IRQHandler+0x18c>
  }

  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)
 8000d6a:	78fb      	ldrb	r3, [r7, #3]
 8000d6c:	015a      	lsls	r2, r3, #5
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4413      	add	r3, r2
 8000d72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d034      	beq.n	8000dea <HCD_HC_IN_IRQHandler+0x10c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	015a      	lsls	r2, r3, #5
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	015a      	lsls	r2, r3, #5
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4413      	add	r3, r2
 8000d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	60cb      	str	r3, [r1, #12]
    hhcd->hc[chnum].state = HC_STALL;
 8000da2:	78fa      	ldrb	r2, [r7, #3]
 8000da4:	6879      	ldr	r1, [r7, #4]
 8000da6:	4613      	mov	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	335d      	adds	r3, #93	; 0x5d
 8000db2:	2205      	movs	r2, #5
 8000db4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000db6:	78fb      	ldrb	r3, [r7, #3]
 8000db8:	015a      	lsls	r2, r3, #5
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	015a      	lsls	r2, r3, #5
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	6093      	str	r3, [r2, #8]
    USB_HC_Halt(hhcd->Instance, chnum);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	78fa      	ldrb	r2, [r7, #3]
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 fc45 	bl	8002672 <USB_HC_Halt>
 8000de8:	e03f      	b.n	8000e6a <HCD_HC_IN_IRQHandler+0x18c>
  }
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	015a      	lsls	r2, r3, #5
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4413      	add	r3, r2
 8000df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d034      	beq.n	8000e6a <HCD_HC_IN_IRQHandler+0x18c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	015a      	lsls	r2, r3, #5
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	015a      	lsls	r2, r3, #5
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4413      	add	r3, r2
 8000e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	78fa      	ldrb	r2, [r7, #3]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fc21 	bl	8002672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	015a      	lsls	r2, r3, #5
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	2310      	movs	r3, #16
 8000e40:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8000e42:	78fa      	ldrb	r2, [r7, #3]
 8000e44:	6879      	ldr	r1, [r7, #4]
 8000e46:	4613      	mov	r3, r2
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	4413      	add	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	440b      	add	r3, r1
 8000e50:	335d      	adds	r3, #93	; 0x5d
 8000e52:	2208      	movs	r2, #8
 8000e54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8000e56:	78fb      	ldrb	r3, [r7, #3]
 8000e58:	015a      	lsls	r2, r3, #5
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e62:	461a      	mov	r2, r3
 8000e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e68:	6093      	str	r3, [r2, #8]
  }

  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8000e6a:	78fb      	ldrb	r3, [r7, #3]
 8000e6c:	015a      	lsls	r2, r3, #5
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d022      	beq.n	8000ec6 <HCD_HC_IN_IRQHandler+0x1e8>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	015a      	lsls	r2, r3, #5
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	78fb      	ldrb	r3, [r7, #3]
 8000e90:	015a      	lsls	r2, r3, #5
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	78fa      	ldrb	r2, [r7, #3]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f001 fbe1 	bl	8002672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	015a      	lsls	r2, r3, #5
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec2:	6093      	str	r3, [r2, #8]
         USB_HC_Halt(hhcd->Instance, chnum);
       }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
  }
}
 8000ec4:	e28e      	b.n	80013e4 <HCD_HC_IN_IRQHandler+0x706>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	015a      	lsls	r2, r3, #5
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80c0 	beq.w	800105e <HCD_HC_IN_IRQHandler+0x380>
    if (hhcd->Init.dma_enable)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	691b      	ldr	r3, [r3, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d01b      	beq.n	8000f1e <HCD_HC_IN_IRQHandler+0x240>
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000ee6:	78fa      	ldrb	r2, [r7, #3]
 8000ee8:	78f9      	ldrb	r1, [r7, #3]
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4403      	add	r3, r0
 8000ef6:	3348      	adds	r3, #72	; 0x48
 8000ef8:	6819      	ldr	r1, [r3, #0]
                               (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	0158      	lsls	r0, r3, #5
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4403      	add	r3, r0
 8000f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8000f0c:	1ac9      	subs	r1, r1, r3
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4403      	add	r3, r0
 8000f1a:	334c      	adds	r3, #76	; 0x4c
 8000f1c:	6019      	str	r1, [r3, #0]
    hhcd->hc[chnum].state = HC_XFRC;
 8000f1e:	78fa      	ldrb	r2, [r7, #3]
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	440b      	add	r3, r1
 8000f2c:	335d      	adds	r3, #93	; 0x5d
 8000f2e:	2201      	movs	r2, #1
 8000f30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0;
 8000f32:	78fa      	ldrb	r2, [r7, #3]
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	3358      	adds	r3, #88	; 0x58
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	015a      	lsls	r2, r3, #5
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f52:	461a      	mov	r2, r3
 8000f54:	2301      	movs	r3, #1
 8000f56:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8000f58:	78fa      	ldrb	r2, [r7, #3]
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	4413      	add	r3, r2
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	440b      	add	r3, r1
 8000f66:	333f      	adds	r3, #63	; 0x3f
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00a      	beq.n	8000f84 <HCD_HC_IN_IRQHandler+0x2a6>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8000f6e:	78fa      	ldrb	r2, [r7, #3]
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4613      	mov	r3, r2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	440b      	add	r3, r1
 8000f7c:	333f      	adds	r3, #63	; 0x3f
 8000f7e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d121      	bne.n	8000fc8 <HCD_HC_IN_IRQHandler+0x2ea>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	015a      	lsls	r2, r3, #5
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f90:	4619      	mov	r1, r3
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	015a      	lsls	r2, r3, #5
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4413      	add	r3, r2
 8000f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	78fa      	ldrb	r2, [r7, #3]
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fb5f 	bl	8002672 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	015a      	lsls	r2, r3, #5
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4413      	add	r3, r2
 8000fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2310      	movs	r3, #16
 8000fc4:	6093      	str	r3, [r2, #8]
 8000fc6:	e033      	b.n	8001030 <HCD_HC_IN_IRQHandler+0x352>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8000fc8:	78fa      	ldrb	r2, [r7, #3]
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	4413      	add	r3, r2
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	333f      	adds	r3, #63	; 0x3f
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d128      	bne.n	8001030 <HCD_HC_IN_IRQHandler+0x352>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8000fde:	78fb      	ldrb	r3, [r7, #3]
 8000fe0:	015a      	lsls	r2, r3, #5
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000fea:	4619      	mov	r1, r3
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	015a      	lsls	r2, r3, #5
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ffe:	600b      	str	r3, [r1, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001000:	78fa      	ldrb	r2, [r7, #3]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	440b      	add	r3, r1
 800100e:	335c      	adds	r3, #92	; 0x5c
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	440b      	add	r3, r1
 8001022:	335c      	adds	r3, #92	; 0x5c
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	78fb      	ldrb	r3, [r7, #3]
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f003 f948 	bl	80042c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[chnum].toggle_in ^= 1;
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	78f9      	ldrb	r1, [r7, #3]
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4403      	add	r3, r0
 8001040:	3350      	adds	r3, #80	; 0x50
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	f083 0301 	eor.w	r3, r3, #1
 8001048:	b2d8      	uxtb	r0, r3
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	440b      	add	r3, r1
 8001056:	3350      	adds	r3, #80	; 0x50
 8001058:	4602      	mov	r2, r0
 800105a:	701a      	strb	r2, [r3, #0]
}
 800105c:	e1c2      	b.n	80013e4 <HCD_HC_IN_IRQHandler+0x706>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	015a      	lsls	r2, r3, #5
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80e6 	beq.w	8001242 <HCD_HC_IN_IRQHandler+0x564>
    __HAL_HCD_MASK_HALT_HC_INT(chnum);
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	015a      	lsls	r2, r3, #5
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4413      	add	r3, r2
 800107e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001082:	4619      	mov	r1, r3
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	015a      	lsls	r2, r3, #5
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	f023 0302 	bic.w	r3, r3, #2
 8001096:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001098:	78fa      	ldrb	r2, [r7, #3]
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	4613      	mov	r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	00db      	lsls	r3, r3, #3
 80010a4:	440b      	add	r3, r1
 80010a6:	335d      	adds	r3, #93	; 0x5d
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d10a      	bne.n	80010c4 <HCD_HC_IN_IRQHandler+0x3e6>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 80010ae:	78fa      	ldrb	r2, [r7, #3]
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	335c      	adds	r3, #92	; 0x5c
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e0a6      	b.n	8001212 <HCD_HC_IN_IRQHandler+0x534>
    else if (hhcd->hc[chnum].state == HC_STALL)
 80010c4:	78fa      	ldrb	r2, [r7, #3]
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	440b      	add	r3, r1
 80010d2:	335d      	adds	r3, #93	; 0x5d
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d10a      	bne.n	80010f0 <HCD_HC_IN_IRQHandler+0x412>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80010da:	78fa      	ldrb	r2, [r7, #3]
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	440b      	add	r3, r1
 80010e8:	335c      	adds	r3, #92	; 0x5c
 80010ea:	2205      	movs	r2, #5
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	e090      	b.n	8001212 <HCD_HC_IN_IRQHandler+0x534>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80010f0:	78fa      	ldrb	r2, [r7, #3]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	335d      	adds	r3, #93	; 0x5d
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b06      	cmp	r3, #6
 8001104:	d00a      	beq.n	800111c <HCD_HC_IN_IRQHandler+0x43e>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 8001106:	78fa      	ldrb	r2, [r7, #3]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	335d      	adds	r3, #93	; 0x5d
 8001116:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001118:	2b08      	cmp	r3, #8
 800111a:	d14c      	bne.n	80011b6 <HCD_HC_IN_IRQHandler+0x4d8>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 800111c:	78fa      	ldrb	r2, [r7, #3]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	440b      	add	r3, r1
 800112a:	3358      	adds	r3, #88	; 0x58
 800112c:	6819      	ldr	r1, [r3, #0]
 800112e:	1c48      	adds	r0, r1, #1
 8001130:	687c      	ldr	r4, [r7, #4]
 8001132:	4613      	mov	r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4423      	add	r3, r4
 800113c:	3358      	adds	r3, #88	; 0x58
 800113e:	6018      	str	r0, [r3, #0]
 8001140:	2903      	cmp	r1, #3
 8001142:	d914      	bls.n	800116e <HCD_HC_IN_IRQHandler+0x490>
        hhcd->hc[chnum].ErrCnt = 0;
 8001144:	78fa      	ldrb	r2, [r7, #3]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	440b      	add	r3, r1
 8001152:	3358      	adds	r3, #88	; 0x58
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001158:	78fa      	ldrb	r2, [r7, #3]
 800115a:	6879      	ldr	r1, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	00db      	lsls	r3, r3, #3
 8001164:	440b      	add	r3, r1
 8001166:	335c      	adds	r3, #92	; 0x5c
 8001168:	2204      	movs	r2, #4
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	e009      	b.n	8001182 <HCD_HC_IN_IRQHandler+0x4a4>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800116e:	78fa      	ldrb	r2, [r7, #3]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	440b      	add	r3, r1
 800117c:	335c      	adds	r3, #92	; 0x5c
 800117e:	2202      	movs	r2, #2
 8001180:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001182:	78fb      	ldrb	r3, [r7, #3]
 8001184:	015a      	lsls	r2, r3, #5
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4413      	add	r3, r2
 800118a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001198:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011a0:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	015a      	lsls	r2, r3, #5
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4413      	add	r3, r2
 80011aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011ae:	461a      	mov	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	e02d      	b.n	8001212 <HCD_HC_IN_IRQHandler+0x534>
    else if (hhcd->hc[chnum].state == HC_NAK)
 80011b6:	78fa      	ldrb	r2, [r7, #3]
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	4413      	add	r3, r2
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	440b      	add	r3, r1
 80011c4:	335d      	adds	r3, #93	; 0x5d
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d122      	bne.n	8001212 <HCD_HC_IN_IRQHandler+0x534>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80011cc:	78fa      	ldrb	r2, [r7, #3]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	440b      	add	r3, r1
 80011da:	335c      	adds	r3, #92	; 0x5c
 80011dc:	2202      	movs	r2, #2
 80011de:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4413      	add	r3, r2
 80011e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80011f6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011fe:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	015a      	lsls	r2, r3, #5
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4413      	add	r3, r2
 8001208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800120c:	461a      	mov	r2, r3
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	015a      	lsls	r2, r3, #5
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4413      	add	r3, r2
 800121a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800121e:	461a      	mov	r2, r3
 8001220:	2302      	movs	r3, #2
 8001222:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001224:	78fa      	ldrb	r2, [r7, #3]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	335c      	adds	r3, #92	; 0x5c
 8001234:	781a      	ldrb	r2, [r3, #0]
 8001236:	78fb      	ldrb	r3, [r7, #3]
 8001238:	4619      	mov	r1, r3
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f003 f840 	bl	80042c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001240:	e0d0      	b.n	80013e4 <HCD_HC_IN_IRQHandler+0x706>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	015a      	lsls	r2, r3, #5
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4413      	add	r3, r2
 800124a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001254:	2b00      	cmp	r3, #0
 8001256:	d03d      	beq.n	80012d4 <HCD_HC_IN_IRQHandler+0x5f6>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	015a      	lsls	r2, r3, #5
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001264:	4619      	mov	r1, r3
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	015a      	lsls	r2, r3, #5
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4413      	add	r3, r2
 800126e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	60cb      	str	r3, [r1, #12]
     hhcd->hc[chnum].ErrCnt++;
 800127a:	78fa      	ldrb	r2, [r7, #3]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	3358      	adds	r3, #88	; 0x58
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	1c59      	adds	r1, r3, #1
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	4613      	mov	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4403      	add	r3, r0
 800129a:	3358      	adds	r3, #88	; 0x58
 800129c:	6019      	str	r1, [r3, #0]
     hhcd->hc[chnum].state = HC_XACTERR;
 800129e:	78fa      	ldrb	r2, [r7, #3]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	440b      	add	r3, r1
 80012ac:	335d      	adds	r3, #93	; 0x5d
 80012ae:	2206      	movs	r2, #6
 80012b0:	701a      	strb	r2, [r3, #0]
     USB_HC_Halt(hhcd->Instance, chnum);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	78fa      	ldrb	r2, [r7, #3]
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f001 f9d9 	bl	8002672 <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	015a      	lsls	r2, r3, #5
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4413      	add	r3, r2
 80012c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012cc:	461a      	mov	r2, r3
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	6093      	str	r3, [r2, #8]
}
 80012d2:	e087      	b.n	80013e4 <HCD_HC_IN_IRQHandler+0x706>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 80012d4:	78fb      	ldrb	r3, [r7, #3]
 80012d6:	015a      	lsls	r2, r3, #5
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d07c      	beq.n	80013e4 <HCD_HC_IN_IRQHandler+0x706>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80012ea:	78fa      	ldrb	r2, [r7, #3]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	333f      	adds	r3, #63	; 0x3f
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d122      	bne.n	8001346 <HCD_HC_IN_IRQHandler+0x668>
       hhcd->hc[chnum].ErrCnt = 0;
 8001300:	78fa      	ldrb	r2, [r7, #3]
 8001302:	6879      	ldr	r1, [r7, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	440b      	add	r3, r1
 800130e:	3358      	adds	r3, #88	; 0x58
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	015a      	lsls	r2, r3, #5
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4413      	add	r3, r2
 800131c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001320:	4619      	mov	r1, r3
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	015a      	lsls	r2, r3, #5
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	78fa      	ldrb	r2, [r7, #3]
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f001 f997 	bl	8002672 <USB_HC_Halt>
 8001344:	e045      	b.n	80013d2 <HCD_HC_IN_IRQHandler+0x6f4>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001346:	78fa      	ldrb	r2, [r7, #3]
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	333f      	adds	r3, #63	; 0x3f
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d00a      	beq.n	8001372 <HCD_HC_IN_IRQHandler+0x694>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800135c:	78fa      	ldrb	r2, [r7, #3]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	440b      	add	r3, r1
 800136a:	333f      	adds	r3, #63	; 0x3f
 800136c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 800136e:	2b02      	cmp	r3, #2
 8001370:	d12f      	bne.n	80013d2 <HCD_HC_IN_IRQHandler+0x6f4>
       hhcd->hc[chnum].ErrCnt = 0;
 8001372:	78fa      	ldrb	r2, [r7, #3]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	3358      	adds	r3, #88	; 0x58
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
       if (!hhcd->Init.dma_enable)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	691b      	ldr	r3, [r3, #16]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d121      	bne.n	80013d2 <HCD_HC_IN_IRQHandler+0x6f4>
         hhcd->hc[chnum].state = HC_NAK;
 800138e:	78fa      	ldrb	r2, [r7, #3]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	4613      	mov	r3, r2
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4413      	add	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	440b      	add	r3, r1
 800139c:	335d      	adds	r3, #93	; 0x5d
 800139e:	2203      	movs	r2, #3
 80013a0:	701a      	strb	r2, [r3, #0]
         __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	015a      	lsls	r2, r3, #5
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013ae:	4619      	mov	r1, r3
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	015a      	lsls	r2, r3, #5
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f043 0302 	orr.w	r3, r3, #2
 80013c2:	60cb      	str	r3, [r1, #12]
         USB_HC_Halt(hhcd->Instance, chnum);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	78fa      	ldrb	r2, [r7, #3]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 f950 	bl	8002672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	015a      	lsls	r2, r3, #5
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80013de:	461a      	mov	r2, r3
 80013e0:	2310      	movs	r3, #16
 80013e2:	6093      	str	r3, [r2, #8]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd90      	pop	{r4, r7, pc}

080013ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler  (HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013ec:	b590      	push	{r4, r7, lr}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]

  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	015a      	lsls	r2, r3, #5
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4413      	add	r3, r2
 800140a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f003 0304 	and.w	r3, r3, #4
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01a      	beq.n	800144e <HCD_HC_OUT_IRQHandler+0x62>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	015a      	lsls	r2, r3, #5
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001424:	461a      	mov	r2, r3
 8001426:	2304      	movs	r3, #4
 8001428:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800142a:	78fb      	ldrb	r3, [r7, #3]
 800142c:	015a      	lsls	r2, r3, #5
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001436:	4619      	mov	r1, r3
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	f043 0302 	orr.w	r3, r3, #2
 800144a:	60cb      	str	r3, [r1, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
  }
}
 800144c:	e326      	b.n	8001a9c <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	015a      	lsls	r2, r3, #5
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4413      	add	r3, r2
 8001456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f003 0320 	and.w	r3, r3, #32
 8001460:	2b00      	cmp	r3, #0
 8001462:	d041      	beq.n	80014e8 <HCD_HC_OUT_IRQHandler+0xfc>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	015a      	lsls	r2, r3, #5
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4413      	add	r3, r2
 800146c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001470:	461a      	mov	r2, r3
 8001472:	2320      	movs	r3, #32
 8001474:	6093      	str	r3, [r2, #8]
    if( hhcd->hc[chnum].do_ping == 1)
 8001476:	78fa      	ldrb	r2, [r7, #3]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	333d      	adds	r3, #61	; 0x3d
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b01      	cmp	r3, #1
 800148a:	f040 8307 	bne.w	8001a9c <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[chnum].do_ping = 0;
 800148e:	78fa      	ldrb	r2, [r7, #3]
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	440b      	add	r3, r1
 800149c:	333d      	adds	r3, #61	; 0x3d
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80014a2:	78fa      	ldrb	r2, [r7, #3]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	440b      	add	r3, r1
 80014b0:	335c      	adds	r3, #92	; 0x5c
 80014b2:	2202      	movs	r2, #2
 80014b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80014b6:	78fb      	ldrb	r3, [r7, #3]
 80014b8:	015a      	lsls	r2, r3, #5
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4413      	add	r3, r2
 80014be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014c2:	4619      	mov	r1, r3
 80014c4:	78fb      	ldrb	r3, [r7, #3]
 80014c6:	015a      	lsls	r2, r3, #5
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f043 0302 	orr.w	r3, r3, #2
 80014d6:	60cb      	str	r3, [r1, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	78fa      	ldrb	r2, [r7, #3]
 80014de:	4611      	mov	r1, r2
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 f8c6 	bl	8002672 <USB_HC_Halt>
}
 80014e6:	e2d9      	b.n	8001a9c <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	015a      	lsls	r2, r3, #5
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d03f      	beq.n	800157e <HCD_HC_OUT_IRQHandler+0x192>
    hhcd->hc[chnum].state = HC_NYET;
 80014fe:	78fa      	ldrb	r2, [r7, #3]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	440b      	add	r3, r1
 800150c:	335d      	adds	r3, #93	; 0x5d
 800150e:	2204      	movs	r2, #4
 8001510:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].do_ping = 1;
 8001512:	78fa      	ldrb	r2, [r7, #3]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	4613      	mov	r3, r2
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	333d      	adds	r3, #61	; 0x3d
 8001522:	2201      	movs	r2, #1
 8001524:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt= 0;
 8001526:	78fa      	ldrb	r2, [r7, #3]
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	440b      	add	r3, r1
 8001534:	3358      	adds	r3, #88	; 0x58
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800153a:	78fb      	ldrb	r3, [r7, #3]
 800153c:	015a      	lsls	r2, r3, #5
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4413      	add	r3, r2
 8001542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001546:	4619      	mov	r1, r3
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	78fa      	ldrb	r2, [r7, #3]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f001 f884 	bl	8002672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	015a      	lsls	r2, r3, #5
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001576:	461a      	mov	r2, r3
 8001578:	2340      	movs	r3, #64	; 0x40
 800157a:	6093      	str	r3, [r2, #8]
}
 800157c:	e28e      	b.n	8001a9c <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	015a      	lsls	r2, r3, #5
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	4413      	add	r3, r2
 8001586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001590:	2b00      	cmp	r3, #0
 8001592:	d022      	beq.n	80015da <HCD_HC_OUT_IRQHandler+0x1ee>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	015a      	lsls	r2, r3, #5
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015a0:	4619      	mov	r1, r3
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	015a      	lsls	r2, r3, #5
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4413      	add	r3, r2
 80015aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	78fa      	ldrb	r2, [r7, #3]
 80015bc:	4611      	mov	r1, r2
 80015be:	4618      	mov	r0, r3
 80015c0:	f001 f857 	bl	8002672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015d0:	461a      	mov	r2, r3
 80015d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d6:	6093      	str	r3, [r2, #8]
}
 80015d8:	e260      	b.n	8001a9c <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 80015da:	78fb      	ldrb	r3, [r7, #3]
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d035      	beq.n	800165c <HCD_HC_OUT_IRQHandler+0x270>
      hhcd->hc[chnum].ErrCnt = 0;
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	3358      	adds	r3, #88	; 0x58
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	015a      	lsls	r2, r3, #5
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4413      	add	r3, r2
 800160c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001610:	4619      	mov	r1, r3
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	015a      	lsls	r2, r3, #5
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4413      	add	r3, r2
 800161a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	4611      	mov	r1, r2
 800162e:	4618      	mov	r0, r3
 8001630:	f001 f81f 	bl	8002672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001634:	78fb      	ldrb	r3, [r7, #3]
 8001636:	015a      	lsls	r2, r3, #5
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001640:	461a      	mov	r2, r3
 8001642:	2301      	movs	r3, #1
 8001644:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001646:	78fa      	ldrb	r2, [r7, #3]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	440b      	add	r3, r1
 8001654:	335d      	adds	r3, #93	; 0x5d
 8001656:	2201      	movs	r2, #1
 8001658:	701a      	strb	r2, [r3, #0]
}
 800165a:	e21f      	b.n	8001a9c <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)
 800165c:	78fb      	ldrb	r3, [r7, #3]
 800165e:	015a      	lsls	r2, r3, #5
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d02b      	beq.n	80016ca <HCD_HC_OUT_IRQHandler+0x2de>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001672:	78fb      	ldrb	r3, [r7, #3]
 8001674:	015a      	lsls	r2, r3, #5
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800167e:	461a      	mov	r2, r3
 8001680:	2308      	movs	r3, #8
 8001682:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001684:	78fb      	ldrb	r3, [r7, #3]
 8001686:	015a      	lsls	r2, r3, #5
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001690:	4619      	mov	r1, r3
 8001692:	78fb      	ldrb	r3, [r7, #3]
 8001694:	015a      	lsls	r2, r3, #5
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4413      	add	r3, r2
 800169a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	4611      	mov	r1, r2
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 ffdf 	bl	8002672 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;
 80016b4:	78fa      	ldrb	r2, [r7, #3]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	440b      	add	r3, r1
 80016c2:	335d      	adds	r3, #93	; 0x5d
 80016c4:	2205      	movs	r2, #5
 80016c6:	701a      	strb	r2, [r3, #0]
}
 80016c8:	e1e8      	b.n	8001a9c <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	015a      	lsls	r2, r3, #5
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d055      	beq.n	800178c <HCD_HC_OUT_IRQHandler+0x3a0>
    hhcd->hc[chnum].ErrCnt = 0;
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	440b      	add	r3, r1
 80016ee:	3358      	adds	r3, #88	; 0x58
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	440b      	add	r3, r1
 8001702:	335d      	adds	r3, #93	; 0x5d
 8001704:	2203      	movs	r2, #3
 8001706:	701a      	strb	r2, [r3, #0]
    if ( hhcd->hc[chnum].do_ping == 0)
 8001708:	78fa      	ldrb	r2, [r7, #3]
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	440b      	add	r3, r1
 8001716:	333d      	adds	r3, #61	; 0x3d
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d114      	bne.n	8001748 <HCD_HC_OUT_IRQHandler+0x35c>
      if (hhcd->hc[chnum].speed == HCD_SPEED_HIGH)
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	440b      	add	r3, r1
 800172c:	333c      	adds	r3, #60	; 0x3c
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d109      	bne.n	8001748 <HCD_HC_OUT_IRQHandler+0x35c>
        hhcd->hc[chnum].do_ping = 1;
 8001734:	78fa      	ldrb	r2, [r7, #3]
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	440b      	add	r3, r1
 8001742:	333d      	adds	r3, #61	; 0x3d
 8001744:	2201      	movs	r2, #1
 8001746:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	015a      	lsls	r2, r3, #5
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001754:	4619      	mov	r1, r3
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4413      	add	r3, r2
 800175e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	4611      	mov	r1, r2
 8001772:	4618      	mov	r0, r3
 8001774:	f000 ff7d 	bl	8002672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001778:	78fb      	ldrb	r3, [r7, #3]
 800177a:	015a      	lsls	r2, r3, #5
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001784:	461a      	mov	r2, r3
 8001786:	2310      	movs	r3, #16
 8001788:	6093      	str	r3, [r2, #8]
}
 800178a:	e187      	b.n	8001a9c <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 800178c:	78fb      	ldrb	r3, [r7, #3]
 800178e:	015a      	lsls	r2, r3, #5
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d02b      	beq.n	80017fa <HCD_HC_OUT_IRQHandler+0x40e>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	015a      	lsls	r2, r3, #5
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ae:	4619      	mov	r1, r3
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	015a      	lsls	r2, r3, #5
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	4611      	mov	r1, r2
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 ff50 	bl	8002672 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	440b      	add	r3, r1
 80017e0:	335d      	adds	r3, #93	; 0x5d
 80017e2:	2206      	movs	r2, #6
 80017e4:	701a      	strb	r2, [r3, #0]
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	015a      	lsls	r2, r3, #5
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017f2:	461a      	mov	r2, r3
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	6093      	str	r3, [r2, #8]
}
 80017f8:	e150      	b.n	8001a9c <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4413      	add	r3, r2
 8001802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180c:	2b00      	cmp	r3, #0
 800180e:	d035      	beq.n	800187c <HCD_HC_OUT_IRQHandler+0x490>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	015a      	lsls	r2, r3, #5
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800181c:	4619      	mov	r1, r3
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	015a      	lsls	r2, r3, #5
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4413      	add	r3, r2
 8001826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	60cb      	str	r3, [r1, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	4611      	mov	r1, r2
 800183a:	4618      	mov	r0, r3
 800183c:	f000 ff19 	bl	8002672 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	015a      	lsls	r2, r3, #5
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800184c:	461a      	mov	r2, r3
 800184e:	2310      	movs	r3, #16
 8001850:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	015a      	lsls	r2, r3, #5
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4413      	add	r3, r2
 800185a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800185e:	461a      	mov	r2, r3
 8001860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001864:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	335d      	adds	r3, #93	; 0x5d
 8001876:	2208      	movs	r2, #8
 8001878:	701a      	strb	r2, [r3, #0]
}
 800187a:	e10f      	b.n	8001a9c <HCD_HC_OUT_IRQHandler+0x6b0>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 800187c:	78fb      	ldrb	r3, [r7, #3]
 800187e:	015a      	lsls	r2, r3, #5
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b00      	cmp	r3, #0
 8001890:	f000 8104 	beq.w	8001a9c <HCD_HC_OUT_IRQHandler+0x6b0>
    __HAL_HCD_MASK_HALT_HC_INT(chnum);
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	015a      	lsls	r2, r3, #5
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a0:	4619      	mov	r1, r3
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	015a      	lsls	r2, r3, #5
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4413      	add	r3, r2
 80018aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f023 0302 	bic.w	r3, r3, #2
 80018b4:	60cb      	str	r3, [r1, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80018b6:	78fa      	ldrb	r2, [r7, #3]
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	440b      	add	r3, r1
 80018c4:	335d      	adds	r3, #93	; 0x5d
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d12c      	bne.n	8001926 <HCD_HC_OUT_IRQHandler+0x53a>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	335c      	adds	r3, #92	; 0x5c
 80018dc:	2201      	movs	r2, #1
 80018de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	440b      	add	r3, r1
 80018ee:	333f      	adds	r3, #63	; 0x3f
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	f040 80bb 	bne.w	8001a6e <HCD_HC_OUT_IRQHandler+0x682>
        hhcd->hc[chnum].toggle_out ^= 1;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	78f9      	ldrb	r1, [r7, #3]
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4403      	add	r3, r0
 8001908:	3351      	adds	r3, #81	; 0x51
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	f083 0301 	eor.w	r3, r3, #1
 8001910:	b2d8      	uxtb	r0, r3
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	3351      	adds	r3, #81	; 0x51
 8001920:	4602      	mov	r2, r0
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	e0a3      	b.n	8001a6e <HCD_HC_OUT_IRQHandler+0x682>
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001926:	78fa      	ldrb	r2, [r7, #3]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	335d      	adds	r3, #93	; 0x5d
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d10a      	bne.n	8001952 <HCD_HC_OUT_IRQHandler+0x566>
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	335c      	adds	r3, #92	; 0x5c
 800194c:	2202      	movs	r2, #2
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e08d      	b.n	8001a6e <HCD_HC_OUT_IRQHandler+0x682>
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	335d      	adds	r3, #93	; 0x5d
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d10a      	bne.n	800197e <HCD_HC_OUT_IRQHandler+0x592>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	335c      	adds	r3, #92	; 0x5c
 8001978:	2202      	movs	r2, #2
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	e077      	b.n	8001a6e <HCD_HC_OUT_IRQHandler+0x682>
    else if (hhcd->hc[chnum].state == HC_STALL)
 800197e:	78fa      	ldrb	r2, [r7, #3]
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	440b      	add	r3, r1
 800198c:	335d      	adds	r3, #93	; 0x5d
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b05      	cmp	r3, #5
 8001992:	d10a      	bne.n	80019aa <HCD_HC_OUT_IRQHandler+0x5be>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	335c      	adds	r3, #92	; 0x5c
 80019a4:	2205      	movs	r2, #5
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	e061      	b.n	8001a6e <HCD_HC_OUT_IRQHandler+0x682>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	440b      	add	r3, r1
 80019b8:	335d      	adds	r3, #93	; 0x5d
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b06      	cmp	r3, #6
 80019be:	d00a      	beq.n	80019d6 <HCD_HC_OUT_IRQHandler+0x5ea>
            (hhcd->hc[chnum].state == HC_DATATGLERR))
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	335d      	adds	r3, #93	; 0x5d
 80019d0:	781b      	ldrb	r3, [r3, #0]
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d14b      	bne.n	8001a6e <HCD_HC_OUT_IRQHandler+0x682>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	3358      	adds	r3, #88	; 0x58
 80019e6:	6819      	ldr	r1, [r3, #0]
 80019e8:	1c48      	adds	r0, r1, #1
 80019ea:	687c      	ldr	r4, [r7, #4]
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	4423      	add	r3, r4
 80019f6:	3358      	adds	r3, #88	; 0x58
 80019f8:	6018      	str	r0, [r3, #0]
 80019fa:	2903      	cmp	r1, #3
 80019fc:	d914      	bls.n	8001a28 <HCD_HC_OUT_IRQHandler+0x63c>
        hhcd->hc[chnum].ErrCnt = 0;
 80019fe:	78fa      	ldrb	r2, [r7, #3]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3358      	adds	r3, #88	; 0x58
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001a12:	78fa      	ldrb	r2, [r7, #3]
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	440b      	add	r3, r1
 8001a20:	335c      	adds	r3, #92	; 0x5c
 8001a22:	2204      	movs	r2, #4
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e009      	b.n	8001a3c <HCD_HC_OUT_IRQHandler+0x650>
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	335c      	adds	r3, #92	; 0x5c
 8001a38:	2202      	movs	r2, #2
 8001a3a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	015a      	lsls	r2, r3, #5
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a52:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a5a:	60bb      	str	r3, [r7, #8]
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	015a      	lsls	r2, r3, #5
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a68:	461a      	mov	r2, r3
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	015a      	lsls	r2, r3, #5
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001a80:	78fa      	ldrb	r2, [r7, #3]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	335c      	adds	r3, #92	; 0x5c
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f002 fc12 	bl	80042c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}

08001aa4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	61fb      	str	r3, [r7, #28]
  uint8_t                       channelnum =0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	76fb      	strb	r3, [r7, #27]
  uint32_t                      pktsts;
  uint32_t                      pktcnt;
  uint32_t                      temp = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]

  temp = hhcd->Instance->GRXSTSP ;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	617b      	str	r3, [r7, #20]
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	76fb      	strb	r3, [r7, #27]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	0c5b      	lsrs	r3, r3, #17
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	60fb      	str	r3, [r7, #12]
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ae2:	60bb      	str	r3, [r7, #8]

  switch (pktsts)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d003      	beq.n	8001af2 <HCD_RXQLVL_IRQHandler+0x4e>
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	f000 8082 	beq.w	8001bf4 <HCD_RXQLVL_IRQHandler+0x150>
  case GRXSTS_PKTSTS_DATA_TOGGLE_ERR:
    break;
  case GRXSTS_PKTSTS_IN_XFER_COMP:
  case GRXSTS_PKTSTS_CH_HALTED:
  default:
    break;
 8001af0:	e083      	b.n	8001bfa <HCD_RXQLVL_IRQHandler+0x156>
    if ((pktcnt > 0) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d07f      	beq.n	8001bf8 <HCD_RXQLVL_IRQHandler+0x154>
 8001af8:	7efa      	ldrb	r2, [r7, #27]
 8001afa:	6879      	ldr	r1, [r7, #4]
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	3344      	adds	r3, #68	; 0x44
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d074      	beq.n	8001bf8 <HCD_RXQLVL_IRQHandler+0x154>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	7efa      	ldrb	r2, [r7, #27]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	3344      	adds	r3, #68	; 0x44
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	b292      	uxth	r2, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f000 fcd5 	bl	80024d8 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;
 8001b2e:	7efa      	ldrb	r2, [r7, #27]
 8001b30:	7ef9      	ldrb	r1, [r7, #27]
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4403      	add	r3, r0
 8001b3e:	3344      	adds	r3, #68	; 0x44
 8001b40:	6819      	ldr	r1, [r3, #0]
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	4419      	add	r1, r3
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4403      	add	r3, r0
 8001b52:	3344      	adds	r3, #68	; 0x44
 8001b54:	6019      	str	r1, [r3, #0]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8001b56:	7efa      	ldrb	r2, [r7, #27]
 8001b58:	7ef9      	ldrb	r1, [r7, #27]
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4403      	add	r3, r0
 8001b66:	334c      	adds	r3, #76	; 0x4c
 8001b68:	6819      	ldr	r1, [r3, #0]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	4419      	add	r1, r3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4403      	add	r3, r0
 8001b7a:	334c      	adds	r3, #76	; 0x4c
 8001b7c:	6019      	str	r1, [r3, #0]
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001b7e:	7efb      	ldrb	r3, [r7, #27]
 8001b80:	015a      	lsls	r2, r3, #5
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	4413      	add	r3, r2
 8001b86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8a:	691a      	ldr	r2, [r3, #16]
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HCD_RXQLVL_IRQHandler+0x160>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d031      	beq.n	8001bf8 <HCD_RXQLVL_IRQHandler+0x154>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 8001b94:	7efb      	ldrb	r3, [r7, #27]
 8001b96:	015a      	lsls	r2, r3, #5
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001baa:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bb2:	613b      	str	r3, [r7, #16]
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8001bb4:	7efb      	ldrb	r3, [r7, #27]
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	6013      	str	r3, [r2, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8001bc6:	7efa      	ldrb	r2, [r7, #27]
 8001bc8:	7ef9      	ldrb	r1, [r7, #27]
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4403      	add	r3, r0
 8001bd6:	3350      	adds	r3, #80	; 0x50
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	f083 0301 	eor.w	r3, r3, #1
 8001bde:	b2d8      	uxtb	r0, r3
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	3350      	adds	r3, #80	; 0x50
 8001bee:	4602      	mov	r2, r0
 8001bf0:	701a      	strb	r2, [r3, #0]
    break;
 8001bf2:	e001      	b.n	8001bf8 <HCD_RXQLVL_IRQHandler+0x154>
    break;
 8001bf4:	bf00      	nop
 8001bf6:	e000      	b.n	8001bfa <HCD_RXQLVL_IRQHandler+0x156>
    break;
 8001bf8:	bf00      	nop
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	1ff80000 	.word	0x1ff80000

08001c08 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	617b      	str	r3, [r7, #20]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	613b      	str	r3, [r7, #16]
  hprt0_dup = USBx_HPRT0;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60fb      	str	r3, [r7, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001c30:	60fb      	str	r3, [r7, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

  /* Check whether Port Connect detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d113      	bne.n	8001c64 <HCD_Port_IRQHandler+0x5c>
  {
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d10a      	bne.n	8001c5c <HCD_Port_IRQHandler+0x54>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	6992      	ldr	r2, [r2, #24]
 8001c50:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001c54:	619a      	str	r2, [r3, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f002 fb16 	bl	8004288 <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	60fb      	str	r3, [r7, #12]

  }

  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d148      	bne.n	8001d00 <HCD_Port_IRQHandler+0xf8>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	60fb      	str	r3, [r7, #12]

    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b04      	cmp	r3, #4
 8001c7e:	d129      	bne.n	8001cd4 <HCD_Port_IRQHandler+0xcc>
    {
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d113      	bne.n	8001cb0 <HCD_Port_IRQHandler+0xa8>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001c8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c92:	d106      	bne.n	8001ca2 <HCD_Port_IRQHandler+0x9a>
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2102      	movs	r1, #2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fc69 	bl	8002572 <USB_InitFSLSPClkSel>
 8001ca0:	e011      	b.n	8001cc6 <HCD_Port_IRQHandler+0xbe>
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f000 fc62 	bl	8002572 <USB_InitFSLSPClkSel>
 8001cae:	e00a      	b.n	8001cc6 <HCD_Port_IRQHandler+0xbe>
        }
      }
      else
      {
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d106      	bne.n	8001cc6 <HCD_Port_IRQHandler+0xbe>
        {
          USBx_HOST->HFIR = (uint32_t)60000;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8001cc4:	6053      	str	r3, [r2, #4]
        }
      }

      HAL_HCD_PortEnabled_Callback(hhcd);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7fe ffb5 	bl	8000c36 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f002 fadb 	bl	8004288 <HAL_HCD_Connect_Callback>
 8001cd2:	e015      	b.n	8001d00 <HCD_Port_IRQHandler+0xf8>

    }
    else
    {
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f7fe ffb8 	bl	8000c4a <HAL_HCD_PortDisabled_Callback>
      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001cee:	6013      	str	r3, [r2, #0]
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	6992      	ldr	r2, [r2, #24]
 8001cfa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001cfe:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check For an overcurrent */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	f003 0320 	and.w	r3, r3, #32
 8001d06:	2b20      	cmp	r3, #32
 8001d08:	d103      	bne.n	8001d12 <HCD_Port_IRQHandler+0x10a>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f043 0320 	orr.w	r3, r3, #32
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d18:	461a      	mov	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6013      	str	r3, [r2, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d025      	beq.n	8001d88 <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d01e      	beq.n	8001d88 <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d54:	f022 0204 	bic.w	r2, r2, #4
 8001d58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d68:	f043 0201 	orr.w	r2, r3, #1
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2204      	movs	r2, #4
 8001d76:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f87b 	bl	8001e7e <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d025      	beq.n	8001de2 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01e      	beq.n	8001de2 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dae:	f022 0202 	bic.w	r2, r2, #2
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2202      	movs	r2, #2
 8001dba:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001dc2:	f043 0202 	orr.w	r2, r3, #2
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f84e 	bl	8001e7e <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01d      	beq.n	8001e2c <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d016      	beq.n	8001e2c <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e08:	f022 0201 	bic.w	r2, r2, #1
 8001e0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2201      	movs	r2, #1
 8001e14:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f833 	bl	8001e92 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d01d      	beq.n	8001e76 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e40:	f003 0308 	and.w	r3, r3, #8
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d016      	beq.n	8001e76 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e52:	f022 0208 	bic.w	r2, r2, #8
 8001e56:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f818 	bl	8001ea6 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000008 	.word	0x20000008

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001edc:	4601      	mov	r1, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4a03      	ldr	r2, [pc, #12]	; (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	08004478 	.word	0x08004478

08001efc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	220f      	movs	r2, #15
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0203 	and.w	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f18:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <HAL_RCC_GetClockConfig+0x5c>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_RCC_GetClockConfig+0x5c>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_RCC_GetClockConfig+0x5c>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	08db      	lsrs	r3, r3, #3
 8001f36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <HAL_RCC_GetClockConfig+0x60>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 020f 	and.w	r2, r3, #15
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	601a      	str	r2, [r3, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40023c00 	.word	0x40023c00

08001f60 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e01d      	b.n	8001fae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f002 f83c 	bl	8004004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f000 f96c 	bl	800227c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	68d2      	ldr	r2, [r2, #12]
 8001fc8:	f042 0201 	orr.w	r2, r2, #1
 8001fcc:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	f042 0201 	orr.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d122      	bne.n	8002048 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b02      	cmp	r3, #2
 800200e:	d11b      	bne.n	8002048 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0202 	mvn.w	r2, #2
 8002018:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f905 	bl	800223e <HAL_TIM_IC_CaptureCallback>
 8002034:	e005      	b.n	8002042 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8f7 	bl	800222a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f908 	bl	8002252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b04      	cmp	r3, #4
 8002054:	d122      	bne.n	800209c <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b04      	cmp	r3, #4
 8002062:	d11b      	bne.n	800209c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0204 	mvn.w	r2, #4
 800206c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f8db 	bl	800223e <HAL_TIM_IC_CaptureCallback>
 8002088:	e005      	b.n	8002096 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8cd 	bl	800222a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f8de 	bl	8002252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d122      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d11b      	bne.n	80020f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0208 	mvn.w	r2, #8
 80020c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2204      	movs	r2, #4
 80020c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8b1 	bl	800223e <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8a3 	bl	800222a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8b4 	bl	8002252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d122      	bne.n	8002144 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b10      	cmp	r3, #16
 800210a:	d11b      	bne.n	8002144 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0210 	mvn.w	r2, #16
 8002114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2208      	movs	r2, #8
 800211a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f887 	bl	800223e <HAL_TIM_IC_CaptureCallback>
 8002130:	e005      	b.n	800213e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f879 	bl	800222a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f88a 	bl	8002252 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10e      	bne.n	8002170 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b01      	cmp	r3, #1
 800215e:	d107      	bne.n	8002170 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f06f 0201 	mvn.w	r2, #1
 8002168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f001 ff06 	bl	8003f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	2b80      	cmp	r3, #128	; 0x80
 800217c:	d10e      	bne.n	800219c <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002188:	2b80      	cmp	r3, #128	; 0x80
 800218a:	d107      	bne.n	800219c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f92a 	bl	80023f0 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021aa:	d10e      	bne.n	80021ca <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b6:	2b80      	cmp	r3, #128	; 0x80
 80021b8:	d107      	bne.n	80021ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f913 	bl	80023f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d4:	2b40      	cmp	r3, #64	; 0x40
 80021d6:	d10e      	bne.n	80021f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e2:	2b40      	cmp	r3, #64	; 0x40
 80021e4:	d107      	bne.n	80021f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f838 	bl	8002266 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b20      	cmp	r3, #32
 8002202:	d10e      	bne.n	8002222 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	2b20      	cmp	r3, #32
 8002210:	d107      	bne.n	8002222 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f06f 0220 	mvn.w	r2, #32
 800221a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f8dd 	bl	80023dc <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a47      	ldr	r2, [pc, #284]	; (80023b0 <TIM_Base_SetConfig+0x134>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d013      	beq.n	80022c0 <TIM_Base_SetConfig+0x44>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800229e:	d00f      	beq.n	80022c0 <TIM_Base_SetConfig+0x44>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a44      	ldr	r2, [pc, #272]	; (80023b4 <TIM_Base_SetConfig+0x138>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d00b      	beq.n	80022c0 <TIM_Base_SetConfig+0x44>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a43      	ldr	r2, [pc, #268]	; (80023b8 <TIM_Base_SetConfig+0x13c>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d007      	beq.n	80022c0 <TIM_Base_SetConfig+0x44>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a42      	ldr	r2, [pc, #264]	; (80023bc <TIM_Base_SetConfig+0x140>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d003      	beq.n	80022c0 <TIM_Base_SetConfig+0x44>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a41      	ldr	r2, [pc, #260]	; (80023c0 <TIM_Base_SetConfig+0x144>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d101      	bne.n	80022c4 <TIM_Base_SetConfig+0x48>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <TIM_Base_SetConfig+0x4a>
 80022c4:	2300      	movs	r3, #0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a34      	ldr	r2, [pc, #208]	; (80023b0 <TIM_Base_SetConfig+0x134>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d02b      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ea:	d027      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a31      	ldr	r2, [pc, #196]	; (80023b4 <TIM_Base_SetConfig+0x138>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d023      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a30      	ldr	r2, [pc, #192]	; (80023b8 <TIM_Base_SetConfig+0x13c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d01f      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a2f      	ldr	r2, [pc, #188]	; (80023bc <TIM_Base_SetConfig+0x140>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d01b      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a2e      	ldr	r2, [pc, #184]	; (80023c0 <TIM_Base_SetConfig+0x144>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d017      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a2d      	ldr	r2, [pc, #180]	; (80023c4 <TIM_Base_SetConfig+0x148>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d013      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a2c      	ldr	r2, [pc, #176]	; (80023c8 <TIM_Base_SetConfig+0x14c>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d00f      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <TIM_Base_SetConfig+0x150>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d00b      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a2a      	ldr	r2, [pc, #168]	; (80023d0 <TIM_Base_SetConfig+0x154>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d007      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <TIM_Base_SetConfig+0x158>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d003      	beq.n	800233c <TIM_Base_SetConfig+0xc0>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a28      	ldr	r2, [pc, #160]	; (80023d8 <TIM_Base_SetConfig+0x15c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d101      	bne.n	8002340 <TIM_Base_SetConfig+0xc4>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <TIM_Base_SetConfig+0xc6>
 8002340:	2300      	movs	r3, #0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800234c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <TIM_Base_SetConfig+0x134>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d003      	beq.n	800238c <TIM_Base_SetConfig+0x110>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <TIM_Base_SetConfig+0x144>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d101      	bne.n	8002390 <TIM_Base_SetConfig+0x114>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <TIM_Base_SetConfig+0x116>
 8002390:	2300      	movs	r3, #0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	615a      	str	r2, [r3, #20]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40010000 	.word	0x40010000
 80023b4:	40000400 	.word	0x40000400
 80023b8:	40000800 	.word	0x40000800
 80023bc:	40000c00 	.word	0x40000c00
 80023c0:	40010400 	.word	0x40010400
 80023c4:	40014000 	.word	0x40014000
 80023c8:	40014400 	.word	0x40014400
 80023cc:	40014800 	.word	0x40014800
 80023d0:	40001800 	.word	0x40001800
 80023d4:	40001c00 	.word	0x40001c00
 80023d8:	40002000 	.word	0x40002000

080023dc <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 0201 	bic.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	019b      	lsls	r3, r3, #6
 800245a:	f043 0220 	orr.w	r2, r3, #32
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	3301      	adds	r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4a09      	ldr	r2, [pc, #36]	; (8002490 <USB_FlushTxFifo+0x48>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e006      	b.n	8002482 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b20      	cmp	r3, #32
 800247e:	d0f0      	beq.n	8002462 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	00030d40 	.word	0x00030d40

08002494 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2210      	movs	r2, #16
 80024a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	3301      	adds	r3, #1
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <USB_FlushRxFifo+0x40>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d901      	bls.n	80024b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e006      	b.n	80024c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d0f0      	beq.n	80024a6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	00030d40 	.word	0x00030d40

080024d8 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3) / 4;
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	3303      	adds	r3, #3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	da00      	bge.n	80024f4 <USB_ReadPacket+0x1c>
 80024f2:	3303      	adds	r3, #3
 80024f4:	109b      	asrs	r3, r3, #2
 80024f6:	613b      	str	r3, [r7, #16]

  for ( i = 0; i < count32b; i++, dest += 4 )
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	e00b      	b.n	8002516 <USB_ReadPacket+0x3e>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	601a      	str	r2, [r3, #0]
  for ( i = 0; i < count32b; i++, dest += 4 )
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3301      	adds	r3, #1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	3304      	adds	r3, #4
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	429a      	cmp	r2, r3
 800251c:	d3ef      	bcc.n	80024fe <USB_ReadPacket+0x26>

  }
  return ((void *)dest);
 800251e:	68bb      	ldr	r3, [r7, #8]
}
 8002520:	4618      	mov	r0, r3
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t v = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]

  v = USBx->GINTSTS;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4013      	ands	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
  return v;
 8002548:	68fb      	ldr	r3, [r7, #12]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0301 	and.w	r3, r3, #1
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	460b      	mov	r3, r1
 800257c:	70fb      	strb	r3, [r7, #3]
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002584:	461a      	mov	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800259a:	4619      	mov	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	78fb      	ldrb	r3, [r7, #3]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

  if (freq ==  HCFG_48_MHZ)
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d107      	bne.n	80025c4 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = (uint32_t)48000;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025ba:	461a      	mov	r2, r3
 80025bc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80025c0:	6053      	str	r3, [r2, #4]
 80025c2:	e009      	b.n	80025d8 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq ==  HCFG_6_MHZ)
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d106      	bne.n	80025d8 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = (uint32_t)6000;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025d0:	461a      	mov	r2, r3
 80025d2:	f241 7370 	movw	r3, #6000	; 0x1770
 80025d6:	6053      	str	r3, [r2, #4]
  }
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	60fb      	str	r3, [r7, #12]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002602:	60fb      	str	r3, [r7, #12]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0 ) && (state == 1 ))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <USB_DriveVbus+0x3e>
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d107      	bne.n	8002624 <USB_DriveVbus+0x3e>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002622:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0 ))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800262e:	d10a      	bne.n	8002646 <USB_DriveVbus+0x60>
 8002630:	78fb      	ldrb	r3, [r7, #3]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d107      	bne.n	8002646 <USB_DriveVbus+0x60>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800263c:	461a      	mov	r2, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002644:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  return ((USBx_HOST->HAINT) & 0xFFFF);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	b29b      	uxth	r3, r3
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
 8002672:	b480      	push	{r7}
 8002674:	b085      	sub	sp, #20
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	70fb      	strb	r3, [r7, #3]
  uint32_t count = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]

  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0c9b      	lsrs	r3, r3, #18
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <USB_HC_Halt+0x40>
     (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	0c9b      	lsrs	r3, r3, #18
 80026aa:	f003 0303 	and.w	r3, r3, #3
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d170      	bne.n	8002794 <USB_HC_Halt+0x122>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80026b2:	78fb      	ldrb	r3, [r7, #3]
 80026b4:	015a      	lsls	r2, r3, #5
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026be:	4619      	mov	r1, r3
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80026d2:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d146      	bne.n	800276c <USB_HC_Halt+0xfa>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ea:	4619      	mov	r1, r3
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026fe:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270c:	4619      	mov	r1, r3
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002720:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272e:	4619      	mov	r1, r3
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002742:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	3301      	adds	r3, #1
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002750:	d81e      	bhi.n	8002790 <USB_HC_Halt+0x11e>
        {
          break;
        }
      }
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002768:	d0ec      	beq.n	8002744 <USB_HC_Halt+0xd2>
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800276a:	e085      	b.n	8002878 <USB_HC_Halt+0x206>
    }
    else
    {
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	4619      	mov	r1, r3
 800277a:	78fb      	ldrb	r3, [r7, #3]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800278c:	600b      	str	r3, [r1, #0]
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 800278e:	e073      	b.n	8002878 <USB_HC_Halt+0x206>
          break;
 8002790:	bf00      	nop
    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 8002792:	e071      	b.n	8002878 <USB_HC_Halt+0x206>
    }
  }
  else
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	015a      	lsls	r2, r3, #5
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a0:	4619      	mov	r1, r3
 80027a2:	78fb      	ldrb	r3, [r7, #3]
 80027a4:	015a      	lsls	r2, r3, #5
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027b4:	600b      	str	r3, [r1, #0]

    if ((USBx_HOST->HPTXSTS & 0xFFFF) == 0)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d146      	bne.n	8002852 <USB_HC_Halt+0x1e0>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	4619      	mov	r1, r3
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027e4:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	4619      	mov	r1, r3
 80027f4:	78fb      	ldrb	r3, [r7, #3]
 80027f6:	015a      	lsls	r2, r3, #5
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002806:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	4619      	mov	r1, r3
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	015a      	lsls	r2, r3, #5
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002828:	600b      	str	r3, [r1, #0]
      do
      {
        if (++count > 1000)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3301      	adds	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002836:	d81e      	bhi.n	8002876 <USB_HC_Halt+0x204>
        {
          break;
        }
      }
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800284a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800284e:	d0ec      	beq.n	800282a <USB_HC_Halt+0x1b8>
 8002850:	e012      	b.n	8002878 <USB_HC_Halt+0x206>
    }
    else
    {
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	4619      	mov	r1, r3
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002872:	600b      	str	r3, [r1, #0]
 8002874:	e000      	b.n	8002878 <USB_HC_Halt+0x206>
          break;
 8002876:	bf00      	nop
    }
  }

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b086      	sub	sp, #24
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint32_t count = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
  uint32_t value;

  USB_DisableGlobalInt(USBx);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fdc7 	bl	8002426 <USB_DisableGlobalInt>

    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10);
 8002898:	2110      	movs	r1, #16
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff fdd4 	bl	8002448 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff fdf7 	bl	8002494 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]
 80028aa:	e01f      	b.n	80028ec <USB_StopHost+0x66>
  {

    value = USBx_HC(i)->HCCHAR ;
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	60fb      	str	r3, [r7, #12]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028c2:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ca:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80028d2:	60fb      	str	r3, [r7, #12]
    USBx_HC(i)->HCCHAR = value;
 80028d4:	7dfb      	ldrb	r3, [r7, #23]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	461a      	mov	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6013      	str	r3, [r2, #0]
  for (i = 0; i <= 15; i++)
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
 80028e8:	3301      	adds	r3, #1
 80028ea:	75fb      	strb	r3, [r7, #23]
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	2b0f      	cmp	r3, #15
 80028f0:	d9dc      	bls.n	80028ac <USB_StopHost+0x26>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0; i <= 15; i++)
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
 80028f6:	e034      	b.n	8002962 <USB_StopHost+0xdc>
  {
    value = USBx_HC(i)->HCCHAR ;
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	015a      	lsls	r2, r3, #5
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4413      	add	r3, r2
 8002900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]

    value |= USB_OTG_HCCHAR_CHDIS;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800290e:	60fb      	str	r3, [r7, #12]
    value |= USB_OTG_HCCHAR_CHENA;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002916:	60fb      	str	r3, [r7, #12]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800291e:	60fb      	str	r3, [r7, #12]

    USBx_HC(i)->HCCHAR = value;
 8002920:	7dfb      	ldrb	r3, [r7, #23]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	461a      	mov	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6013      	str	r3, [r2, #0]
    do
    {
      if (++count > 1000)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	3301      	adds	r3, #1
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800293e:	d80c      	bhi.n	800295a <USB_StopHost+0xd4>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002940:	7dfb      	ldrb	r3, [r7, #23]
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4413      	add	r3, r2
 8002948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002952:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002956:	d0ec      	beq.n	8002932 <USB_StopHost+0xac>
 8002958:	e000      	b.n	800295c <USB_StopHost+0xd6>
        break;
 800295a:	bf00      	nop
  for (i = 0; i <= 15; i++)
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	3301      	adds	r3, #1
 8002960:	75fb      	strb	r3, [r7, #23]
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d9c7      	bls.n	80028f8 <USB_StopHost+0x72>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFF;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800296e:	461a      	mov	r2, r3
 8002970:	f04f 33ff 	mov.w	r3, #4294967295
 8002974:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFF;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f04f 32ff 	mov.w	r2, #4294967295
 800297c:	615a      	str	r2, [r3, #20]
  USB_EnableGlobalInt(USBx);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff fd40 	bl	8002404 <USB_EnableGlobalInt>
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 33b8 	ldr.w	r3, [r3, #952]	; 0x3b8
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  USBH_HandleSof(phost);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f804 	bl	80029b2 <USBH_HandleSof>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b0a      	cmp	r3, #10
 80029c2:	d10a      	bne.n	80029da <USBH_HandleSof+0x28>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8d3 3374 	ldr.w	r3, [r3, #884]	; 0x374
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
  }
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect  (USBH_HandleTypeDef *phost)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10f      	bne.n	8002a14 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
    
    if(phost->pUser != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00e      	beq.n	8002a24 <USBH_LL_Connect+0x42>
    {    
      phost->pUser(phost, HOST_USER_CONNECTION);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	4798      	blx	r3
 8002a12:	e007      	b.n	8002a24 <USBH_LL_Connect+0x42>
    }
  } 
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <USBH_LL_Connect+0x42>
  {
    phost->gState = HOST_DEV_ATTACHED ;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2202      	movs	r2, #2
 8002a22:	701a      	strb	r2, [r3, #0]
  }
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f87c 	bl	8002b2c <osMessagePut>
#endif 
  
  return USBH_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  /*Stop Host */ 
  USBH_LL_Stop(phost);  
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f001 fc7e 	bl	8004348 <USBH_LL_Stop>
  
  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	791b      	ldrb	r3, [r3, #4]
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f839 	bl	8002aca <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	795b      	ldrb	r3, [r3, #5]
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f833 	bl	8002aca <USBH_FreePipe>
   
  phost->device.is_connected = 0; 
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
   
  if(phost->pUser != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <USBH_LL_Disconnect+0x44>
  {    
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002a7c:	2105      	movs	r1, #5
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected"); 
  
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f001 fc2e 	bl	80042e4 <USBH_LL_Start>
  
  phost->gState = HOST_DEV_DISCONNECTED;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	701a      	strb	r2, [r3, #0]
  
#if (USBH_USE_OS == 1)
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8002a94:	2200      	movs	r2, #0
 8002a96:	2101      	movs	r1, #1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f847 	bl	8002b2c <osMessagePut>
#endif 
  
  return USBH_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2102      	movs	r1, #2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 f836 	bl	8002b2c <osMessagePut>
  return USBH_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed 
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002aca:	b480      	push	{r7}
 8002acc:	b083      	sub	sp, #12
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	70fb      	strb	r3, [r7, #3]
   if(idx < 11)
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	2b0a      	cmp	r3, #10
 8002ada:	d80e      	bhi.n	8002afa <USBH_FreePipe+0x30>
   {
	 phost->Pipes[idx] &= 0x7FFF;
 8002adc:	78f8      	ldrb	r0, [r7, #3]
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	33de      	adds	r3, #222	; 0xde
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	f100 03de 	add.w	r3, r0, #222	; 0xde
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	605a      	str	r2, [r3, #4]
   }
   return USBH_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b0e:	f3ef 8305 	mrs	r3, IPSR
 8002b12:	607b      	str	r3, [r7, #4]
  return(result);
 8002b14:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf14      	ite	ne
 8002b1a:	2301      	movne	r3, #1
 8002b1c:	2300      	moveq	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <osMessagePut+0x1e>
    ticks = 1;
 8002b46:	2301      	movs	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002b4a:	f7ff ffdd 	bl	8002b08 <inHandlerMode>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d018      	beq.n	8002b86 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002b54:	f107 0210 	add.w	r2, r7, #16
 8002b58:	f107 0108 	add.w	r1, r7, #8
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fac0 	bl	80030e4 <xQueueGenericSendFromISR>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d001      	beq.n	8002b6e <osMessagePut+0x42>
      return osErrorOS;
 8002b6a:	23ff      	movs	r3, #255	; 0xff
 8002b6c:	e018      	b.n	8002ba0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d014      	beq.n	8002b9e <osMessagePut+0x72>
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <osMessagePut+0x7c>)
 8002b76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	e00b      	b.n	8002b9e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002b86:	f107 0108 	add.w	r1, r7, #8
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f9a6 	bl	8002ee0 <xQueueGenericSend>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d001      	beq.n	8002b9e <osMessagePut+0x72>
      return osErrorOS;
 8002b9a:	23ff      	movs	r3, #255	; 0xff
 8002b9c:	e000      	b.n	8002ba0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	e000ed04 	.word	0xe000ed04

08002bac <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002bb0:	f000 ff38 	bl	8003a24 <xTaskGetSchedulerState>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d001      	beq.n	8002bbe <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8002bba:	f000 f92d 	bl	8002e18 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	601a      	str	r2, [r3, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c20:	d103      	bne.n	8002c2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	e00c      	b.n	8002c44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3308      	adds	r3, #8
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e002      	b.n	8002c38 <vListInsert+0x2e>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d9f6      	bls.n	8002c32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	601a      	str	r2, [r3, #0]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6892      	ldr	r2, [r2, #8]
 8002c92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6852      	ldr	r2, [r2, #4]
 8002c9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d103      	bne.n	8002cb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	1e5a      	subs	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <pxCurrentTCBConst2>)
 8002cd2:	6819      	ldr	r1, [r3, #0]
 8002cd4:	6808      	ldr	r0, [r1, #0]
 8002cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cda:	f380 8809 	msr	PSP, r0
 8002cde:	f3bf 8f6f 	isb	sy
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f380 8811 	msr	BASEPRI, r0
 8002cea:	4770      	bx	lr
 8002cec:	f3af 8000 	nop.w

08002cf0 <pxCurrentTCBConst2>:
 8002cf0:	20000030 	.word	0x20000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop

08002cf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	b672      	cpsid	i
 8002d04:	f383 8811 	msr	BASEPRI, r3
 8002d08:	f3bf 8f6f 	isb	sy
 8002d0c:	f3bf 8f4f 	dsb	sy
 8002d10:	b662      	cpsie	i
 8002d12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002d14:	4b0f      	ldr	r3, [pc, #60]	; (8002d54 <vPortEnterCritical+0x5c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <vPortEnterCritical+0x5c>)
 8002d1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <vPortEnterCritical+0x5c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d110      	bne.n	8002d48 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <vPortEnterCritical+0x60>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00b      	beq.n	8002d48 <vPortEnterCritical+0x50>
 8002d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d34:	b672      	cpsid	i
 8002d36:	f383 8811 	msr	BASEPRI, r3
 8002d3a:	f3bf 8f6f 	isb	sy
 8002d3e:	f3bf 8f4f 	dsb	sy
 8002d42:	b662      	cpsie	i
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	e7fe      	b.n	8002d46 <vPortEnterCritical+0x4e>
	}
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	20000004 	.word	0x20000004
 8002d58:	e000ed04 	.word	0xe000ed04

08002d5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002d62:	4b12      	ldr	r3, [pc, #72]	; (8002dac <vPortExitCritical+0x50>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <vPortExitCritical+0x26>
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	b672      	cpsid	i
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	b662      	cpsie	i
 8002d7e:	607b      	str	r3, [r7, #4]
 8002d80:	e7fe      	b.n	8002d80 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <vPortExitCritical+0x50>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	4a08      	ldr	r2, [pc, #32]	; (8002dac <vPortExitCritical+0x50>)
 8002d8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002d8c:	4b07      	ldr	r3, [pc, #28]	; (8002dac <vPortExitCritical+0x50>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <vPortExitCritical+0x42>
 8002d94:	2300      	movs	r3, #0
 8002d96:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000004 	.word	0x20000004

08002db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002db0:	f3ef 8009 	mrs	r0, PSP
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <pxCurrentTCBConst>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	f01e 0f10 	tst.w	lr, #16
 8002dc0:	bf08      	it	eq
 8002dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dca:	6010      	str	r0, [r2, #0]
 8002dcc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002dd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002dd4:	b672      	cpsid	i
 8002dd6:	f380 8811 	msr	BASEPRI, r0
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	b662      	cpsie	i
 8002de4:	f000 fc58 	bl	8003698 <vTaskSwitchContext>
 8002de8:	f04f 0000 	mov.w	r0, #0
 8002dec:	f380 8811 	msr	BASEPRI, r0
 8002df0:	bc08      	pop	{r3}
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	6808      	ldr	r0, [r1, #0]
 8002df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dfa:	f01e 0f10 	tst.w	lr, #16
 8002dfe:	bf08      	it	eq
 8002e00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002e04:	f380 8809 	msr	PSP, r0
 8002e08:	f3bf 8f6f 	isb	sy
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop

08002e10 <pxCurrentTCBConst>:
 8002e10:	20000030 	.word	0x20000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop

08002e18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
	__asm volatile
 8002e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e22:	b672      	cpsid	i
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	b662      	cpsie	i
 8002e32:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002e34:	f000 fb72 	bl	800351c <xTaskIncrementTick>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e3e:	4b06      	ldr	r3, [pc, #24]	; (8002e58 <xPortSysTickHandler+0x40>)
 8002e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	2300      	movs	r3, #0
 8002e48:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	e000ed04 	.word	0xe000ed04

08002e5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002e62:	f3ef 8305 	mrs	r3, IPSR
 8002e66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	d915      	bls.n	8002e9a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002e6e:	4a18      	ldr	r2, [pc, #96]	; (8002ed0 <vPortValidateInterruptPriority+0x74>)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002e78:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <vPortValidateInterruptPriority+0x78>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	7afa      	ldrb	r2, [r7, #11]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d20b      	bcs.n	8002e9a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	b672      	cpsid	i
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	b662      	cpsie	i
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	e7fe      	b.n	8002e98 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002e9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ed8 <vPortValidateInterruptPriority+0x7c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <vPortValidateInterruptPriority+0x80>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d90b      	bls.n	8002ec2 <vPortValidateInterruptPriority+0x66>
 8002eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eae:	b672      	cpsid	i
 8002eb0:	f383 8811 	msr	BASEPRI, r3
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	b662      	cpsie	i
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	e7fe      	b.n	8002ec0 <vPortValidateInterruptPriority+0x64>
	}
 8002ec2:	bf00      	nop
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000e3f0 	.word	0xe000e3f0
 8002ed4:	20000028 	.word	0x20000028
 8002ed8:	e000ed0c 	.word	0xe000ed0c
 8002edc:	2000002c 	.word	0x2000002c

08002ee0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08e      	sub	sp, #56	; 0x38
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <xQueueGenericSend+0x34>
 8002efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f00:	b672      	cpsid	i
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	b662      	cpsie	i
 8002f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f12:	e7fe      	b.n	8002f12 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <xQueueGenericSend+0x42>
 8002f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <xQueueGenericSend+0x46>
 8002f22:	2301      	movs	r3, #1
 8002f24:	e000      	b.n	8002f28 <xQueueGenericSend+0x48>
 8002f26:	2300      	movs	r3, #0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <xQueueGenericSend+0x64>
 8002f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f30:	b672      	cpsid	i
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	b662      	cpsie	i
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
 8002f42:	e7fe      	b.n	8002f42 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d103      	bne.n	8002f52 <xQueueGenericSend+0x72>
 8002f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <xQueueGenericSend+0x76>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e000      	b.n	8002f58 <xQueueGenericSend+0x78>
 8002f56:	2300      	movs	r3, #0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10b      	bne.n	8002f74 <xQueueGenericSend+0x94>
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	b672      	cpsid	i
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	b662      	cpsie	i
 8002f70:	623b      	str	r3, [r7, #32]
 8002f72:	e7fe      	b.n	8002f72 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f74:	f000 fd56 	bl	8003a24 <xTaskGetSchedulerState>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d102      	bne.n	8002f84 <xQueueGenericSend+0xa4>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <xQueueGenericSend+0xa8>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <xQueueGenericSend+0xaa>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10b      	bne.n	8002fa6 <xQueueGenericSend+0xc6>
 8002f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f92:	b672      	cpsid	i
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	b662      	cpsie	i
 8002fa2:	61fb      	str	r3, [r7, #28]
 8002fa4:	e7fe      	b.n	8002fa4 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fa6:	f7ff fea7 	bl	8002cf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <xQueueGenericSend+0xdc>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d129      	bne.n	8003010 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fc2:	f000 f92b 	bl	800321c <prvCopyDataToQueue>
 8002fc6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d010      	beq.n	8002ff2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd2:	3324      	adds	r3, #36	; 0x24
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fc07 	bl	80037e8 <xTaskRemoveFromEventList>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fe0:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <xQueueGenericSend+0x200>)
 8002fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	f3bf 8f6f 	isb	sy
 8002ff0:	e00a      	b.n	8003008 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002ff8:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <xQueueGenericSend+0x200>)
 8002ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003008:	f7ff fea8 	bl	8002d5c <vPortExitCritical>
				return pdPASS;
 800300c:	2301      	movs	r3, #1
 800300e:	e063      	b.n	80030d8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003016:	f7ff fea1 	bl	8002d5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800301a:	2300      	movs	r3, #0
 800301c:	e05c      	b.n	80030d8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	2b00      	cmp	r3, #0
 8003022:	d106      	bne.n	8003032 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fc41 	bl	80038b0 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800302e:	2301      	movs	r3, #1
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003032:	f7ff fe93 	bl	8002d5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003036:	f000 f9c5 	bl	80033c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800303a:	f7ff fe5d 	bl	8002cf8 <vPortEnterCritical>
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003044:	b25b      	sxtb	r3, r3
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d103      	bne.n	8003054 <xQueueGenericSend+0x174>
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800305a:	b25b      	sxtb	r3, r3
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d103      	bne.n	800306a <xQueueGenericSend+0x18a>
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800306a:	f7ff fe77 	bl	8002d5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800306e:	1d3a      	adds	r2, r7, #4
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fc40 	bl	80038fc <xTaskCheckForTimeOut>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d124      	bne.n	80030cc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003084:	f000 f986 	bl	8003394 <prvIsQueueFull>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d018      	beq.n	80030c0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	3310      	adds	r3, #16
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fb80 	bl	800379c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800309c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800309e:	f000 f927 	bl	80032f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030a2:	f000 f99d 	bl	80033e0 <xTaskResumeAll>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f47f af7c 	bne.w	8002fa6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <xQueueGenericSend+0x200>)
 80030b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	e772      	b.n	8002fa6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c2:	f000 f915 	bl	80032f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030c6:	f000 f98b 	bl	80033e0 <xTaskResumeAll>
 80030ca:	e76c      	b.n	8002fa6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80030cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ce:	f000 f90f 	bl	80032f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030d2:	f000 f985 	bl	80033e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030d6:	2300      	movs	r3, #0
		}
	}
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3738      	adds	r7, #56	; 0x38
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	e000ed04 	.word	0xe000ed04

080030e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <xQueueGenericSendFromISR+0x30>
 80030fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003100:	b672      	cpsid	i
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	b662      	cpsie	i
 8003110:	627b      	str	r3, [r7, #36]	; 0x24
 8003112:	e7fe      	b.n	8003112 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <xQueueGenericSendFromISR+0x3e>
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <xQueueGenericSendFromISR+0x42>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <xQueueGenericSendFromISR+0x44>
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10b      	bne.n	8003144 <xQueueGenericSendFromISR+0x60>
 800312c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003130:	b672      	cpsid	i
 8003132:	f383 8811 	msr	BASEPRI, r3
 8003136:	f3bf 8f6f 	isb	sy
 800313a:	f3bf 8f4f 	dsb	sy
 800313e:	b662      	cpsie	i
 8003140:	623b      	str	r3, [r7, #32]
 8003142:	e7fe      	b.n	8003142 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d103      	bne.n	8003152 <xQueueGenericSendFromISR+0x6e>
 800314a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <xQueueGenericSendFromISR+0x72>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <xQueueGenericSendFromISR+0x74>
 8003156:	2300      	movs	r3, #0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10b      	bne.n	8003174 <xQueueGenericSendFromISR+0x90>
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	b672      	cpsid	i
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	b662      	cpsie	i
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e7fe      	b.n	8003172 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003174:	f7ff fe72 	bl	8002e5c <vPortValidateInterruptPriority>
	__asm volatile
 8003178:	f3ef 8211 	mrs	r2, BASEPRI
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	b672      	cpsid	i
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	b662      	cpsie	i
 8003190:	61ba      	str	r2, [r7, #24]
 8003192:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003194:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003196:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d302      	bcc.n	80031aa <xQueueGenericSendFromISR+0xc6>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d12c      	bne.n	8003204 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ba:	f000 f82f 	bl	800321c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80031be:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	d112      	bne.n	80031ee <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d016      	beq.n	80031fe <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	3324      	adds	r3, #36	; 0x24
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fb07 	bl	80037e8 <xTaskRemoveFromEventList>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00b      	beq.n	80031fe <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	e007      	b.n	80031fe <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031f2:	3301      	adds	r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	b25a      	sxtb	r2, r3
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031fe:	2301      	movs	r3, #1
 8003200:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003202:	e001      	b.n	8003208 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003204:	2300      	movs	r3, #0
 8003206:	637b      	str	r3, [r7, #52]	; 0x34
 8003208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003214:	4618      	mov	r0, r3
 8003216:	3738      	adds	r7, #56	; 0x38
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10d      	bne.n	8003256 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d14d      	bne.n	80032de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fc0a 	bl	8003a60 <xTaskPriorityDisinherit>
 800324c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	605a      	str	r2, [r3, #4]
 8003254:	e043      	b.n	80032de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d119      	bne.n	8003290 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6898      	ldr	r0, [r3, #8]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	461a      	mov	r2, r3
 8003266:	68b9      	ldr	r1, [r7, #8]
 8003268:	f001 f8ee 	bl	8004448 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	441a      	add	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	429a      	cmp	r2, r3
 8003284:	d32b      	bcc.n	80032de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	e026      	b.n	80032de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	68d8      	ldr	r0, [r3, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003298:	461a      	mov	r2, r3
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	f001 f8d4 	bl	8004448 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	425b      	negs	r3, r3
 80032aa:	441a      	add	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d207      	bcs.n	80032cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c4:	425b      	negs	r3, r3
 80032c6:	441a      	add	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d105      	bne.n	80032de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	3b01      	subs	r3, #1
 80032dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80032e6:	697b      	ldr	r3, [r7, #20]
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032f8:	f7ff fcfe 	bl	8002cf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003302:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003304:	e011      	b.n	800332a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	2b00      	cmp	r3, #0
 800330c:	d012      	beq.n	8003334 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3324      	adds	r3, #36	; 0x24
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fa68 	bl	80037e8 <xTaskRemoveFromEventList>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800331e:	f000 fb4f 	bl	80039c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	3b01      	subs	r3, #1
 8003326:	b2db      	uxtb	r3, r3
 8003328:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800332a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332e:	2b00      	cmp	r3, #0
 8003330:	dce9      	bgt.n	8003306 <prvUnlockQueue+0x16>
 8003332:	e000      	b.n	8003336 <prvUnlockQueue+0x46>
					break;
 8003334:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	22ff      	movs	r2, #255	; 0xff
 800333a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800333e:	f7ff fd0d 	bl	8002d5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003342:	f7ff fcd9 	bl	8002cf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800334c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800334e:	e011      	b.n	8003374 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d012      	beq.n	800337e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3310      	adds	r3, #16
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fa43 	bl	80037e8 <xTaskRemoveFromEventList>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003368:	f000 fb2a 	bl	80039c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800336c:	7bbb      	ldrb	r3, [r7, #14]
 800336e:	3b01      	subs	r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003374:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003378:	2b00      	cmp	r3, #0
 800337a:	dce9      	bgt.n	8003350 <prvUnlockQueue+0x60>
 800337c:	e000      	b.n	8003380 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800337e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	22ff      	movs	r2, #255	; 0xff
 8003384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003388:	f7ff fce8 	bl	8002d5c <vPortExitCritical>
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800339c:	f7ff fcac 	bl	8002cf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d102      	bne.n	80033b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033ac:	2301      	movs	r3, #1
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	e001      	b.n	80033b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033b6:	f7ff fcd1 	bl	8002d5c <vPortExitCritical>

	return xReturn;
 80033ba:	68fb      	ldr	r3, [r7, #12]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80033c8:	4b04      	ldr	r3, [pc, #16]	; (80033dc <vTaskSuspendAll+0x18>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3301      	adds	r3, #1
 80033ce:	4a03      	ldr	r2, [pc, #12]	; (80033dc <vTaskSuspendAll+0x18>)
 80033d0:	6013      	str	r3, [r2, #0]
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	20000110 	.word	0x20000110

080033e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033ee:	4b42      	ldr	r3, [pc, #264]	; (80034f8 <xTaskResumeAll+0x118>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10b      	bne.n	800340e <xTaskResumeAll+0x2e>
	__asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fa:	b672      	cpsid	i
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	b662      	cpsie	i
 800340a:	603b      	str	r3, [r7, #0]
 800340c:	e7fe      	b.n	800340c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800340e:	f7ff fc73 	bl	8002cf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003412:	4b39      	ldr	r3, [pc, #228]	; (80034f8 <xTaskResumeAll+0x118>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3b01      	subs	r3, #1
 8003418:	4a37      	ldr	r2, [pc, #220]	; (80034f8 <xTaskResumeAll+0x118>)
 800341a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800341c:	4b36      	ldr	r3, [pc, #216]	; (80034f8 <xTaskResumeAll+0x118>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d161      	bne.n	80034e8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003424:	4b35      	ldr	r3, [pc, #212]	; (80034fc <xTaskResumeAll+0x11c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d05d      	beq.n	80034e8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800342c:	e02e      	b.n	800348c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800342e:	4b34      	ldr	r3, [pc, #208]	; (8003500 <xTaskResumeAll+0x120>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3318      	adds	r3, #24
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fc1e 	bl	8002c7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3304      	adds	r3, #4
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fc19 	bl	8002c7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	2201      	movs	r2, #1
 8003450:	409a      	lsls	r2, r3
 8003452:	4b2c      	ldr	r3, [pc, #176]	; (8003504 <xTaskResumeAll+0x124>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4313      	orrs	r3, r2
 8003458:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <xTaskResumeAll+0x124>)
 800345a:	6013      	str	r3, [r2, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4a27      	ldr	r2, [pc, #156]	; (8003508 <xTaskResumeAll+0x128>)
 800346a:	441a      	add	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3304      	adds	r3, #4
 8003470:	4619      	mov	r1, r3
 8003472:	4610      	mov	r0, r2
 8003474:	f7ff fba5 	bl	8002bc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347c:	4b23      	ldr	r3, [pc, #140]	; (800350c <xTaskResumeAll+0x12c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003486:	4b22      	ldr	r3, [pc, #136]	; (8003510 <xTaskResumeAll+0x130>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800348c:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <xTaskResumeAll+0x120>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1cc      	bne.n	800342e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800349a:	f000 fa9d 	bl	80039d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800349e:	4b1d      	ldr	r3, [pc, #116]	; (8003514 <xTaskResumeAll+0x134>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d010      	beq.n	80034cc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034aa:	f000 f837 	bl	800351c <xTaskIncrementTick>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80034b4:	4b16      	ldr	r3, [pc, #88]	; (8003510 <xTaskResumeAll+0x130>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3b01      	subs	r3, #1
 80034be:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f1      	bne.n	80034aa <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <xTaskResumeAll+0x134>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <xTaskResumeAll+0x130>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034d4:	2301      	movs	r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <xTaskResumeAll+0x138>)
 80034da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034e8:	f7ff fc38 	bl	8002d5c <vPortExitCritical>

	return xAlreadyYielded;
 80034ec:	68bb      	ldr	r3, [r7, #8]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000110 	.word	0x20000110
 80034fc:	200000f0 	.word	0x200000f0
 8003500:	200000c8 	.word	0x200000c8
 8003504:	200000f8 	.word	0x200000f8
 8003508:	20000034 	.word	0x20000034
 800350c:	20000030 	.word	0x20000030
 8003510:	20000104 	.word	0x20000104
 8003514:	20000100 	.word	0x20000100
 8003518:	e000ed04 	.word	0xe000ed04

0800351c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003526:	4b51      	ldr	r3, [pc, #324]	; (800366c <xTaskIncrementTick+0x150>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 808e 	bne.w	800364c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8003530:	4b4f      	ldr	r3, [pc, #316]	; (8003670 <xTaskIncrementTick+0x154>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3301      	adds	r3, #1
 8003536:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003538:	4a4d      	ldr	r2, [pc, #308]	; (8003670 <xTaskIncrementTick+0x154>)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d121      	bne.n	8003588 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003544:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <xTaskIncrementTick+0x158>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <xTaskIncrementTick+0x4a>
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	b672      	cpsid	i
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	b662      	cpsie	i
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	e7fe      	b.n	8003564 <xTaskIncrementTick+0x48>
 8003566:	4b43      	ldr	r3, [pc, #268]	; (8003674 <xTaskIncrementTick+0x158>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	4b42      	ldr	r3, [pc, #264]	; (8003678 <xTaskIncrementTick+0x15c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a40      	ldr	r2, [pc, #256]	; (8003674 <xTaskIncrementTick+0x158>)
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4a40      	ldr	r2, [pc, #256]	; (8003678 <xTaskIncrementTick+0x15c>)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b40      	ldr	r3, [pc, #256]	; (800367c <xTaskIncrementTick+0x160>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	4a3e      	ldr	r2, [pc, #248]	; (800367c <xTaskIncrementTick+0x160>)
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	f000 fa28 	bl	80039d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003588:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <xTaskIncrementTick+0x164>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	429a      	cmp	r2, r3
 8003590:	d34d      	bcc.n	800362e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <xTaskIncrementTick+0x158>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <xTaskIncrementTick+0x84>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <xTaskIncrementTick+0x86>
 80035a0:	2300      	movs	r3, #0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d004      	beq.n	80035b0 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a6:	4b36      	ldr	r3, [pc, #216]	; (8003680 <xTaskIncrementTick+0x164>)
 80035a8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ac:	601a      	str	r2, [r3, #0]
					break;
 80035ae:	e03e      	b.n	800362e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035b0:	4b30      	ldr	r3, [pc, #192]	; (8003674 <xTaskIncrementTick+0x158>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d203      	bcs.n	80035d0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035c8:	4a2d      	ldr	r2, [pc, #180]	; (8003680 <xTaskIncrementTick+0x164>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6013      	str	r3, [r2, #0]
						break;
 80035ce:	e02e      	b.n	800362e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fb51 	bl	8002c7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	3318      	adds	r3, #24
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fb48 	bl	8002c7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	2201      	movs	r2, #1
 80035f2:	409a      	lsls	r2, r3
 80035f4:	4b23      	ldr	r3, [pc, #140]	; (8003684 <xTaskIncrementTick+0x168>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	4a22      	ldr	r2, [pc, #136]	; (8003684 <xTaskIncrementTick+0x168>)
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4a1f      	ldr	r2, [pc, #124]	; (8003688 <xTaskIncrementTick+0x16c>)
 800360c:	441a      	add	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	3304      	adds	r3, #4
 8003612:	4619      	mov	r1, r3
 8003614:	4610      	mov	r0, r2
 8003616:	f7ff fad4 	bl	8002bc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361e:	4b1b      	ldr	r3, [pc, #108]	; (800368c <xTaskIncrementTick+0x170>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	429a      	cmp	r2, r3
 8003626:	d3b4      	bcc.n	8003592 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800362c:	e7b1      	b.n	8003592 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800362e:	4b17      	ldr	r3, [pc, #92]	; (800368c <xTaskIncrementTick+0x170>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003634:	4914      	ldr	r1, [pc, #80]	; (8003688 <xTaskIncrementTick+0x16c>)
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d907      	bls.n	8003656 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003646:	2301      	movs	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	e004      	b.n	8003656 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800364c:	4b10      	ldr	r3, [pc, #64]	; (8003690 <xTaskIncrementTick+0x174>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <xTaskIncrementTick+0x174>)
 8003654:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003656:	4b0f      	ldr	r3, [pc, #60]	; (8003694 <xTaskIncrementTick+0x178>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800365e:	2301      	movs	r3, #1
 8003660:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003662:	697b      	ldr	r3, [r7, #20]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	20000110 	.word	0x20000110
 8003670:	200000f4 	.word	0x200000f4
 8003674:	200000c0 	.word	0x200000c0
 8003678:	200000c4 	.word	0x200000c4
 800367c:	20000108 	.word	0x20000108
 8003680:	2000010c 	.word	0x2000010c
 8003684:	200000f8 	.word	0x200000f8
 8003688:	20000034 	.word	0x20000034
 800368c:	20000030 	.word	0x20000030
 8003690:	20000100 	.word	0x20000100
 8003694:	20000104 	.word	0x20000104

08003698 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800369e:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <vTaskSwitchContext+0xf0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036a6:	4b39      	ldr	r3, [pc, #228]	; (800378c <vTaskSwitchContext+0xf4>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036ac:	e067      	b.n	800377e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 80036ae:	4b37      	ldr	r3, [pc, #220]	; (800378c <vTaskSwitchContext+0xf4>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80036b4:	4b36      	ldr	r3, [pc, #216]	; (8003790 <vTaskSwitchContext+0xf8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d111      	bne.n	80036f0 <vTaskSwitchContext+0x58>
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	3304      	adds	r3, #4
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d10b      	bne.n	80036f0 <vTaskSwitchContext+0x58>
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	3308      	adds	r3, #8
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d105      	bne.n	80036f0 <vTaskSwitchContext+0x58>
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	330c      	adds	r3, #12
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d008      	beq.n	8003702 <vTaskSwitchContext+0x6a>
 80036f0:	4b27      	ldr	r3, [pc, #156]	; (8003790 <vTaskSwitchContext+0xf8>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4b26      	ldr	r3, [pc, #152]	; (8003790 <vTaskSwitchContext+0xf8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3334      	adds	r3, #52	; 0x34
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f000 fa9d 	bl	8003c3c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <vTaskSwitchContext+0xfc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003710:	7afb      	ldrb	r3, [r7, #11]
 8003712:	f1c3 031f 	rsb	r3, r3, #31
 8003716:	617b      	str	r3, [r7, #20]
 8003718:	491f      	ldr	r1, [pc, #124]	; (8003798 <vTaskSwitchContext+0x100>)
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10b      	bne.n	8003744 <vTaskSwitchContext+0xac>
	__asm volatile
 800372c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003730:	b672      	cpsid	i
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	b662      	cpsie	i
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	e7fe      	b.n	8003742 <vTaskSwitchContext+0xaa>
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4a12      	ldr	r2, [pc, #72]	; (8003798 <vTaskSwitchContext+0x100>)
 8003750:	4413      	add	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	3308      	adds	r3, #8
 8003766:	429a      	cmp	r2, r3
 8003768:	d104      	bne.n	8003774 <vTaskSwitchContext+0xdc>
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	4a05      	ldr	r2, [pc, #20]	; (8003790 <vTaskSwitchContext+0xf8>)
 800377c:	6013      	str	r3, [r2, #0]
}
 800377e:	bf00      	nop
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000110 	.word	0x20000110
 800378c:	20000104 	.word	0x20000104
 8003790:	20000030 	.word	0x20000030
 8003794:	200000f8 	.word	0x200000f8
 8003798:	20000034 	.word	0x20000034

0800379c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10b      	bne.n	80037c4 <vTaskPlaceOnEventList+0x28>
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	b672      	cpsid	i
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	b662      	cpsie	i
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	e7fe      	b.n	80037c2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <vTaskPlaceOnEventList+0x48>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3318      	adds	r3, #24
 80037ca:	4619      	mov	r1, r3
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff fa1c 	bl	8002c0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037d2:	2101      	movs	r1, #1
 80037d4:	6838      	ldr	r0, [r7, #0]
 80037d6:	f000 f9cb 	bl	8003b70 <prvAddCurrentTaskToDelayedList>
}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000030 	.word	0x20000030

080037e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <xTaskRemoveFromEventList+0x2e>
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	b672      	cpsid	i
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	b662      	cpsie	i
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	e7fe      	b.n	8003814 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	3318      	adds	r3, #24
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fa2e 	bl	8002c7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003820:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <xTaskRemoveFromEventList+0xb0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11c      	bne.n	8003862 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	3304      	adds	r3, #4
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fa25 	bl	8002c7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	2201      	movs	r2, #1
 8003838:	409a      	lsls	r2, r3
 800383a:	4b18      	ldr	r3, [pc, #96]	; (800389c <xTaskRemoveFromEventList+0xb4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4313      	orrs	r3, r2
 8003840:	4a16      	ldr	r2, [pc, #88]	; (800389c <xTaskRemoveFromEventList+0xb4>)
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <xTaskRemoveFromEventList+0xb8>)
 8003852:	441a      	add	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f7ff f9b1 	bl	8002bc2 <vListInsertEnd>
 8003860:	e005      	b.n	800386e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	3318      	adds	r3, #24
 8003866:	4619      	mov	r1, r3
 8003868:	480e      	ldr	r0, [pc, #56]	; (80038a4 <xTaskRemoveFromEventList+0xbc>)
 800386a:	f7ff f9aa 	bl	8002bc2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003872:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <xTaskRemoveFromEventList+0xc0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	429a      	cmp	r2, r3
 800387a:	d905      	bls.n	8003888 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800387c:	2301      	movs	r3, #1
 800387e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003880:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <xTaskRemoveFromEventList+0xc4>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	e001      	b.n	800388c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800388c:	697b      	ldr	r3, [r7, #20]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	20000110 	.word	0x20000110
 800389c:	200000f8 	.word	0x200000f8
 80038a0:	20000034 	.word	0x20000034
 80038a4:	200000c8 	.word	0x200000c8
 80038a8:	20000030 	.word	0x20000030
 80038ac:	20000104 	.word	0x20000104

080038b0 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10b      	bne.n	80038d6 <vTaskSetTimeOutState+0x26>
 80038be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c2:	b672      	cpsid	i
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	b662      	cpsie	i
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	e7fe      	b.n	80038d4 <vTaskSetTimeOutState+0x24>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038d6:	4b07      	ldr	r3, [pc, #28]	; (80038f4 <vTaskSetTimeOutState+0x44>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <vTaskSetTimeOutState+0x48>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	605a      	str	r2, [r3, #4]
}
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000108 	.word	0x20000108
 80038f8:	200000f4 	.word	0x200000f4

080038fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10b      	bne.n	8003924 <xTaskCheckForTimeOut+0x28>
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	b672      	cpsid	i
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	b662      	cpsie	i
 8003920:	60fb      	str	r3, [r7, #12]
 8003922:	e7fe      	b.n	8003922 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <xTaskCheckForTimeOut+0x46>
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	b672      	cpsid	i
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	b662      	cpsie	i
 800393e:	60bb      	str	r3, [r7, #8]
 8003940:	e7fe      	b.n	8003940 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8003942:	f7ff f9d9 	bl	8002cf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003946:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <xTaskCheckForTimeOut+0xbc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d102      	bne.n	800395c <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003956:	2300      	movs	r3, #0
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	e026      	b.n	80039aa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b16      	ldr	r3, [pc, #88]	; (80039bc <xTaskCheckForTimeOut+0xc0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d007      	beq.n	8003978 <xTaskCheckForTimeOut+0x7c>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	429a      	cmp	r2, r3
 8003970:	d802      	bhi.n	8003978 <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003972:	2301      	movs	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e018      	b.n	80039aa <xTaskCheckForTimeOut+0xae>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	1ad2      	subs	r2, r2, r3
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	429a      	cmp	r2, r3
 8003986:	d20e      	bcs.n	80039a6 <xTaskCheckForTimeOut+0xaa>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1acb      	subs	r3, r1, r3
 8003994:	441a      	add	r2, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff ff88 	bl	80038b0 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	e001      	b.n	80039aa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			xReturn = pdTRUE;
 80039a6:	2301      	movs	r3, #1
 80039a8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80039aa:	f7ff f9d7 	bl	8002d5c <vPortExitCritical>

	return xReturn;
 80039ae:	697b      	ldr	r3, [r7, #20]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	200000f4 	.word	0x200000f4
 80039bc:	20000108 	.word	0x20000108

080039c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <vTaskMissedYield+0x14>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	20000104 	.word	0x20000104

080039d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <prvResetNextTaskUnblockTime+0x44>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <prvResetNextTaskUnblockTime+0x14>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <prvResetNextTaskUnblockTime+0x16>
 80039ec:	2300      	movs	r3, #0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d004      	beq.n	80039fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <prvResetNextTaskUnblockTime+0x48>)
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295
 80039f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80039fa:	e008      	b.n	8003a0e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <prvResetNextTaskUnblockTime+0x44>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4a05      	ldr	r2, [pc, #20]	; (8003a20 <prvResetNextTaskUnblockTime+0x48>)
 8003a0c:	6013      	str	r3, [r2, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	200000c0 	.word	0x200000c0
 8003a20:	2000010c 	.word	0x2000010c

08003a24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <xTaskGetSchedulerState+0x34>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a32:	2301      	movs	r3, #1
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	e008      	b.n	8003a4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a38:	4b08      	ldr	r3, [pc, #32]	; (8003a5c <xTaskGetSchedulerState+0x38>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a40:	2302      	movs	r3, #2
 8003a42:	607b      	str	r3, [r7, #4]
 8003a44:	e001      	b.n	8003a4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a46:	2300      	movs	r3, #0
 8003a48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a4a:	687b      	ldr	r3, [r7, #4]
	}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	200000fc 	.word	0x200000fc
 8003a5c:	20000110 	.word	0x20000110

08003a60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d070      	beq.n	8003b58 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a76:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <xTaskPriorityDisinherit+0x104>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d00b      	beq.n	8003a98 <xTaskPriorityDisinherit+0x38>
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	b672      	cpsid	i
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	b662      	cpsie	i
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	e7fe      	b.n	8003a96 <xTaskPriorityDisinherit+0x36>

			configASSERT( pxTCB->uxMutexesHeld );
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <xTaskPriorityDisinherit+0x58>
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	b672      	cpsid	i
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	b662      	cpsie	i
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	e7fe      	b.n	8003ab6 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abc:	1e5a      	subs	r2, r3, #1
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d044      	beq.n	8003b58 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d140      	bne.n	8003b58 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff f8ce 	bl	8002c7c <uxListRemove>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d115      	bne.n	8003b12 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aea:	491f      	ldr	r1, [pc, #124]	; (8003b68 <xTaskPriorityDisinherit+0x108>)
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <xTaskPriorityDisinherit+0xb2>
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	2201      	movs	r2, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	43da      	mvns	r2, r3
 8003b08:	4b18      	ldr	r3, [pc, #96]	; (8003b6c <xTaskPriorityDisinherit+0x10c>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	4a17      	ldr	r2, [pc, #92]	; (8003b6c <xTaskPriorityDisinherit+0x10c>)
 8003b10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	f1c3 0207 	rsb	r2, r3, #7
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	409a      	lsls	r2, r3
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <xTaskPriorityDisinherit+0x10c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	4a0d      	ldr	r2, [pc, #52]	; (8003b6c <xTaskPriorityDisinherit+0x10c>)
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4a08      	ldr	r2, [pc, #32]	; (8003b68 <xTaskPriorityDisinherit+0x108>)
 8003b46:	441a      	add	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f7ff f837 	bl	8002bc2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b54:	2301      	movs	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b58:	697b      	ldr	r3, [r7, #20]
	}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000030 	.word	0x20000030
 8003b68:	20000034 	.word	0x20000034
 8003b6c:	200000f8 	.word	0x200000f8

08003b70 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b7a:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b80:	4b28      	ldr	r3, [pc, #160]	; (8003c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3304      	adds	r3, #4
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7ff f878 	bl	8002c7c <uxListRemove>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10b      	bne.n	8003baa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	2201      	movs	r2, #1
 8003b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9e:	43da      	mvns	r2, r3
 8003ba0:	4b21      	ldr	r3, [pc, #132]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	4a20      	ldr	r2, [pc, #128]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ba8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d10a      	bne.n	8003bc8 <prvAddCurrentTaskToDelayedList+0x58>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bb8:	4b1a      	ldr	r3, [pc, #104]	; (8003c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	481a      	ldr	r0, [pc, #104]	; (8003c2c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003bc2:	f7fe fffe 	bl	8002bc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bc6:	e026      	b.n	8003c16 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bd0:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d209      	bcs.n	8003bf4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3304      	adds	r3, #4
 8003bea:	4619      	mov	r1, r3
 8003bec:	4610      	mov	r0, r2
 8003bee:	f7ff f80c 	bl	8002c0a <vListInsert>
}
 8003bf2:	e010      	b.n	8003c16 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f7ff f802 	bl	8002c0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68ba      	ldr	r2, [r7, #8]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d202      	bcs.n	8003c16 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c10:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6013      	str	r3, [r2, #0]
}
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	200000f4 	.word	0x200000f4
 8003c24:	20000030 	.word	0x20000030
 8003c28:	200000f8 	.word	0x200000f8
 8003c2c:	200000dc 	.word	0x200000dc
 8003c30:	200000c4 	.word	0x200000c4
 8003c34:	200000c0 	.word	0x200000c0
 8003c38:	2000010c 	.word	0x2000010c

08003c3c <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
	...

08003c54 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	int c=0x00;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c5e:	f7fc fad7 	bl	8000210 <HAL_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8003c62:	f000 f80b 	bl	8003c7c <MX_GPIO_Init>

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8003c66:	2102      	movs	r1, #2
 8003c68:	4803      	ldr	r0, [pc, #12]	; (8003c78 <main+0x24>)
 8003c6a:	f7fc fed0 	bl	8000a0e <HAL_GPIO_TogglePin>

	  HAL_Delay(500);
 8003c6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c72:	f7fc fafb 	bl	800026c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 8003c76:	e7f6      	b.n	8003c66 <main+0x12>
 8003c78:	40022000 	.word	0x40022000

08003c7c <MX_GPIO_Init>:
        * EXTI
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
static void MX_GPIO_Init(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b090      	sub	sp, #64	; 0x40
 8003c80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c82:	4aaf      	ldr	r2, [pc, #700]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003c84:	4bae      	ldr	r3, [pc, #696]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	f043 0310 	orr.w	r3, r3, #16
 8003c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c8e:	4bac      	ldr	r3, [pc, #688]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c9a:	4aa9      	ldr	r2, [pc, #676]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003c9c:	4ba8      	ldr	r3, [pc, #672]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ca6:	4ba6      	ldr	r3, [pc, #664]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb2:	4aa3      	ldr	r2, [pc, #652]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003cb4:	4ba2      	ldr	r3, [pc, #648]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	f043 0302 	orr.w	r3, r3, #2
 8003cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cbe:	4ba0      	ldr	r3, [pc, #640]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	623b      	str	r3, [r7, #32]
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cca:	4a9d      	ldr	r2, [pc, #628]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003ccc:	4b9c      	ldr	r3, [pc, #624]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f043 0308 	orr.w	r3, r3, #8
 8003cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cd6:	4b9a      	ldr	r3, [pc, #616]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	61fb      	str	r3, [r7, #28]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ce2:	4a97      	ldr	r2, [pc, #604]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003ce4:	4b96      	ldr	r3, [pc, #600]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	f043 0304 	orr.w	r3, r3, #4
 8003cec:	6313      	str	r3, [r2, #48]	; 0x30
 8003cee:	4b94      	ldr	r3, [pc, #592]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfa:	4a91      	ldr	r2, [pc, #580]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003cfc:	4b90      	ldr	r3, [pc, #576]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30
 8003d06:	4b8e      	ldr	r3, [pc, #568]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003d12:	4a8b      	ldr	r2, [pc, #556]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d14:	4b8a      	ldr	r3, [pc, #552]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1e:	4b88      	ldr	r3, [pc, #544]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d2a:	4a85      	ldr	r2, [pc, #532]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d2c:	4b84      	ldr	r3, [pc, #528]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d34:	6313      	str	r3, [r2, #48]	; 0x30
 8003d36:	4b82      	ldr	r3, [pc, #520]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003d42:	4a7f      	ldr	r2, [pc, #508]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d44:	4b7e      	ldr	r3, [pc, #504]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d4e:	4b7c      	ldr	r3, [pc, #496]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d5a:	4a79      	ldr	r2, [pc, #484]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d5c:	4b78      	ldr	r3, [pc, #480]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	f043 0320 	orr.w	r3, r3, #32
 8003d64:	6313      	str	r3, [r2, #48]	; 0x30
 8003d66:	4b76      	ldr	r3, [pc, #472]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	607b      	str	r3, [r7, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d72:	4a73      	ldr	r2, [pc, #460]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d74:	4b72      	ldr	r3, [pc, #456]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d7e:	4b70      	ldr	r3, [pc, #448]	; (8003f40 <MX_GPIO_Init+0x2c4>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d86:	603b      	str	r3, [r7, #0]
 8003d88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	2120      	movs	r1, #32
 8003d8e:	486d      	ldr	r0, [pc, #436]	; (8003f44 <MX_GPIO_Init+0x2c8>)
 8003d90:	f7fc fe24 	bl	80009dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8003d94:	2200      	movs	r2, #0
 8003d96:	210c      	movs	r1, #12
 8003d98:	486b      	ldr	r0, [pc, #428]	; (8003f48 <MX_GPIO_Init+0x2cc>)
 8003d9a:	f7fc fe1f 	bl	80009dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8003d9e:	2201      	movs	r2, #1
 8003da0:	2108      	movs	r1, #8
 8003da2:	486a      	ldr	r0, [pc, #424]	; (8003f4c <MX_GPIO_Init+0x2d0>)
 8003da4:	f7fc fe1a 	bl	80009dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LD1_Pin|LCD_DISP_Pin, GPIO_PIN_SET);
 8003da8:	2201      	movs	r2, #1
 8003daa:	f241 0102 	movw	r1, #4098	; 0x1002
 8003dae:	4866      	ldr	r0, [pc, #408]	; (8003f48 <MX_GPIO_Init+0x2cc>)
 8003db0:	f7fc fe14 	bl	80009dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8003db4:	2200      	movs	r2, #0
 8003db6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003dba:	4865      	ldr	r0, [pc, #404]	; (8003f50 <MX_GPIO_Init+0x2d4>)
 8003dbc:	f7fc fe0e 	bl	80009dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	21c8      	movs	r1, #200	; 0xc8
 8003dc4:	4863      	ldr	r0, [pc, #396]	; (8003f54 <MX_GPIO_Init+0x2d8>)
 8003dc6:	f7fc fe09 	bl	80009dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8003dca:	2308      	movs	r3, #8
 8003dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dda:	4619      	mov	r1, r3
 8003ddc:	485e      	ldr	r0, [pc, #376]	; (8003f58 <MX_GPIO_Init+0x2dc>)
 8003dde:	f7fc fc53 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8003de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003de8:	2300      	movs	r3, #0
 8003dea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003df0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003df4:	4619      	mov	r1, r3
 8003df6:	4859      	ldr	r0, [pc, #356]	; (8003f5c <MX_GPIO_Init+0x2e0>)
 8003df8:	f7fc fc46 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8003dfc:	2340      	movs	r3, #64	; 0x40
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003e00:	4b57      	ldr	r3, [pc, #348]	; (8003f60 <MX_GPIO_Init+0x2e4>)
 8003e02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8003e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	484d      	ldr	r0, [pc, #308]	; (8003f44 <MX_GPIO_Init+0x2c8>)
 8003e10:	f7fc fc3a 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003e14:	2320      	movs	r3, #32
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e20:	2300      	movs	r3, #0
 8003e22:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4846      	ldr	r0, [pc, #280]	; (8003f44 <MX_GPIO_Init+0x2c8>)
 8003e2c:	f7fc fc2c 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LD1_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LD1_Pin|LCD_DISP_Pin;
 8003e30:	f241 030e 	movw	r3, #4110	; 0x100e
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e36:	2301      	movs	r3, #1
 8003e38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003e42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e46:	4619      	mov	r1, r3
 8003e48:	483f      	ldr	r0, [pc, #252]	; (8003f48 <MX_GPIO_Init+0x2cc>)
 8003e4a:	f7fc fc1d 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8003e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e54:	2300      	movs	r3, #0
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8003e5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e60:	4619      	mov	r1, r3
 8003e62:	4840      	ldr	r0, [pc, #256]	; (8003f64 <MX_GPIO_Init+0x2e8>)
 8003e64:	f7fc fc10 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8003e68:	2308      	movs	r3, #8
 8003e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e74:	2300      	movs	r3, #0
 8003e76:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8003e78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4833      	ldr	r0, [pc, #204]	; (8003f4c <MX_GPIO_Init+0x2d0>)
 8003e80:	f7fc fc02 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003e84:	2310      	movs	r3, #16
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e94:	4619      	mov	r1, r3
 8003e96:	482b      	ldr	r0, [pc, #172]	; (8003f44 <MX_GPIO_Init+0x2c8>)
 8003e98:	f7fc fbf6 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8003e9c:	f248 0304 	movw	r3, #32772	; 0x8004
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4827      	ldr	r0, [pc, #156]	; (8003f50 <MX_GPIO_Init+0x2d4>)
 8003eb2:	f7fc fbe9 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8003eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8003ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4820      	ldr	r0, [pc, #128]	; (8003f50 <MX_GPIO_Init+0x2d4>)
 8003ed0:	f7fc fbda 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8003ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003eda:	4b21      	ldr	r3, [pc, #132]	; (8003f60 <MX_GPIO_Init+0x2e4>)
 8003edc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8003ee2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4817      	ldr	r0, [pc, #92]	; (8003f48 <MX_GPIO_Init+0x2cc>)
 8003eea:	f7fc fbcd 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8003eee:	23c8      	movs	r3, #200	; 0xc8
 8003ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003efa:	2300      	movs	r3, #0
 8003efc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f02:	4619      	mov	r1, r3
 8003f04:	4813      	ldr	r0, [pc, #76]	; (8003f54 <MX_GPIO_Init+0x2d8>)
 8003f06:	f7fc fbbf 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8003f0a:	2304      	movs	r3, #4
 8003f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8003f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	480d      	ldr	r0, [pc, #52]	; (8003f54 <MX_GPIO_Init+0x2d8>)
 8003f1e:	f7fc fbb3 	bl	8000688 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003f22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f30:	2300      	movs	r3, #0
 8003f32:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f34:	2305      	movs	r3, #5
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	e013      	b.n	8003f68 <MX_GPIO_Init+0x2ec>
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40020c00 	.word	0x40020c00
 8003f48:	40022000 	.word	0x40022000
 8003f4c:	40022800 	.word	0x40022800
 8003f50:	40021c00 	.word	0x40021c00
 8003f54:	40021800 	.word	0x40021800
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40022400 	.word	0x40022400
 8003f60:	10120000 	.word	0x10120000
 8003f64:	40020800 	.word	0x40020800
 8003f68:	4803      	ldr	r0, [pc, #12]	; (8003f78 <MX_GPIO_Init+0x2fc>)
 8003f6a:	f7fc fb8d 	bl	8000688 <HAL_GPIO_Init>

}
 8003f6e:	bf00      	nop
 8003f70:	3740      	adds	r7, #64	; 0x40
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40020400 	.word	0x40020400

08003f7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d101      	bne.n	8003f92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003f8e:	f7fc f94d 	bl	800022c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40001000 	.word	0x40001000

08003fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa4:	2003      	movs	r0, #3
 8003fa6:	f7fc fa2a 	bl	80003fe <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003faa:	2200      	movs	r2, #0
 8003fac:	2100      	movs	r1, #0
 8003fae:	f06f 000b 	mvn.w	r0, #11
 8003fb2:	f7fc fa2f 	bl	8000414 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2100      	movs	r1, #0
 8003fba:	f06f 000a 	mvn.w	r0, #10
 8003fbe:	f7fc fa29 	bl	8000414 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	f06f 0009 	mvn.w	r0, #9
 8003fca:	f7fc fa23 	bl	8000414 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	f06f 0004 	mvn.w	r0, #4
 8003fd6:	f7fc fa1d 	bl	8000414 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003fda:	2200      	movs	r2, #0
 8003fdc:	2100      	movs	r1, #0
 8003fde:	f06f 0003 	mvn.w	r0, #3
 8003fe2:	f7fc fa17 	bl	8000414 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	210f      	movs	r1, #15
 8003fea:	f06f 0001 	mvn.w	r0, #1
 8003fee:	f7fc fa11 	bl	8000414 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	210f      	movs	r1, #15
 8003ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffa:	f7fc fa0b 	bl	8000414 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ffe:	bf00      	nop
 8004000:	bd80      	pop	{r7, pc}
	...

08004004 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004004:	b480      	push	{r7}
 8004006:	b089      	sub	sp, #36	; 0x24
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a2e      	ldr	r2, [pc, #184]	; (80040cc <HAL_TIM_Base_MspInit+0xc8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d10c      	bne.n	8004030 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004016:	4a2e      	ldr	r2, [pc, #184]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004018:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	6453      	str	r3, [r2, #68]	; 0x44
 8004022:	4b2b      	ldr	r3, [pc, #172]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	61fb      	str	r3, [r7, #28]
 800402c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800402e:	e046      	b.n	80040be <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004038:	d10c      	bne.n	8004054 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800403a:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 800403c:	4b24      	ldr	r3, [pc, #144]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f043 0301 	orr.w	r3, r3, #1
 8004044:	6413      	str	r3, [r2, #64]	; 0x40
 8004046:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	69bb      	ldr	r3, [r7, #24]
}
 8004052:	e034      	b.n	80040be <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1e      	ldr	r2, [pc, #120]	; (80040d4 <HAL_TIM_Base_MspInit+0xd0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10c      	bne.n	8004078 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800405e:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004060:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	f043 0302 	orr.w	r3, r3, #2
 8004068:	6413      	str	r3, [r2, #64]	; 0x40
 800406a:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	697b      	ldr	r3, [r7, #20]
}
 8004076:	e022      	b.n	80040be <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a16      	ldr	r2, [pc, #88]	; (80040d8 <HAL_TIM_Base_MspInit+0xd4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d10c      	bne.n	800409c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004082:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004084:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004088:	f043 0308 	orr.w	r3, r3, #8
 800408c:	6413      	str	r3, [r2, #64]	; 0x40
 800408e:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]
}
 800409a:	e010      	b.n	80040be <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a0e      	ldr	r2, [pc, #56]	; (80040dc <HAL_TIM_Base_MspInit+0xd8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d10b      	bne.n	80040be <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040a6:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	f043 0302 	orr.w	r3, r3, #2
 80040b0:	6453      	str	r3, [r2, #68]	; 0x44
 80040b2:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <HAL_TIM_Base_MspInit+0xcc>)
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
}
 80040be:	bf00      	nop
 80040c0:	3724      	adds	r7, #36	; 0x24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40010400 	.word	0x40010400

080040e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08c      	sub	sp, #48	; 0x30
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80040f0:	2200      	movs	r2, #0
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	2036      	movs	r0, #54	; 0x36
 80040f6:	f7fc f98d 	bl	8000414 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80040fa:	2036      	movs	r0, #54	; 0x36
 80040fc:	f7fc f9a6 	bl	800044c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004100:	4a1f      	ldr	r2, [pc, #124]	; (8004180 <HAL_InitTick+0xa0>)
 8004102:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <HAL_InitTick+0xa0>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f043 0310 	orr.w	r3, r3, #16
 800410a:	6413      	str	r3, [r2, #64]	; 0x40
 800410c:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <HAL_InitTick+0xa0>)
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004118:	f107 0210 	add.w	r2, r7, #16
 800411c:	f107 0314 	add.w	r3, r7, #20
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f7fd feea 	bl	8001efc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004128:	f7fd fed4 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 800412c:	4603      	mov	r3, r0
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	4a13      	ldr	r2, [pc, #76]	; (8004184 <HAL_InitTick+0xa4>)
 8004136:	fba2 2303 	umull	r2, r3, r2, r3
 800413a:	0c9b      	lsrs	r3, r3, #18
 800413c:	3b01      	subs	r3, #1
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_InitTick+0xa8>)
 8004142:	4a12      	ldr	r2, [pc, #72]	; (800418c <HAL_InitTick+0xac>)
 8004144:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8004146:	4b10      	ldr	r3, [pc, #64]	; (8004188 <HAL_InitTick+0xa8>)
 8004148:	f240 32e7 	movw	r2, #999	; 0x3e7
 800414c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800414e:	4a0e      	ldr	r2, [pc, #56]	; (8004188 <HAL_InitTick+0xa8>)
 8004150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004152:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <HAL_InitTick+0xa8>)
 8004156:	2200      	movs	r2, #0
 8004158:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_InitTick+0xa8>)
 800415c:	2200      	movs	r2, #0
 800415e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004160:	4809      	ldr	r0, [pc, #36]	; (8004188 <HAL_InitTick+0xa8>)
 8004162:	f7fd fefd 	bl	8001f60 <HAL_TIM_Base_Init>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d104      	bne.n	8004176 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800416c:	4806      	ldr	r0, [pc, #24]	; (8004188 <HAL_InitTick+0xa8>)
 800416e:	f7fd ff22 	bl	8001fb6 <HAL_TIM_Base_Start_IT>
 8004172:	4603      	mov	r3, r0
 8004174:	e000      	b.n	8004178 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
}
 8004178:	4618      	mov	r0, r3
 800417a:	3730      	adds	r7, #48	; 0x30
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40023800 	.word	0x40023800
 8004184:	431bde83 	.word	0x431bde83
 8004188:	20000b10 	.word	0x20000b10
 800418c:	40001000 	.word	0x40001000

08004190 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8004194:	f7fe fd0a 	bl	8002bac <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004198:	bf00      	nop
 800419a:	bd80      	pop	{r7, pc}

0800419c <TIM6_DAC_IRQHandler>:

/**
* @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
*/
void TIM6_DAC_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80041a0:	4802      	ldr	r0, [pc, #8]	; (80041ac <TIM6_DAC_IRQHandler+0x10>)
 80041a2:	f7fd ff23 	bl	8001fec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000b10 	.word	0x20000b10

080041b0 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80041b4:	4802      	ldr	r0, [pc, #8]	; (80041c0 <OTG_FS_IRQHandler+0x10>)
 80041b6:	f7fc fc3c 	bl	8000a32 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80041ba:	bf00      	nop
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000b50 	.word	0x20000b50

080041c4 <OTG_HS_IRQHandler>:

/**
* @brief This function handles USB On The Go HS global interrupt.
*/
void OTG_HS_IRQHandler(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80041c8:	4802      	ldr	r0, [pc, #8]	; (80041d4 <OTG_HS_IRQHandler+0x10>)
 80041ca:	f7fc fc32 	bl	8000a32 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80041ce:	bf00      	nop
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	20000620 	.word	0x20000620

080041d8 <LTDC_IRQHandler>:

/**
* @brief This function handles LTDC global interrupt.
*/
void LTDC_IRQHandler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80041dc:	4802      	ldr	r0, [pc, #8]	; (80041e8 <LTDC_IRQHandler+0x10>)
 80041de:	f7fd fda2 	bl	8001d26 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000470 	.word	0x20000470

080041ec <DMA2D_IRQHandler>:

/**
* @brief This function handles DMA2D global interrupt.
*/
void DMA2D_IRQHandler(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80041f0:	4802      	ldr	r0, [pc, #8]	; (80041fc <DMA2D_IRQHandler+0x10>)
 80041f2:	f7fc f939 	bl	8000468 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000988 	.word	0x20000988

08004200 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004204:	4a15      	ldr	r2, [pc, #84]	; (800425c <SystemInit+0x5c>)
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <SystemInit+0x5c>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004214:	4a12      	ldr	r2, [pc, #72]	; (8004260 <SystemInit+0x60>)
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <SystemInit+0x60>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004220:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <SystemInit+0x60>)
 8004222:	2200      	movs	r2, #0
 8004224:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004226:	490e      	ldr	r1, [pc, #56]	; (8004260 <SystemInit+0x60>)
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <SystemInit+0x60>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <SystemInit+0x64>)
 800422e:	4013      	ands	r3, r2
 8004230:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <SystemInit+0x60>)
 8004234:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <SystemInit+0x68>)
 8004236:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004238:	4a09      	ldr	r2, [pc, #36]	; (8004260 <SystemInit+0x60>)
 800423a:	4b09      	ldr	r3, [pc, #36]	; (8004260 <SystemInit+0x60>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004242:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004244:	4b06      	ldr	r3, [pc, #24]	; (8004260 <SystemInit+0x60>)
 8004246:	2200      	movs	r2, #0
 8004248:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800424a:	4b04      	ldr	r3, [pc, #16]	; (800425c <SystemInit+0x5c>)
 800424c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004250:	609a      	str	r2, [r3, #8]
#endif
}
 8004252:	bf00      	nop
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000ed00 	.word	0xe000ed00
 8004260:	40023800 	.word	0x40023800
 8004264:	fef6ffff 	.word	0xfef6ffff
 8004268:	24003010 	.word	0x24003010

0800426c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800427a:	4618      	mov	r0, r3
 800427c:	f7fe fb87 	bl	800298e <USBH_LL_IncTimer>
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe fba3 	bl	80029e2 <USBH_LL_Connect>
}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fbc3 	bl	8002a3e <USBH_LL_Disconnect>
}
 80042b8:	bf00      	nop
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
 80042cc:	4613      	mov	r3, r2
 80042ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fbe6 	bl	8002aa8 <USBH_LL_NotifyURBChange>
#endif
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80042ec:	2300      	movs	r3, #0
 80042ee:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Start(phost->pData);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fc fcaf 	bl	8000c5e <HAL_HCD_Start>
 8004300:	4603      	mov	r3, r0
 8004302:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8004304:	7bbb      	ldrb	r3, [r7, #14]
 8004306:	2b03      	cmp	r3, #3
 8004308:	d816      	bhi.n	8004338 <USBH_LL_Start+0x54>
 800430a:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <USBH_LL_Start+0x2c>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004321 	.word	0x08004321
 8004314:	08004327 	.word	0x08004327
 8004318:	0800432d 	.word	0x0800432d
 800431c:	08004333 	.word	0x08004333
    case HAL_OK :
      usb_status = USBH_OK;
 8004320:	2300      	movs	r3, #0
 8004322:	73fb      	strb	r3, [r7, #15]
    break;
 8004324:	e00b      	b.n	800433e <USBH_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004326:	2302      	movs	r3, #2
 8004328:	73fb      	strb	r3, [r7, #15]
    break;
 800432a:	e008      	b.n	800433e <USBH_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800432c:	2301      	movs	r3, #1
 800432e:	73fb      	strb	r3, [r7, #15]
    break;
 8004330:	e005      	b.n	800433e <USBH_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004332:	2302      	movs	r3, #2
 8004334:	73fb      	strb	r3, [r7, #15]
    break;
 8004336:	e002      	b.n	800433e <USBH_LL_Start+0x5a>
    default :
      usb_status = USBH_FAIL;
 8004338:	2302      	movs	r3, #2
 800433a:	73fb      	strb	r3, [r7, #15]
    break;
 800433c:	bf00      	nop
  }
  return usb_status;
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	73bb      	strb	r3, [r7, #14]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 33c0 	ldr.w	r3, [r3, #960]	; 0x3c0
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc fca0 	bl	8000ca4 <HAL_HCD_Stop>
 8004364:	4603      	mov	r3, r0
 8004366:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8004368:	7bbb      	ldrb	r3, [r7, #14]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d816      	bhi.n	800439c <USBH_LL_Stop+0x54>
 800436e:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <USBH_LL_Stop+0x2c>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	08004385 	.word	0x08004385
 8004378:	0800438b 	.word	0x0800438b
 800437c:	08004391 	.word	0x08004391
 8004380:	08004397 	.word	0x08004397
    case HAL_OK :
      usb_status = USBH_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]
    break;
 8004388:	e00b      	b.n	80043a2 <USBH_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800438a:	2302      	movs	r3, #2
 800438c:	73fb      	strb	r3, [r7, #15]
    break;
 800438e:	e008      	b.n	80043a2 <USBH_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
    break;
 8004394:	e005      	b.n	80043a2 <USBH_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004396:	2302      	movs	r3, #2
 8004398:	73fb      	strb	r3, [r7, #15]
    break;
 800439a:	e002      	b.n	80043a2 <USBH_LL_Stop+0x5a>
    default :
      usb_status = USBH_FAIL;
 800439c:	2302      	movs	r3, #2
 800439e:	73fb      	strb	r3, [r7, #15]
    break;
 80043a0:	bf00      	nop
  }
  return usb_status;
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80043b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80043b2:	e003      	b.n	80043bc <LoopCopyDataInit>

080043b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80043b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80043b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80043ba:	3104      	adds	r1, #4

080043bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80043bc:	480b      	ldr	r0, [pc, #44]	; (80043ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80043be:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80043c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80043c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80043c4:	d3f6      	bcc.n	80043b4 <CopyDataInit>
  ldr  r2, =_sbss
 80043c6:	4a0b      	ldr	r2, [pc, #44]	; (80043f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80043c8:	e002      	b.n	80043d0 <LoopFillZerobss>

080043ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80043ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80043cc:	f842 3b04 	str.w	r3, [r2], #4

080043d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80043d0:	4b09      	ldr	r3, [pc, #36]	; (80043f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80043d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80043d4:	d3f9      	bcc.n	80043ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043d6:	f7ff ff13 	bl	8004200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043da:	f000 f811 	bl	8004400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043de:	f7ff fc39 	bl	8003c54 <main>
  bx  lr    
 80043e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043e4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80043e8:	08004488 	.word	0x08004488
  ldr  r0, =_sdata
 80043ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80043f0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80043f4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80043f8:	20000de8 	.word	0x20000de8

080043fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043fc:	e7fe      	b.n	80043fc <ADC_IRQHandler>
	...

08004400 <__libc_init_array>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	4e0d      	ldr	r6, [pc, #52]	; (8004438 <__libc_init_array+0x38>)
 8004404:	4c0d      	ldr	r4, [pc, #52]	; (800443c <__libc_init_array+0x3c>)
 8004406:	1ba4      	subs	r4, r4, r6
 8004408:	10a4      	asrs	r4, r4, #2
 800440a:	2500      	movs	r5, #0
 800440c:	42a5      	cmp	r5, r4
 800440e:	d109      	bne.n	8004424 <__libc_init_array+0x24>
 8004410:	4e0b      	ldr	r6, [pc, #44]	; (8004440 <__libc_init_array+0x40>)
 8004412:	4c0c      	ldr	r4, [pc, #48]	; (8004444 <__libc_init_array+0x44>)
 8004414:	f000 f824 	bl	8004460 <_init>
 8004418:	1ba4      	subs	r4, r4, r6
 800441a:	10a4      	asrs	r4, r4, #2
 800441c:	2500      	movs	r5, #0
 800441e:	42a5      	cmp	r5, r4
 8004420:	d105      	bne.n	800442e <__libc_init_array+0x2e>
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004428:	4798      	blx	r3
 800442a:	3501      	adds	r5, #1
 800442c:	e7ee      	b.n	800440c <__libc_init_array+0xc>
 800442e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004432:	4798      	blx	r3
 8004434:	3501      	adds	r5, #1
 8004436:	e7f2      	b.n	800441e <__libc_init_array+0x1e>
 8004438:	08004480 	.word	0x08004480
 800443c:	08004480 	.word	0x08004480
 8004440:	08004480 	.word	0x08004480
 8004444:	08004484 	.word	0x08004484

08004448 <memcpy>:
 8004448:	b510      	push	{r4, lr}
 800444a:	1e43      	subs	r3, r0, #1
 800444c:	440a      	add	r2, r1
 800444e:	4291      	cmp	r1, r2
 8004450:	d100      	bne.n	8004454 <memcpy+0xc>
 8004452:	bd10      	pop	{r4, pc}
 8004454:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004458:	f803 4f01 	strb.w	r4, [r3, #1]!
 800445c:	e7f7      	b.n	800444e <memcpy+0x6>
	...

08004460 <_init>:
 8004460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004462:	bf00      	nop
 8004464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004466:	bc08      	pop	{r3}
 8004468:	469e      	mov	lr, r3
 800446a:	4770      	bx	lr

0800446c <_fini>:
 800446c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446e:	bf00      	nop
 8004470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004472:	bc08      	pop	{r3}
 8004474:	469e      	mov	lr, r3
 8004476:	4770      	bx	lr
