
Display_16x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005018  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08005128  08005128  00015128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005420  08005420  00015420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000000  08005428  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002a4  200001f0  08005614  000201f0  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  20000494  08005614  00020494  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   00019e59  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002f45  00000000  00000000  0003a06e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009ee1  00000000  00000000  0003cfb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000bd0  00000000  00000000  00046e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001108  00000000  00000000  00047a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007ce5  00000000  00000000  00048b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000478b  00000000  00000000  00050855  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00054fe0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002ec0  00000000  00000000  0005505c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005110 	.word	0x08005110

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08005110 	.word	0x08005110

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_InitTick+0x24>)
{
 8000a82:	b510      	push	{r4, lr}
 8000a84:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a90:	f000 fb2c 	bl	80010ec <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	4621      	mov	r1, r4
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 fae6 	bl	800106c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	bd10      	pop	{r4, pc}
 8000aa4:	20000018 	.word	0x20000018

08000aa8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aa8:	4a07      	ldr	r2, [pc, #28]	; (8000ac8 <HAL_Init+0x20>)
{
 8000aaa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000aac:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aae:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	f043 0310 	orr.w	r3, r3, #16
 8000ab4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ab6:	f000 fac7 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aba:	2000      	movs	r0, #0
 8000abc:	f7ff ffe0 	bl	8000a80 <HAL_InitTick>
  HAL_MspInit();
 8000ac0:	f002 f860 	bl	8002b84 <HAL_MspInit>
}
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	bd08      	pop	{r3, pc}
 8000ac8:	40022000 	.word	0x40022000

08000acc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000acc:	4a02      	ldr	r2, [pc, #8]	; (8000ad8 <HAL_IncTick+0xc>)
 8000ace:	6813      	ldr	r3, [r2, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000224 	.word	0x20000224

08000adc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000adc:	4b01      	ldr	r3, [pc, #4]	; (8000ae4 <HAL_GetTick+0x8>)
 8000ade:	6818      	ldr	r0, [r3, #0]
}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000224 	.word	0x20000224

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000aea:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff fff6 	bl	8000adc <HAL_GetTick>
 8000af0:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 8000af2:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af4:	1c63      	adds	r3, r4, #1
  {
     wait++;
 8000af6:	bf18      	it	ne
 8000af8:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000afa:	f7ff ffef 	bl	8000adc <HAL_GetTick>
 8000afe:	1b40      	subs	r0, r0, r5
 8000b00:	42a0      	cmp	r0, r4
 8000b02:	d3fa      	bcc.n	8000afa <HAL_Delay+0x12>
  {
  }
}
 8000b04:	b003      	add	sp, #12
 8000b06:	bd30      	pop	{r4, r5, pc}

08000b08 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b08:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000b0a:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000b0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b0e:	f012 0f50 	tst.w	r2, #80	; 0x50
 8000b12:	d11b      	bne.n	8000b4c <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000b14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	6892      	ldr	r2, [r2, #8]
 8000b20:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000b24:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000b28:	d10c      	bne.n	8000b44 <ADC_DMAConvCplt+0x3c>
 8000b2a:	68da      	ldr	r2, [r3, #12]
 8000b2c:	b952      	cbnz	r2, 8000b44 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b38:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b3a:	bf5e      	ittt	pl
 8000b3c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 8000b3e:	f042 0201 	orrpl.w	r2, r2, #1
 8000b42:	629a      	strpl	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 fc57 	bl	80023f8 <HAL_ADC_ConvCpltCallback>
 8000b4a:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
  }
}
 8000b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b54:	4718      	bx	r3

08000b56 <HAL_ADC_ConvHalfCpltCallback>:
 8000b56:	4770      	bx	lr

08000b58 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000b58:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000b5a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000b5c:	f7ff fffb 	bl	8000b56 <HAL_ADC_ConvHalfCpltCallback>
 8000b60:	bd08      	pop	{r3, pc}

08000b62 <HAL_ADC_LevelOutOfWindowCallback>:
 8000b62:	4770      	bx	lr

08000b64 <HAL_ADC_IRQHandler>:
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000b64:	6803      	ldr	r3, [r0, #0]
{
 8000b66:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000b68:	685a      	ldr	r2, [r3, #4]
{
 8000b6a:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000b6c:	0690      	lsls	r0, r2, #26
 8000b6e:	d527      	bpl.n	8000bc0 <HAL_ADC_IRQHandler+0x5c>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	0791      	lsls	r1, r2, #30
 8000b74:	d524      	bpl.n	8000bc0 <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b78:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000b7a:	bf5e      	ittt	pl
 8000b7c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000b7e:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8000b82:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000b8a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000b8e:	d110      	bne.n	8000bb2 <HAL_ADC_IRQHandler+0x4e>
 8000b90:	68e2      	ldr	r2, [r4, #12]
 8000b92:	b972      	cbnz	r2, 8000bb2 <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000b94:	685a      	ldr	r2, [r3, #4]
 8000b96:	f022 0220 	bic.w	r2, r2, #32
 8000b9a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b9c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ba2:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ba4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ba6:	04db      	lsls	r3, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ba8:	bf5e      	ittt	pl
 8000baa:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000bac:	f043 0301 	orrpl.w	r3, r3, #1
 8000bb0:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADC_ConvCpltCallback(hadc);
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	f001 fc20 	bl	80023f8 <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000bb8:	f06f 0212 	mvn.w	r2, #18
 8000bbc:	6823      	ldr	r3, [r4, #0]
 8000bbe:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000bc0:	6823      	ldr	r3, [r4, #0]
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	0610      	lsls	r0, r2, #24
 8000bc6:	d530      	bpl.n	8000c2a <HAL_ADC_IRQHandler+0xc6>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	0751      	lsls	r1, r2, #29
 8000bcc:	d52d      	bpl.n	8000c2a <HAL_ADC_IRQHandler+0xc6>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000bd0:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000bd2:	bf5e      	ittt	pl
 8000bd4:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000bd6:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8000bda:	62a2      	strpl	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000bdc:	689a      	ldr	r2, [r3, #8]
 8000bde:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000be2:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000be6:	d00a      	beq.n	8000bfe <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000be8:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000bea:	0550      	lsls	r0, r2, #21
 8000bec:	d416      	bmi.n	8000c1c <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000bee:	689a      	ldr	r2, [r3, #8]
 8000bf0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000bf4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000bf8:	d110      	bne.n	8000c1c <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000bfa:	68e2      	ldr	r2, [r4, #12]
 8000bfc:	b972      	cbnz	r2, 8000c1c <HAL_ADC_IRQHandler+0xb8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000c04:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000c06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c0c:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000c0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c10:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c12:	bf5e      	ittt	pl
 8000c14:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000c16:	f043 0301 	orrpl.w	r3, r3, #1
 8000c1a:	62a3      	strpl	r3, [r4, #40]	; 0x28
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f000 fa11 	bl	8001044 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000c22:	f06f 020c 	mvn.w	r2, #12
 8000c26:	6823      	ldr	r3, [r4, #0]
 8000c28:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	0652      	lsls	r2, r2, #25
 8000c30:	d50d      	bpl.n	8000c4e <HAL_ADC_IRQHandler+0xea>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	07db      	lsls	r3, r3, #31
 8000c36:	d50a      	bpl.n	8000c4e <HAL_ADC_IRQHandler+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c3a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c40:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c42:	f7ff ff8e 	bl	8000b62 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000c46:	f06f 0201 	mvn.w	r2, #1
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	bd10      	pop	{r4, pc}

08000c50 <HAL_ADC_ErrorCallback>:
{
 8000c50:	4770      	bx	lr

08000c52 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c52:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8000c54:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000c56:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c5c:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000c5e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000c66:	f7ff fff3 	bl	8000c50 <HAL_ADC_ErrorCallback>
 8000c6a:	bd08      	pop	{r3, pc}

08000c6c <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8000c6c:	2300      	movs	r3, #0
{ 
 8000c6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000c70:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000c72:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d074      	beq.n	8000d64 <HAL_ADC_ConfigChannel+0xf8>
 8000c7a:	2301      	movs	r3, #1
  if (sConfig->Rank < 7U)
 8000c7c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000c7e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000c82:	2d06      	cmp	r5, #6
 8000c84:	6802      	ldr	r2, [r0, #0]
 8000c86:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000c8a:	680c      	ldr	r4, [r1, #0]
 8000c8c:	d825      	bhi.n	8000cda <HAL_ADC_ConfigChannel+0x6e>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c8e:	442b      	add	r3, r5
 8000c90:	251f      	movs	r5, #31
 8000c92:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000c94:	3b05      	subs	r3, #5
 8000c96:	409d      	lsls	r5, r3
 8000c98:	ea26 0505 	bic.w	r5, r6, r5
 8000c9c:	fa04 f303 	lsl.w	r3, r4, r3
 8000ca0:	432b      	orrs	r3, r5
 8000ca2:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ca4:	2c09      	cmp	r4, #9
 8000ca6:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000caa:	688d      	ldr	r5, [r1, #8]
 8000cac:	d92f      	bls.n	8000d0e <HAL_ADC_ConfigChannel+0xa2>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cae:	2607      	movs	r6, #7
 8000cb0:	4423      	add	r3, r4
 8000cb2:	68d1      	ldr	r1, [r2, #12]
 8000cb4:	3b1e      	subs	r3, #30
 8000cb6:	409e      	lsls	r6, r3
 8000cb8:	ea21 0106 	bic.w	r1, r1, r6
 8000cbc:	fa05 f303 	lsl.w	r3, r5, r3
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cc4:	f1a4 0310 	sub.w	r3, r4, #16
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d92b      	bls.n	8000d24 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ccc:	2300      	movs	r3, #0
  __HAL_UNLOCK(hadc);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000cda:	2d0c      	cmp	r5, #12
 8000cdc:	d80b      	bhi.n	8000cf6 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cde:	442b      	add	r3, r5
 8000ce0:	251f      	movs	r5, #31
 8000ce2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000ce4:	3b23      	subs	r3, #35	; 0x23
 8000ce6:	409d      	lsls	r5, r3
 8000ce8:	ea26 0505 	bic.w	r5, r6, r5
 8000cec:	fa04 f303 	lsl.w	r3, r4, r3
 8000cf0:	432b      	orrs	r3, r5
 8000cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf4:	e7d6      	b.n	8000ca4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cf6:	442b      	add	r3, r5
 8000cf8:	251f      	movs	r5, #31
 8000cfa:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000cfc:	3b41      	subs	r3, #65	; 0x41
 8000cfe:	409d      	lsls	r5, r3
 8000d00:	ea26 0505 	bic.w	r5, r6, r5
 8000d04:	fa04 f303 	lsl.w	r3, r4, r3
 8000d08:	432b      	orrs	r3, r5
 8000d0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d0c:	e7ca      	b.n	8000ca4 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d0e:	2607      	movs	r6, #7
 8000d10:	6911      	ldr	r1, [r2, #16]
 8000d12:	4423      	add	r3, r4
 8000d14:	409e      	lsls	r6, r3
 8000d16:	ea21 0106 	bic.w	r1, r1, r6
 8000d1a:	fa05 f303 	lsl.w	r3, r5, r3
 8000d1e:	430b      	orrs	r3, r1
 8000d20:	6113      	str	r3, [r2, #16]
 8000d22:	e7cf      	b.n	8000cc4 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_ADC_ConfigChannel+0xfc>)
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d116      	bne.n	8000d58 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d2a:	6893      	ldr	r3, [r2, #8]
 8000d2c:	021b      	lsls	r3, r3, #8
 8000d2e:	d4cd      	bmi.n	8000ccc <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d30:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d32:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d38:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d3a:	d1c7      	bne.n	8000ccc <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_ADC_ConfigChannel+0x100>)
 8000d3e:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <HAL_ADC_ConfigChannel+0x104>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	fbb3 f2f2 	udiv	r2, r3, r2
 8000d46:	230a      	movs	r3, #10
 8000d48:	4353      	muls	r3, r2
            wait_loop_index--;
 8000d4a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000d4c:	9b01      	ldr	r3, [sp, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0bc      	beq.n	8000ccc <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000d52:	9b01      	ldr	r3, [sp, #4]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	e7f8      	b.n	8000d4a <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d58:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d5a:	f043 0320 	orr.w	r3, r3, #32
 8000d5e:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e7b4      	b.n	8000cce <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000d64:	2302      	movs	r3, #2
 8000d66:	e7b5      	b.n	8000cd4 <HAL_ADC_ConfigChannel+0x68>
 8000d68:	40012400 	.word	0x40012400
 8000d6c:	20000018 	.word	0x20000018
 8000d70:	000f4240 	.word	0x000f4240

08000d74 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8000d74:	2300      	movs	r3, #0
{
 8000d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000d78:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d7a:	6803      	ldr	r3, [r0, #0]
{
 8000d7c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d7e:	689a      	ldr	r2, [r3, #8]
 8000d80:	07d2      	lsls	r2, r2, #31
 8000d82:	d502      	bpl.n	8000d8a <ADC_Enable+0x16>
  return HAL_OK;
 8000d84:	2000      	movs	r0, #0
}
 8000d86:	b002      	add	sp, #8
 8000d88:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	f042 0201 	orr.w	r2, r2, #1
 8000d90:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <ADC_Enable+0x68>)
 8000d94:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <ADC_Enable+0x6c>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000d9c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000d9e:	9b01      	ldr	r3, [sp, #4]
 8000da0:	b9c3      	cbnz	r3, 8000dd4 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000da2:	f7ff fe9b 	bl	8000adc <HAL_GetTick>
 8000da6:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	689d      	ldr	r5, [r3, #8]
 8000dac:	f015 0501 	ands.w	r5, r5, #1
 8000db0:	d1e8      	bne.n	8000d84 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000db2:	f7ff fe93 	bl	8000adc <HAL_GetTick>
 8000db6:	1b80      	subs	r0, r0, r6
 8000db8:	2802      	cmp	r0, #2
 8000dba:	d9f5      	bls.n	8000da8 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000dbe:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dc2:	f043 0310 	orr.w	r3, r3, #16
 8000dc6:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000dca:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000dd2:	e7d8      	b.n	8000d86 <ADC_Enable+0x12>
      wait_loop_index--;
 8000dd4:	9b01      	ldr	r3, [sp, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	e7e0      	b.n	8000d9c <ADC_Enable+0x28>
 8000dda:	bf00      	nop
 8000ddc:	20000018 	.word	0x20000018
 8000de0:	000f4240 	.word	0x000f4240

08000de4 <HAL_ADC_Start_DMA>:
{
 8000de4:	e92d 41d8 	stmdb	sp!, {r3, r4, r6, r7, r8, lr}
 8000de8:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000dea:	4b40      	ldr	r3, [pc, #256]	; (8000eec <HAL_ADC_Start_DMA+0x108>)
 8000dec:	6802      	ldr	r2, [r0, #0]
{
 8000dee:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000df0:	429a      	cmp	r2, r3
{
 8000df2:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000df4:	d002      	beq.n	8000dfc <HAL_ADC_Start_DMA+0x18>
 8000df6:	493e      	ldr	r1, [pc, #248]	; (8000ef0 <HAL_ADC_Start_DMA+0x10c>)
 8000df8:	428a      	cmp	r2, r1
 8000dfa:	d103      	bne.n	8000e04 <HAL_ADC_Start_DMA+0x20>
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000e02:	d16e      	bne.n	8000ee2 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8000e04:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d06c      	beq.n	8000ee6 <HAL_ADC_Start_DMA+0x102>
 8000e0c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8000e0e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8000e10:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000e14:	f7ff ffae 	bl	8000d74 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000e18:	4606      	mov	r6, r0
 8000e1a:	2800      	cmp	r0, #0
 8000e1c:	d15d      	bne.n	8000eda <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8000e1e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e20:	6821      	ldr	r1, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8000e22:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e26:	4b32      	ldr	r3, [pc, #200]	; (8000ef0 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8000e28:	f020 0001 	bic.w	r0, r0, #1
 8000e2c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e30:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8000e32:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e34:	d104      	bne.n	8000e40 <HAL_ADC_Start_DMA+0x5c>
 8000e36:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <HAL_ADC_Start_DMA+0x108>)
 8000e38:	6853      	ldr	r3, [r2, #4]
 8000e3a:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000e3e:	d13e      	bne.n	8000ebe <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000e46:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e48:	684b      	ldr	r3, [r1, #4]
 8000e4a:	055a      	lsls	r2, r3, #21
 8000e4c:	d505      	bpl.n	8000e5a <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e4e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e58:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e5c:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e5e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e62:	bf18      	it	ne
 8000e64:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e66:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e68:	bf18      	it	ne
 8000e6a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8000e6e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000e70:	2300      	movs	r3, #0
 8000e72:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e78:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e7a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <HAL_ADC_Start_DMA+0x114>)
 8000e7e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_ADC_Start_DMA+0x118>)
 8000e82:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e84:	f06f 0302 	mvn.w	r3, #2
 8000e88:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e8c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8000e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e94:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e98:	4643      	mov	r3, r8
 8000e9a:	f000 f983 	bl	80011a4 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000ea6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	bf0c      	ite	eq
 8000eae:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000eb2:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8000eb6:	609a      	str	r2, [r3, #8]
}
 8000eb8:	4630      	mov	r0, r6
 8000eba:	e8bd 81d8 	ldmia.w	sp!, {r3, r4, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ebe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ec4:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ec6:	6853      	ldr	r3, [r2, #4]
 8000ec8:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000eca:	bf41      	itttt	mi
 8000ecc:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8000ece:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8000ed2:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8000ed6:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8000ed8:	e7bf      	b.n	8000e5a <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8000eda:	2300      	movs	r3, #0
 8000edc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000ee0:	e7ea      	b.n	8000eb8 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8000ee2:	2601      	movs	r6, #1
 8000ee4:	e7e8      	b.n	8000eb8 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8000ee6:	2602      	movs	r6, #2
 8000ee8:	e7e6      	b.n	8000eb8 <HAL_ADC_Start_DMA+0xd4>
 8000eea:	bf00      	nop
 8000eec:	40012400 	.word	0x40012400
 8000ef0:	40012800 	.word	0x40012800
 8000ef4:	08000b09 	.word	0x08000b09
 8000ef8:	08000b59 	.word	0x08000b59
 8000efc:	08000c53 	.word	0x08000c53

08000f00 <ADC_ConversionStop_Disable>:
{
 8000f00:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f02:	6803      	ldr	r3, [r0, #0]
{
 8000f04:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f06:	689a      	ldr	r2, [r3, #8]
 8000f08:	07d2      	lsls	r2, r2, #31
 8000f0a:	d401      	bmi.n	8000f10 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000f10:	689a      	ldr	r2, [r3, #8]
 8000f12:	f022 0201 	bic.w	r2, r2, #1
 8000f16:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000f18:	f7ff fde0 	bl	8000adc <HAL_GetTick>
 8000f1c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	07db      	lsls	r3, r3, #31
 8000f24:	d5f2      	bpl.n	8000f0c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f26:	f7ff fdd9 	bl	8000adc <HAL_GetTick>
 8000f2a:	1b40      	subs	r0, r0, r5
 8000f2c:	2802      	cmp	r0, #2
 8000f2e:	d9f6      	bls.n	8000f1e <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f32:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000f42:	bd38      	pop	{r3, r4, r5, pc}

08000f44 <HAL_ADC_Init>:
{
 8000f44:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000f46:	4604      	mov	r4, r0
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d071      	beq.n	8001030 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000f4e:	b923      	cbnz	r3, 8000f5a <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000f50:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000f52:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000f56:	f001 fe5d 	bl	8002c14 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f7ff ffd0 	bl	8000f00 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f62:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000f66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f68:	d164      	bne.n	8001034 <HAL_ADC_Init+0xf0>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	d162      	bne.n	8001034 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f6e:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000f70:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f74:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000f76:	f023 0302 	bic.w	r3, r3, #2
 8000f7a:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000f7e:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f80:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000f82:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000f84:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f86:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000f8a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f8e:	d038      	beq.n	8001002 <HAL_ADC_Init+0xbe>
 8000f90:	2901      	cmp	r1, #1
 8000f92:	bf14      	ite	ne
 8000f94:	4606      	movne	r6, r0
 8000f96:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f9a:	6965      	ldr	r5, [r4, #20]
 8000f9c:	2d01      	cmp	r5, #1
 8000f9e:	d107      	bne.n	8000fb0 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d130      	bne.n	8001006 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fa4:	69a3      	ldr	r3, [r4, #24]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000fac:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000fb0:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fb2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000fb6:	685d      	ldr	r5, [r3, #4]
 8000fb8:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000fbc:	ea45 0506 	orr.w	r5, r5, r6
 8000fc0:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000fc2:	689e      	ldr	r6, [r3, #8]
 8000fc4:	4d1d      	ldr	r5, [pc, #116]	; (800103c <HAL_ADC_Init+0xf8>)
 8000fc6:	ea05 0506 	and.w	r5, r5, r6
 8000fca:	ea45 0502 	orr.w	r5, r5, r2
 8000fce:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fd0:	d001      	beq.n	8000fd6 <HAL_ADC_Init+0x92>
 8000fd2:	2901      	cmp	r1, #1
 8000fd4:	d120      	bne.n	8001018 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fd6:	6921      	ldr	r1, [r4, #16]
 8000fd8:	3901      	subs	r1, #1
 8000fda:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000fdc:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000fde:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000fe2:	4329      	orrs	r1, r5
 8000fe4:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fe6:	6899      	ldr	r1, [r3, #8]
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_ADC_Init+0xfc>)
 8000fea:	400b      	ands	r3, r1
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d115      	bne.n	800101c <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ff6:	f023 0303 	bic.w	r3, r3, #3
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	62a3      	str	r3, [r4, #40]	; 0x28
 8001000:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001002:	460e      	mov	r6, r1
 8001004:	e7c9      	b.n	8000f9a <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001006:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800100e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001016:	e7cb      	b.n	8000fb0 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8001018:	2100      	movs	r1, #0
 800101a:	e7df      	b.n	8000fdc <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 800101c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800101e:	f023 0312 	bic.w	r3, r3, #18
 8001022:	f043 0310 	orr.w	r3, r3, #16
 8001026:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001028:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8001030:	2001      	movs	r0, #1
}
 8001032:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001034:	f043 0310 	orr.w	r3, r3, #16
 8001038:	62a3      	str	r3, [r4, #40]	; 0x28
 800103a:	e7f9      	b.n	8001030 <HAL_ADC_Init+0xec>
 800103c:	ffe1f7fd 	.word	0xffe1f7fd
 8001040:	ff1f0efe 	.word	0xff1f0efe

08001044 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001044:	4770      	bx	lr
	...

08001048 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800104a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800104c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800104e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001052:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001056:	041b      	lsls	r3, r3, #16
 8001058:	0c1b      	lsrs	r3, r3, #16
 800105a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800105e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001062:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001064:	60d3      	str	r3, [r2, #12]
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106e:	b530      	push	{r4, r5, lr}
 8001070:	68dc      	ldr	r4, [r3, #12]
 8001072:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001076:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	2b04      	cmp	r3, #4
 800107e:	bf28      	it	cs
 8001080:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001088:	bf98      	it	ls
 800108a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	fa05 f303 	lsl.w	r3, r5, r3
 8001090:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001094:	bf88      	it	hi
 8001096:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4019      	ands	r1, r3
 800109a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	fa05 f404 	lsl.w	r4, r5, r4
 80010a0:	3c01      	subs	r4, #1
 80010a2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80010a4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a6:	ea42 0201 	orr.w	r2, r2, r1
 80010aa:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ae:	bfaf      	iteee	ge
 80010b0:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	4b06      	ldrlt	r3, [pc, #24]	; (80010d0 <HAL_NVIC_SetPriority+0x64>)
 80010b6:	f000 000f 	andlt.w	r0, r0, #15
 80010ba:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	bfa5      	ittet	ge
 80010be:	b2d2      	uxtbge	r2, r2
 80010c0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010ca:	bd30      	pop	{r4, r5, pc}
 80010cc:	e000ed00 	.word	0xe000ed00
 80010d0:	e000ed14 	.word	0xe000ed14

080010d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010d4:	2301      	movs	r3, #1
 80010d6:	0942      	lsrs	r2, r0, #5
 80010d8:	f000 001f 	and.w	r0, r0, #31
 80010dc:	fa03 f000 	lsl.w	r0, r3, r0
 80010e0:	4b01      	ldr	r3, [pc, #4]	; (80010e8 <HAL_NVIC_EnableIRQ+0x14>)
 80010e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100

080010ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	3801      	subs	r0, #1
 80010ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010f2:	d20a      	bcs.n	800110a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	4a06      	ldr	r2, [pc, #24]	; (8001114 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001104:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800110a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800111a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	bf0c      	ite	eq
 8001120:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001124:	f022 0204 	bicne.w	r2, r2, #4
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	4770      	bx	lr
 800112c:	e000e010 	.word	0xe000e010

08001130 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001130:	4770      	bx	lr

08001132 <HAL_SYSTICK_IRQHandler>:
{
 8001132:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001134:	f7ff fffc 	bl	8001130 <HAL_SYSTICK_Callback>
 8001138:	bd08      	pop	{r3, pc}
	...

0800113c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800113c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800113e:	b350      	cbz	r0, 8001196 <HAL_DMA_Init+0x5a>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001140:	2214      	movs	r2, #20
 8001142:	6801      	ldr	r1, [r0, #0]
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <HAL_DMA_Init+0x60>)
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001146:	6884      	ldr	r4, [r0, #8]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001148:	440b      	add	r3, r1
 800114a:	fbb3 f3f2 	udiv	r3, r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 8001154:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8001156:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001158:	6843      	ldr	r3, [r0, #4]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800115a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
  tmp |=  hdma->Init.Direction        |
 800115e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001160:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001162:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001166:	4323      	orrs	r3, r4
 8001168:	6904      	ldr	r4, [r0, #16]
 800116a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116c:	6944      	ldr	r4, [r0, #20]
 800116e:	4323      	orrs	r3, r4
 8001170:	6984      	ldr	r4, [r0, #24]
 8001172:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001174:	69c4      	ldr	r4, [r0, #28]
 8001176:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001178:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800117a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800117c:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 800117e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001180:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->XferCpltCallback = NULL;
 8001184:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001186:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001188:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800118a:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800118c:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800118e:	f880 3020 	strb.w	r3, [r0, #32]
  
  return HAL_OK;
 8001192:	4618      	mov	r0, r3
 8001194:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001196:	2001      	movs	r0, #1
}
 8001198:	bd10      	pop	{r4, pc}
 800119a:	bf00      	nop
 800119c:	bffdfff8 	.word	0xbffdfff8
 80011a0:	40020000 	.word	0x40020000

080011a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011a4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011a6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80011aa:	2c01      	cmp	r4, #1
 80011ac:	d035      	beq.n	800121a <HAL_DMA_Start_IT+0x76>
 80011ae:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011b0:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 80011b4:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80011b8:	42a5      	cmp	r5, r4
 80011ba:	f04f 0600 	mov.w	r6, #0
 80011be:	f04f 0402 	mov.w	r4, #2
 80011c2:	d128      	bne.n	8001216 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011c4:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011c8:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ca:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80011cc:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011ce:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80011d0:	f026 0601 	bic.w	r6, r6, #1
 80011d4:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011d6:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80011d8:	40bd      	lsls	r5, r7
 80011da:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80011dc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011de:	6843      	ldr	r3, [r0, #4]
 80011e0:	6805      	ldr	r5, [r0, #0]
 80011e2:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80011e4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80011e6:	bf0b      	itete	eq
 80011e8:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80011ea:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80011ec:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80011ee:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80011f0:	b14b      	cbz	r3, 8001206 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011f8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80011fa:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011fc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	602b      	str	r3, [r5, #0]
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	f023 0304 	bic.w	r3, r3, #4
 800120c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	f043 030a 	orr.w	r3, r3, #10
 8001214:	e7f0      	b.n	80011f8 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001216:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 800121a:	2002      	movs	r0, #2
}
 800121c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001220 <HAL_DMA_IRQHandler>:
{
 8001220:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001222:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001224:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001226:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001228:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800122a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800122c:	4095      	lsls	r5, r2
 800122e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001230:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001232:	d032      	beq.n	800129a <HAL_DMA_IRQHandler+0x7a>
 8001234:	074d      	lsls	r5, r1, #29
 8001236:	d530      	bpl.n	800129a <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800123c:	bf5e      	ittt	pl
 800123e:	681a      	ldrpl	r2, [r3, #0]
 8001240:	f022 0204 	bicpl.w	r2, r2, #4
 8001244:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001246:	4a3e      	ldr	r2, [pc, #248]	; (8001340 <HAL_DMA_IRQHandler+0x120>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d019      	beq.n	8001280 <HAL_DMA_IRQHandler+0x60>
 800124c:	3214      	adds	r2, #20
 800124e:	4293      	cmp	r3, r2
 8001250:	d018      	beq.n	8001284 <HAL_DMA_IRQHandler+0x64>
 8001252:	3214      	adds	r2, #20
 8001254:	4293      	cmp	r3, r2
 8001256:	d017      	beq.n	8001288 <HAL_DMA_IRQHandler+0x68>
 8001258:	3214      	adds	r2, #20
 800125a:	4293      	cmp	r3, r2
 800125c:	d017      	beq.n	800128e <HAL_DMA_IRQHandler+0x6e>
 800125e:	3214      	adds	r2, #20
 8001260:	4293      	cmp	r3, r2
 8001262:	d017      	beq.n	8001294 <HAL_DMA_IRQHandler+0x74>
 8001264:	3214      	adds	r2, #20
 8001266:	4293      	cmp	r3, r2
 8001268:	bf0c      	ite	eq
 800126a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800126e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8001272:	4a34      	ldr	r2, [pc, #208]	; (8001344 <HAL_DMA_IRQHandler+0x124>)
 8001274:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001276:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001278:	2b00      	cmp	r3, #0
 800127a:	d05e      	beq.n	800133a <HAL_DMA_IRQHandler+0x11a>
}
 800127c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800127e:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001280:	2304      	movs	r3, #4
 8001282:	e7f6      	b.n	8001272 <HAL_DMA_IRQHandler+0x52>
 8001284:	2340      	movs	r3, #64	; 0x40
 8001286:	e7f4      	b.n	8001272 <HAL_DMA_IRQHandler+0x52>
 8001288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128c:	e7f1      	b.n	8001272 <HAL_DMA_IRQHandler+0x52>
 800128e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001292:	e7ee      	b.n	8001272 <HAL_DMA_IRQHandler+0x52>
 8001294:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001298:	e7eb      	b.n	8001272 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800129a:	2502      	movs	r5, #2
 800129c:	4095      	lsls	r5, r2
 800129e:	4225      	tst	r5, r4
 80012a0:	d035      	beq.n	800130e <HAL_DMA_IRQHandler+0xee>
 80012a2:	078d      	lsls	r5, r1, #30
 80012a4:	d533      	bpl.n	800130e <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	0694      	lsls	r4, r2, #26
 80012aa:	d406      	bmi.n	80012ba <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	f022 020a 	bic.w	r2, r2, #10
 80012b2:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80012b4:	2201      	movs	r2, #1
 80012b6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012ba:	4a21      	ldr	r2, [pc, #132]	; (8001340 <HAL_DMA_IRQHandler+0x120>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d019      	beq.n	80012f4 <HAL_DMA_IRQHandler+0xd4>
 80012c0:	3214      	adds	r2, #20
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d018      	beq.n	80012f8 <HAL_DMA_IRQHandler+0xd8>
 80012c6:	3214      	adds	r2, #20
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d017      	beq.n	80012fc <HAL_DMA_IRQHandler+0xdc>
 80012cc:	3214      	adds	r2, #20
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d017      	beq.n	8001302 <HAL_DMA_IRQHandler+0xe2>
 80012d2:	3214      	adds	r2, #20
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d017      	beq.n	8001308 <HAL_DMA_IRQHandler+0xe8>
 80012d8:	3214      	adds	r2, #20
 80012da:	4293      	cmp	r3, r2
 80012dc:	bf0c      	ite	eq
 80012de:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80012e2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_DMA_IRQHandler+0x124>)
 80012e8:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80012ea:	2300      	movs	r3, #0
 80012ec:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80012f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80012f2:	e7c1      	b.n	8001278 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012f4:	2302      	movs	r3, #2
 80012f6:	e7f6      	b.n	80012e6 <HAL_DMA_IRQHandler+0xc6>
 80012f8:	2320      	movs	r3, #32
 80012fa:	e7f4      	b.n	80012e6 <HAL_DMA_IRQHandler+0xc6>
 80012fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001300:	e7f1      	b.n	80012e6 <HAL_DMA_IRQHandler+0xc6>
 8001302:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001306:	e7ee      	b.n	80012e6 <HAL_DMA_IRQHandler+0xc6>
 8001308:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800130c:	e7eb      	b.n	80012e6 <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800130e:	2508      	movs	r5, #8
 8001310:	4095      	lsls	r5, r2
 8001312:	4225      	tst	r5, r4
 8001314:	d011      	beq.n	800133a <HAL_DMA_IRQHandler+0x11a>
 8001316:	0709      	lsls	r1, r1, #28
 8001318:	d50f      	bpl.n	800133a <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800131a:	6819      	ldr	r1, [r3, #0]
 800131c:	f021 010e 	bic.w	r1, r1, #14
 8001320:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001322:	2301      	movs	r3, #1
 8001324:	fa03 f202 	lsl.w	r2, r3, r2
 8001328:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800132a:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 800132c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001330:	2300      	movs	r3, #0
 8001332:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001336:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001338:	e79e      	b.n	8001278 <HAL_DMA_IRQHandler+0x58>
}
 800133a:	bc70      	pop	{r4, r5, r6}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40020008 	.word	0x40020008
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800134c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800134e:	4616      	mov	r6, r2
 8001350:	4b65      	ldr	r3, [pc, #404]	; (80014e8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001352:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80014f8 <HAL_GPIO_Init+0x1b0>
 8001356:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80014fc <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800135a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001360:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001364:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001368:	45a0      	cmp	r8, r4
 800136a:	d17f      	bne.n	800146c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800136c:	684d      	ldr	r5, [r1, #4]
 800136e:	2d12      	cmp	r5, #18
 8001370:	f000 80af 	beq.w	80014d2 <HAL_GPIO_Init+0x18a>
 8001374:	f200 8088 	bhi.w	8001488 <HAL_GPIO_Init+0x140>
 8001378:	2d02      	cmp	r5, #2
 800137a:	f000 80a7 	beq.w	80014cc <HAL_GPIO_Init+0x184>
 800137e:	d87c      	bhi.n	800147a <HAL_GPIO_Init+0x132>
 8001380:	2d00      	cmp	r5, #0
 8001382:	f000 808e 	beq.w	80014a2 <HAL_GPIO_Init+0x15a>
 8001386:	2d01      	cmp	r5, #1
 8001388:	f000 809e 	beq.w	80014c8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800138c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001390:	2cff      	cmp	r4, #255	; 0xff
 8001392:	bf93      	iteet	ls
 8001394:	4682      	movls	sl, r0
 8001396:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800139a:	3d08      	subhi	r5, #8
 800139c:	f8d0 b000 	ldrls.w	fp, [r0]
 80013a0:	bf92      	itee	ls
 80013a2:	00b5      	lslls	r5, r6, #2
 80013a4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80013a8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80013aa:	fa09 f805 	lsl.w	r8, r9, r5
 80013ae:	ea2b 0808 	bic.w	r8, fp, r8
 80013b2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013b6:	bf88      	it	hi
 80013b8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80013bc:	ea48 0505 	orr.w	r5, r8, r5
 80013c0:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80013c4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80013c8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80013cc:	d04e      	beq.n	800146c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013ce:	4d47      	ldr	r5, [pc, #284]	; (80014ec <HAL_GPIO_Init+0x1a4>)
 80013d0:	4f46      	ldr	r7, [pc, #280]	; (80014ec <HAL_GPIO_Init+0x1a4>)
 80013d2:	69ad      	ldr	r5, [r5, #24]
 80013d4:	f026 0803 	bic.w	r8, r6, #3
 80013d8:	f045 0501 	orr.w	r5, r5, #1
 80013dc:	61bd      	str	r5, [r7, #24]
 80013de:	69bd      	ldr	r5, [r7, #24]
 80013e0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80013e4:	f005 0501 	and.w	r5, r5, #1
 80013e8:	9501      	str	r5, [sp, #4]
 80013ea:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013ee:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013f2:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013f4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80013f8:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013fc:	fa09 f90b 	lsl.w	r9, r9, fp
 8001400:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001404:	4d3a      	ldr	r5, [pc, #232]	; (80014f0 <HAL_GPIO_Init+0x1a8>)
 8001406:	42a8      	cmp	r0, r5
 8001408:	d068      	beq.n	80014dc <HAL_GPIO_Init+0x194>
 800140a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800140e:	42a8      	cmp	r0, r5
 8001410:	d066      	beq.n	80014e0 <HAL_GPIO_Init+0x198>
 8001412:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001416:	42a8      	cmp	r0, r5
 8001418:	d064      	beq.n	80014e4 <HAL_GPIO_Init+0x19c>
 800141a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800141e:	42a8      	cmp	r0, r5
 8001420:	bf0c      	ite	eq
 8001422:	2503      	moveq	r5, #3
 8001424:	2504      	movne	r5, #4
 8001426:	fa05 f50b 	lsl.w	r5, r5, fp
 800142a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800142e:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8001432:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001434:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8001438:	bf14      	ite	ne
 800143a:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800143c:	43a5      	biceq	r5, r4
 800143e:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001440:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001442:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8001446:	bf14      	ite	ne
 8001448:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800144a:	43a5      	biceq	r5, r4
 800144c:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800144e:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001450:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8001454:	bf14      	ite	ne
 8001456:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8001458:	43a5      	biceq	r5, r4
 800145a:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800145c:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800145e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001462:	bf14      	ite	ne
 8001464:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8001466:	ea25 0404 	biceq.w	r4, r5, r4
 800146a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800146c:	3601      	adds	r6, #1
 800146e:	2e10      	cmp	r6, #16
 8001470:	f47f af73 	bne.w	800135a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8001474:	b003      	add	sp, #12
 8001476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800147a:	2d03      	cmp	r5, #3
 800147c:	d022      	beq.n	80014c4 <HAL_GPIO_Init+0x17c>
 800147e:	2d11      	cmp	r5, #17
 8001480:	d184      	bne.n	800138c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001482:	68ca      	ldr	r2, [r1, #12]
 8001484:	3204      	adds	r2, #4
          break;
 8001486:	e781      	b.n	800138c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001488:	4f1a      	ldr	r7, [pc, #104]	; (80014f4 <HAL_GPIO_Init+0x1ac>)
 800148a:	42bd      	cmp	r5, r7
 800148c:	d009      	beq.n	80014a2 <HAL_GPIO_Init+0x15a>
 800148e:	d812      	bhi.n	80014b6 <HAL_GPIO_Init+0x16e>
 8001490:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001500 <HAL_GPIO_Init+0x1b8>
 8001494:	454d      	cmp	r5, r9
 8001496:	d004      	beq.n	80014a2 <HAL_GPIO_Init+0x15a>
 8001498:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800149c:	454d      	cmp	r5, r9
 800149e:	f47f af75 	bne.w	800138c <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80014a2:	688a      	ldr	r2, [r1, #8]
 80014a4:	b1c2      	cbz	r2, 80014d8 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80014a6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80014a8:	bf0c      	ite	eq
 80014aa:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80014ae:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b2:	2208      	movs	r2, #8
 80014b4:	e76a      	b.n	800138c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80014b6:	4575      	cmp	r5, lr
 80014b8:	d0f3      	beq.n	80014a2 <HAL_GPIO_Init+0x15a>
 80014ba:	4565      	cmp	r5, ip
 80014bc:	d0f1      	beq.n	80014a2 <HAL_GPIO_Init+0x15a>
 80014be:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001504 <HAL_GPIO_Init+0x1bc>
 80014c2:	e7eb      	b.n	800149c <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014c4:	2200      	movs	r2, #0
 80014c6:	e761      	b.n	800138c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c8:	68ca      	ldr	r2, [r1, #12]
          break;
 80014ca:	e75f      	b.n	800138c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014cc:	68ca      	ldr	r2, [r1, #12]
 80014ce:	3208      	adds	r2, #8
          break;
 80014d0:	e75c      	b.n	800138c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014d2:	68ca      	ldr	r2, [r1, #12]
 80014d4:	320c      	adds	r2, #12
          break;
 80014d6:	e759      	b.n	800138c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014d8:	2204      	movs	r2, #4
 80014da:	e757      	b.n	800138c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014dc:	2500      	movs	r5, #0
 80014de:	e7a2      	b.n	8001426 <HAL_GPIO_Init+0xde>
 80014e0:	2501      	movs	r5, #1
 80014e2:	e7a0      	b.n	8001426 <HAL_GPIO_Init+0xde>
 80014e4:	2502      	movs	r5, #2
 80014e6:	e79e      	b.n	8001426 <HAL_GPIO_Init+0xde>
 80014e8:	40010400 	.word	0x40010400
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010800 	.word	0x40010800
 80014f4:	10210000 	.word	0x10210000
 80014f8:	10310000 	.word	0x10310000
 80014fc:	10320000 	.word	0x10320000
 8001500:	10110000 	.word	0x10110000
 8001504:	10220000 	.word	0x10220000

08001508 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001508:	6883      	ldr	r3, [r0, #8]
 800150a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800150c:	bf14      	ite	ne
 800150e:	2001      	movne	r0, #1
 8001510:	2000      	moveq	r0, #0
 8001512:	4770      	bx	lr

08001514 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	b10a      	cbz	r2, 800151a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001516:	6101      	str	r1, [r0, #16]
 8001518:	4770      	bx	lr
 800151a:	0409      	lsls	r1, r1, #16
 800151c:	e7fb      	b.n	8001516 <HAL_GPIO_WritePin+0x2>

0800151e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800151e:	68c3      	ldr	r3, [r0, #12]
 8001520:	4059      	eors	r1, r3
 8001522:	60c1      	str	r1, [r0, #12]
 8001524:	4770      	bx	lr
	...

08001528 <HAL_I2C_Init>:
  * @param  hi2c: pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001528:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 800152a:	4604      	mov	r4, r0
 800152c:	2800      	cmp	r0, #0
 800152e:	d063      	beq.n	80015f8 <HAL_I2C_Init+0xd0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001530:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001534:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001538:	b91b      	cbnz	r3, 8001542 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800153a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800153e:	f001 fbb3 	bl	8002ca8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001542:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001544:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001546:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800154a:	6813      	ldr	r3, [r2, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800154c:	4e2b      	ldr	r6, [pc, #172]	; (80015fc <HAL_I2C_Init+0xd4>)
  __HAL_I2C_DISABLE(hi2c);
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001554:	f000 faca 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001558:	6863      	ldr	r3, [r4, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800155a:	4d29      	ldr	r5, [pc, #164]	; (8001600 <HAL_I2C_Init+0xd8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800155c:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 800155e:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001562:	bf88      	it	hi
 8001564:	f44f 7196 	movhi.w	r1, #300	; 0x12c
  hi2c->Instance->CR2 = freqrange;
 8001568:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800156a:	bf88      	it	hi
 800156c:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 800156e:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001570:	bf85      	ittet	hi
 8001572:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001576:	fbb1 f1f5 	udivhi	r1, r1, r5
 800157a:	1c69      	addls	r1, r5, #1
 800157c:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800157e:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001580:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001582:	d821      	bhi.n	80015c8 <HAL_I2C_Init+0xa0>
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	fbb0 f0f3 	udiv	r0, r0, r3
 800158a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 800158e:	2b03      	cmp	r3, #3
 8001590:	bf98      	it	ls
 8001592:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001594:	6a21      	ldr	r1, [r4, #32]
 8001596:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001598:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800159a:	430b      	orrs	r3, r1
 800159c:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800159e:	68e1      	ldr	r1, [r4, #12]
 80015a0:	6923      	ldr	r3, [r4, #16]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a2:	2000      	movs	r0, #0
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80015a8:	69a1      	ldr	r1, [r4, #24]
 80015aa:	6963      	ldr	r3, [r4, #20]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80015b0:	6813      	ldr	r3, [r2, #0]
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80015b8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ba:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80015c6:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80015c8:	68a1      	ldr	r1, [r4, #8]
 80015ca:	b949      	cbnz	r1, 80015e0 <HAL_I2C_Init+0xb8>
 80015cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80015d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80015d4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80015d8:	b163      	cbz	r3, 80015f4 <HAL_I2C_Init+0xcc>
 80015da:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80015de:	e7d9      	b.n	8001594 <HAL_I2C_Init+0x6c>
 80015e0:	2119      	movs	r1, #25
 80015e2:	434b      	muls	r3, r1
 80015e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80015e8:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80015ec:	b113      	cbz	r3, 80015f4 <HAL_I2C_Init+0xcc>
 80015ee:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80015f2:	e7cf      	b.n	8001594 <HAL_I2C_Init+0x6c>
 80015f4:	2001      	movs	r0, #1
 80015f6:	e7cd      	b.n	8001594 <HAL_I2C_Init+0x6c>
    return HAL_ERROR;
 80015f8:	2001      	movs	r0, #1
}
 80015fa:	bd70      	pop	{r4, r5, r6, pc}
 80015fc:	000186a0 	.word	0x000186a0
 8001600:	000f4240 	.word	0x000f4240

08001604 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001604:	6803      	ldr	r3, [r0, #0]
{
 8001606:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	07db      	lsls	r3, r3, #31
{
 800160c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160e:	d410      	bmi.n	8001632 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001610:	682b      	ldr	r3, [r5, #0]
 8001612:	079f      	lsls	r7, r3, #30
 8001614:	d45e      	bmi.n	80016d4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001616:	682b      	ldr	r3, [r5, #0]
 8001618:	0719      	lsls	r1, r3, #28
 800161a:	f100 8095 	bmi.w	8001748 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161e:	682b      	ldr	r3, [r5, #0]
 8001620:	075a      	lsls	r2, r3, #29
 8001622:	f100 80bf 	bmi.w	80017a4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001626:	69ea      	ldr	r2, [r5, #28]
 8001628:	2a00      	cmp	r2, #0
 800162a:	f040 812d 	bne.w	8001888 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800162e:	2000      	movs	r0, #0
 8001630:	e014      	b.n	800165c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001632:	4c90      	ldr	r4, [pc, #576]	; (8001874 <HAL_RCC_OscConfig+0x270>)
 8001634:	6863      	ldr	r3, [r4, #4]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b04      	cmp	r3, #4
 800163c:	d007      	beq.n	800164e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800163e:	6863      	ldr	r3, [r4, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d10c      	bne.n	8001662 <HAL_RCC_OscConfig+0x5e>
 8001648:	6863      	ldr	r3, [r4, #4]
 800164a:	03de      	lsls	r6, r3, #15
 800164c:	d509      	bpl.n	8001662 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	039c      	lsls	r4, r3, #14
 8001652:	d5dd      	bpl.n	8001610 <HAL_RCC_OscConfig+0xc>
 8001654:	686b      	ldr	r3, [r5, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1da      	bne.n	8001610 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800165a:	2001      	movs	r0, #1
}
 800165c:	b002      	add	sp, #8
 800165e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001662:	686b      	ldr	r3, [r5, #4]
 8001664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001668:	d110      	bne.n	800168c <HAL_RCC_OscConfig+0x88>
 800166a:	6823      	ldr	r3, [r4, #0]
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001672:	f7ff fa33 	bl	8000adc <HAL_GetTick>
 8001676:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	0398      	lsls	r0, r3, #14
 800167c:	d4c8      	bmi.n	8001610 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800167e:	f7ff fa2d 	bl	8000adc <HAL_GetTick>
 8001682:	1b80      	subs	r0, r0, r6
 8001684:	2864      	cmp	r0, #100	; 0x64
 8001686:	d9f7      	bls.n	8001678 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001688:	2003      	movs	r0, #3
 800168a:	e7e7      	b.n	800165c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168c:	b99b      	cbnz	r3, 80016b6 <HAL_RCC_OscConfig+0xb2>
 800168e:	6823      	ldr	r3, [r4, #0]
 8001690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001694:	6023      	str	r3, [r4, #0]
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800169e:	f7ff fa1d 	bl	8000adc <HAL_GetTick>
 80016a2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	0399      	lsls	r1, r3, #14
 80016a8:	d5b2      	bpl.n	8001610 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016aa:	f7ff fa17 	bl	8000adc <HAL_GetTick>
 80016ae:	1b80      	subs	r0, r0, r6
 80016b0:	2864      	cmp	r0, #100	; 0x64
 80016b2:	d9f7      	bls.n	80016a4 <HAL_RCC_OscConfig+0xa0>
 80016b4:	e7e8      	b.n	8001688 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	d103      	bne.n	80016c6 <HAL_RCC_OscConfig+0xc2>
 80016be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c2:	6023      	str	r3, [r4, #0]
 80016c4:	e7d1      	b.n	800166a <HAL_RCC_OscConfig+0x66>
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ca:	6023      	str	r3, [r4, #0]
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d2:	e7cd      	b.n	8001670 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016d4:	4c67      	ldr	r4, [pc, #412]	; (8001874 <HAL_RCC_OscConfig+0x270>)
 80016d6:	6863      	ldr	r3, [r4, #4]
 80016d8:	f013 0f0c 	tst.w	r3, #12
 80016dc:	d007      	beq.n	80016ee <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016de:	6863      	ldr	r3, [r4, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d110      	bne.n	800170a <HAL_RCC_OscConfig+0x106>
 80016e8:	6863      	ldr	r3, [r4, #4]
 80016ea:	03da      	lsls	r2, r3, #15
 80016ec:	d40d      	bmi.n	800170a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	079b      	lsls	r3, r3, #30
 80016f2:	d502      	bpl.n	80016fa <HAL_RCC_OscConfig+0xf6>
 80016f4:	692b      	ldr	r3, [r5, #16]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d1af      	bne.n	800165a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fa:	6823      	ldr	r3, [r4, #0]
 80016fc:	696a      	ldr	r2, [r5, #20]
 80016fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001702:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001706:	6023      	str	r3, [r4, #0]
 8001708:	e785      	b.n	8001616 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800170a:	692a      	ldr	r2, [r5, #16]
 800170c:	4b5a      	ldr	r3, [pc, #360]	; (8001878 <HAL_RCC_OscConfig+0x274>)
 800170e:	b16a      	cbz	r2, 800172c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001714:	f7ff f9e2 	bl	8000adc <HAL_GetTick>
 8001718:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	079f      	lsls	r7, r3, #30
 800171e:	d4ec      	bmi.n	80016fa <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff f9dc 	bl	8000adc <HAL_GetTick>
 8001724:	1b80      	subs	r0, r0, r6
 8001726:	2802      	cmp	r0, #2
 8001728:	d9f7      	bls.n	800171a <HAL_RCC_OscConfig+0x116>
 800172a:	e7ad      	b.n	8001688 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800172c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800172e:	f7ff f9d5 	bl	8000adc <HAL_GetTick>
 8001732:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001734:	6823      	ldr	r3, [r4, #0]
 8001736:	0798      	lsls	r0, r3, #30
 8001738:	f57f af6d 	bpl.w	8001616 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800173c:	f7ff f9ce 	bl	8000adc <HAL_GetTick>
 8001740:	1b80      	subs	r0, r0, r6
 8001742:	2802      	cmp	r0, #2
 8001744:	d9f6      	bls.n	8001734 <HAL_RCC_OscConfig+0x130>
 8001746:	e79f      	b.n	8001688 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001748:	69aa      	ldr	r2, [r5, #24]
 800174a:	4c4a      	ldr	r4, [pc, #296]	; (8001874 <HAL_RCC_OscConfig+0x270>)
 800174c:	4b4b      	ldr	r3, [pc, #300]	; (800187c <HAL_RCC_OscConfig+0x278>)
 800174e:	b1da      	cbz	r2, 8001788 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001750:	2201      	movs	r2, #1
 8001752:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001754:	f7ff f9c2 	bl	8000adc <HAL_GetTick>
 8001758:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800175c:	079b      	lsls	r3, r3, #30
 800175e:	d50d      	bpl.n	800177c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001760:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001764:	4b46      	ldr	r3, [pc, #280]	; (8001880 <HAL_RCC_OscConfig+0x27c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	fbb3 f3f2 	udiv	r3, r3, r2
 800176c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800176e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001770:	9b01      	ldr	r3, [sp, #4]
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	9201      	str	r2, [sp, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f9      	bne.n	800176e <HAL_RCC_OscConfig+0x16a>
 800177a:	e750      	b.n	800161e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177c:	f7ff f9ae 	bl	8000adc <HAL_GetTick>
 8001780:	1b80      	subs	r0, r0, r6
 8001782:	2802      	cmp	r0, #2
 8001784:	d9e9      	bls.n	800175a <HAL_RCC_OscConfig+0x156>
 8001786:	e77f      	b.n	8001688 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001788:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800178a:	f7ff f9a7 	bl	8000adc <HAL_GetTick>
 800178e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001792:	079f      	lsls	r7, r3, #30
 8001794:	f57f af43 	bpl.w	800161e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001798:	f7ff f9a0 	bl	8000adc <HAL_GetTick>
 800179c:	1b80      	subs	r0, r0, r6
 800179e:	2802      	cmp	r0, #2
 80017a0:	d9f6      	bls.n	8001790 <HAL_RCC_OscConfig+0x18c>
 80017a2:	e771      	b.n	8001688 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a4:	4c33      	ldr	r4, [pc, #204]	; (8001874 <HAL_RCC_OscConfig+0x270>)
 80017a6:	69e3      	ldr	r3, [r4, #28]
 80017a8:	00d8      	lsls	r0, r3, #3
 80017aa:	d424      	bmi.n	80017f6 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80017ac:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	69e3      	ldr	r3, [r4, #28]
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	61e3      	str	r3, [r4, #28]
 80017b6:	69e3      	ldr	r3, [r4, #28]
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	4e30      	ldr	r6, [pc, #192]	; (8001884 <HAL_RCC_OscConfig+0x280>)
 80017c2:	6833      	ldr	r3, [r6, #0]
 80017c4:	05d9      	lsls	r1, r3, #23
 80017c6:	d518      	bpl.n	80017fa <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c8:	68eb      	ldr	r3, [r5, #12]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d126      	bne.n	800181c <HAL_RCC_OscConfig+0x218>
 80017ce:	6a23      	ldr	r3, [r4, #32]
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017d6:	f7ff f981 	bl	8000adc <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017de:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	6a23      	ldr	r3, [r4, #32]
 80017e2:	079b      	lsls	r3, r3, #30
 80017e4:	d53f      	bpl.n	8001866 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80017e6:	2f00      	cmp	r7, #0
 80017e8:	f43f af1d 	beq.w	8001626 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ec:	69e3      	ldr	r3, [r4, #28]
 80017ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017f2:	61e3      	str	r3, [r4, #28]
 80017f4:	e717      	b.n	8001626 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80017f6:	2700      	movs	r7, #0
 80017f8:	e7e2      	b.n	80017c0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fa:	6833      	ldr	r3, [r6, #0]
 80017fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001800:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001802:	f7ff f96b 	bl	8000adc <HAL_GetTick>
 8001806:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	6833      	ldr	r3, [r6, #0]
 800180a:	05da      	lsls	r2, r3, #23
 800180c:	d4dc      	bmi.n	80017c8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180e:	f7ff f965 	bl	8000adc <HAL_GetTick>
 8001812:	eba0 0008 	sub.w	r0, r0, r8
 8001816:	2864      	cmp	r0, #100	; 0x64
 8001818:	d9f6      	bls.n	8001808 <HAL_RCC_OscConfig+0x204>
 800181a:	e735      	b.n	8001688 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800181c:	b9ab      	cbnz	r3, 800184a <HAL_RCC_OscConfig+0x246>
 800181e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6223      	str	r3, [r4, #32]
 800182a:	6a23      	ldr	r3, [r4, #32]
 800182c:	f023 0304 	bic.w	r3, r3, #4
 8001830:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001832:	f7ff f953 	bl	8000adc <HAL_GetTick>
 8001836:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	6a23      	ldr	r3, [r4, #32]
 800183a:	0798      	lsls	r0, r3, #30
 800183c:	d5d3      	bpl.n	80017e6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183e:	f7ff f94d 	bl	8000adc <HAL_GetTick>
 8001842:	1b80      	subs	r0, r0, r6
 8001844:	4540      	cmp	r0, r8
 8001846:	d9f7      	bls.n	8001838 <HAL_RCC_OscConfig+0x234>
 8001848:	e71e      	b.n	8001688 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184a:	2b05      	cmp	r3, #5
 800184c:	6a23      	ldr	r3, [r4, #32]
 800184e:	d103      	bne.n	8001858 <HAL_RCC_OscConfig+0x254>
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6223      	str	r3, [r4, #32]
 8001856:	e7ba      	b.n	80017ce <HAL_RCC_OscConfig+0x1ca>
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	6223      	str	r3, [r4, #32]
 800185e:	6a23      	ldr	r3, [r4, #32]
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	e7b6      	b.n	80017d4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff f939 	bl	8000adc <HAL_GetTick>
 800186a:	eba0 0008 	sub.w	r0, r0, r8
 800186e:	42b0      	cmp	r0, r6
 8001870:	d9b6      	bls.n	80017e0 <HAL_RCC_OscConfig+0x1dc>
 8001872:	e709      	b.n	8001688 <HAL_RCC_OscConfig+0x84>
 8001874:	40021000 	.word	0x40021000
 8001878:	42420000 	.word	0x42420000
 800187c:	42420480 	.word	0x42420480
 8001880:	20000018 	.word	0x20000018
 8001884:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001888:	4c22      	ldr	r4, [pc, #136]	; (8001914 <HAL_RCC_OscConfig+0x310>)
 800188a:	6863      	ldr	r3, [r4, #4]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	f43f aee2 	beq.w	800165a <HAL_RCC_OscConfig+0x56>
 8001896:	2300      	movs	r3, #0
 8001898:	4e1f      	ldr	r6, [pc, #124]	; (8001918 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189a:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800189c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189e:	d12b      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80018a0:	f7ff f91c 	bl	8000adc <HAL_GetTick>
 80018a4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	0199      	lsls	r1, r3, #6
 80018aa:	d41f      	bmi.n	80018ec <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018ac:	6a2b      	ldr	r3, [r5, #32]
 80018ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b2:	d105      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018b4:	6862      	ldr	r2, [r4, #4]
 80018b6:	68a9      	ldr	r1, [r5, #8]
 80018b8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80018bc:	430a      	orrs	r2, r1
 80018be:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80018c2:	6862      	ldr	r2, [r4, #4]
 80018c4:	430b      	orrs	r3, r1
 80018c6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80018ca:	4313      	orrs	r3, r2
 80018cc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80018ce:	2301      	movs	r3, #1
 80018d0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80018d2:	f7ff f903 	bl	8000adc <HAL_GetTick>
 80018d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d8:	6823      	ldr	r3, [r4, #0]
 80018da:	019a      	lsls	r2, r3, #6
 80018dc:	f53f aea7 	bmi.w	800162e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff f8fc 	bl	8000adc <HAL_GetTick>
 80018e4:	1b40      	subs	r0, r0, r5
 80018e6:	2802      	cmp	r0, #2
 80018e8:	d9f6      	bls.n	80018d8 <HAL_RCC_OscConfig+0x2d4>
 80018ea:	e6cd      	b.n	8001688 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f8f6 	bl	8000adc <HAL_GetTick>
 80018f0:	1bc0      	subs	r0, r0, r7
 80018f2:	2802      	cmp	r0, #2
 80018f4:	d9d7      	bls.n	80018a6 <HAL_RCC_OscConfig+0x2a2>
 80018f6:	e6c7      	b.n	8001688 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80018f8:	f7ff f8f0 	bl	8000adc <HAL_GetTick>
 80018fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	019b      	lsls	r3, r3, #6
 8001902:	f57f ae94 	bpl.w	800162e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff f8e9 	bl	8000adc <HAL_GetTick>
 800190a:	1b40      	subs	r0, r0, r5
 800190c:	2802      	cmp	r0, #2
 800190e:	d9f6      	bls.n	80018fe <HAL_RCC_OscConfig+0x2fa>
 8001910:	e6ba      	b.n	8001688 <HAL_RCC_OscConfig+0x84>
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000
 8001918:	42420060 	.word	0x42420060

0800191c <HAL_RCC_GetSysClockFreq>:
{
 800191c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800191e:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8001920:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001922:	ac02      	add	r4, sp, #8
 8001924:	f103 0510 	add.w	r5, r3, #16
 8001928:	4622      	mov	r2, r4
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	6859      	ldr	r1, [r3, #4]
 800192e:	3308      	adds	r3, #8
 8001930:	c203      	stmia	r2!, {r0, r1}
 8001932:	42ab      	cmp	r3, r5
 8001934:	4614      	mov	r4, r2
 8001936:	d1f7      	bne.n	8001928 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001938:	2301      	movs	r3, #1
 800193a:	f88d 3004 	strb.w	r3, [sp, #4]
 800193e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001940:	4912      	ldr	r1, [pc, #72]	; (800198c <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001942:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001946:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001948:	f003 020c 	and.w	r2, r3, #12
 800194c:	2a08      	cmp	r2, #8
 800194e:	d118      	bne.n	8001982 <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001950:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001954:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001956:	bf48      	it	mi
 8001958:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800195a:	a806      	add	r0, sp, #24
 800195c:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800195e:	bf48      	it	mi
 8001960:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001964:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001968:	bf41      	itttt	mi
 800196a:	aa06      	addmi	r2, sp, #24
 800196c:	189b      	addmi	r3, r3, r2
 800196e:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001972:	4b07      	ldrmi	r3, [pc, #28]	; (8001990 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001974:	bf54      	ite	pl
 8001976:	4b07      	ldrpl	r3, [pc, #28]	; (8001994 <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001978:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800197c:	4358      	muls	r0, r3
}
 800197e:	b007      	add	sp, #28
 8001980:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8001982:	4803      	ldr	r0, [pc, #12]	; (8001990 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8001984:	e7fb      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x62>
 8001986:	bf00      	nop
 8001988:	08005128 	.word	0x08005128
 800198c:	40021000 	.word	0x40021000
 8001990:	007a1200 	.word	0x007a1200
 8001994:	003d0900 	.word	0x003d0900

08001998 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001998:	4a4d      	ldr	r2, [pc, #308]	; (8001ad0 <HAL_RCC_ClockConfig+0x138>)
{
 800199a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800199e:	6813      	ldr	r3, [r2, #0]
{
 80019a0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	428b      	cmp	r3, r1
{
 80019a8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019aa:	d328      	bcc.n	80019fe <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ac:	682a      	ldr	r2, [r5, #0]
 80019ae:	0791      	lsls	r1, r2, #30
 80019b0:	d432      	bmi.n	8001a18 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b2:	07d2      	lsls	r2, r2, #31
 80019b4:	d438      	bmi.n	8001a28 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80019b6:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_RCC_ClockConfig+0x138>)
 80019b8:	6813      	ldr	r3, [r2, #0]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	429e      	cmp	r6, r3
 80019c0:	d373      	bcc.n	8001aaa <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c2:	682a      	ldr	r2, [r5, #0]
 80019c4:	4c43      	ldr	r4, [pc, #268]	; (8001ad4 <HAL_RCC_ClockConfig+0x13c>)
 80019c6:	f012 0f04 	tst.w	r2, #4
 80019ca:	d179      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019cc:	0713      	lsls	r3, r2, #28
 80019ce:	d506      	bpl.n	80019de <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019d0:	6863      	ldr	r3, [r4, #4]
 80019d2:	692a      	ldr	r2, [r5, #16]
 80019d4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019dc:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019de:	f7ff ff9d 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80019e2:	6863      	ldr	r3, [r4, #4]
 80019e4:	4a3c      	ldr	r2, [pc, #240]	; (8001ad8 <HAL_RCC_ClockConfig+0x140>)
 80019e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	40d8      	lsrs	r0, r3
 80019ee:	4b3b      	ldr	r3, [pc, #236]	; (8001adc <HAL_RCC_ClockConfig+0x144>)
 80019f0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff f844 	bl	8000a80 <HAL_InitTick>
  return HAL_OK;
 80019f8:	2000      	movs	r0, #0
}
 80019fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	6813      	ldr	r3, [r2, #0]
 8001a00:	f023 0307 	bic.w	r3, r3, #7
 8001a04:	430b      	orrs	r3, r1
 8001a06:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a08:	6813      	ldr	r3, [r2, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	4299      	cmp	r1, r3
 8001a10:	d0cc      	beq.n	80019ac <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001a12:	2001      	movs	r0, #1
 8001a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a18:	492e      	ldr	r1, [pc, #184]	; (8001ad4 <HAL_RCC_ClockConfig+0x13c>)
 8001a1a:	68a8      	ldr	r0, [r5, #8]
 8001a1c:	684b      	ldr	r3, [r1, #4]
 8001a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a22:	4303      	orrs	r3, r0
 8001a24:	604b      	str	r3, [r1, #4]
 8001a26:	e7c4      	b.n	80019b2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a28:	686a      	ldr	r2, [r5, #4]
 8001a2a:	4c2a      	ldr	r4, [pc, #168]	; (8001ad4 <HAL_RCC_ClockConfig+0x13c>)
 8001a2c:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a30:	d11c      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a36:	d0ec      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a38:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	f023 0303 	bic.w	r3, r3, #3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001a46:	f7ff f849 	bl	8000adc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4a:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001a4c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d114      	bne.n	8001a7c <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a52:	6863      	ldr	r3, [r4, #4]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d0ac      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7ff f83e 	bl	8000adc <HAL_GetTick>
 8001a60:	1bc0      	subs	r0, r0, r7
 8001a62:	4540      	cmp	r0, r8
 8001a64:	d9f5      	bls.n	8001a52 <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8001a66:	2003      	movs	r0, #3
 8001a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6c:	2a02      	cmp	r2, #2
 8001a6e:	d102      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a70:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a74:	e7df      	b.n	8001a36 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	f013 0f02 	tst.w	r3, #2
 8001a7a:	e7dc      	b.n	8001a36 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d10f      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a80:	6863      	ldr	r3, [r4, #4]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d095      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8a:	f7ff f827 	bl	8000adc <HAL_GetTick>
 8001a8e:	1bc0      	subs	r0, r0, r7
 8001a90:	4540      	cmp	r0, r8
 8001a92:	d9f5      	bls.n	8001a80 <HAL_RCC_ClockConfig+0xe8>
 8001a94:	e7e7      	b.n	8001a66 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a96:	f7ff f821 	bl	8000adc <HAL_GetTick>
 8001a9a:	1bc0      	subs	r0, r0, r7
 8001a9c:	4540      	cmp	r0, r8
 8001a9e:	d8e2      	bhi.n	8001a66 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa0:	6863      	ldr	r3, [r4, #4]
 8001aa2:	f013 0f0c 	tst.w	r3, #12
 8001aa6:	d1f6      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xfe>
 8001aa8:	e785      	b.n	80019b6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	6813      	ldr	r3, [r2, #0]
 8001aac:	f023 0307 	bic.w	r3, r3, #7
 8001ab0:	4333      	orrs	r3, r6
 8001ab2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ab4:	6813      	ldr	r3, [r2, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	429e      	cmp	r6, r3
 8001abc:	d1a9      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x7a>
 8001abe:	e780      	b.n	80019c2 <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac0:	6863      	ldr	r3, [r4, #4]
 8001ac2:	68e9      	ldr	r1, [r5, #12]
 8001ac4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ac8:	430b      	orrs	r3, r1
 8001aca:	6063      	str	r3, [r4, #4]
 8001acc:	e77e      	b.n	80019cc <HAL_RCC_ClockConfig+0x34>
 8001ace:	bf00      	nop
 8001ad0:	40022000 	.word	0x40022000
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	080051a9 	.word	0x080051a9
 8001adc:	20000018 	.word	0x20000018

08001ae0 <HAL_RCC_GetHCLKFreq>:
}
 8001ae0:	4b01      	ldr	r3, [pc, #4]	; (8001ae8 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000018 	.word	0x20000018

08001aec <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001afa:	6810      	ldr	r0, [r2, #0]
}    
 8001afc:	40d8      	lsrs	r0, r3
 8001afe:	4770      	bx	lr
 8001b00:	40021000 	.word	0x40021000
 8001b04:	080051b9 	.word	0x080051b9
 8001b08:	20000018 	.word	0x20000018

08001b0c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b0e:	4a05      	ldr	r2, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	4a03      	ldr	r2, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b1a:	6810      	ldr	r0, [r2, #0]
} 
 8001b1c:	40d8      	lsrs	r0, r3
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000
 8001b24:	080051b9 	.word	0x080051b9
 8001b28:	20000018 	.word	0x20000018

08001b2c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b2c:	6803      	ldr	r3, [r0, #0]
{
 8001b2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b32:	07d9      	lsls	r1, r3, #31
{
 8001b34:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b36:	d520      	bpl.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b38:	4c35      	ldr	r4, [pc, #212]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b3a:	69e3      	ldr	r3, [r4, #28]
 8001b3c:	00da      	lsls	r2, r3, #3
 8001b3e:	d432      	bmi.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001b40:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	69e3      	ldr	r3, [r4, #28]
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	61e3      	str	r3, [r4, #28]
 8001b4a:	69e3      	ldr	r3, [r4, #28]
 8001b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4e2f      	ldr	r6, [pc, #188]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001b56:	6833      	ldr	r3, [r6, #0]
 8001b58:	05db      	lsls	r3, r3, #23
 8001b5a:	d526      	bpl.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b5c:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b5e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b62:	d136      	bne.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b64:	6a23      	ldr	r3, [r4, #32]
 8001b66:	686a      	ldr	r2, [r5, #4]
 8001b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b70:	b11f      	cbz	r7, 8001b7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b72:	69e3      	ldr	r3, [r4, #28]
 8001b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b78:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b7a:	6828      	ldr	r0, [r5, #0]
 8001b7c:	0783      	lsls	r3, r0, #30
 8001b7e:	d506      	bpl.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b80:	4a23      	ldr	r2, [pc, #140]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b82:	68a9      	ldr	r1, [r5, #8]
 8001b84:	6853      	ldr	r3, [r2, #4]
 8001b86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b8e:	f010 0010 	ands.w	r0, r0, #16
 8001b92:	d01b      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b94:	4a1e      	ldr	r2, [pc, #120]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001b96:	68e9      	ldr	r1, [r5, #12]
 8001b98:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b9a:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b9c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	6053      	str	r3, [r2, #4]
 8001ba4:	e012      	b.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001ba6:	2700      	movs	r7, #0
 8001ba8:	e7d4      	b.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001baa:	6833      	ldr	r3, [r6, #0]
 8001bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001bb2:	f7fe ff93 	bl	8000adc <HAL_GetTick>
 8001bb6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	6833      	ldr	r3, [r6, #0]
 8001bba:	05d8      	lsls	r0, r3, #23
 8001bbc:	d4ce      	bmi.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bbe:	f7fe ff8d 	bl	8000adc <HAL_GetTick>
 8001bc2:	eba0 0008 	sub.w	r0, r0, r8
 8001bc6:	2864      	cmp	r0, #100	; 0x64
 8001bc8:	d9f6      	bls.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001bca:	2003      	movs	r0, #3
}
 8001bcc:	b002      	add	sp, #8
 8001bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bd2:	686a      	ldr	r2, [r5, #4]
 8001bd4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d0c3      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bdc:	2001      	movs	r0, #1
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001be0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001be2:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001be4:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001be6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bea:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001bec:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bee:	07d9      	lsls	r1, r3, #31
 8001bf0:	d5b8      	bpl.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001bf2:	f7fe ff73 	bl	8000adc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001bfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfc:	6a23      	ldr	r3, [r4, #32]
 8001bfe:	079a      	lsls	r2, r3, #30
 8001c00:	d4b0      	bmi.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7fe ff6b 	bl	8000adc <HAL_GetTick>
 8001c06:	1b80      	subs	r0, r0, r6
 8001c08:	4540      	cmp	r0, r8
 8001c0a:	d9f7      	bls.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001c0c:	e7dd      	b.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40007000 	.word	0x40007000
 8001c18:	42420440 	.word	0x42420440

08001c1c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c1c:	6a03      	ldr	r3, [r0, #32]
{
 8001c1e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c20:	f023 0301 	bic.w	r3, r3, #1
 8001c24:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c26:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c2a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c2e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001c32:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001c34:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001c36:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001c3a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001c3c:	4d0a      	ldr	r5, [pc, #40]	; (8001c68 <TIM_OC1_SetConfig+0x4c>)
 8001c3e:	42a8      	cmp	r0, r5
 8001c40:	d10b      	bne.n	8001c5a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001c42:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001c44:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001c48:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c4a:	698e      	ldr	r6, [r1, #24]
 8001c4c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001c4e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c52:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001c54:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001c58:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c5a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c5c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001c5e:	684a      	ldr	r2, [r1, #4]
 8001c60:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c62:	6203      	str	r3, [r0, #32]
 8001c64:	bd70      	pop	{r4, r5, r6, pc}
 8001c66:	bf00      	nop
 8001c68:	40012c00 	.word	0x40012c00

08001c6c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c6c:	6a03      	ldr	r3, [r0, #32]
{
 8001c6e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c74:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c76:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c78:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c7a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c7c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001c7e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001c82:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c84:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001c86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001c8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001c8e:	4d0b      	ldr	r5, [pc, #44]	; (8001cbc <TIM_OC3_SetConfig+0x50>)
 8001c90:	42a8      	cmp	r0, r5
 8001c92:	d10d      	bne.n	8001cb0 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c94:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001c96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001c9a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001c9e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001ca0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ca2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001ca6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ca8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001cac:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cb0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cb2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001cb4:	684a      	ldr	r2, [r1, #4]
 8001cb6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cb8:	6203      	str	r3, [r0, #32]
 8001cba:	bd70      	pop	{r4, r5, r6, pc}
 8001cbc:	40012c00 	.word	0x40012c00

08001cc0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cc0:	6a03      	ldr	r3, [r0, #32]
{
 8001cc2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001cc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cc8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cca:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ccc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cce:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cd0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001cd2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cd6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001cda:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001cdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ce0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ce4:	4d06      	ldr	r5, [pc, #24]	; (8001d00 <TIM_OC4_SetConfig+0x40>)
 8001ce6:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001ce8:	bf02      	ittt	eq
 8001cea:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001cec:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001cf0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cf4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001cf6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001cf8:	684a      	ldr	r2, [r1, #4]
 8001cfa:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001cfc:	6203      	str	r3, [r0, #32]
 8001cfe:	bd30      	pop	{r4, r5, pc}
 8001d00:	40012c00 	.word	0x40012c00

08001d04 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d04:	6803      	ldr	r3, [r0, #0]
}
 8001d06:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
}
 8001d18:	4770      	bx	lr

08001d1a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001d1a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001d1e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	f04f 0302 	mov.w	r3, #2
 8001d26:	d01c      	beq.n	8001d62 <HAL_TIM_ConfigClockSource+0x48>
 8001d28:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001d2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001d2e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001d30:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001d34:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d36:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001d3a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001d3e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001d40:	680a      	ldr	r2, [r1, #0]
 8001d42:	2a40      	cmp	r2, #64	; 0x40
 8001d44:	d079      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x120>
 8001d46:	d819      	bhi.n	8001d7c <HAL_TIM_ConfigClockSource+0x62>
 8001d48:	2a10      	cmp	r2, #16
 8001d4a:	f000 8093 	beq.w	8001e74 <HAL_TIM_ConfigClockSource+0x15a>
 8001d4e:	d80a      	bhi.n	8001d66 <HAL_TIM_ConfigClockSource+0x4c>
 8001d50:	2a00      	cmp	r2, #0
 8001d52:	f000 8089 	beq.w	8001e68 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001d56:	2301      	movs	r3, #1
 8001d58:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001d62:	4618      	mov	r0, r3
}
 8001d64:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001d66:	2a20      	cmp	r2, #32
 8001d68:	f000 808a 	beq.w	8001e80 <HAL_TIM_ConfigClockSource+0x166>
 8001d6c:	2a30      	cmp	r2, #48	; 0x30
 8001d6e:	d1f2      	bne.n	8001d56 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001d70:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d72:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d76:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001d7a:	e036      	b.n	8001dea <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001d7c:	2a70      	cmp	r2, #112	; 0x70
 8001d7e:	d036      	beq.n	8001dee <HAL_TIM_ConfigClockSource+0xd4>
 8001d80:	d81b      	bhi.n	8001dba <HAL_TIM_ConfigClockSource+0xa0>
 8001d82:	2a50      	cmp	r2, #80	; 0x50
 8001d84:	d042      	beq.n	8001e0c <HAL_TIM_ConfigClockSource+0xf2>
 8001d86:	2a60      	cmp	r2, #96	; 0x60
 8001d88:	d1e5      	bne.n	8001d56 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d8a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d8c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d8e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d92:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d94:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d96:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d98:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d9a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001da2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001da6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001daa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dac:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001dae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001db0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001db4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001db8:	e017      	b.n	8001dea <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001dba:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001dbe:	d011      	beq.n	8001de4 <HAL_TIM_ConfigClockSource+0xca>
 8001dc0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001dc4:	d1c7      	bne.n	8001d56 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dc6:	688a      	ldr	r2, [r1, #8]
 8001dc8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001dca:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dcc:	68c9      	ldr	r1, [r1, #12]
 8001dce:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dd0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001dd8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dda:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001de2:	e002      	b.n	8001dea <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	e7b3      	b.n	8001d56 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dee:	688a      	ldr	r2, [r1, #8]
 8001df0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001df2:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001df4:	68c9      	ldr	r1, [r1, #12]
 8001df6:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001df8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001dfc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e00:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001e02:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001e04:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e06:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001e0a:	e7ee      	b.n	8001dea <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e0c:	684c      	ldr	r4, [r1, #4]
 8001e0e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e10:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e12:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e14:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e18:	f025 0501 	bic.w	r5, r5, #1
 8001e1c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e1e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001e20:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e22:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e26:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e2c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001e2e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e30:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e34:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001e38:	e7d7      	b.n	8001dea <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e3a:	684c      	ldr	r4, [r1, #4]
 8001e3c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001e3e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e40:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e42:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e46:	f025 0501 	bic.w	r5, r5, #1
 8001e4a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e4c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001e4e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e50:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e54:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001e58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e5a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001e5c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e62:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001e66:	e7c0      	b.n	8001dea <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001e68:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e6e:	f042 0207 	orr.w	r2, r2, #7
 8001e72:	e7ba      	b.n	8001dea <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001e74:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e7a:	f042 0217 	orr.w	r2, r2, #23
 8001e7e:	e7b4      	b.n	8001dea <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001e80:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e86:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001e8a:	e7ae      	b.n	8001dea <HAL_TIM_ConfigClockSource+0xd0>

08001e8c <HAL_TIM_PeriodElapsedCallback>:
 8001e8c:	4770      	bx	lr

08001e8e <HAL_TIM_OC_DelayElapsedCallback>:
 8001e8e:	4770      	bx	lr

08001e90 <HAL_TIM_IC_CaptureCallback>:
 8001e90:	4770      	bx	lr

08001e92 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001e92:	4770      	bx	lr

08001e94 <HAL_TIM_TriggerCallback>:
 8001e94:	4770      	bx	lr

08001e96 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e96:	6803      	ldr	r3, [r0, #0]
{
 8001e98:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e9a:	691a      	ldr	r2, [r3, #16]
{
 8001e9c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e9e:	0791      	lsls	r1, r2, #30
 8001ea0:	d50e      	bpl.n	8001ec0 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	0792      	lsls	r2, r2, #30
 8001ea6:	d50b      	bpl.n	8001ec0 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea8:	f06f 0202 	mvn.w	r2, #2
 8001eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eae:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb0:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eb2:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb4:	079b      	lsls	r3, r3, #30
 8001eb6:	d077      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001eb8:	f7ff ffea 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	0750      	lsls	r0, r2, #29
 8001ec6:	d510      	bpl.n	8001eea <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	0751      	lsls	r1, r2, #29
 8001ecc:	d50d      	bpl.n	8001eea <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ece:	f06f 0204 	mvn.w	r2, #4
 8001ed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ed4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ed6:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ed8:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eda:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ee0:	d068      	beq.n	8001fb4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	f7ff ffd5 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	0712      	lsls	r2, r2, #28
 8001ef0:	d50f      	bpl.n	8001f12 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	0710      	lsls	r0, r2, #28
 8001ef6:	d50c      	bpl.n	8001f12 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ef8:	f06f 0208 	mvn.w	r2, #8
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001efe:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f00:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f02:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f04:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001f06:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f08:	d05a      	beq.n	8001fc0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0a:	f7ff ffc1 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	06d2      	lsls	r2, r2, #27
 8001f18:	d510      	bpl.n	8001f3c <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	06d0      	lsls	r0, r2, #27
 8001f1e:	d50d      	bpl.n	8001f3c <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f20:	f06f 0210 	mvn.w	r2, #16
 8001f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f26:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f28:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f2c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001f30:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f32:	d04b      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f34:	f7ff ffac 	bl	8001e90 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	07d1      	lsls	r1, r2, #31
 8001f42:	d508      	bpl.n	8001f56 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	07d2      	lsls	r2, r2, #31
 8001f48:	d505      	bpl.n	8001f56 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f4a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f50:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f52:	f7ff ff9b 	bl	8001e8c <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	0610      	lsls	r0, r2, #24
 8001f5c:	d508      	bpl.n	8001f70 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	0611      	lsls	r1, r2, #24
 8001f62:	d505      	bpl.n	8001f70 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001f68:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f6a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f6c:	f000 f975 	bl	800225a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f70:	6823      	ldr	r3, [r4, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	0652      	lsls	r2, r2, #25
 8001f76:	d508      	bpl.n	8001f8a <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	0650      	lsls	r0, r2, #25
 8001f7c:	d505      	bpl.n	8001f8a <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001f82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f84:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f86:	f7ff ff85 	bl	8001e94 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	0691      	lsls	r1, r2, #26
 8001f90:	d522      	bpl.n	8001fd8 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	0692      	lsls	r2, r2, #26
 8001f96:	d51f      	bpl.n	8001fd8 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f98:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001f9c:	4620      	mov	r0, r4
}
 8001f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fa2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001fa4:	f000 b958 	b.w	8002258 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fa8:	f7ff ff71 	bl	8001e8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fac:	4620      	mov	r0, r4
 8001fae:	f7ff ff70 	bl	8001e92 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fb2:	e783      	b.n	8001ebc <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb4:	f7ff ff6b 	bl	8001e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb8:	4620      	mov	r0, r4
 8001fba:	f7ff ff6a 	bl	8001e92 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fbe:	e792      	b.n	8001ee6 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc0:	f7ff ff65 	bl	8001e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff ff64 	bl	8001e92 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fca:	e7a0      	b.n	8001f0e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fcc:	f7ff ff5f 	bl	8001e8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff ff5e 	bl	8001e92 <HAL_TIM_PWM_PulseFinishedCallback>
 8001fd6:	e7af      	b.n	8001f38 <HAL_TIM_IRQHandler+0xa2>
 8001fd8:	bd10      	pop	{r4, pc}
	...

08001fdc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001fde:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe0:	4290      	cmp	r0, r2
 8001fe2:	d00a      	beq.n	8001ffa <TIM_Base_SetConfig+0x1e>
 8001fe4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fe8:	d007      	beq.n	8001ffa <TIM_Base_SetConfig+0x1e>
 8001fea:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001fee:	4290      	cmp	r0, r2
 8001ff0:	d003      	beq.n	8001ffa <TIM_Base_SetConfig+0x1e>
 8001ff2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ff6:	4290      	cmp	r0, r2
 8001ff8:	d115      	bne.n	8002026 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001ffa:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002000:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002002:	4a11      	ldr	r2, [pc, #68]	; (8002048 <TIM_Base_SetConfig+0x6c>)
 8002004:	4290      	cmp	r0, r2
 8002006:	d00a      	beq.n	800201e <TIM_Base_SetConfig+0x42>
 8002008:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800200c:	d007      	beq.n	800201e <TIM_Base_SetConfig+0x42>
 800200e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002012:	4290      	cmp	r0, r2
 8002014:	d003      	beq.n	800201e <TIM_Base_SetConfig+0x42>
 8002016:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800201a:	4290      	cmp	r0, r2
 800201c:	d103      	bne.n	8002026 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800201e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002024:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002026:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800202c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800202e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002030:	688b      	ldr	r3, [r1, #8]
 8002032:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002034:	680b      	ldr	r3, [r1, #0]
 8002036:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002038:	4b03      	ldr	r3, [pc, #12]	; (8002048 <TIM_Base_SetConfig+0x6c>)
 800203a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800203c:	bf04      	itt	eq
 800203e:	690b      	ldreq	r3, [r1, #16]
 8002040:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002042:	2301      	movs	r3, #1
 8002044:	6143      	str	r3, [r0, #20]
 8002046:	4770      	bx	lr
 8002048:	40012c00 	.word	0x40012c00

0800204c <HAL_TIM_Base_Init>:
{
 800204c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800204e:	4604      	mov	r4, r0
 8002050:	b1a0      	cbz	r0, 800207c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002052:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002056:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800205a:	b91b      	cbnz	r3, 8002064 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800205c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002060:	f000 fe58 	bl	8002d14 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002064:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002066:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002068:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800206c:	1d21      	adds	r1, r4, #4
 800206e:	f7ff ffb5 	bl	8001fdc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002072:	2301      	movs	r3, #1
  return HAL_OK;
 8002074:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002076:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800207a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800207c:	2001      	movs	r0, #1
}
 800207e:	bd10      	pop	{r4, pc}

08002080 <HAL_TIM_PWM_Init>:
{
 8002080:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002082:	4604      	mov	r4, r0
 8002084:	b1a0      	cbz	r0, 80020b0 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002086:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800208a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800208e:	b91b      	cbnz	r3, 8002098 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002090:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002094:	f000 fe2a 	bl	8002cec <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002098:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800209c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a0:	1d21      	adds	r1, r4, #4
 80020a2:	f7ff ff9b 	bl	8001fdc <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80020a6:	2301      	movs	r3, #1
  return HAL_OK;
 80020a8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80020aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80020ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020b0:	2001      	movs	r0, #1
}
 80020b2:	bd10      	pop	{r4, pc}

080020b4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020b4:	6a03      	ldr	r3, [r0, #32]
{
 80020b6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020b8:	f023 0310 	bic.w	r3, r3, #16
 80020bc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80020be:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80020c0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80020c2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80020c6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020ce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80020d0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80020d4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80020d8:	4d0b      	ldr	r5, [pc, #44]	; (8002108 <TIM_OC2_SetConfig+0x54>)
 80020da:	42a8      	cmp	r0, r5
 80020dc:	d10d      	bne.n	80020fa <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020de:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80020e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80020e8:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80020ea:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020ec:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80020f0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80020f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80020f6:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80020fa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80020fc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80020fe:	684a      	ldr	r2, [r1, #4]
 8002100:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002102:	6203      	str	r3, [r0, #32]
 8002104:	bd70      	pop	{r4, r5, r6, pc}
 8002106:	bf00      	nop
 8002108:	40012c00 	.word	0x40012c00

0800210c <HAL_TIM_PWM_ConfigChannel>:
{
 800210c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800210e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002112:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002114:	2b01      	cmp	r3, #1
 8002116:	f04f 0002 	mov.w	r0, #2
 800211a:	d025      	beq.n	8002168 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800211c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800211e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002122:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8002126:	2a0c      	cmp	r2, #12
 8002128:	d818      	bhi.n	800215c <HAL_TIM_PWM_ConfigChannel+0x50>
 800212a:	e8df f002 	tbb	[pc, r2]
 800212e:	1707      	.short	0x1707
 8002130:	171e1717 	.word	0x171e1717
 8002134:	172f1717 	.word	0x172f1717
 8002138:	1717      	.short	0x1717
 800213a:	40          	.byte	0x40
 800213b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800213c:	6820      	ldr	r0, [r4, #0]
 800213e:	f7ff fd6d 	bl	8001c1c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002142:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002144:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002146:	699a      	ldr	r2, [r3, #24]
 8002148:	f042 0208 	orr.w	r2, r2, #8
 800214c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800214e:	699a      	ldr	r2, [r3, #24]
 8002150:	f022 0204 	bic.w	r2, r2, #4
 8002154:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002156:	699a      	ldr	r2, [r3, #24]
 8002158:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800215a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800215c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800215e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002160:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002164:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002168:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800216a:	6820      	ldr	r0, [r4, #0]
 800216c:	f7ff ffa2 	bl	80020b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002170:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002172:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800218a:	e7e6      	b.n	800215a <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800218c:	6820      	ldr	r0, [r4, #0]
 800218e:	f7ff fd6d 	bl	8001c6c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002192:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002194:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002196:	69da      	ldr	r2, [r3, #28]
 8002198:	f042 0208 	orr.w	r2, r2, #8
 800219c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800219e:	69da      	ldr	r2, [r3, #28]
 80021a0:	f022 0204 	bic.w	r2, r2, #4
 80021a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021a6:	69da      	ldr	r2, [r3, #28]
 80021a8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80021aa:	61da      	str	r2, [r3, #28]
    break;
 80021ac:	e7d6      	b.n	800215c <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021ae:	6820      	ldr	r0, [r4, #0]
 80021b0:	f7ff fd86 	bl	8001cc0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021b4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80021b6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021b8:	69da      	ldr	r2, [r3, #28]
 80021ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021c0:	69da      	ldr	r2, [r3, #28]
 80021c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80021c8:	69da      	ldr	r2, [r3, #28]
 80021ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021ce:	e7ec      	b.n	80021aa <HAL_TIM_PWM_ConfigChannel+0x9e>

080021d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80021d0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80021d2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80021d4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80021d6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80021d8:	ea23 0304 	bic.w	r3, r3, r4
 80021dc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80021de:	6a03      	ldr	r3, [r0, #32]
 80021e0:	408a      	lsls	r2, r1
 80021e2:	431a      	orrs	r2, r3
 80021e4:	6202      	str	r2, [r0, #32]
 80021e6:	bd10      	pop	{r4, pc}

080021e8 <HAL_TIM_PWM_Start>:
{
 80021e8:	b510      	push	{r4, lr}
 80021ea:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021ec:	2201      	movs	r2, #1
 80021ee:	6800      	ldr	r0, [r0, #0]
 80021f0:	f7ff ffee 	bl	80021d0 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	4a06      	ldr	r2, [pc, #24]	; (8002210 <HAL_TIM_PWM_Start+0x28>)
}
 80021f8:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021fa:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80021fc:	bf02      	ittt	eq
 80021fe:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002200:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8002204:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	bd10      	pop	{r4, pc}
 8002210:	40012c00 	.word	0x40012c00

08002214 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8002214:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002218:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800221a:	2b01      	cmp	r3, #1
 800221c:	f04f 0302 	mov.w	r3, #2
 8002220:	d018      	beq.n	8002254 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8002222:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002226:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002228:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800222a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800222c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800222e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002232:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4322      	orrs	r2, r4
 8002238:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002240:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	430a      	orrs	r2, r1
 8002246:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8002248:	2301      	movs	r3, #1
 800224a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800224e:	2300      	movs	r3, #0
 8002250:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002254:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002256:	bd10      	pop	{r4, pc}

08002258 <HAL_TIMEx_CommutationCallback>:
 8002258:	4770      	bx	lr

0800225a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800225a:	4770      	bx	lr

0800225c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800225c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002260:	6805      	ldr	r5, [r0, #0]
 8002262:	68c2      	ldr	r2, [r0, #12]
 8002264:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002266:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002268:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800226c:	4313      	orrs	r3, r2
 800226e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002270:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002272:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002274:	430b      	orrs	r3, r1
 8002276:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002278:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800227c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002280:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002282:	4313      	orrs	r3, r2
 8002284:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002286:	696b      	ldr	r3, [r5, #20]
 8002288:	6982      	ldr	r2, [r0, #24]
 800228a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228e:	4313      	orrs	r3, r2
 8002290:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002292:	4b40      	ldr	r3, [pc, #256]	; (8002394 <UART_SetConfig+0x138>)
{
 8002294:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002296:	429d      	cmp	r5, r3
 8002298:	f04f 0419 	mov.w	r4, #25
 800229c:	d146      	bne.n	800232c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800229e:	f7ff fc35 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 80022a2:	fb04 f300 	mul.w	r3, r4, r0
 80022a6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80022aa:	f04f 0864 	mov.w	r8, #100	; 0x64
 80022ae:	00b6      	lsls	r6, r6, #2
 80022b0:	fbb3 f3f6 	udiv	r3, r3, r6
 80022b4:	fbb3 f3f8 	udiv	r3, r3, r8
 80022b8:	011e      	lsls	r6, r3, #4
 80022ba:	f7ff fc27 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 80022be:	4360      	muls	r0, r4
 80022c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	fbb0 f7f3 	udiv	r7, r0, r3
 80022ca:	f7ff fc1f 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 80022ce:	4360      	muls	r0, r4
 80022d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022da:	fbb3 f3f8 	udiv	r3, r3, r8
 80022de:	fb08 7313 	mls	r3, r8, r3, r7
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	3332      	adds	r3, #50	; 0x32
 80022e6:	fbb3 f3f8 	udiv	r3, r3, r8
 80022ea:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80022ee:	f7ff fc0d 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
 80022f2:	4360      	muls	r0, r4
 80022f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80022f8:	0092      	lsls	r2, r2, #2
 80022fa:	fbb0 faf2 	udiv	sl, r0, r2
 80022fe:	f7ff fc05 	bl	8001b0c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002302:	4360      	muls	r0, r4
 8002304:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	fbb0 f3f3 	udiv	r3, r0, r3
 800230e:	fbb3 f3f8 	udiv	r3, r3, r8
 8002312:	fb08 a313 	mls	r3, r8, r3, sl
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	3332      	adds	r3, #50	; 0x32
 800231a:	fbb3 f3f8 	udiv	r3, r3, r8
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	433b      	orrs	r3, r7
 8002324:	4433      	add	r3, r6
 8002326:	60ab      	str	r3, [r5, #8]
 8002328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800232c:	f7ff fbde 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8002330:	fb04 f300 	mul.w	r3, r4, r0
 8002334:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002338:	f04f 0864 	mov.w	r8, #100	; 0x64
 800233c:	00b6      	lsls	r6, r6, #2
 800233e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002342:	fbb3 f3f8 	udiv	r3, r3, r8
 8002346:	011e      	lsls	r6, r3, #4
 8002348:	f7ff fbd0 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 800234c:	4360      	muls	r0, r4
 800234e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	fbb0 f7f3 	udiv	r7, r0, r3
 8002358:	f7ff fbc8 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 800235c:	4360      	muls	r0, r4
 800235e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fbb0 f3f3 	udiv	r3, r0, r3
 8002368:	fbb3 f3f8 	udiv	r3, r3, r8
 800236c:	fb08 7313 	mls	r3, r8, r3, r7
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	3332      	adds	r3, #50	; 0x32
 8002374:	fbb3 f3f8 	udiv	r3, r3, r8
 8002378:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800237c:	f7ff fbb6 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8002380:	4360      	muls	r0, r4
 8002382:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002386:	0092      	lsls	r2, r2, #2
 8002388:	fbb0 faf2 	udiv	sl, r0, r2
 800238c:	f7ff fbae 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8002390:	e7b7      	b.n	8002302 <UART_SetConfig+0xa6>
 8002392:	bf00      	nop
 8002394:	40013800 	.word	0x40013800

08002398 <HAL_UART_Init>:
{
 8002398:	b510      	push	{r4, lr}
  if(huart == NULL)
 800239a:	4604      	mov	r4, r0
 800239c:	b340      	cbz	r0, 80023f0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800239e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023a6:	b91b      	cbnz	r3, 80023b0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80023a8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80023ac:	f000 fce6 	bl	8002d7c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80023b0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80023b2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023b4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80023b8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80023ba:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80023bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023c0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80023c2:	f7ff ff4b 	bl	800225c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023c6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ca:	691a      	ldr	r2, [r3, #16]
 80023cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023d8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e0:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 80023e2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80023e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80023ea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80023ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023f0:	2001      	movs	r0, #1
}
 80023f2:	bd10      	pop	{r4, pc}
 80023f4:	0000      	movs	r0, r0
	...

080023f8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023f8:	b508      	push	{r3, lr}
	temp = adc_buf*0.95;
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_ADC_ConvCpltCallback+0x28>)
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	f7fd fff1 	bl	80003e4 <__aeabi_ui2d>
 8002402:	a305      	add	r3, pc, #20	; (adr r3, 8002418 <HAL_ADC_ConvCpltCallback+0x20>)
 8002404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002408:	f7fe f862 	bl	80004d0 <__aeabi_dmul>
 800240c:	f7fe fb10 	bl	8000a30 <__aeabi_d2iz>
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <HAL_ADC_ConvCpltCallback+0x2c>)
 8002412:	6018      	str	r0, [r3, #0]
 8002414:	bd08      	pop	{r3, pc}
 8002416:	bf00      	nop
 8002418:	66666666 	.word	0x66666666
 800241c:	3fee6666 	.word	0x3fee6666
 8002420:	2000045c 	.word	0x2000045c
 8002424:	200002e0 	.word	0x200002e0

08002428 <write_lcd>:
}


void write_lcd (uint8_t data, uint8_t cmd_data)
{
 8002428:	b510      	push	{r4, lr}
	// identifica comando ou dado
	if (cmd_data) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 800242a:	460a      	mov	r2, r1
{
 800242c:	4604      	mov	r4, r0
	if (cmd_data) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 800242e:	b101      	cbz	r1, 8002432 <write_lcd+0xa>
 8002430:	2201      	movs	r2, #1
	else 					HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8002432:	2120      	movs	r1, #32
 8002434:	4832      	ldr	r0, [pc, #200]	; (8002500 <write_lcd+0xd8>)
 8002436:	f7ff f86d 	bl	8001514 <HAL_GPIO_WritePin>

	// 4 bits high
	if (data & 0x80) HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 800243a:	0623      	lsls	r3, r4, #24
 800243c:	bf4c      	ite	mi
 800243e:	2201      	movmi	r2, #1
	else						 HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8002440:	2200      	movpl	r2, #0
 8002442:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002446:	482f      	ldr	r0, [pc, #188]	; (8002504 <write_lcd+0xdc>)
 8002448:	f7ff f864 	bl	8001514 <HAL_GPIO_WritePin>
	if (data & 0x40) HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 800244c:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 8002450:	bf18      	it	ne
 8002452:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8002454:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002458:	482a      	ldr	r0, [pc, #168]	; (8002504 <write_lcd+0xdc>)
 800245a:	f7ff f85b 	bl	8001514 <HAL_GPIO_WritePin>
	if (data & 0x20) HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 800245e:	f014 0220 	ands.w	r2, r4, #32
 8002462:	bf18      	it	ne
 8002464:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8002466:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800246a:	4826      	ldr	r0, [pc, #152]	; (8002504 <write_lcd+0xdc>)
 800246c:	f7ff f852 	bl	8001514 <HAL_GPIO_WritePin>
	if (data & 0x10) HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8002470:	f014 0210 	ands.w	r2, r4, #16
 8002474:	bf18      	it	ne
 8002476:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8002478:	2108      	movs	r1, #8
 800247a:	4821      	ldr	r0, [pc, #132]	; (8002500 <write_lcd+0xd8>)
 800247c:	f7ff f84a 	bl	8001514 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8002480:	2201      	movs	r2, #1
 8002482:	2110      	movs	r1, #16
 8002484:	481e      	ldr	r0, [pc, #120]	; (8002500 <write_lcd+0xd8>)
 8002486:	f7ff f845 	bl	8001514 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800248a:	2002      	movs	r0, #2
 800248c:	f7fe fb2c 	bl	8000ae8 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8002490:	2200      	movs	r2, #0
 8002492:	2110      	movs	r1, #16
 8002494:	481a      	ldr	r0, [pc, #104]	; (8002500 <write_lcd+0xd8>)
 8002496:	f7ff f83d 	bl	8001514 <HAL_GPIO_WritePin>

	// 4 bits Low
	if (data & 0x08) HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 800249a:	f014 0208 	ands.w	r2, r4, #8
 800249e:	bf18      	it	ne
 80024a0:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 80024a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024a6:	4817      	ldr	r0, [pc, #92]	; (8002504 <write_lcd+0xdc>)
 80024a8:	f7ff f834 	bl	8001514 <HAL_GPIO_WritePin>
	if (data & 0x04) HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80024ac:	f014 0204 	ands.w	r2, r4, #4
 80024b0:	bf18      	it	ne
 80024b2:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 80024b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024b8:	4812      	ldr	r0, [pc, #72]	; (8002504 <write_lcd+0xdc>)
 80024ba:	f7ff f82b 	bl	8001514 <HAL_GPIO_WritePin>
	if (data & 0x02) HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80024be:	f014 0202 	ands.w	r2, r4, #2
 80024c2:	bf18      	it	ne
 80024c4:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80024c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ca:	480e      	ldr	r0, [pc, #56]	; (8002504 <write_lcd+0xdc>)
 80024cc:	f7ff f822 	bl	8001514 <HAL_GPIO_WritePin>
	if (data & 0x01) HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80024d0:	f014 0201 	ands.w	r2, r4, #1
 80024d4:	bf18      	it	ne
 80024d6:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 80024d8:	2108      	movs	r1, #8
 80024da:	4809      	ldr	r0, [pc, #36]	; (8002500 <write_lcd+0xd8>)
 80024dc:	f7ff f81a 	bl	8001514 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 80024e0:	2201      	movs	r2, #1
 80024e2:	2110      	movs	r1, #16
 80024e4:	4806      	ldr	r0, [pc, #24]	; (8002500 <write_lcd+0xd8>)
 80024e6:	f7ff f815 	bl	8001514 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80024ea:	2002      	movs	r0, #2
 80024ec:	f7fe fafc 	bl	8000ae8 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
}
 80024f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80024f4:	2200      	movs	r2, #0
 80024f6:	2110      	movs	r1, #16
 80024f8:	4801      	ldr	r0, [pc, #4]	; (8002500 <write_lcd+0xd8>)
 80024fa:	f7ff b80b 	b.w	8001514 <HAL_GPIO_WritePin>
 80024fe:	bf00      	nop
 8002500:	40010c00 	.word	0x40010c00
 8002504:	40010800 	.word	0x40010800

08002508 <init_lcd>:

/* init_LCD - Inicializa o display em 4bits */
void init_lcd(void)
{
 8002508:	b508      	push	{r3, lr}
	write_lcd(0x33, 0);
 800250a:	2100      	movs	r1, #0
 800250c:	2033      	movs	r0, #51	; 0x33
 800250e:	f7ff ff8b 	bl	8002428 <write_lcd>
	write_lcd(0x32, 0);
 8002512:	2100      	movs	r1, #0
 8002514:	2032      	movs	r0, #50	; 0x32
 8002516:	f7ff ff87 	bl	8002428 <write_lcd>
	write_lcd(0x28, 0);
 800251a:	2100      	movs	r1, #0
 800251c:	2028      	movs	r0, #40	; 0x28
 800251e:	f7ff ff83 	bl	8002428 <write_lcd>
	write_lcd(0x06, 0);
 8002522:	2100      	movs	r1, #0
 8002524:	2006      	movs	r0, #6
 8002526:	f7ff ff7f 	bl	8002428 <write_lcd>
	write_lcd(0x0C, 0);
 800252a:	2100      	movs	r1, #0
 800252c:	200c      	movs	r0, #12
 800252e:	f7ff ff7b 	bl	8002428 <write_lcd>
	write_lcd(0x01, 0);
}
 8002532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	write_lcd(0x01, 0);
 8002536:	2100      	movs	r1, #0
 8002538:	2001      	movs	r0, #1
 800253a:	f7ff bf75 	b.w	8002428 <write_lcd>

0800253e <string_lcd>:

/* string_lcd - escreve string no LCD */
void string_lcd (char *string)
{
 800253e:	b510      	push	{r4, lr}
 8002540:	1e44      	subs	r4, r0, #1
	while(*string) write_lcd(*string++, 1);
 8002542:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8002546:	b900      	cbnz	r0, 800254a <string_lcd+0xc>
}
 8002548:	bd10      	pop	{r4, pc}
	while(*string) write_lcd(*string++, 1);
 800254a:	2101      	movs	r1, #1
 800254c:	f7ff ff6c 	bl	8002428 <write_lcd>
 8002550:	e7f7      	b.n	8002542 <string_lcd+0x4>
	...

08002554 <bip>:


void bip()
{
	HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,GPIO_PIN_SET);
 8002554:	2201      	movs	r2, #1
{
 8002556:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,GPIO_PIN_SET);
 8002558:	4c08      	ldr	r4, [pc, #32]	; (800257c <bip+0x28>)
 800255a:	4611      	mov	r1, r2
 800255c:	4620      	mov	r0, r4
 800255e:	f7fe ffd9 	bl	8001514 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002562:	2064      	movs	r0, #100	; 0x64
 8002564:	f7fe fac0 	bl	8000ae8 <HAL_Delay>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port,BUZZER_Pin,GPIO_PIN_RESET);
 8002568:	4620      	mov	r0, r4
 800256a:	2200      	movs	r2, #0
 800256c:	2101      	movs	r1, #1
 800256e:	f7fe ffd1 	bl	8001514 <HAL_GPIO_WritePin>
	HAL_Delay(200);

}
 8002572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(200);
 8002576:	20c8      	movs	r0, #200	; 0xc8
 8002578:	f7fe bab6 	b.w	8000ae8 <HAL_Delay>
 800257c:	40010800 	.word	0x40010800

08002580 <calendar>:

void calendar()
{
 8002580:	b508      	push	{r3, lr}



	write_lcd(0x80,0);
 8002582:	2100      	movs	r1, #0
 8002584:	2080      	movs	r0, #128	; 0x80
 8002586:	f7ff ff4f 	bl	8002428 <write_lcd>
	sprintf(disp2," %02d",horas);
 800258a:	4b61      	ldr	r3, [pc, #388]	; (8002710 <calendar+0x190>)
 800258c:	4961      	ldr	r1, [pc, #388]	; (8002714 <calendar+0x194>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4861      	ldr	r0, [pc, #388]	; (8002718 <calendar+0x198>)
 8002592:	f001 f9a7 	bl	80038e4 <siprintf>
	string_lcd(disp2);
 8002596:	4860      	ldr	r0, [pc, #384]	; (8002718 <calendar+0x198>)
 8002598:	f7ff ffd1 	bl	800253e <string_lcd>
	write_lcd(0x83,0);
 800259c:	2100      	movs	r1, #0
 800259e:	2083      	movs	r0, #131	; 0x83
 80025a0:	f7ff ff42 	bl	8002428 <write_lcd>
	sprintf(disp2," %02d",minutos);
 80025a4:	4b5d      	ldr	r3, [pc, #372]	; (800271c <calendar+0x19c>)
 80025a6:	495b      	ldr	r1, [pc, #364]	; (8002714 <calendar+0x194>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	485b      	ldr	r0, [pc, #364]	; (8002718 <calendar+0x198>)
 80025ac:	f001 f99a 	bl	80038e4 <siprintf>
	string_lcd(disp2);
 80025b0:	4859      	ldr	r0, [pc, #356]	; (8002718 <calendar+0x198>)
 80025b2:	f7ff ffc4 	bl	800253e <string_lcd>
	write_lcd(0x86,0);
 80025b6:	2100      	movs	r1, #0
 80025b8:	2086      	movs	r0, #134	; 0x86
 80025ba:	f7ff ff35 	bl	8002428 <write_lcd>
	sprintf(disp2," %02d",segundos);
 80025be:	4b58      	ldr	r3, [pc, #352]	; (8002720 <calendar+0x1a0>)
 80025c0:	4954      	ldr	r1, [pc, #336]	; (8002714 <calendar+0x194>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	4854      	ldr	r0, [pc, #336]	; (8002718 <calendar+0x198>)
 80025c6:	f001 f98d 	bl	80038e4 <siprintf>
	string_lcd(disp2);
 80025ca:	4853      	ldr	r0, [pc, #332]	; (8002718 <calendar+0x198>)
 80025cc:	f7ff ffb7 	bl	800253e <string_lcd>
	write_lcd(0x83,0);
 80025d0:	2100      	movs	r1, #0
 80025d2:	2083      	movs	r0, #131	; 0x83
 80025d4:	f7ff ff28 	bl	8002428 <write_lcd>
	string_lcd(":");
 80025d8:	4852      	ldr	r0, [pc, #328]	; (8002724 <calendar+0x1a4>)
 80025da:	f7ff ffb0 	bl	800253e <string_lcd>
	write_lcd(0x86,0);
 80025de:	2100      	movs	r1, #0
 80025e0:	2086      	movs	r0, #134	; 0x86
 80025e2:	f7ff ff21 	bl	8002428 <write_lcd>
	string_lcd(":");
 80025e6:	484f      	ldr	r0, [pc, #316]	; (8002724 <calendar+0x1a4>)
 80025e8:	f7ff ffa9 	bl	800253e <string_lcd>
	write_lcd(0xC0,0);
 80025ec:	2100      	movs	r1, #0
 80025ee:	20c0      	movs	r0, #192	; 0xc0
 80025f0:	f7ff ff1a 	bl	8002428 <write_lcd>
	sprintf(disp2," %02d",dias);
 80025f4:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <calendar+0x1a8>)
 80025f6:	4947      	ldr	r1, [pc, #284]	; (8002714 <calendar+0x194>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	4847      	ldr	r0, [pc, #284]	; (8002718 <calendar+0x198>)
 80025fc:	f001 f972 	bl	80038e4 <siprintf>
	string_lcd(disp2);
 8002600:	4845      	ldr	r0, [pc, #276]	; (8002718 <calendar+0x198>)
 8002602:	f7ff ff9c 	bl	800253e <string_lcd>
	write_lcd(0xC3,0);
 8002606:	2100      	movs	r1, #0
 8002608:	20c3      	movs	r0, #195	; 0xc3
 800260a:	f7ff ff0d 	bl	8002428 <write_lcd>
	sprintf(disp2," %02d",mes);
 800260e:	4b47      	ldr	r3, [pc, #284]	; (800272c <calendar+0x1ac>)
 8002610:	4940      	ldr	r1, [pc, #256]	; (8002714 <calendar+0x194>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4840      	ldr	r0, [pc, #256]	; (8002718 <calendar+0x198>)
 8002616:	f001 f965 	bl	80038e4 <siprintf>
	string_lcd(disp2);
 800261a:	483f      	ldr	r0, [pc, #252]	; (8002718 <calendar+0x198>)
 800261c:	f7ff ff8f 	bl	800253e <string_lcd>
	write_lcd(0xC6,0);
 8002620:	2100      	movs	r1, #0
 8002622:	20c6      	movs	r0, #198	; 0xc6
 8002624:	f7ff ff00 	bl	8002428 <write_lcd>
	sprintf(disp2," %02d",ano);
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <calendar+0x1b0>)
 800262a:	493a      	ldr	r1, [pc, #232]	; (8002714 <calendar+0x194>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	483a      	ldr	r0, [pc, #232]	; (8002718 <calendar+0x198>)
 8002630:	f001 f958 	bl	80038e4 <siprintf>
	string_lcd(disp2);
 8002634:	4838      	ldr	r0, [pc, #224]	; (8002718 <calendar+0x198>)
 8002636:	f7ff ff82 	bl	800253e <string_lcd>
	write_lcd(0xC3,0);
 800263a:	2100      	movs	r1, #0
 800263c:	20c3      	movs	r0, #195	; 0xc3
 800263e:	f7ff fef3 	bl	8002428 <write_lcd>
	string_lcd("/");
 8002642:	483c      	ldr	r0, [pc, #240]	; (8002734 <calendar+0x1b4>)
 8002644:	f7ff ff7b 	bl	800253e <string_lcd>
	write_lcd(0xC6,0);
 8002648:	2100      	movs	r1, #0
 800264a:	20c6      	movs	r0, #198	; 0xc6
 800264c:	f7ff feec 	bl	8002428 <write_lcd>
	string_lcd("/");
 8002650:	4838      	ldr	r0, [pc, #224]	; (8002734 <calendar+0x1b4>)
 8002652:	f7ff ff74 	bl	800253e <string_lcd>

	switch(d_semana)
 8002656:	4b38      	ldr	r3, [pc, #224]	; (8002738 <calendar+0x1b8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3b01      	subs	r3, #1
 800265c:	2b06      	cmp	r3, #6
 800265e:	d80c      	bhi.n	800267a <calendar+0xfa>
 8002660:	e8df f003 	tbb	[pc, r3]
 8002664:	3d373104 	.word	0x3d373104
 8002668:	4943      	.short	0x4943
 800266a:	4f          	.byte	0x4f
 800266b:	00          	.byte	0x00
	{

	case 1:
	write_lcd(0xCD,0);
 800266c:	20cd      	movs	r0, #205	; 0xcd
 800266e:	2100      	movs	r1, #0
 8002670:	f7ff feda 	bl	8002428 <write_lcd>
	string_lcd("DOM");
 8002674:	4831      	ldr	r0, [pc, #196]	; (800273c <calendar+0x1bc>)
	string_lcd("SEX");
	break;

	case 7:
	write_lcd(0xCD,0);
	string_lcd("SAB");
 8002676:	f7ff ff62 	bl	800253e <string_lcd>


	}


	write_lcd(0x8C,0);
 800267a:	2100      	movs	r1, #0
 800267c:	208c      	movs	r0, #140	; 0x8c
 800267e:	f7ff fed3 	bl	8002428 <write_lcd>
	sprintf(disp,"%d",temp);
 8002682:	4b2f      	ldr	r3, [pc, #188]	; (8002740 <calendar+0x1c0>)
 8002684:	492f      	ldr	r1, [pc, #188]	; (8002744 <calendar+0x1c4>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	482f      	ldr	r0, [pc, #188]	; (8002748 <calendar+0x1c8>)
 800268a:	f001 f92b 	bl	80038e4 <siprintf>
	string_lcd(disp);
 800268e:	482e      	ldr	r0, [pc, #184]	; (8002748 <calendar+0x1c8>)
 8002690:	f7ff ff55 	bl	800253e <string_lcd>
	write_lcd(0x8E,0);
 8002694:	2100      	movs	r1, #0
 8002696:	208e      	movs	r0, #142	; 0x8e
 8002698:	f7ff fec6 	bl	8002428 <write_lcd>
	sprintf(disp2,"%c",0xdf);
 800269c:	22df      	movs	r2, #223	; 0xdf
 800269e:	492b      	ldr	r1, [pc, #172]	; (800274c <calendar+0x1cc>)
 80026a0:	481d      	ldr	r0, [pc, #116]	; (8002718 <calendar+0x198>)
 80026a2:	f001 f91f 	bl	80038e4 <siprintf>
	string_lcd(disp2);
 80026a6:	481c      	ldr	r0, [pc, #112]	; (8002718 <calendar+0x198>)
 80026a8:	f7ff ff49 	bl	800253e <string_lcd>
	write_lcd(0x8F,0);
 80026ac:	2100      	movs	r1, #0
 80026ae:	208f      	movs	r0, #143	; 0x8f
 80026b0:	f7ff feba 	bl	8002428 <write_lcd>
	string_lcd("C");
 80026b4:	4826      	ldr	r0, [pc, #152]	; (8002750 <calendar+0x1d0>)
 80026b6:	f7ff ff42 	bl	800253e <string_lcd>


	HAL_Delay(3000);


}
 80026ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(3000);
 80026be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80026c2:	f7fe ba11 	b.w	8000ae8 <HAL_Delay>
	write_lcd(0xCD,0);
 80026c6:	20cd      	movs	r0, #205	; 0xcd
 80026c8:	2100      	movs	r1, #0
 80026ca:	f7ff fead 	bl	8002428 <write_lcd>
	string_lcd("SEG");
 80026ce:	4821      	ldr	r0, [pc, #132]	; (8002754 <calendar+0x1d4>)
 80026d0:	e7d1      	b.n	8002676 <calendar+0xf6>
	write_lcd(0xCD,0);
 80026d2:	20cd      	movs	r0, #205	; 0xcd
 80026d4:	2100      	movs	r1, #0
 80026d6:	f7ff fea7 	bl	8002428 <write_lcd>
	string_lcd("TER");
 80026da:	481f      	ldr	r0, [pc, #124]	; (8002758 <calendar+0x1d8>)
 80026dc:	e7cb      	b.n	8002676 <calendar+0xf6>
	write_lcd(0xCD,0);
 80026de:	20cd      	movs	r0, #205	; 0xcd
 80026e0:	2100      	movs	r1, #0
 80026e2:	f7ff fea1 	bl	8002428 <write_lcd>
	string_lcd("QUA");
 80026e6:	481d      	ldr	r0, [pc, #116]	; (800275c <calendar+0x1dc>)
 80026e8:	e7c5      	b.n	8002676 <calendar+0xf6>
	write_lcd(0xCD,0);
 80026ea:	20cd      	movs	r0, #205	; 0xcd
 80026ec:	2100      	movs	r1, #0
 80026ee:	f7ff fe9b 	bl	8002428 <write_lcd>
	string_lcd("QUI");
 80026f2:	481b      	ldr	r0, [pc, #108]	; (8002760 <calendar+0x1e0>)
 80026f4:	e7bf      	b.n	8002676 <calendar+0xf6>
	write_lcd(0xCD,0);
 80026f6:	20cd      	movs	r0, #205	; 0xcd
 80026f8:	2100      	movs	r1, #0
 80026fa:	f7ff fe95 	bl	8002428 <write_lcd>
	string_lcd("SEX");
 80026fe:	4819      	ldr	r0, [pc, #100]	; (8002764 <calendar+0x1e4>)
 8002700:	e7b9      	b.n	8002676 <calendar+0xf6>
	write_lcd(0xCD,0);
 8002702:	20cd      	movs	r0, #205	; 0xcd
 8002704:	2100      	movs	r1, #0
 8002706:	f7ff fe8f 	bl	8002428 <write_lcd>
	string_lcd("SAB");
 800270a:	4817      	ldr	r0, [pc, #92]	; (8002768 <calendar+0x1e8>)
 800270c:	e7b3      	b.n	8002676 <calendar+0xf6>
 800270e:	bf00      	nop
 8002710:	2000000c 	.word	0x2000000c
 8002714:	08005138 	.word	0x08005138
 8002718:	20000330 	.word	0x20000330
 800271c:	20000014 	.word	0x20000014
 8002720:	20000210 	.word	0x20000210
 8002724:	0800513e 	.word	0x0800513e
 8002728:	20000008 	.word	0x20000008
 800272c:	20000010 	.word	0x20000010
 8002730:	20000000 	.word	0x20000000
 8002734:	08005140 	.word	0x08005140
 8002738:	20000004 	.word	0x20000004
 800273c:	08005142 	.word	0x08005142
 8002740:	200002e0 	.word	0x200002e0
 8002744:	0800515e 	.word	0x0800515e
 8002748:	20000470 	.word	0x20000470
 800274c:	08005161 	.word	0x08005161
 8002750:	08005164 	.word	0x08005164
 8002754:	08005146 	.word	0x08005146
 8002758:	0800514a 	.word	0x0800514a
 800275c:	0800514e 	.word	0x0800514e
 8002760:	08005152 	.word	0x08005152
 8002764:	08005156 	.word	0x08005156
 8002768:	0800515a 	.word	0x0800515a

0800276c <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800276c:	2301      	movs	r3, #1
{
 800276e:	b510      	push	{r4, lr}
 8002770:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002772:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002774:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002776:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002778:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800277a:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800277c:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800277e:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002780:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002782:	f7fe ff3f 	bl	8001604 <HAL_RCC_OscConfig>
 8002786:	4601      	mov	r1, r0
 8002788:	b100      	cbz	r0, 800278c <SystemClock_Config+0x20>
 800278a:	e7fe      	b.n	800278a <SystemClock_Config+0x1e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800278c:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800278e:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002790:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002792:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002794:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002796:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002798:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800279a:	f7ff f8fd 	bl	8001998 <HAL_RCC_ClockConfig>
 800279e:	b100      	cbz	r0, 80027a2 <SystemClock_Config+0x36>
 80027a0:	e7fe      	b.n	80027a0 <SystemClock_Config+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80027a2:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027a4:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80027a6:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027a8:	f7ff f9c0 	bl	8001b2c <HAL_RCCEx_PeriphCLKConfig>
 80027ac:	4604      	mov	r4, r0
 80027ae:	b100      	cbz	r0, 80027b2 <SystemClock_Config+0x46>
 80027b0:	e7fe      	b.n	80027b0 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80027b2:	f7ff f995 	bl	8001ae0 <HAL_RCC_GetHCLKFreq>
 80027b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80027be:	f7fe fc95 	bl	80010ec <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80027c2:	2004      	movs	r0, #4
 80027c4:	f7fe fca8 	bl	8001118 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80027c8:	4622      	mov	r2, r4
 80027ca:	4621      	mov	r1, r4
 80027cc:	f04f 30ff 	mov.w	r0, #4294967295
 80027d0:	f7fe fc4c 	bl	800106c <HAL_NVIC_SetPriority>
}
 80027d4:	b014      	add	sp, #80	; 0x50
 80027d6:	bd10      	pop	{r4, pc}

080027d8 <main>:
{
 80027d8:	b500      	push	{lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	4d70      	ldr	r5, [pc, #448]	; (800299c <main+0x1c4>)
{
 80027dc:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 80027de:	f7fe f963 	bl	8000aa8 <HAL_Init>
  SystemClock_Config();
 80027e2:	f7ff ffc3 	bl	800276c <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	69ab      	ldr	r3, [r5, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 80027e8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	61ab      	str	r3, [r5, #24]
 80027f0:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 80027f2:	f649 0101 	movw	r1, #38913	; 0x9801
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fe:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 8002800:	4867      	ldr	r0, [pc, #412]	; (80029a0 <main+0x1c8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002802:	f043 0308 	orr.w	r3, r3, #8
 8002806:	61ab      	str	r3, [r5, #24]
 8002808:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|D4_Pin 
                          |EN_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUZZER_Pin D7_Pin D6_Pin D5_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|D7_Pin|D6_Pin|D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	9302      	str	r3, [sp, #8]
 8002812:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|D7_Pin|D6_Pin|D5_Pin, GPIO_PIN_RESET);
 8002814:	f7fe fe7e 	bl	8001514 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|D4_Pin 
 8002818:	2200      	movs	r2, #0
 800281a:	f640 013b 	movw	r1, #2107	; 0x83b
 800281e:	4861      	ldr	r0, [pc, #388]	; (80029a4 <main+0x1cc>)
 8002820:	f7fe fe78 	bl	8001514 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2402      	movs	r4, #2
  GPIO_InitStruct.Pin = BUZZER_Pin|D7_Pin|D6_Pin|D5_Pin;
 8002826:	f649 0301 	movw	r3, #38913	; 0x9801
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282a:	a905      	add	r1, sp, #20
 800282c:	485c      	ldr	r0, [pc, #368]	; (80029a0 <main+0x1c8>)
  GPIO_InitStruct.Pin = BUZZER_Pin|D7_Pin|D6_Pin|D5_Pin;
 800282e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002832:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002834:	f7fe fd88 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin LD3_Pin D4_Pin 
                           EN_Pin RS_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|D4_Pin 
 8002838:	f640 033b 	movw	r3, #2107	; 0x83b
                          |EN_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283c:	a905      	add	r1, sp, #20
 800283e:	4859      	ldr	r0, [pc, #356]	; (80029a4 <main+0x1cc>)
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|D4_Pin 
 8002840:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002842:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002844:	9606      	str	r6, [sp, #24]

  /*Configure GPIO pins : SW3_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002846:	2400      	movs	r4, #0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002848:	f7fe fd7e 	bl	8001348 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin;
 800284c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002850:	a905      	add	r1, sp, #20
 8002852:	4854      	ldr	r0, [pc, #336]	; (80029a4 <main+0x1cc>)
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin;
 8002854:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002856:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285a:	f7fe fd75 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 800285e:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8002862:	a905      	add	r1, sp, #20
 8002864:	484e      	ldr	r0, [pc, #312]	; (80029a0 <main+0x1c8>)
  GPIO_InitStruct.Pin = SW1_Pin;
 8002866:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002868:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 800286c:	f7fe fd6c 	bl	8001348 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002870:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002872:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002874:	4333      	orrs	r3, r6
 8002876:	616b      	str	r3, [r5, #20]
 8002878:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800287a:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800287c:	4033      	ands	r3, r6
 800287e:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002880:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002882:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002884:	f7fe fbf2 	bl	800106c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002888:	200b      	movs	r0, #11
 800288a:	f7fe fc23 	bl	80010d4 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.ClockSpeed = 100000;
 800288e:	4d46      	ldr	r5, [pc, #280]	; (80029a8 <main+0x1d0>)
  hi2c1.Instance = I2C1;
 8002890:	4846      	ldr	r0, [pc, #280]	; (80029ac <main+0x1d4>)
  hi2c1.Init.ClockSpeed = 100000;
 8002892:	4b47      	ldr	r3, [pc, #284]	; (80029b0 <main+0x1d8>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002894:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8002896:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800289a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 800289e:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028a2:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80028a4:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028a6:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028a8:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028aa:	f7fe fe3d 	bl	8001528 <HAL_I2C_Init>
 80028ae:	b100      	cbz	r0, 80028b2 <main+0xda>
 80028b0:	e7fe      	b.n	80028b0 <main+0xd8>
  huart1.Init.BaudRate = 9600;
 80028b2:	f44f 5416 	mov.w	r4, #9600	; 0x2580
  huart1.Instance = USART1;
 80028b6:	4b3f      	ldr	r3, [pc, #252]	; (80029b4 <main+0x1dc>)
  huart1.Init.BaudRate = 9600;
 80028b8:	4a3f      	ldr	r2, [pc, #252]	; (80029b8 <main+0x1e0>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ba:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 9600;
 80028bc:	e883 0014 	stmia.w	r3, {r2, r4}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028c0:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028c2:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028c4:	6118      	str	r0, [r3, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028c6:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c8:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028ca:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028cc:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028ce:	f7ff fd63 	bl	8002398 <HAL_UART_Init>
 80028d2:	b100      	cbz	r0, 80028d6 <main+0xfe>
 80028d4:	e7fe      	b.n	80028d4 <main+0xfc>
  htim3.Init.Prescaler = 79;
 80028d6:	234f      	movs	r3, #79	; 0x4f
  htim3.Instance = TIM3;
 80028d8:	4c38      	ldr	r4, [pc, #224]	; (80029bc <main+0x1e4>)
  htim3.Init.Prescaler = 79;
 80028da:	4939      	ldr	r1, [pc, #228]	; (80029c0 <main+0x1e8>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028dc:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 79;
 80028de:	e884 000a 	stmia.w	r4, {r1, r3}
  htim3.Init.Period = 100;
 80028e2:	2364      	movs	r3, #100	; 0x64
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e4:	6120      	str	r0, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028e6:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028e8:	4620      	mov	r0, r4
  htim3.Init.Period = 100;
 80028ea:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028ec:	f7ff fbc8 	bl	8002080 <HAL_TIM_PWM_Init>
 80028f0:	b100      	cbz	r0, 80028f4 <main+0x11c>
 80028f2:	e7fe      	b.n	80028f2 <main+0x11a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f4:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f6:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028f8:	a903      	add	r1, sp, #12
 80028fa:	4620      	mov	r0, r4
 80028fc:	f7ff fc8a 	bl	8002214 <HAL_TIMEx_MasterConfigSynchronization>
 8002900:	b100      	cbz	r0, 8002904 <main+0x12c>
 8002902:	e7fe      	b.n	8002902 <main+0x12a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002904:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8002906:	9006      	str	r0, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002908:	9007      	str	r0, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800290a:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800290c:	2204      	movs	r2, #4
 800290e:	a905      	add	r1, sp, #20
 8002910:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002912:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002914:	f7ff fbfa 	bl	800210c <HAL_TIM_PWM_ConfigChannel>
 8002918:	4605      	mov	r5, r0
 800291a:	b100      	cbz	r0, 800291e <main+0x146>
 800291c:	e7fe      	b.n	800291c <main+0x144>
  HAL_TIM_MspPostInit(&htim3);
 800291e:	4620      	mov	r0, r4
 8002920:	f000 fa16 	bl	8002d50 <HAL_TIM_MspPostInit>
  htim4.Init.Prescaler = 7999;
 8002924:	f641 733f 	movw	r3, #7999	; 0x1f3f
  htim4.Instance = TIM4;
 8002928:	4c26      	ldr	r4, [pc, #152]	; (80029c4 <main+0x1ec>)
  htim4.Init.Prescaler = 7999;
 800292a:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <main+0x1f0>)
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800292c:	4620      	mov	r0, r4
  htim4.Init.Prescaler = 7999;
 800292e:	e884 000c 	stmia.w	r4, {r2, r3}
  htim4.Init.Period = 499;
 8002932:	f240 13f3 	movw	r3, #499	; 0x1f3
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002936:	60a5      	str	r5, [r4, #8]
  htim4.Init.Period = 499;
 8002938:	60e3      	str	r3, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293a:	6125      	str	r5, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800293c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800293e:	f7ff fb85 	bl	800204c <HAL_TIM_Base_Init>
 8002942:	b100      	cbz	r0, 8002946 <main+0x16e>
 8002944:	e7fe      	b.n	8002944 <main+0x16c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800294a:	a905      	add	r1, sp, #20
 800294c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800294e:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002950:	f7ff f9e3 	bl	8001d1a <HAL_TIM_ConfigClockSource>
 8002954:	b100      	cbz	r0, 8002958 <main+0x180>
 8002956:	e7fe      	b.n	8002956 <main+0x17e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002958:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295a:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800295c:	a903      	add	r1, sp, #12
 800295e:	4620      	mov	r0, r4
 8002960:	f7ff fc58 	bl	8002214 <HAL_TIMEx_MasterConfigSynchronization>
 8002964:	b100      	cbz	r0, 8002968 <main+0x190>
 8002966:	e7fe      	b.n	8002966 <main+0x18e>
  hadc1.Instance = ADC1;
 8002968:	4c18      	ldr	r4, [pc, #96]	; (80029cc <main+0x1f4>)
 800296a:	4b19      	ldr	r3, [pc, #100]	; (80029d0 <main+0x1f8>)
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800296c:	60a0      	str	r0, [r4, #8]
  hadc1.Instance = ADC1;
 800296e:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002970:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002974:	6160      	str	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002976:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002978:	4620      	mov	r0, r4
  hadc1.Init.ContinuousConvMode = ENABLE;
 800297a:	60e6      	str	r6, [r4, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800297c:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 800297e:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002980:	f7fe fae0 	bl	8000f44 <HAL_ADC_Init>
 8002984:	b100      	cbz	r0, 8002988 <main+0x1b0>
 8002986:	e7fe      	b.n	8002986 <main+0x1ae>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002988:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800298a:	a905      	add	r1, sp, #20
 800298c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 800298e:	9605      	str	r6, [sp, #20]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002990:	9606      	str	r6, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002992:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002994:	f7fe f96a 	bl	8000c6c <HAL_ADC_ConfigChannel>
 8002998:	b1e0      	cbz	r0, 80029d4 <main+0x1fc>
 800299a:	e7fe      	b.n	800299a <main+0x1c2>
 800299c:	40021000 	.word	0x40021000
 80029a0:	40010800 	.word	0x40010800
 80029a4:	40010c00 	.word	0x40010c00
 80029a8:	000186a0 	.word	0x000186a0
 80029ac:	20000280 	.word	0x20000280
 80029b0:	40005400 	.word	0x40005400
 80029b4:	20000364 	.word	0x20000364
 80029b8:	40013800 	.word	0x40013800
 80029bc:	200002f0 	.word	0x200002f0
 80029c0:	40000400 	.word	0x40000400
 80029c4:	20000240 	.word	0x20000240
 80029c8:	40000800 	.word	0x40000800
 80029cc:	20000334 	.word	0x20000334
 80029d0:	40012400 	.word	0x40012400
  	init_lcd();
 80029d4:	f7ff fd98 	bl	8002508 <init_lcd>
	write_lcd(0x01,0);
 80029d8:	2100      	movs	r1, #0
 80029da:	2001      	movs	r0, #1
 80029dc:	f7ff fd24 	bl	8002428 <write_lcd>
	write_lcd(0x85,0);
 80029e0:	2100      	movs	r1, #0
 80029e2:	2085      	movs	r0, #133	; 0x85
 80029e4:	f7ff fd20 	bl	8002428 <write_lcd>
	string_lcd("CNPEM");
 80029e8:	4855      	ldr	r0, [pc, #340]	; (8002b40 <main+0x368>)
 80029ea:	f7ff fda8 	bl	800253e <string_lcd>
	write_lcd(0xC5,0);
 80029ee:	2100      	movs	r1, #0
 80029f0:	20c5      	movs	r0, #197	; 0xc5
 80029f2:	f7ff fd19 	bl	8002428 <write_lcd>
	string_lcd("LNNANO");
 80029f6:	4853      	ldr	r0, [pc, #332]	; (8002b44 <main+0x36c>)
 80029f8:	f7ff fda1 	bl	800253e <string_lcd>
	HAL_Delay(2000);
 80029fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002a00:	f7fe f872 	bl	8000ae8 <HAL_Delay>
	write_lcd(0x01,0);
 8002a04:	2100      	movs	r1, #0
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7ff fd0e 	bl	8002428 <write_lcd>
	write_lcd(0x86,0);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	2086      	movs	r0, #134	; 0x86
 8002a10:	f7ff fd0a 	bl	8002428 <write_lcd>
    string_lcd("DSF");
 8002a14:	484c      	ldr	r0, [pc, #304]	; (8002b48 <main+0x370>)
 8002a16:	f7ff fd92 	bl	800253e <string_lcd>
	write_lcd(0xC4,0);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	20c4      	movs	r0, #196	; 0xc4
 8002a1e:	f7ff fd03 	bl	8002428 <write_lcd>
	string_lcd("DIVISION");
 8002a22:	484a      	ldr	r0, [pc, #296]	; (8002b4c <main+0x374>)
 8002a24:	f7ff fd8b 	bl	800253e <string_lcd>
	write_lcd(0x01,0);
 8002a28:	2100      	movs	r1, #0
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f7ff fcfc 	bl	8002428 <write_lcd>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002a30:	2104      	movs	r1, #4
 8002a32:	4847      	ldr	r0, [pc, #284]	; (8002b50 <main+0x378>)
 8002a34:	f7ff fbd8 	bl	80021e8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 8002a38:	4846      	ldr	r0, [pc, #280]	; (8002b54 <main+0x37c>)
 8002a3a:	f7ff f963 	bl	8001d04 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA (&hadc1, &adc_buf, 1);   // start ADC with DMA
 8002a3e:	2201      	movs	r2, #1
 8002a40:	4945      	ldr	r1, [pc, #276]	; (8002b58 <main+0x380>)
 8002a42:	4846      	ldr	r0, [pc, #280]	; (8002b5c <main+0x384>)
 8002a44:	f7fe f9ce 	bl	8000de4 <HAL_ADC_Start_DMA>
	 if(!HAL_GPIO_ReadPin(SW1_GPIO_Port,SW1_Pin)&&valor<100)
 8002a48:	4c45      	ldr	r4, [pc, #276]	; (8002b60 <main+0x388>)
	 if(!HAL_GPIO_ReadPin(SW2_GPIO_Port,SW2_Pin)&&valor>0)
 8002a4a:	4d46      	ldr	r5, [pc, #280]	; (8002b64 <main+0x38c>)
	 if(!HAL_GPIO_ReadPin(SW1_GPIO_Port,SW1_Pin)&&valor<100)
 8002a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a50:	4845      	ldr	r0, [pc, #276]	; (8002b68 <main+0x390>)
 8002a52:	f7fe fd59 	bl	8001508 <HAL_GPIO_ReadPin>
 8002a56:	4606      	mov	r6, r0
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d042      	beq.n	8002ae2 <main+0x30a>
	 if(!HAL_GPIO_ReadPin(SW2_GPIO_Port,SW2_Pin)&&valor>0)
 8002a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a60:	4628      	mov	r0, r5
 8002a62:	f7fe fd51 	bl	8001508 <HAL_GPIO_ReadPin>
 8002a66:	4606      	mov	r6, r0
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	d052      	beq.n	8002b12 <main+0x33a>
	 if(!HAL_GPIO_ReadPin(SW3_GPIO_Port,SW3_Pin))
 8002a6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a70:	4628      	mov	r0, r5
 8002a72:	f7fe fd49 	bl	8001508 <HAL_GPIO_ReadPin>
 8002a76:	4606      	mov	r6, r0
 8002a78:	b9a8      	cbnz	r0, 8002aa6 <main+0x2ce>
		 HAL_Delay(20);
 8002a7a:	2014      	movs	r0, #20
 8002a7c:	f7fe f834 	bl	8000ae8 <HAL_Delay>
		 bip();
 8002a80:	f7ff fd68 	bl	8002554 <bip>
		 write_lcd(0x01,0);
 8002a84:	4631      	mov	r1, r6
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7ff fcce 	bl	8002428 <write_lcd>
		 calendar();
 8002a8c:	f7ff fd78 	bl	8002580 <calendar>
		 write_lcd(0x01,0);
 8002a90:	4631      	mov	r1, r6
 8002a92:	2001      	movs	r0, #1
 8002a94:	f7ff fcc8 	bl	8002428 <write_lcd>
	 	while(!HAL_GPIO_ReadPin(SW3_GPIO_Port,SW3_Pin));
 8002a98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	f7fe fd33 	bl	8001508 <HAL_GPIO_ReadPin>
 8002aa2:	2800      	cmp	r0, #0
 8002aa4:	d0f8      	beq.n	8002a98 <main+0x2c0>
	 TIM3 ->CCR2 = valor;  // valor do PWM
 8002aa6:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <main+0x394>)
 8002aa8:	7822      	ldrb	r2, [r4, #0]
	 write_lcd(0x85,0);
 8002aaa:	2100      	movs	r1, #0
	 TIM3 ->CCR2 = valor;  // valor do PWM
 8002aac:	639a      	str	r2, [r3, #56]	; 0x38
	 write_lcd(0x85,0);
 8002aae:	2085      	movs	r0, #133	; 0x85
 8002ab0:	f7ff fcba 	bl	8002428 <write_lcd>
	 string_lcd("BRILHO");
 8002ab4:	482e      	ldr	r0, [pc, #184]	; (8002b70 <main+0x398>)
 8002ab6:	f7ff fd42 	bl	800253e <string_lcd>
	 write_lcd(0xC6,0);
 8002aba:	2100      	movs	r1, #0
 8002abc:	20c6      	movs	r0, #198	; 0xc6
 8002abe:	f7ff fcb3 	bl	8002428 <write_lcd>
	 sprintf(disp,"%03d",valor);
 8002ac2:	7822      	ldrb	r2, [r4, #0]
 8002ac4:	492b      	ldr	r1, [pc, #172]	; (8002b74 <main+0x39c>)
 8002ac6:	482c      	ldr	r0, [pc, #176]	; (8002b78 <main+0x3a0>)
 8002ac8:	f000 ff0c 	bl	80038e4 <siprintf>
	 string_lcd(disp);
 8002acc:	482a      	ldr	r0, [pc, #168]	; (8002b78 <main+0x3a0>)
 8002ace:	f7ff fd36 	bl	800253e <string_lcd>
	 write_lcd(0xC9,0);
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	20c9      	movs	r0, #201	; 0xc9
 8002ad6:	f7ff fca7 	bl	8002428 <write_lcd>
	 string_lcd("%");
 8002ada:	4828      	ldr	r0, [pc, #160]	; (8002b7c <main+0x3a4>)
 8002adc:	f7ff fd2f 	bl	800253e <string_lcd>
	 if(!HAL_GPIO_ReadPin(SW1_GPIO_Port,SW1_Pin)&&valor<100)
 8002ae0:	e7b4      	b.n	8002a4c <main+0x274>
 8002ae2:	7823      	ldrb	r3, [r4, #0]
 8002ae4:	2b63      	cmp	r3, #99	; 0x63
 8002ae6:	d8b9      	bhi.n	8002a5c <main+0x284>
		HAL_Delay(20);
 8002ae8:	2014      	movs	r0, #20
 8002aea:	f7fd fffd 	bl	8000ae8 <HAL_Delay>
		bip();
 8002aee:	f7ff fd31 	bl	8002554 <bip>
		valor=valor+10;
 8002af2:	7823      	ldrb	r3, [r4, #0]
		write_lcd(0x01,0);
 8002af4:	4631      	mov	r1, r6
		valor=valor+10;
 8002af6:	330a      	adds	r3, #10
		write_lcd(0x01,0);
 8002af8:	2001      	movs	r0, #1
		valor=valor+10;
 8002afa:	7023      	strb	r3, [r4, #0]
		write_lcd(0x01,0);
 8002afc:	f7ff fc94 	bl	8002428 <write_lcd>
		while(!HAL_GPIO_ReadPin(SW1_GPIO_Port,SW1_Pin));
 8002b00:	4e19      	ldr	r6, [pc, #100]	; (8002b68 <main+0x390>)
 8002b02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b06:	4630      	mov	r0, r6
 8002b08:	f7fe fcfe 	bl	8001508 <HAL_GPIO_ReadPin>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d0f8      	beq.n	8002b02 <main+0x32a>
 8002b10:	e7a4      	b.n	8002a5c <main+0x284>
	 if(!HAL_GPIO_ReadPin(SW2_GPIO_Port,SW2_Pin)&&valor>0)
 8002b12:	7823      	ldrb	r3, [r4, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0a9      	beq.n	8002a6c <main+0x294>
		 HAL_Delay(20);
 8002b18:	2014      	movs	r0, #20
 8002b1a:	f7fd ffe5 	bl	8000ae8 <HAL_Delay>
		 bip();
 8002b1e:	f7ff fd19 	bl	8002554 <bip>
		 valor=valor-10;
 8002b22:	7823      	ldrb	r3, [r4, #0]
		 write_lcd(0x01,0);
 8002b24:	4631      	mov	r1, r6
		 valor=valor-10;
 8002b26:	3b0a      	subs	r3, #10
		 write_lcd(0x01,0);
 8002b28:	2001      	movs	r0, #1
		 valor=valor-10;
 8002b2a:	7023      	strb	r3, [r4, #0]
		 write_lcd(0x01,0);
 8002b2c:	f7ff fc7c 	bl	8002428 <write_lcd>
		 while(!HAL_GPIO_ReadPin(SW2_GPIO_Port,SW2_Pin));
 8002b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b34:	4628      	mov	r0, r5
 8002b36:	f7fe fce7 	bl	8001508 <HAL_GPIO_ReadPin>
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d0f8      	beq.n	8002b30 <main+0x358>
 8002b3e:	e795      	b.n	8002a6c <main+0x294>
 8002b40:	08005166 	.word	0x08005166
 8002b44:	0800516c 	.word	0x0800516c
 8002b48:	08005173 	.word	0x08005173
 8002b4c:	08005177 	.word	0x08005177
 8002b50:	200002f0 	.word	0x200002f0
 8002b54:	20000240 	.word	0x20000240
 8002b58:	2000045c 	.word	0x2000045c
 8002b5c:	20000334 	.word	0x20000334
 8002b60:	20000215 	.word	0x20000215
 8002b64:	40010c00 	.word	0x40010c00
 8002b68:	40010800 	.word	0x40010800
 8002b6c:	40000400 	.word	0x40000400
 8002b70:	08005180 	.word	0x08005180
 8002b74:	08005187 	.word	0x08005187
 8002b78:	20000470 	.word	0x20000470
 8002b7c:	0800518c 	.word	0x0800518c

08002b80 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002b80:	e7fe      	b.n	8002b80 <_Error_Handler>
	...

08002b84 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b84:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <HAL_MspInit+0x88>)
{
 8002b86:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b88:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b8a:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b8c:	f042 0201 	orr.w	r2, r2, #1
 8002b90:	619a      	str	r2, [r3, #24]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	9301      	str	r3, [sp, #4]
 8002b9a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b9c:	f7fe fa54 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f06f 000b 	mvn.w	r0, #11
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	f7fe fa60 	bl	800106c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002bac:	2200      	movs	r2, #0
 8002bae:	f06f 000a 	mvn.w	r0, #10
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	f7fe fa5a 	bl	800106c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f06f 0009 	mvn.w	r0, #9
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	f7fe fa54 	bl	800106c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f06f 0004 	mvn.w	r0, #4
 8002bca:	4611      	mov	r1, r2
 8002bcc:	f7fe fa4e 	bl	800106c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f06f 0003 	mvn.w	r0, #3
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	f7fe fa48 	bl	800106c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f06f 0001 	mvn.w	r0, #1
 8002be2:	4611      	mov	r1, r2
 8002be4:	f7fe fa42 	bl	800106c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002be8:	2200      	movs	r2, #0
 8002bea:	f04f 30ff 	mov.w	r0, #4294967295
 8002bee:	4611      	mov	r1, r2
 8002bf0:	f7fe fa3c 	bl	800106c <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002bf4:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_MspInit+0x8c>)
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002c04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c06:	b003      	add	sp, #12
 8002c08:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40010000 	.word	0x40010000

08002c14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c14:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002c16:	6802      	ldr	r2, [r0, #0]
 8002c18:	4b1e      	ldr	r3, [pc, #120]	; (8002c94 <HAL_ADC_MspInit+0x80>)
{
 8002c1a:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 8002c1c:	429a      	cmp	r2, r3
{
 8002c1e:	4605      	mov	r5, r0
  if(hadc->Instance==ADC1)
 8002c20:	d135      	bne.n	8002c8e <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c22:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8002c26:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = LM35_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(LM35_GPIO_Port, &GPIO_InitStruct);
 8002c28:	481b      	ldr	r0, [pc, #108]	; (8002c98 <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2e:	619a      	str	r2, [r3, #24]
 8002c30:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(LM35_GPIO_Port, &GPIO_InitStruct);
 8002c32:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = LM35_Pin;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c40:	2303      	movs	r3, #3
 8002c42:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(LM35_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f7fe fb80 	bl	8001348 <HAL_GPIO_Init>
    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c48:	2280      	movs	r2, #128	; 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8002c4a:	4c14      	ldr	r4, [pc, #80]	; (8002c9c <HAL_ADC_MspInit+0x88>)
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_ADC_MspInit+0x8c>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c4e:	60e2      	str	r2, [r4, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c54:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c56:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Instance = DMA1_Channel1;
 8002c5a:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c5c:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c5e:	2300      	movs	r3, #0
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c60:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c62:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c64:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c66:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002c68:	61a2      	str	r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c6a:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c6c:	f7fe fa66 	bl	800113c <HAL_DMA_Init>
 8002c70:	b118      	cbz	r0, 8002c7a <HAL_ADC_MspInit+0x66>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002c72:	2175      	movs	r1, #117	; 0x75
 8002c74:	480b      	ldr	r0, [pc, #44]	; (8002ca4 <HAL_ADC_MspInit+0x90>)
 8002c76:	f7ff ff83 	bl	8002b80 <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002c7a:	2200      	movs	r2, #0
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c7c:	622c      	str	r4, [r5, #32]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002c7e:	2012      	movs	r0, #18
 8002c80:	4611      	mov	r1, r2
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c82:	6265      	str	r5, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002c84:	f7fe f9f2 	bl	800106c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002c88:	2012      	movs	r0, #18
 8002c8a:	f7fe fa23 	bl	80010d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c8e:	b007      	add	sp, #28
 8002c90:	bd30      	pop	{r4, r5, pc}
 8002c92:	bf00      	nop
 8002c94:	40012400 	.word	0x40012400
 8002c98:	40010800 	.word	0x40010800
 8002c9c:	20000414 	.word	0x20000414
 8002ca0:	40020008 	.word	0x40020008
 8002ca4:	0800518e 	.word	0x0800518e

08002ca8 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ca8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8002caa:	6802      	ldr	r2, [r0, #0]
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_I2C_MspInit+0x38>)
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d113      	bne.n	8002cda <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cb2:	23c0      	movs	r3, #192	; 0xc0
 8002cb4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cb6:	2312      	movs	r3, #18
 8002cb8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cba:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cbc:	a902      	add	r1, sp, #8
 8002cbe:	4809      	ldr	r0, [pc, #36]	; (8002ce4 <HAL_I2C_MspInit+0x3c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cc0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc2:	f7fe fb41 	bl	8001348 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_I2C_MspInit+0x40>)
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002cce:	61da      	str	r2, [r3, #28]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd6:	9301      	str	r3, [sp, #4]
 8002cd8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002cda:	b007      	add	sp, #28
 8002cdc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ce0:	40005400 	.word	0x40005400
 8002ce4:	40010c00 	.word	0x40010c00
 8002ce8:	40021000 	.word	0x40021000

08002cec <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM3)
 8002cec:	6802      	ldr	r2, [r0, #0]
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_TIM_PWM_MspInit+0x24>)
{
 8002cf0:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d10a      	bne.n	8002d0c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cf6:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	f042 0202 	orr.w	r2, r2, #2
 8002d00:	61da      	str	r2, [r3, #28]
 8002d02:	69db      	ldr	r3, [r3, #28]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002d0c:	b002      	add	sp, #8
 8002d0e:	4770      	bx	lr
 8002d10:	40000400 	.word	0x40000400

08002d14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d14:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM4)
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <HAL_TIM_Base_MspInit+0x38>)
 8002d18:	6802      	ldr	r2, [r0, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d112      	bne.n	8002d44 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d1e:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002d22:	69da      	ldr	r2, [r3, #28]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d24:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d26:	f042 0204 	orr.w	r2, r2, #4
 8002d2a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d2c:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d2e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d30:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002d3a:	f7fe f997 	bl	800106c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002d3e:	201e      	movs	r0, #30
 8002d40:	f7fe f9c8 	bl	80010d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d44:	b003      	add	sp, #12
 8002d46:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d4a:	bf00      	nop
 8002d4c:	40000800 	.word	0x40000800

08002d50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 8002d52:	6802      	ldr	r2, [r0, #0]
 8002d54:	4b07      	ldr	r3, [pc, #28]	; (8002d74 <HAL_TIM_MspPostInit+0x24>)
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d108      	bne.n	8002d6c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE END TIM3_MspPostInit 0 */
  
    /**TIM3 GPIO Configuration    
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d5a:	2380      	movs	r3, #128	; 0x80
 8002d5c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5e:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d60:	4669      	mov	r1, sp
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <HAL_TIM_MspPostInit+0x28>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d68:	f7fe faee 	bl	8001348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002d6c:	b005      	add	sp, #20
 8002d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002d72:	bf00      	nop
 8002d74:	40000400 	.word	0x40000400
 8002d78:	40010800 	.word	0x40010800

08002d7c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002d7e:	6802      	ldr	r2, [r0, #0]
 8002d80:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_UART_MspInit+0x50>)
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d11f      	bne.n	8002dc6 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d86:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002d8a:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d92:	619a      	str	r2, [r3, #24]
 8002d94:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d96:	480e      	ldr	r0, [pc, #56]	; (8002dd0 <HAL_UART_MspInit+0x54>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002da4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da6:	2302      	movs	r3, #2
 8002da8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002daa:	2303      	movs	r3, #3
 8002dac:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dae:	f7fe facb 	bl	8001348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002db6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002db8:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dba:	a902      	add	r1, sp, #8
 8002dbc:	4804      	ldr	r0, [pc, #16]	; (8002dd0 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dbe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dc2:	f7fe fac1 	bl	8001348 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002dc6:	b007      	add	sp, #28
 8002dc8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40010800 	.word	0x40010800

08002dd4 <NMI_Handler>:
 8002dd4:	4770      	bx	lr

08002dd6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002dd6:	e7fe      	b.n	8002dd6 <HardFault_Handler>

08002dd8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002dd8:	e7fe      	b.n	8002dd8 <MemManage_Handler>

08002dda <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002dda:	e7fe      	b.n	8002dda <BusFault_Handler>

08002ddc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002ddc:	e7fe      	b.n	8002ddc <UsageFault_Handler>

08002dde <SVC_Handler>:
 8002dde:	4770      	bx	lr

08002de0 <DebugMon_Handler>:
 8002de0:	4770      	bx	lr

08002de2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002de2:	4770      	bx	lr

08002de4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002de4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de6:	f7fd fe71 	bl	8000acc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002dee:	f7fe b9a0 	b.w	8001132 <HAL_SYSTICK_IRQHandler>
	...

08002df4 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002df4:	4801      	ldr	r0, [pc, #4]	; (8002dfc <DMA1_Channel1_IRQHandler+0x8>)
 8002df6:	f7fe ba13 	b.w	8001220 <HAL_DMA_IRQHandler>
 8002dfa:	bf00      	nop
 8002dfc:	20000414 	.word	0x20000414

08002e00 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002e00:	4801      	ldr	r0, [pc, #4]	; (8002e08 <ADC1_2_IRQHandler+0x8>)
 8002e02:	f7fd beaf 	b.w	8000b64 <HAL_ADC_IRQHandler>
 8002e06:	bf00      	nop
 8002e08:	20000334 	.word	0x20000334

08002e0c <TIM4_IRQHandler>:

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 8002e0c:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */



  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e0e:	483c      	ldr	r0, [pc, #240]	; (8002f00 <TIM4_IRQHandler+0xf4>)
 8002e10:	f7ff f841 	bl	8001e96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8002e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002e18:	483a      	ldr	r0, [pc, #232]	; (8002f04 <TIM4_IRQHandler+0xf8>)
 8002e1a:	f7fe fb80 	bl	800151e <HAL_GPIO_TogglePin>

  tick++;
 8002e1e:	4a3a      	ldr	r2, [pc, #232]	; (8002f08 <TIM4_IRQHandler+0xfc>)
 8002e20:	4d3a      	ldr	r5, [pc, #232]	; (8002f0c <TIM4_IRQHandler+0x100>)
 8002e22:	7813      	ldrb	r3, [r2, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	b2db      	uxtb	r3, r3
  if(tick==2){
 8002e28:	2b02      	cmp	r3, #2
  tick++;
 8002e2a:	7013      	strb	r3, [r2, #0]
 8002e2c:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <TIM4_IRQHandler+0x104>)
  if(tick==2){
 8002e2e:	d122      	bne.n	8002e76 <TIM4_IRQHandler+0x6a>
  if(segundos<60)
 8002e30:	4838      	ldr	r0, [pc, #224]	; (8002f14 <TIM4_IRQHandler+0x108>)
 8002e32:	4c39      	ldr	r4, [pc, #228]	; (8002f18 <TIM4_IRQHandler+0x10c>)
 8002e34:	6801      	ldr	r1, [r0, #0]
 8002e36:	293b      	cmp	r1, #59	; 0x3b
 8002e38:	dc3c      	bgt.n	8002eb4 <TIM4_IRQHandler+0xa8>
  {

	  segundos++;
 8002e3a:	3101      	adds	r1, #1
 8002e3c:	6001      	str	r1, [r0, #0]

	  segundos=0;
	  minutos++;
  }

  if(minutos==60)
 8002e3e:	6821      	ldr	r1, [r4, #0]
 8002e40:	4836      	ldr	r0, [pc, #216]	; (8002f1c <TIM4_IRQHandler+0x110>)
 8002e42:	293c      	cmp	r1, #60	; 0x3c
 8002e44:	d104      	bne.n	8002e50 <TIM4_IRQHandler+0x44>
  {
	  minutos=0;
 8002e46:	2100      	movs	r1, #0
 8002e48:	6021      	str	r1, [r4, #0]
	  horas++;
 8002e4a:	6801      	ldr	r1, [r0, #0]
 8002e4c:	3101      	adds	r1, #1
 8002e4e:	6001      	str	r1, [r0, #0]
  }

  if(horas==24)
 8002e50:	6801      	ldr	r1, [r0, #0]
 8002e52:	2918      	cmp	r1, #24
 8002e54:	4932      	ldr	r1, [pc, #200]	; (8002f20 <TIM4_IRQHandler+0x114>)
 8002e56:	d135      	bne.n	8002ec4 <TIM4_IRQHandler+0xb8>
  {
	  horas=0;
 8002e58:	2400      	movs	r4, #0
 8002e5a:	6004      	str	r4, [r0, #0]
	  dias++;
 8002e5c:	6808      	ldr	r0, [r1, #0]
 8002e5e:	3001      	adds	r0, #1
 8002e60:	6008      	str	r0, [r1, #0]

	  dias=1;
	  d_semana++;
	  mes++;
  }
  if(mes==13)
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	290d      	cmp	r1, #13
 8002e66:	d104      	bne.n	8002e72 <TIM4_IRQHandler+0x66>
  {
	  ano++;
 8002e68:	6829      	ldr	r1, [r5, #0]
 8002e6a:	3101      	adds	r1, #1
 8002e6c:	6029      	str	r1, [r5, #0]
	  mes=1;
 8002e6e:	2101      	movs	r1, #1
 8002e70:	6019      	str	r1, [r3, #0]
  }
  tick=0;
 8002e72:	2100      	movs	r1, #0
 8002e74:	7011      	strb	r1, [r2, #0]
  }

  //----------------Bissexto------------------------

  if((ano%400==0 || ano%4==0) && ano%100!=0)
 8002e76:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002e7a:	682a      	ldr	r2, [r5, #0]
 8002e7c:	fb92 f0f1 	sdiv	r0, r2, r1
 8002e80:	fb01 2010 	mls	r0, r1, r0, r2
 8002e84:	4927      	ldr	r1, [pc, #156]	; (8002f24 <TIM4_IRQHandler+0x118>)
 8002e86:	b108      	cbz	r0, 8002e8c <TIM4_IRQHandler+0x80>
 8002e88:	0790      	lsls	r0, r2, #30
 8002e8a:	d12a      	bne.n	8002ee2 <TIM4_IRQHandler+0xd6>
 8002e8c:	2464      	movs	r4, #100	; 0x64
 8002e8e:	fb92 f0f4 	sdiv	r0, r2, r4
 8002e92:	fb04 2210 	mls	r2, r4, r0, r2
 8002e96:	b322      	cbz	r2, 8002ee2 <TIM4_IRQHandler+0xd6>
  {

	 bissexto=1;
 8002e98:	2201      	movs	r2, #1
  }
  else
  {
	  bissexto=0;
  }
  switch(mes)
 8002e9a:	681b      	ldr	r3, [r3, #0]
	  bissexto=0;
 8002e9c:	700a      	strb	r2, [r1, #0]
  switch(mes)
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	2b0b      	cmp	r3, #11
 8002ea2:	d827      	bhi.n	8002ef4 <TIM4_IRQHandler+0xe8>
 8002ea4:	e8df f003 	tbb	[pc, r3]
 8002ea8:	272a1f2a 	.word	0x272a1f2a
 8002eac:	2a2a272a 	.word	0x2a2a272a
 8002eb0:	2a272a27 	.word	0x2a272a27
  else if (segundos==60)
 8002eb4:	293c      	cmp	r1, #60	; 0x3c
 8002eb6:	d1c2      	bne.n	8002e3e <TIM4_IRQHandler+0x32>
	  segundos=0;
 8002eb8:	2100      	movs	r1, #0
 8002eba:	6001      	str	r1, [r0, #0]
	  minutos++;
 8002ebc:	6821      	ldr	r1, [r4, #0]
 8002ebe:	3101      	adds	r1, #1
 8002ec0:	6021      	str	r1, [r4, #0]
 8002ec2:	e7bc      	b.n	8002e3e <TIM4_IRQHandler+0x32>
  else if( dias >l_dias)
 8002ec4:	4818      	ldr	r0, [pc, #96]	; (8002f28 <TIM4_IRQHandler+0x11c>)
 8002ec6:	7804      	ldrb	r4, [r0, #0]
 8002ec8:	6808      	ldr	r0, [r1, #0]
 8002eca:	4284      	cmp	r4, r0
 8002ecc:	dac9      	bge.n	8002e62 <TIM4_IRQHandler+0x56>
	  dias=1;
 8002ece:	2001      	movs	r0, #1
 8002ed0:	6008      	str	r0, [r1, #0]
	  d_semana++;
 8002ed2:	4816      	ldr	r0, [pc, #88]	; (8002f2c <TIM4_IRQHandler+0x120>)
 8002ed4:	6801      	ldr	r1, [r0, #0]
 8002ed6:	3101      	adds	r1, #1
 8002ed8:	6001      	str	r1, [r0, #0]
	  mes++;
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	3101      	adds	r1, #1
 8002ede:	6019      	str	r1, [r3, #0]
 8002ee0:	e7bf      	b.n	8002e62 <TIM4_IRQHandler+0x56>
	  bissexto=0;
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	e7d9      	b.n	8002e9a <TIM4_IRQHandler+0x8e>

  case 1:
  l_dias=31;
  break;
  case 2:
  if(bissexto==1){
 8002ee6:	780b      	ldrb	r3, [r1, #0]
 8002ee8:	2b01      	cmp	r3, #1
  l_dias=29;}
 8002eea:	bf0c      	ite	eq
 8002eec:	221d      	moveq	r2, #29
  else{
  l_dias=28;}
 8002eee:	221c      	movne	r2, #28
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <TIM4_IRQHandler+0x11c>)
  break;
  case 11:
  l_dias=30;
  break;
  case 12:
  l_dias=31;
 8002ef2:	701a      	strb	r2, [r3, #0]
 8002ef4:	bd38      	pop	{r3, r4, r5, pc}
  l_dias=30;
 8002ef6:	221e      	movs	r2, #30
  l_dias=31;
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <TIM4_IRQHandler+0x11c>)
 8002efa:	e7fa      	b.n	8002ef2 <TIM4_IRQHandler+0xe6>
 8002efc:	221f      	movs	r2, #31
 8002efe:	e7fb      	b.n	8002ef8 <TIM4_IRQHandler+0xec>
 8002f00:	20000240 	.word	0x20000240
 8002f04:	40010c00 	.word	0x40010c00
 8002f08:	20000214 	.word	0x20000214
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	20000010 	.word	0x20000010
 8002f14:	20000210 	.word	0x20000210
 8002f18:	20000014 	.word	0x20000014
 8002f1c:	2000000c 	.word	0x2000000c
 8002f20:	20000008 	.word	0x20000008
 8002f24:	2000020c 	.word	0x2000020c
 8002f28:	200002d4 	.word	0x200002d4
 8002f2c:	20000004 	.word	0x20000004

08002f30 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <SystemInit+0x40>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <SystemInit+0x44>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f4c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f54:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002f5c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002f5e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f62:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <SystemInit+0x48>)
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000
 8002f74:	f8ff0000 	.word	0xf8ff0000
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f7c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f7e:	e003      	b.n	8002f88 <LoopCopyDataInit>

08002f80 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f80:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f82:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f84:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f86:	3104      	adds	r1, #4

08002f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f88:	480a      	ldr	r0, [pc, #40]	; (8002fb4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002f8c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f8e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f90:	d3f6      	bcc.n	8002f80 <CopyDataInit>
  ldr r2, =_sbss
 8002f92:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002f94:	e002      	b.n	8002f9c <LoopFillZerobss>

08002f96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002f96:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002f98:	f842 3b04 	str.w	r3, [r2], #4

08002f9c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002f9c:	4b08      	ldr	r3, [pc, #32]	; (8002fc0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002f9e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002fa0:	d3f9      	bcc.n	8002f96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002fa2:	f7ff ffc5 	bl	8002f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fa6:	f000 f80f 	bl	8002fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002faa:	f7ff fc15 	bl	80027d8 <main>
  bx lr
 8002fae:	4770      	bx	lr
  ldr r3, =_sidata
 8002fb0:	08005428 	.word	0x08005428
  ldr r0, =_sdata
 8002fb4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002fb8:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 8002fbc:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8002fc0:	20000494 	.word	0x20000494

08002fc4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fc4:	e7fe      	b.n	8002fc4 <CAN1_RX1_IRQHandler>
	...

08002fc8 <__libc_init_array>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	2500      	movs	r5, #0
 8002fcc:	4e0c      	ldr	r6, [pc, #48]	; (8003000 <__libc_init_array+0x38>)
 8002fce:	4c0d      	ldr	r4, [pc, #52]	; (8003004 <__libc_init_array+0x3c>)
 8002fd0:	1ba4      	subs	r4, r4, r6
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	42a5      	cmp	r5, r4
 8002fd6:	d109      	bne.n	8002fec <__libc_init_array+0x24>
 8002fd8:	f002 f89a 	bl	8005110 <_init>
 8002fdc:	2500      	movs	r5, #0
 8002fde:	4e0a      	ldr	r6, [pc, #40]	; (8003008 <__libc_init_array+0x40>)
 8002fe0:	4c0a      	ldr	r4, [pc, #40]	; (800300c <__libc_init_array+0x44>)
 8002fe2:	1ba4      	subs	r4, r4, r6
 8002fe4:	10a4      	asrs	r4, r4, #2
 8002fe6:	42a5      	cmp	r5, r4
 8002fe8:	d105      	bne.n	8002ff6 <__libc_init_array+0x2e>
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff0:	4798      	blx	r3
 8002ff2:	3501      	adds	r5, #1
 8002ff4:	e7ee      	b.n	8002fd4 <__libc_init_array+0xc>
 8002ff6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ffa:	4798      	blx	r3
 8002ffc:	3501      	adds	r5, #1
 8002ffe:	e7f2      	b.n	8002fe6 <__libc_init_array+0x1e>
 8003000:	08005420 	.word	0x08005420
 8003004:	08005420 	.word	0x08005420
 8003008:	08005420 	.word	0x08005420
 800300c:	08005424 	.word	0x08005424

08003010 <memset>:
 8003010:	4603      	mov	r3, r0
 8003012:	4402      	add	r2, r0
 8003014:	4293      	cmp	r3, r2
 8003016:	d100      	bne.n	800301a <memset+0xa>
 8003018:	4770      	bx	lr
 800301a:	f803 1b01 	strb.w	r1, [r3], #1
 800301e:	e7f9      	b.n	8003014 <memset+0x4>

08003020 <__cvt>:
 8003020:	2b00      	cmp	r3, #0
 8003022:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003026:	461e      	mov	r6, r3
 8003028:	bfbb      	ittet	lt
 800302a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800302e:	461e      	movlt	r6, r3
 8003030:	2300      	movge	r3, #0
 8003032:	232d      	movlt	r3, #45	; 0x2d
 8003034:	b088      	sub	sp, #32
 8003036:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003038:	9912      	ldr	r1, [sp, #72]	; 0x48
 800303a:	f027 0720 	bic.w	r7, r7, #32
 800303e:	2f46      	cmp	r7, #70	; 0x46
 8003040:	4614      	mov	r4, r2
 8003042:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003044:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003048:	700b      	strb	r3, [r1, #0]
 800304a:	d004      	beq.n	8003056 <__cvt+0x36>
 800304c:	2f45      	cmp	r7, #69	; 0x45
 800304e:	d100      	bne.n	8003052 <__cvt+0x32>
 8003050:	3501      	adds	r5, #1
 8003052:	2302      	movs	r3, #2
 8003054:	e000      	b.n	8003058 <__cvt+0x38>
 8003056:	2303      	movs	r3, #3
 8003058:	aa07      	add	r2, sp, #28
 800305a:	9204      	str	r2, [sp, #16]
 800305c:	aa06      	add	r2, sp, #24
 800305e:	9203      	str	r2, [sp, #12]
 8003060:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8003064:	4622      	mov	r2, r4
 8003066:	4633      	mov	r3, r6
 8003068:	f000 fcee 	bl	8003a48 <_dtoa_r>
 800306c:	2f47      	cmp	r7, #71	; 0x47
 800306e:	4680      	mov	r8, r0
 8003070:	d102      	bne.n	8003078 <__cvt+0x58>
 8003072:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003074:	07db      	lsls	r3, r3, #31
 8003076:	d526      	bpl.n	80030c6 <__cvt+0xa6>
 8003078:	2f46      	cmp	r7, #70	; 0x46
 800307a:	eb08 0905 	add.w	r9, r8, r5
 800307e:	d111      	bne.n	80030a4 <__cvt+0x84>
 8003080:	f898 3000 	ldrb.w	r3, [r8]
 8003084:	2b30      	cmp	r3, #48	; 0x30
 8003086:	d10a      	bne.n	800309e <__cvt+0x7e>
 8003088:	2200      	movs	r2, #0
 800308a:	2300      	movs	r3, #0
 800308c:	4620      	mov	r0, r4
 800308e:	4631      	mov	r1, r6
 8003090:	f7fd fc86 	bl	80009a0 <__aeabi_dcmpeq>
 8003094:	b918      	cbnz	r0, 800309e <__cvt+0x7e>
 8003096:	f1c5 0501 	rsb	r5, r5, #1
 800309a:	f8ca 5000 	str.w	r5, [sl]
 800309e:	f8da 3000 	ldr.w	r3, [sl]
 80030a2:	4499      	add	r9, r3
 80030a4:	2200      	movs	r2, #0
 80030a6:	2300      	movs	r3, #0
 80030a8:	4620      	mov	r0, r4
 80030aa:	4631      	mov	r1, r6
 80030ac:	f7fd fc78 	bl	80009a0 <__aeabi_dcmpeq>
 80030b0:	b938      	cbnz	r0, 80030c2 <__cvt+0xa2>
 80030b2:	2230      	movs	r2, #48	; 0x30
 80030b4:	9b07      	ldr	r3, [sp, #28]
 80030b6:	4599      	cmp	r9, r3
 80030b8:	d905      	bls.n	80030c6 <__cvt+0xa6>
 80030ba:	1c59      	adds	r1, r3, #1
 80030bc:	9107      	str	r1, [sp, #28]
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	e7f8      	b.n	80030b4 <__cvt+0x94>
 80030c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80030c6:	4640      	mov	r0, r8
 80030c8:	9b07      	ldr	r3, [sp, #28]
 80030ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80030cc:	eba3 0308 	sub.w	r3, r3, r8
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	b008      	add	sp, #32
 80030d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080030d8 <__exponent>:
 80030d8:	4603      	mov	r3, r0
 80030da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030dc:	2900      	cmp	r1, #0
 80030de:	f803 2b02 	strb.w	r2, [r3], #2
 80030e2:	bfb6      	itet	lt
 80030e4:	222d      	movlt	r2, #45	; 0x2d
 80030e6:	222b      	movge	r2, #43	; 0x2b
 80030e8:	4249      	neglt	r1, r1
 80030ea:	2909      	cmp	r1, #9
 80030ec:	7042      	strb	r2, [r0, #1]
 80030ee:	dd21      	ble.n	8003134 <__exponent+0x5c>
 80030f0:	f10d 0207 	add.w	r2, sp, #7
 80030f4:	4617      	mov	r7, r2
 80030f6:	260a      	movs	r6, #10
 80030f8:	fb91 f5f6 	sdiv	r5, r1, r6
 80030fc:	fb06 1115 	mls	r1, r6, r5, r1
 8003100:	2d09      	cmp	r5, #9
 8003102:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003106:	f802 1c01 	strb.w	r1, [r2, #-1]
 800310a:	f102 34ff 	add.w	r4, r2, #4294967295
 800310e:	4629      	mov	r1, r5
 8003110:	dc09      	bgt.n	8003126 <__exponent+0x4e>
 8003112:	3130      	adds	r1, #48	; 0x30
 8003114:	3a02      	subs	r2, #2
 8003116:	f804 1c01 	strb.w	r1, [r4, #-1]
 800311a:	42ba      	cmp	r2, r7
 800311c:	461c      	mov	r4, r3
 800311e:	d304      	bcc.n	800312a <__exponent+0x52>
 8003120:	1a20      	subs	r0, r4, r0
 8003122:	b003      	add	sp, #12
 8003124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003126:	4622      	mov	r2, r4
 8003128:	e7e6      	b.n	80030f8 <__exponent+0x20>
 800312a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800312e:	f803 1b01 	strb.w	r1, [r3], #1
 8003132:	e7f2      	b.n	800311a <__exponent+0x42>
 8003134:	2230      	movs	r2, #48	; 0x30
 8003136:	461c      	mov	r4, r3
 8003138:	4411      	add	r1, r2
 800313a:	f804 2b02 	strb.w	r2, [r4], #2
 800313e:	7059      	strb	r1, [r3, #1]
 8003140:	e7ee      	b.n	8003120 <__exponent+0x48>
	...

08003144 <_printf_float>:
 8003144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003148:	b091      	sub	sp, #68	; 0x44
 800314a:	460c      	mov	r4, r1
 800314c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800314e:	4693      	mov	fp, r2
 8003150:	461e      	mov	r6, r3
 8003152:	4605      	mov	r5, r0
 8003154:	f001 fa4c 	bl	80045f0 <_localeconv_r>
 8003158:	6803      	ldr	r3, [r0, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	9309      	str	r3, [sp, #36]	; 0x24
 800315e:	f7fc fff7 	bl	8000150 <strlen>
 8003162:	2300      	movs	r3, #0
 8003164:	930e      	str	r3, [sp, #56]	; 0x38
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	900a      	str	r0, [sp, #40]	; 0x28
 800316a:	3307      	adds	r3, #7
 800316c:	f023 0307 	bic.w	r3, r3, #7
 8003170:	f103 0208 	add.w	r2, r3, #8
 8003174:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003178:	f8d4 a000 	ldr.w	sl, [r4]
 800317c:	603a      	str	r2, [r7, #0]
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003186:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 800318a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800318c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003190:	930b      	str	r3, [sp, #44]	; 0x2c
 8003192:	f04f 32ff 	mov.w	r2, #4294967295
 8003196:	4ba6      	ldr	r3, [pc, #664]	; (8003430 <_printf_float+0x2ec>)
 8003198:	4638      	mov	r0, r7
 800319a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800319c:	f7fd fc32 	bl	8000a04 <__aeabi_dcmpun>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	f040 81f7 	bne.w	8003594 <_printf_float+0x450>
 80031a6:	f04f 32ff 	mov.w	r2, #4294967295
 80031aa:	4ba1      	ldr	r3, [pc, #644]	; (8003430 <_printf_float+0x2ec>)
 80031ac:	4638      	mov	r0, r7
 80031ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80031b0:	f7fd fc0a 	bl	80009c8 <__aeabi_dcmple>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	f040 81ed 	bne.w	8003594 <_printf_float+0x450>
 80031ba:	2200      	movs	r2, #0
 80031bc:	2300      	movs	r3, #0
 80031be:	4638      	mov	r0, r7
 80031c0:	4649      	mov	r1, r9
 80031c2:	f7fd fbf7 	bl	80009b4 <__aeabi_dcmplt>
 80031c6:	b110      	cbz	r0, 80031ce <_printf_float+0x8a>
 80031c8:	232d      	movs	r3, #45	; 0x2d
 80031ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031ce:	4b99      	ldr	r3, [pc, #612]	; (8003434 <_printf_float+0x2f0>)
 80031d0:	4f99      	ldr	r7, [pc, #612]	; (8003438 <_printf_float+0x2f4>)
 80031d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80031d6:	bf98      	it	ls
 80031d8:	461f      	movls	r7, r3
 80031da:	2303      	movs	r3, #3
 80031dc:	f04f 0900 	mov.w	r9, #0
 80031e0:	6123      	str	r3, [r4, #16]
 80031e2:	f02a 0304 	bic.w	r3, sl, #4
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	9600      	str	r6, [sp, #0]
 80031ea:	465b      	mov	r3, fp
 80031ec:	aa0f      	add	r2, sp, #60	; 0x3c
 80031ee:	4621      	mov	r1, r4
 80031f0:	4628      	mov	r0, r5
 80031f2:	f000 f9df 	bl	80035b4 <_printf_common>
 80031f6:	3001      	adds	r0, #1
 80031f8:	f040 809a 	bne.w	8003330 <_printf_float+0x1ec>
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	b011      	add	sp, #68	; 0x44
 8003202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003206:	6862      	ldr	r2, [r4, #4]
 8003208:	a80e      	add	r0, sp, #56	; 0x38
 800320a:	1c53      	adds	r3, r2, #1
 800320c:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8003210:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 8003214:	d141      	bne.n	800329a <_printf_float+0x156>
 8003216:	2206      	movs	r2, #6
 8003218:	6062      	str	r2, [r4, #4]
 800321a:	2100      	movs	r1, #0
 800321c:	6023      	str	r3, [r4, #0]
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	6863      	ldr	r3, [r4, #4]
 8003222:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003226:	9005      	str	r0, [sp, #20]
 8003228:	9202      	str	r2, [sp, #8]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	463a      	mov	r2, r7
 800322e:	464b      	mov	r3, r9
 8003230:	9106      	str	r1, [sp, #24]
 8003232:	f8cd 8010 	str.w	r8, [sp, #16]
 8003236:	f8cd e00c 	str.w	lr, [sp, #12]
 800323a:	4628      	mov	r0, r5
 800323c:	f7ff fef0 	bl	8003020 <__cvt>
 8003240:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8003244:	2b47      	cmp	r3, #71	; 0x47
 8003246:	4607      	mov	r7, r0
 8003248:	d109      	bne.n	800325e <_printf_float+0x11a>
 800324a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800324c:	1cd8      	adds	r0, r3, #3
 800324e:	db02      	blt.n	8003256 <_printf_float+0x112>
 8003250:	6862      	ldr	r2, [r4, #4]
 8003252:	4293      	cmp	r3, r2
 8003254:	dd59      	ble.n	800330a <_printf_float+0x1c6>
 8003256:	f1a8 0802 	sub.w	r8, r8, #2
 800325a:	fa5f f888 	uxtb.w	r8, r8
 800325e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003262:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003264:	d836      	bhi.n	80032d4 <_printf_float+0x190>
 8003266:	3901      	subs	r1, #1
 8003268:	4642      	mov	r2, r8
 800326a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800326e:	910d      	str	r1, [sp, #52]	; 0x34
 8003270:	f7ff ff32 	bl	80030d8 <__exponent>
 8003274:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003276:	4681      	mov	r9, r0
 8003278:	1883      	adds	r3, r0, r2
 800327a:	2a01      	cmp	r2, #1
 800327c:	6123      	str	r3, [r4, #16]
 800327e:	dc02      	bgt.n	8003286 <_printf_float+0x142>
 8003280:	6822      	ldr	r2, [r4, #0]
 8003282:	07d1      	lsls	r1, r2, #31
 8003284:	d501      	bpl.n	800328a <_printf_float+0x146>
 8003286:	3301      	adds	r3, #1
 8003288:	6123      	str	r3, [r4, #16]
 800328a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0aa      	beq.n	80031e8 <_printf_float+0xa4>
 8003292:	232d      	movs	r3, #45	; 0x2d
 8003294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003298:	e7a6      	b.n	80031e8 <_printf_float+0xa4>
 800329a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800329e:	d002      	beq.n	80032a6 <_printf_float+0x162>
 80032a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80032a4:	d1b9      	bne.n	800321a <_printf_float+0xd6>
 80032a6:	b19a      	cbz	r2, 80032d0 <_printf_float+0x18c>
 80032a8:	2100      	movs	r1, #0
 80032aa:	9106      	str	r1, [sp, #24]
 80032ac:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80032b0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	9005      	str	r0, [sp, #20]
 80032b8:	463a      	mov	r2, r7
 80032ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80032be:	f8cd e00c 	str.w	lr, [sp, #12]
 80032c2:	9102      	str	r1, [sp, #8]
 80032c4:	464b      	mov	r3, r9
 80032c6:	4628      	mov	r0, r5
 80032c8:	f7ff feaa 	bl	8003020 <__cvt>
 80032cc:	4607      	mov	r7, r0
 80032ce:	e7bc      	b.n	800324a <_printf_float+0x106>
 80032d0:	2201      	movs	r2, #1
 80032d2:	e7a1      	b.n	8003218 <_printf_float+0xd4>
 80032d4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80032d8:	d119      	bne.n	800330e <_printf_float+0x1ca>
 80032da:	2900      	cmp	r1, #0
 80032dc:	6863      	ldr	r3, [r4, #4]
 80032de:	dd0c      	ble.n	80032fa <_printf_float+0x1b6>
 80032e0:	6121      	str	r1, [r4, #16]
 80032e2:	b913      	cbnz	r3, 80032ea <_printf_float+0x1a6>
 80032e4:	6822      	ldr	r2, [r4, #0]
 80032e6:	07d2      	lsls	r2, r2, #31
 80032e8:	d502      	bpl.n	80032f0 <_printf_float+0x1ac>
 80032ea:	3301      	adds	r3, #1
 80032ec:	440b      	add	r3, r1
 80032ee:	6123      	str	r3, [r4, #16]
 80032f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80032f2:	f04f 0900 	mov.w	r9, #0
 80032f6:	65a3      	str	r3, [r4, #88]	; 0x58
 80032f8:	e7c7      	b.n	800328a <_printf_float+0x146>
 80032fa:	b913      	cbnz	r3, 8003302 <_printf_float+0x1be>
 80032fc:	6822      	ldr	r2, [r4, #0]
 80032fe:	07d0      	lsls	r0, r2, #31
 8003300:	d501      	bpl.n	8003306 <_printf_float+0x1c2>
 8003302:	3302      	adds	r3, #2
 8003304:	e7f3      	b.n	80032ee <_printf_float+0x1aa>
 8003306:	2301      	movs	r3, #1
 8003308:	e7f1      	b.n	80032ee <_printf_float+0x1aa>
 800330a:	f04f 0867 	mov.w	r8, #103	; 0x67
 800330e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003312:	4293      	cmp	r3, r2
 8003314:	db05      	blt.n	8003322 <_printf_float+0x1de>
 8003316:	6822      	ldr	r2, [r4, #0]
 8003318:	6123      	str	r3, [r4, #16]
 800331a:	07d1      	lsls	r1, r2, #31
 800331c:	d5e8      	bpl.n	80032f0 <_printf_float+0x1ac>
 800331e:	3301      	adds	r3, #1
 8003320:	e7e5      	b.n	80032ee <_printf_float+0x1aa>
 8003322:	2b00      	cmp	r3, #0
 8003324:	bfcc      	ite	gt
 8003326:	2301      	movgt	r3, #1
 8003328:	f1c3 0302 	rsble	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	e7de      	b.n	80032ee <_printf_float+0x1aa>
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	055a      	lsls	r2, r3, #21
 8003334:	d407      	bmi.n	8003346 <_printf_float+0x202>
 8003336:	6923      	ldr	r3, [r4, #16]
 8003338:	463a      	mov	r2, r7
 800333a:	4659      	mov	r1, fp
 800333c:	4628      	mov	r0, r5
 800333e:	47b0      	blx	r6
 8003340:	3001      	adds	r0, #1
 8003342:	d12a      	bne.n	800339a <_printf_float+0x256>
 8003344:	e75a      	b.n	80031fc <_printf_float+0xb8>
 8003346:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800334a:	f240 80dc 	bls.w	8003506 <_printf_float+0x3c2>
 800334e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003352:	2200      	movs	r2, #0
 8003354:	2300      	movs	r3, #0
 8003356:	f7fd fb23 	bl	80009a0 <__aeabi_dcmpeq>
 800335a:	2800      	cmp	r0, #0
 800335c:	d039      	beq.n	80033d2 <_printf_float+0x28e>
 800335e:	2301      	movs	r3, #1
 8003360:	4a36      	ldr	r2, [pc, #216]	; (800343c <_printf_float+0x2f8>)
 8003362:	4659      	mov	r1, fp
 8003364:	4628      	mov	r0, r5
 8003366:	47b0      	blx	r6
 8003368:	3001      	adds	r0, #1
 800336a:	f43f af47 	beq.w	80031fc <_printf_float+0xb8>
 800336e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003370:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003372:	429a      	cmp	r2, r3
 8003374:	db02      	blt.n	800337c <_printf_float+0x238>
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	07d8      	lsls	r0, r3, #31
 800337a:	d50e      	bpl.n	800339a <_printf_float+0x256>
 800337c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800337e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003380:	4659      	mov	r1, fp
 8003382:	4628      	mov	r0, r5
 8003384:	47b0      	blx	r6
 8003386:	3001      	adds	r0, #1
 8003388:	f43f af38 	beq.w	80031fc <_printf_float+0xb8>
 800338c:	2700      	movs	r7, #0
 800338e:	f104 081a 	add.w	r8, r4, #26
 8003392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003394:	3b01      	subs	r3, #1
 8003396:	429f      	cmp	r7, r3
 8003398:	db11      	blt.n	80033be <_printf_float+0x27a>
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	079f      	lsls	r7, r3, #30
 800339e:	d508      	bpl.n	80033b2 <_printf_float+0x26e>
 80033a0:	2700      	movs	r7, #0
 80033a2:	f104 0819 	add.w	r8, r4, #25
 80033a6:	68e3      	ldr	r3, [r4, #12]
 80033a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	429f      	cmp	r7, r3
 80033ae:	f2c0 80e7 	blt.w	8003580 <_printf_float+0x43c>
 80033b2:	68e0      	ldr	r0, [r4, #12]
 80033b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80033b6:	4298      	cmp	r0, r3
 80033b8:	bfb8      	it	lt
 80033ba:	4618      	movlt	r0, r3
 80033bc:	e720      	b.n	8003200 <_printf_float+0xbc>
 80033be:	2301      	movs	r3, #1
 80033c0:	4642      	mov	r2, r8
 80033c2:	4659      	mov	r1, fp
 80033c4:	4628      	mov	r0, r5
 80033c6:	47b0      	blx	r6
 80033c8:	3001      	adds	r0, #1
 80033ca:	f43f af17 	beq.w	80031fc <_printf_float+0xb8>
 80033ce:	3701      	adds	r7, #1
 80033d0:	e7df      	b.n	8003392 <_printf_float+0x24e>
 80033d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	dc33      	bgt.n	8003440 <_printf_float+0x2fc>
 80033d8:	2301      	movs	r3, #1
 80033da:	4a18      	ldr	r2, [pc, #96]	; (800343c <_printf_float+0x2f8>)
 80033dc:	4659      	mov	r1, fp
 80033de:	4628      	mov	r0, r5
 80033e0:	47b0      	blx	r6
 80033e2:	3001      	adds	r0, #1
 80033e4:	f43f af0a 	beq.w	80031fc <_printf_float+0xb8>
 80033e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033ea:	b923      	cbnz	r3, 80033f6 <_printf_float+0x2b2>
 80033ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80033ee:	b913      	cbnz	r3, 80033f6 <_printf_float+0x2b2>
 80033f0:	6823      	ldr	r3, [r4, #0]
 80033f2:	07d9      	lsls	r1, r3, #31
 80033f4:	d5d1      	bpl.n	800339a <_printf_float+0x256>
 80033f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033fa:	4659      	mov	r1, fp
 80033fc:	4628      	mov	r0, r5
 80033fe:	47b0      	blx	r6
 8003400:	3001      	adds	r0, #1
 8003402:	f43f aefb 	beq.w	80031fc <_printf_float+0xb8>
 8003406:	f04f 0800 	mov.w	r8, #0
 800340a:	f104 091a 	add.w	r9, r4, #26
 800340e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003410:	425b      	negs	r3, r3
 8003412:	4598      	cmp	r8, r3
 8003414:	db01      	blt.n	800341a <_printf_float+0x2d6>
 8003416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003418:	e78e      	b.n	8003338 <_printf_float+0x1f4>
 800341a:	2301      	movs	r3, #1
 800341c:	464a      	mov	r2, r9
 800341e:	4659      	mov	r1, fp
 8003420:	4628      	mov	r0, r5
 8003422:	47b0      	blx	r6
 8003424:	3001      	adds	r0, #1
 8003426:	f43f aee9 	beq.w	80031fc <_printf_float+0xb8>
 800342a:	f108 0801 	add.w	r8, r8, #1
 800342e:	e7ee      	b.n	800340e <_printf_float+0x2ca>
 8003430:	7fefffff 	.word	0x7fefffff
 8003434:	080051c1 	.word	0x080051c1
 8003438:	080051c5 	.word	0x080051c5
 800343c:	080051d1 	.word	0x080051d1
 8003440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003442:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003444:	429a      	cmp	r2, r3
 8003446:	bfa8      	it	ge
 8003448:	461a      	movge	r2, r3
 800344a:	2a00      	cmp	r2, #0
 800344c:	4690      	mov	r8, r2
 800344e:	dc36      	bgt.n	80034be <_printf_float+0x37a>
 8003450:	f04f 0a00 	mov.w	sl, #0
 8003454:	f104 031a 	add.w	r3, r4, #26
 8003458:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800345c:	930b      	str	r3, [sp, #44]	; 0x2c
 800345e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003462:	eba9 0308 	sub.w	r3, r9, r8
 8003466:	459a      	cmp	sl, r3
 8003468:	db31      	blt.n	80034ce <_printf_float+0x38a>
 800346a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800346c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800346e:	429a      	cmp	r2, r3
 8003470:	db38      	blt.n	80034e4 <_printf_float+0x3a0>
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	07da      	lsls	r2, r3, #31
 8003476:	d435      	bmi.n	80034e4 <_printf_float+0x3a0>
 8003478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800347a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800347c:	eba3 0209 	sub.w	r2, r3, r9
 8003480:	eba3 0801 	sub.w	r8, r3, r1
 8003484:	4590      	cmp	r8, r2
 8003486:	bfa8      	it	ge
 8003488:	4690      	movge	r8, r2
 800348a:	f1b8 0f00 	cmp.w	r8, #0
 800348e:	dc31      	bgt.n	80034f4 <_printf_float+0x3b0>
 8003490:	2700      	movs	r7, #0
 8003492:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003496:	f104 091a 	add.w	r9, r4, #26
 800349a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800349c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	eba3 0308 	sub.w	r3, r3, r8
 80034a4:	429f      	cmp	r7, r3
 80034a6:	f6bf af78 	bge.w	800339a <_printf_float+0x256>
 80034aa:	2301      	movs	r3, #1
 80034ac:	464a      	mov	r2, r9
 80034ae:	4659      	mov	r1, fp
 80034b0:	4628      	mov	r0, r5
 80034b2:	47b0      	blx	r6
 80034b4:	3001      	adds	r0, #1
 80034b6:	f43f aea1 	beq.w	80031fc <_printf_float+0xb8>
 80034ba:	3701      	adds	r7, #1
 80034bc:	e7ed      	b.n	800349a <_printf_float+0x356>
 80034be:	4613      	mov	r3, r2
 80034c0:	4659      	mov	r1, fp
 80034c2:	463a      	mov	r2, r7
 80034c4:	4628      	mov	r0, r5
 80034c6:	47b0      	blx	r6
 80034c8:	3001      	adds	r0, #1
 80034ca:	d1c1      	bne.n	8003450 <_printf_float+0x30c>
 80034cc:	e696      	b.n	80031fc <_printf_float+0xb8>
 80034ce:	2301      	movs	r3, #1
 80034d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80034d2:	4659      	mov	r1, fp
 80034d4:	4628      	mov	r0, r5
 80034d6:	47b0      	blx	r6
 80034d8:	3001      	adds	r0, #1
 80034da:	f43f ae8f 	beq.w	80031fc <_printf_float+0xb8>
 80034de:	f10a 0a01 	add.w	sl, sl, #1
 80034e2:	e7bc      	b.n	800345e <_printf_float+0x31a>
 80034e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034e8:	4659      	mov	r1, fp
 80034ea:	4628      	mov	r0, r5
 80034ec:	47b0      	blx	r6
 80034ee:	3001      	adds	r0, #1
 80034f0:	d1c2      	bne.n	8003478 <_printf_float+0x334>
 80034f2:	e683      	b.n	80031fc <_printf_float+0xb8>
 80034f4:	4643      	mov	r3, r8
 80034f6:	eb07 0209 	add.w	r2, r7, r9
 80034fa:	4659      	mov	r1, fp
 80034fc:	4628      	mov	r0, r5
 80034fe:	47b0      	blx	r6
 8003500:	3001      	adds	r0, #1
 8003502:	d1c5      	bne.n	8003490 <_printf_float+0x34c>
 8003504:	e67a      	b.n	80031fc <_printf_float+0xb8>
 8003506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003508:	2a01      	cmp	r2, #1
 800350a:	dc01      	bgt.n	8003510 <_printf_float+0x3cc>
 800350c:	07db      	lsls	r3, r3, #31
 800350e:	d534      	bpl.n	800357a <_printf_float+0x436>
 8003510:	2301      	movs	r3, #1
 8003512:	463a      	mov	r2, r7
 8003514:	4659      	mov	r1, fp
 8003516:	4628      	mov	r0, r5
 8003518:	47b0      	blx	r6
 800351a:	3001      	adds	r0, #1
 800351c:	f43f ae6e 	beq.w	80031fc <_printf_float+0xb8>
 8003520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003524:	4659      	mov	r1, fp
 8003526:	4628      	mov	r0, r5
 8003528:	47b0      	blx	r6
 800352a:	3001      	adds	r0, #1
 800352c:	f43f ae66 	beq.w	80031fc <_printf_float+0xb8>
 8003530:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003534:	2200      	movs	r2, #0
 8003536:	2300      	movs	r3, #0
 8003538:	f7fd fa32 	bl	80009a0 <__aeabi_dcmpeq>
 800353c:	b150      	cbz	r0, 8003554 <_printf_float+0x410>
 800353e:	2700      	movs	r7, #0
 8003540:	f104 081a 	add.w	r8, r4, #26
 8003544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003546:	3b01      	subs	r3, #1
 8003548:	429f      	cmp	r7, r3
 800354a:	db0c      	blt.n	8003566 <_printf_float+0x422>
 800354c:	464b      	mov	r3, r9
 800354e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003552:	e6f2      	b.n	800333a <_printf_float+0x1f6>
 8003554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003556:	1c7a      	adds	r2, r7, #1
 8003558:	3b01      	subs	r3, #1
 800355a:	4659      	mov	r1, fp
 800355c:	4628      	mov	r0, r5
 800355e:	47b0      	blx	r6
 8003560:	3001      	adds	r0, #1
 8003562:	d1f3      	bne.n	800354c <_printf_float+0x408>
 8003564:	e64a      	b.n	80031fc <_printf_float+0xb8>
 8003566:	2301      	movs	r3, #1
 8003568:	4642      	mov	r2, r8
 800356a:	4659      	mov	r1, fp
 800356c:	4628      	mov	r0, r5
 800356e:	47b0      	blx	r6
 8003570:	3001      	adds	r0, #1
 8003572:	f43f ae43 	beq.w	80031fc <_printf_float+0xb8>
 8003576:	3701      	adds	r7, #1
 8003578:	e7e4      	b.n	8003544 <_printf_float+0x400>
 800357a:	2301      	movs	r3, #1
 800357c:	463a      	mov	r2, r7
 800357e:	e7ec      	b.n	800355a <_printf_float+0x416>
 8003580:	2301      	movs	r3, #1
 8003582:	4642      	mov	r2, r8
 8003584:	4659      	mov	r1, fp
 8003586:	4628      	mov	r0, r5
 8003588:	47b0      	blx	r6
 800358a:	3001      	adds	r0, #1
 800358c:	f43f ae36 	beq.w	80031fc <_printf_float+0xb8>
 8003590:	3701      	adds	r7, #1
 8003592:	e708      	b.n	80033a6 <_printf_float+0x262>
 8003594:	463a      	mov	r2, r7
 8003596:	464b      	mov	r3, r9
 8003598:	4638      	mov	r0, r7
 800359a:	4649      	mov	r1, r9
 800359c:	f7fd fa32 	bl	8000a04 <__aeabi_dcmpun>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	f43f ae30 	beq.w	8003206 <_printf_float+0xc2>
 80035a6:	4b01      	ldr	r3, [pc, #4]	; (80035ac <_printf_float+0x468>)
 80035a8:	4f01      	ldr	r7, [pc, #4]	; (80035b0 <_printf_float+0x46c>)
 80035aa:	e612      	b.n	80031d2 <_printf_float+0x8e>
 80035ac:	080051c9 	.word	0x080051c9
 80035b0:	080051cd 	.word	0x080051cd

080035b4 <_printf_common>:
 80035b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035b8:	4691      	mov	r9, r2
 80035ba:	461f      	mov	r7, r3
 80035bc:	688a      	ldr	r2, [r1, #8]
 80035be:	690b      	ldr	r3, [r1, #16]
 80035c0:	4606      	mov	r6, r0
 80035c2:	4293      	cmp	r3, r2
 80035c4:	bfb8      	it	lt
 80035c6:	4613      	movlt	r3, r2
 80035c8:	f8c9 3000 	str.w	r3, [r9]
 80035cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80035d0:	460c      	mov	r4, r1
 80035d2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80035d6:	b112      	cbz	r2, 80035de <_printf_common+0x2a>
 80035d8:	3301      	adds	r3, #1
 80035da:	f8c9 3000 	str.w	r3, [r9]
 80035de:	6823      	ldr	r3, [r4, #0]
 80035e0:	0699      	lsls	r1, r3, #26
 80035e2:	bf42      	ittt	mi
 80035e4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80035e8:	3302      	addmi	r3, #2
 80035ea:	f8c9 3000 	strmi.w	r3, [r9]
 80035ee:	6825      	ldr	r5, [r4, #0]
 80035f0:	f015 0506 	ands.w	r5, r5, #6
 80035f4:	d107      	bne.n	8003606 <_printf_common+0x52>
 80035f6:	f104 0a19 	add.w	sl, r4, #25
 80035fa:	68e3      	ldr	r3, [r4, #12]
 80035fc:	f8d9 2000 	ldr.w	r2, [r9]
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	429d      	cmp	r5, r3
 8003604:	db2a      	blt.n	800365c <_printf_common+0xa8>
 8003606:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800360a:	6822      	ldr	r2, [r4, #0]
 800360c:	3300      	adds	r3, #0
 800360e:	bf18      	it	ne
 8003610:	2301      	movne	r3, #1
 8003612:	0692      	lsls	r2, r2, #26
 8003614:	d42f      	bmi.n	8003676 <_printf_common+0xc2>
 8003616:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800361a:	4639      	mov	r1, r7
 800361c:	4630      	mov	r0, r6
 800361e:	47c0      	blx	r8
 8003620:	3001      	adds	r0, #1
 8003622:	d022      	beq.n	800366a <_printf_common+0xb6>
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	68e5      	ldr	r5, [r4, #12]
 8003628:	f003 0306 	and.w	r3, r3, #6
 800362c:	2b04      	cmp	r3, #4
 800362e:	bf18      	it	ne
 8003630:	2500      	movne	r5, #0
 8003632:	f8d9 2000 	ldr.w	r2, [r9]
 8003636:	f04f 0900 	mov.w	r9, #0
 800363a:	bf08      	it	eq
 800363c:	1aad      	subeq	r5, r5, r2
 800363e:	68a3      	ldr	r3, [r4, #8]
 8003640:	6922      	ldr	r2, [r4, #16]
 8003642:	bf08      	it	eq
 8003644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003648:	4293      	cmp	r3, r2
 800364a:	bfc4      	itt	gt
 800364c:	1a9b      	subgt	r3, r3, r2
 800364e:	18ed      	addgt	r5, r5, r3
 8003650:	341a      	adds	r4, #26
 8003652:	454d      	cmp	r5, r9
 8003654:	d11b      	bne.n	800368e <_printf_common+0xda>
 8003656:	2000      	movs	r0, #0
 8003658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800365c:	2301      	movs	r3, #1
 800365e:	4652      	mov	r2, sl
 8003660:	4639      	mov	r1, r7
 8003662:	4630      	mov	r0, r6
 8003664:	47c0      	blx	r8
 8003666:	3001      	adds	r0, #1
 8003668:	d103      	bne.n	8003672 <_printf_common+0xbe>
 800366a:	f04f 30ff 	mov.w	r0, #4294967295
 800366e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003672:	3501      	adds	r5, #1
 8003674:	e7c1      	b.n	80035fa <_printf_common+0x46>
 8003676:	2030      	movs	r0, #48	; 0x30
 8003678:	18e1      	adds	r1, r4, r3
 800367a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003684:	4422      	add	r2, r4
 8003686:	3302      	adds	r3, #2
 8003688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800368c:	e7c3      	b.n	8003616 <_printf_common+0x62>
 800368e:	2301      	movs	r3, #1
 8003690:	4622      	mov	r2, r4
 8003692:	4639      	mov	r1, r7
 8003694:	4630      	mov	r0, r6
 8003696:	47c0      	blx	r8
 8003698:	3001      	adds	r0, #1
 800369a:	d0e6      	beq.n	800366a <_printf_common+0xb6>
 800369c:	f109 0901 	add.w	r9, r9, #1
 80036a0:	e7d7      	b.n	8003652 <_printf_common+0x9e>
	...

080036a4 <_printf_i>:
 80036a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036a8:	4617      	mov	r7, r2
 80036aa:	7e0a      	ldrb	r2, [r1, #24]
 80036ac:	b085      	sub	sp, #20
 80036ae:	2a6e      	cmp	r2, #110	; 0x6e
 80036b0:	4698      	mov	r8, r3
 80036b2:	4606      	mov	r6, r0
 80036b4:	460c      	mov	r4, r1
 80036b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80036b8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80036bc:	f000 80bc 	beq.w	8003838 <_printf_i+0x194>
 80036c0:	d81a      	bhi.n	80036f8 <_printf_i+0x54>
 80036c2:	2a63      	cmp	r2, #99	; 0x63
 80036c4:	d02e      	beq.n	8003724 <_printf_i+0x80>
 80036c6:	d80a      	bhi.n	80036de <_printf_i+0x3a>
 80036c8:	2a00      	cmp	r2, #0
 80036ca:	f000 80c8 	beq.w	800385e <_printf_i+0x1ba>
 80036ce:	2a58      	cmp	r2, #88	; 0x58
 80036d0:	f000 808a 	beq.w	80037e8 <_printf_i+0x144>
 80036d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036d8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80036dc:	e02a      	b.n	8003734 <_printf_i+0x90>
 80036de:	2a64      	cmp	r2, #100	; 0x64
 80036e0:	d001      	beq.n	80036e6 <_printf_i+0x42>
 80036e2:	2a69      	cmp	r2, #105	; 0x69
 80036e4:	d1f6      	bne.n	80036d4 <_printf_i+0x30>
 80036e6:	6821      	ldr	r1, [r4, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	f011 0f80 	tst.w	r1, #128	; 0x80
 80036ee:	d023      	beq.n	8003738 <_printf_i+0x94>
 80036f0:	1d11      	adds	r1, r2, #4
 80036f2:	6019      	str	r1, [r3, #0]
 80036f4:	6813      	ldr	r3, [r2, #0]
 80036f6:	e027      	b.n	8003748 <_printf_i+0xa4>
 80036f8:	2a73      	cmp	r2, #115	; 0x73
 80036fa:	f000 80b4 	beq.w	8003866 <_printf_i+0x1c2>
 80036fe:	d808      	bhi.n	8003712 <_printf_i+0x6e>
 8003700:	2a6f      	cmp	r2, #111	; 0x6f
 8003702:	d02a      	beq.n	800375a <_printf_i+0xb6>
 8003704:	2a70      	cmp	r2, #112	; 0x70
 8003706:	d1e5      	bne.n	80036d4 <_printf_i+0x30>
 8003708:	680a      	ldr	r2, [r1, #0]
 800370a:	f042 0220 	orr.w	r2, r2, #32
 800370e:	600a      	str	r2, [r1, #0]
 8003710:	e003      	b.n	800371a <_printf_i+0x76>
 8003712:	2a75      	cmp	r2, #117	; 0x75
 8003714:	d021      	beq.n	800375a <_printf_i+0xb6>
 8003716:	2a78      	cmp	r2, #120	; 0x78
 8003718:	d1dc      	bne.n	80036d4 <_printf_i+0x30>
 800371a:	2278      	movs	r2, #120	; 0x78
 800371c:	496f      	ldr	r1, [pc, #444]	; (80038dc <_printf_i+0x238>)
 800371e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003722:	e064      	b.n	80037ee <_printf_i+0x14a>
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800372a:	1d11      	adds	r1, r2, #4
 800372c:	6019      	str	r1, [r3, #0]
 800372e:	6813      	ldr	r3, [r2, #0]
 8003730:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003734:	2301      	movs	r3, #1
 8003736:	e0a3      	b.n	8003880 <_printf_i+0x1dc>
 8003738:	f011 0f40 	tst.w	r1, #64	; 0x40
 800373c:	f102 0104 	add.w	r1, r2, #4
 8003740:	6019      	str	r1, [r3, #0]
 8003742:	d0d7      	beq.n	80036f4 <_printf_i+0x50>
 8003744:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003748:	2b00      	cmp	r3, #0
 800374a:	da03      	bge.n	8003754 <_printf_i+0xb0>
 800374c:	222d      	movs	r2, #45	; 0x2d
 800374e:	425b      	negs	r3, r3
 8003750:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003754:	4962      	ldr	r1, [pc, #392]	; (80038e0 <_printf_i+0x23c>)
 8003756:	220a      	movs	r2, #10
 8003758:	e017      	b.n	800378a <_printf_i+0xe6>
 800375a:	6820      	ldr	r0, [r4, #0]
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003762:	d003      	beq.n	800376c <_printf_i+0xc8>
 8003764:	1d08      	adds	r0, r1, #4
 8003766:	6018      	str	r0, [r3, #0]
 8003768:	680b      	ldr	r3, [r1, #0]
 800376a:	e006      	b.n	800377a <_printf_i+0xd6>
 800376c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003770:	f101 0004 	add.w	r0, r1, #4
 8003774:	6018      	str	r0, [r3, #0]
 8003776:	d0f7      	beq.n	8003768 <_printf_i+0xc4>
 8003778:	880b      	ldrh	r3, [r1, #0]
 800377a:	2a6f      	cmp	r2, #111	; 0x6f
 800377c:	bf14      	ite	ne
 800377e:	220a      	movne	r2, #10
 8003780:	2208      	moveq	r2, #8
 8003782:	4957      	ldr	r1, [pc, #348]	; (80038e0 <_printf_i+0x23c>)
 8003784:	2000      	movs	r0, #0
 8003786:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800378a:	6865      	ldr	r5, [r4, #4]
 800378c:	2d00      	cmp	r5, #0
 800378e:	60a5      	str	r5, [r4, #8]
 8003790:	f2c0 809c 	blt.w	80038cc <_printf_i+0x228>
 8003794:	6820      	ldr	r0, [r4, #0]
 8003796:	f020 0004 	bic.w	r0, r0, #4
 800379a:	6020      	str	r0, [r4, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d13f      	bne.n	8003820 <_printf_i+0x17c>
 80037a0:	2d00      	cmp	r5, #0
 80037a2:	f040 8095 	bne.w	80038d0 <_printf_i+0x22c>
 80037a6:	4675      	mov	r5, lr
 80037a8:	2a08      	cmp	r2, #8
 80037aa:	d10b      	bne.n	80037c4 <_printf_i+0x120>
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	07da      	lsls	r2, r3, #31
 80037b0:	d508      	bpl.n	80037c4 <_printf_i+0x120>
 80037b2:	6923      	ldr	r3, [r4, #16]
 80037b4:	6862      	ldr	r2, [r4, #4]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	bfde      	ittt	le
 80037ba:	2330      	movle	r3, #48	; 0x30
 80037bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80037c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80037c4:	ebae 0305 	sub.w	r3, lr, r5
 80037c8:	6123      	str	r3, [r4, #16]
 80037ca:	f8cd 8000 	str.w	r8, [sp]
 80037ce:	463b      	mov	r3, r7
 80037d0:	aa03      	add	r2, sp, #12
 80037d2:	4621      	mov	r1, r4
 80037d4:	4630      	mov	r0, r6
 80037d6:	f7ff feed 	bl	80035b4 <_printf_common>
 80037da:	3001      	adds	r0, #1
 80037dc:	d155      	bne.n	800388a <_printf_i+0x1e6>
 80037de:	f04f 30ff 	mov.w	r0, #4294967295
 80037e2:	b005      	add	sp, #20
 80037e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80037e8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80037ec:	493c      	ldr	r1, [pc, #240]	; (80038e0 <_printf_i+0x23c>)
 80037ee:	6822      	ldr	r2, [r4, #0]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80037f6:	f100 0504 	add.w	r5, r0, #4
 80037fa:	601d      	str	r5, [r3, #0]
 80037fc:	d001      	beq.n	8003802 <_printf_i+0x15e>
 80037fe:	6803      	ldr	r3, [r0, #0]
 8003800:	e002      	b.n	8003808 <_printf_i+0x164>
 8003802:	0655      	lsls	r5, r2, #25
 8003804:	d5fb      	bpl.n	80037fe <_printf_i+0x15a>
 8003806:	8803      	ldrh	r3, [r0, #0]
 8003808:	07d0      	lsls	r0, r2, #31
 800380a:	bf44      	itt	mi
 800380c:	f042 0220 	orrmi.w	r2, r2, #32
 8003810:	6022      	strmi	r2, [r4, #0]
 8003812:	b91b      	cbnz	r3, 800381c <_printf_i+0x178>
 8003814:	6822      	ldr	r2, [r4, #0]
 8003816:	f022 0220 	bic.w	r2, r2, #32
 800381a:	6022      	str	r2, [r4, #0]
 800381c:	2210      	movs	r2, #16
 800381e:	e7b1      	b.n	8003784 <_printf_i+0xe0>
 8003820:	4675      	mov	r5, lr
 8003822:	fbb3 f0f2 	udiv	r0, r3, r2
 8003826:	fb02 3310 	mls	r3, r2, r0, r3
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003830:	4603      	mov	r3, r0
 8003832:	2800      	cmp	r0, #0
 8003834:	d1f5      	bne.n	8003822 <_printf_i+0x17e>
 8003836:	e7b7      	b.n	80037a8 <_printf_i+0x104>
 8003838:	6808      	ldr	r0, [r1, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003840:	6949      	ldr	r1, [r1, #20]
 8003842:	d004      	beq.n	800384e <_printf_i+0x1aa>
 8003844:	1d10      	adds	r0, r2, #4
 8003846:	6018      	str	r0, [r3, #0]
 8003848:	6813      	ldr	r3, [r2, #0]
 800384a:	6019      	str	r1, [r3, #0]
 800384c:	e007      	b.n	800385e <_printf_i+0x1ba>
 800384e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003852:	f102 0004 	add.w	r0, r2, #4
 8003856:	6018      	str	r0, [r3, #0]
 8003858:	6813      	ldr	r3, [r2, #0]
 800385a:	d0f6      	beq.n	800384a <_printf_i+0x1a6>
 800385c:	8019      	strh	r1, [r3, #0]
 800385e:	2300      	movs	r3, #0
 8003860:	4675      	mov	r5, lr
 8003862:	6123      	str	r3, [r4, #16]
 8003864:	e7b1      	b.n	80037ca <_printf_i+0x126>
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	1d11      	adds	r1, r2, #4
 800386a:	6019      	str	r1, [r3, #0]
 800386c:	6815      	ldr	r5, [r2, #0]
 800386e:	2100      	movs	r1, #0
 8003870:	6862      	ldr	r2, [r4, #4]
 8003872:	4628      	mov	r0, r5
 8003874:	f000 fed2 	bl	800461c <memchr>
 8003878:	b108      	cbz	r0, 800387e <_printf_i+0x1da>
 800387a:	1b40      	subs	r0, r0, r5
 800387c:	6060      	str	r0, [r4, #4]
 800387e:	6863      	ldr	r3, [r4, #4]
 8003880:	6123      	str	r3, [r4, #16]
 8003882:	2300      	movs	r3, #0
 8003884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003888:	e79f      	b.n	80037ca <_printf_i+0x126>
 800388a:	6923      	ldr	r3, [r4, #16]
 800388c:	462a      	mov	r2, r5
 800388e:	4639      	mov	r1, r7
 8003890:	4630      	mov	r0, r6
 8003892:	47c0      	blx	r8
 8003894:	3001      	adds	r0, #1
 8003896:	d0a2      	beq.n	80037de <_printf_i+0x13a>
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	079b      	lsls	r3, r3, #30
 800389c:	d507      	bpl.n	80038ae <_printf_i+0x20a>
 800389e:	2500      	movs	r5, #0
 80038a0:	f104 0919 	add.w	r9, r4, #25
 80038a4:	68e3      	ldr	r3, [r4, #12]
 80038a6:	9a03      	ldr	r2, [sp, #12]
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	429d      	cmp	r5, r3
 80038ac:	db05      	blt.n	80038ba <_printf_i+0x216>
 80038ae:	68e0      	ldr	r0, [r4, #12]
 80038b0:	9b03      	ldr	r3, [sp, #12]
 80038b2:	4298      	cmp	r0, r3
 80038b4:	bfb8      	it	lt
 80038b6:	4618      	movlt	r0, r3
 80038b8:	e793      	b.n	80037e2 <_printf_i+0x13e>
 80038ba:	2301      	movs	r3, #1
 80038bc:	464a      	mov	r2, r9
 80038be:	4639      	mov	r1, r7
 80038c0:	4630      	mov	r0, r6
 80038c2:	47c0      	blx	r8
 80038c4:	3001      	adds	r0, #1
 80038c6:	d08a      	beq.n	80037de <_printf_i+0x13a>
 80038c8:	3501      	adds	r5, #1
 80038ca:	e7eb      	b.n	80038a4 <_printf_i+0x200>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1a7      	bne.n	8003820 <_printf_i+0x17c>
 80038d0:	780b      	ldrb	r3, [r1, #0]
 80038d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038da:	e765      	b.n	80037a8 <_printf_i+0x104>
 80038dc:	080051e4 	.word	0x080051e4
 80038e0:	080051d3 	.word	0x080051d3

080038e4 <siprintf>:
 80038e4:	b40e      	push	{r1, r2, r3}
 80038e6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80038ea:	b500      	push	{lr}
 80038ec:	b09c      	sub	sp, #112	; 0x70
 80038ee:	f8ad 1014 	strh.w	r1, [sp, #20]
 80038f2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038f6:	9104      	str	r1, [sp, #16]
 80038f8:	9107      	str	r1, [sp, #28]
 80038fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038fe:	ab1d      	add	r3, sp, #116	; 0x74
 8003900:	9002      	str	r0, [sp, #8]
 8003902:	9006      	str	r0, [sp, #24]
 8003904:	4808      	ldr	r0, [pc, #32]	; (8003928 <siprintf+0x44>)
 8003906:	f853 2b04 	ldr.w	r2, [r3], #4
 800390a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800390e:	6800      	ldr	r0, [r0, #0]
 8003910:	a902      	add	r1, sp, #8
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	f001 fa80 	bl	8004e18 <_svfiprintf_r>
 8003918:	2200      	movs	r2, #0
 800391a:	9b02      	ldr	r3, [sp, #8]
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	b01c      	add	sp, #112	; 0x70
 8003920:	f85d eb04 	ldr.w	lr, [sp], #4
 8003924:	b003      	add	sp, #12
 8003926:	4770      	bx	lr
 8003928:	2000001c 	.word	0x2000001c

0800392c <quorem>:
 800392c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	6903      	ldr	r3, [r0, #16]
 8003932:	690c      	ldr	r4, [r1, #16]
 8003934:	4680      	mov	r8, r0
 8003936:	429c      	cmp	r4, r3
 8003938:	f300 8082 	bgt.w	8003a40 <quorem+0x114>
 800393c:	3c01      	subs	r4, #1
 800393e:	f101 0714 	add.w	r7, r1, #20
 8003942:	f100 0614 	add.w	r6, r0, #20
 8003946:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800394a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800394e:	3501      	adds	r5, #1
 8003950:	fbb0 f5f5 	udiv	r5, r0, r5
 8003954:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8003958:	eb06 030e 	add.w	r3, r6, lr
 800395c:	eb07 090e 	add.w	r9, r7, lr
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	b38d      	cbz	r5, 80039c8 <quorem+0x9c>
 8003964:	f04f 0a00 	mov.w	sl, #0
 8003968:	4638      	mov	r0, r7
 800396a:	46b4      	mov	ip, r6
 800396c:	46d3      	mov	fp, sl
 800396e:	f850 2b04 	ldr.w	r2, [r0], #4
 8003972:	b293      	uxth	r3, r2
 8003974:	fb05 a303 	mla	r3, r5, r3, sl
 8003978:	0c12      	lsrs	r2, r2, #16
 800397a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800397e:	fb05 a202 	mla	r2, r5, r2, sl
 8003982:	b29b      	uxth	r3, r3
 8003984:	ebab 0303 	sub.w	r3, fp, r3
 8003988:	f8bc b000 	ldrh.w	fp, [ip]
 800398c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003990:	445b      	add	r3, fp
 8003992:	fa1f fb82 	uxth.w	fp, r2
 8003996:	f8dc 2000 	ldr.w	r2, [ip]
 800399a:	4581      	cmp	r9, r0
 800399c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80039a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039aa:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80039ae:	f84c 3b04 	str.w	r3, [ip], #4
 80039b2:	d2dc      	bcs.n	800396e <quorem+0x42>
 80039b4:	f856 300e 	ldr.w	r3, [r6, lr]
 80039b8:	b933      	cbnz	r3, 80039c8 <quorem+0x9c>
 80039ba:	9b01      	ldr	r3, [sp, #4]
 80039bc:	3b04      	subs	r3, #4
 80039be:	429e      	cmp	r6, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	d331      	bcc.n	8003a28 <quorem+0xfc>
 80039c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80039c8:	4640      	mov	r0, r8
 80039ca:	f001 f848 	bl	8004a5e <__mcmp>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	db26      	blt.n	8003a20 <quorem+0xf4>
 80039d2:	4630      	mov	r0, r6
 80039d4:	f04f 0e00 	mov.w	lr, #0
 80039d8:	3501      	adds	r5, #1
 80039da:	f857 1b04 	ldr.w	r1, [r7], #4
 80039de:	f8d0 c000 	ldr.w	ip, [r0]
 80039e2:	b28b      	uxth	r3, r1
 80039e4:	ebae 0303 	sub.w	r3, lr, r3
 80039e8:	fa1f f28c 	uxth.w	r2, ip
 80039ec:	4413      	add	r3, r2
 80039ee:	0c0a      	lsrs	r2, r1, #16
 80039f0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80039f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039fe:	45b9      	cmp	r9, r7
 8003a00:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003a04:	f840 3b04 	str.w	r3, [r0], #4
 8003a08:	d2e7      	bcs.n	80039da <quorem+0xae>
 8003a0a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003a0e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003a12:	b92a      	cbnz	r2, 8003a20 <quorem+0xf4>
 8003a14:	3b04      	subs	r3, #4
 8003a16:	429e      	cmp	r6, r3
 8003a18:	461a      	mov	r2, r3
 8003a1a:	d30b      	bcc.n	8003a34 <quorem+0x108>
 8003a1c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003a20:	4628      	mov	r0, r5
 8003a22:	b003      	add	sp, #12
 8003a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a28:	6812      	ldr	r2, [r2, #0]
 8003a2a:	3b04      	subs	r3, #4
 8003a2c:	2a00      	cmp	r2, #0
 8003a2e:	d1c9      	bne.n	80039c4 <quorem+0x98>
 8003a30:	3c01      	subs	r4, #1
 8003a32:	e7c4      	b.n	80039be <quorem+0x92>
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	3b04      	subs	r3, #4
 8003a38:	2a00      	cmp	r2, #0
 8003a3a:	d1ef      	bne.n	8003a1c <quorem+0xf0>
 8003a3c:	3c01      	subs	r4, #1
 8003a3e:	e7ea      	b.n	8003a16 <quorem+0xea>
 8003a40:	2000      	movs	r0, #0
 8003a42:	e7ee      	b.n	8003a22 <quorem+0xf6>
 8003a44:	0000      	movs	r0, r0
	...

08003a48 <_dtoa_r>:
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a4e:	b095      	sub	sp, #84	; 0x54
 8003a50:	4604      	mov	r4, r0
 8003a52:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003a54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003a58:	b93e      	cbnz	r6, 8003a6a <_dtoa_r+0x22>
 8003a5a:	2010      	movs	r0, #16
 8003a5c:	f000 fdd6 	bl	800460c <malloc>
 8003a60:	6260      	str	r0, [r4, #36]	; 0x24
 8003a62:	6046      	str	r6, [r0, #4]
 8003a64:	6086      	str	r6, [r0, #8]
 8003a66:	6006      	str	r6, [r0, #0]
 8003a68:	60c6      	str	r6, [r0, #12]
 8003a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a6c:	6819      	ldr	r1, [r3, #0]
 8003a6e:	b151      	cbz	r1, 8003a86 <_dtoa_r+0x3e>
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	2301      	movs	r3, #1
 8003a74:	4093      	lsls	r3, r2
 8003a76:	604a      	str	r2, [r1, #4]
 8003a78:	608b      	str	r3, [r1, #8]
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f000 fe1b 	bl	80046b6 <_Bfree>
 8003a80:	2200      	movs	r2, #0
 8003a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	9b03      	ldr	r3, [sp, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bfb7      	itett	lt
 8003a8c:	2301      	movlt	r3, #1
 8003a8e:	2300      	movge	r3, #0
 8003a90:	602b      	strlt	r3, [r5, #0]
 8003a92:	9b03      	ldrlt	r3, [sp, #12]
 8003a94:	bfae      	itee	ge
 8003a96:	602b      	strge	r3, [r5, #0]
 8003a98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003a9c:	9303      	strlt	r3, [sp, #12]
 8003a9e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003aa2:	4bab      	ldr	r3, [pc, #684]	; (8003d50 <_dtoa_r+0x308>)
 8003aa4:	ea33 0309 	bics.w	r3, r3, r9
 8003aa8:	d11b      	bne.n	8003ae2 <_dtoa_r+0x9a>
 8003aaa:	f242 730f 	movw	r3, #9999	; 0x270f
 8003aae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	9b02      	ldr	r3, [sp, #8]
 8003ab4:	b923      	cbnz	r3, 8003ac0 <_dtoa_r+0x78>
 8003ab6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8003aba:	2800      	cmp	r0, #0
 8003abc:	f000 8583 	beq.w	80045c6 <_dtoa_r+0xb7e>
 8003ac0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ac2:	b953      	cbnz	r3, 8003ada <_dtoa_r+0x92>
 8003ac4:	4ba3      	ldr	r3, [pc, #652]	; (8003d54 <_dtoa_r+0x30c>)
 8003ac6:	e021      	b.n	8003b0c <_dtoa_r+0xc4>
 8003ac8:	4ba3      	ldr	r3, [pc, #652]	; (8003d58 <_dtoa_r+0x310>)
 8003aca:	9306      	str	r3, [sp, #24]
 8003acc:	3308      	adds	r3, #8
 8003ace:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	9806      	ldr	r0, [sp, #24]
 8003ad4:	b015      	add	sp, #84	; 0x54
 8003ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ada:	4b9e      	ldr	r3, [pc, #632]	; (8003d54 <_dtoa_r+0x30c>)
 8003adc:	9306      	str	r3, [sp, #24]
 8003ade:	3303      	adds	r3, #3
 8003ae0:	e7f5      	b.n	8003ace <_dtoa_r+0x86>
 8003ae2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	2300      	movs	r3, #0
 8003aea:	4630      	mov	r0, r6
 8003aec:	4639      	mov	r1, r7
 8003aee:	f7fc ff57 	bl	80009a0 <__aeabi_dcmpeq>
 8003af2:	4680      	mov	r8, r0
 8003af4:	b160      	cbz	r0, 8003b10 <_dtoa_r+0xc8>
 8003af6:	2301      	movs	r3, #1
 8003af8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 855e 	beq.w	80045c0 <_dtoa_r+0xb78>
 8003b04:	4b95      	ldr	r3, [pc, #596]	; (8003d5c <_dtoa_r+0x314>)
 8003b06:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	9306      	str	r3, [sp, #24]
 8003b0e:	e7e0      	b.n	8003ad2 <_dtoa_r+0x8a>
 8003b10:	ab12      	add	r3, sp, #72	; 0x48
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	ab13      	add	r3, sp, #76	; 0x4c
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	4632      	mov	r2, r6
 8003b1a:	463b      	mov	r3, r7
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	f001 f817 	bl	8004b50 <__d2b>
 8003b22:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003b26:	4682      	mov	sl, r0
 8003b28:	2d00      	cmp	r5, #0
 8003b2a:	d07d      	beq.n	8003c28 <_dtoa_r+0x1e0>
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003b32:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003b36:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003b3a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003b3e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003b42:	2200      	movs	r2, #0
 8003b44:	4b86      	ldr	r3, [pc, #536]	; (8003d60 <_dtoa_r+0x318>)
 8003b46:	f7fc fb0f 	bl	8000168 <__aeabi_dsub>
 8003b4a:	a37b      	add	r3, pc, #492	; (adr r3, 8003d38 <_dtoa_r+0x2f0>)
 8003b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b50:	f7fc fcbe 	bl	80004d0 <__aeabi_dmul>
 8003b54:	a37a      	add	r3, pc, #488	; (adr r3, 8003d40 <_dtoa_r+0x2f8>)
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	f7fc fb07 	bl	800016c <__adddf3>
 8003b5e:	4606      	mov	r6, r0
 8003b60:	4628      	mov	r0, r5
 8003b62:	460f      	mov	r7, r1
 8003b64:	f7fc fc4e 	bl	8000404 <__aeabi_i2d>
 8003b68:	a377      	add	r3, pc, #476	; (adr r3, 8003d48 <_dtoa_r+0x300>)
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f7fc fcaf 	bl	80004d0 <__aeabi_dmul>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4630      	mov	r0, r6
 8003b78:	4639      	mov	r1, r7
 8003b7a:	f7fc faf7 	bl	800016c <__adddf3>
 8003b7e:	4606      	mov	r6, r0
 8003b80:	460f      	mov	r7, r1
 8003b82:	f7fc ff55 	bl	8000a30 <__aeabi_d2iz>
 8003b86:	2200      	movs	r2, #0
 8003b88:	4683      	mov	fp, r0
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	4639      	mov	r1, r7
 8003b90:	f7fc ff10 	bl	80009b4 <__aeabi_dcmplt>
 8003b94:	b158      	cbz	r0, 8003bae <_dtoa_r+0x166>
 8003b96:	4658      	mov	r0, fp
 8003b98:	f7fc fc34 	bl	8000404 <__aeabi_i2d>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4630      	mov	r0, r6
 8003ba2:	4639      	mov	r1, r7
 8003ba4:	f7fc fefc 	bl	80009a0 <__aeabi_dcmpeq>
 8003ba8:	b908      	cbnz	r0, 8003bae <_dtoa_r+0x166>
 8003baa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003bae:	f1bb 0f16 	cmp.w	fp, #22
 8003bb2:	d858      	bhi.n	8003c66 <_dtoa_r+0x21e>
 8003bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003bb8:	496a      	ldr	r1, [pc, #424]	; (8003d64 <_dtoa_r+0x31c>)
 8003bba:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003bbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003bc2:	f7fc ff15 	bl	80009f0 <__aeabi_dcmpgt>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d04f      	beq.n	8003c6a <_dtoa_r+0x222>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003bd0:	930d      	str	r3, [sp, #52]	; 0x34
 8003bd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003bd4:	1b5d      	subs	r5, r3, r5
 8003bd6:	1e6b      	subs	r3, r5, #1
 8003bd8:	9307      	str	r3, [sp, #28]
 8003bda:	bf43      	ittte	mi
 8003bdc:	2300      	movmi	r3, #0
 8003bde:	f1c5 0801 	rsbmi	r8, r5, #1
 8003be2:	9307      	strmi	r3, [sp, #28]
 8003be4:	f04f 0800 	movpl.w	r8, #0
 8003be8:	f1bb 0f00 	cmp.w	fp, #0
 8003bec:	db3f      	blt.n	8003c6e <_dtoa_r+0x226>
 8003bee:	9b07      	ldr	r3, [sp, #28]
 8003bf0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003bf4:	445b      	add	r3, fp
 8003bf6:	9307      	str	r3, [sp, #28]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	9308      	str	r3, [sp, #32]
 8003bfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003bfe:	2b09      	cmp	r3, #9
 8003c00:	f200 80b4 	bhi.w	8003d6c <_dtoa_r+0x324>
 8003c04:	2b05      	cmp	r3, #5
 8003c06:	bfc4      	itt	gt
 8003c08:	3b04      	subgt	r3, #4
 8003c0a:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003c0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003c0e:	bfc8      	it	gt
 8003c10:	2600      	movgt	r6, #0
 8003c12:	f1a3 0302 	sub.w	r3, r3, #2
 8003c16:	bfd8      	it	le
 8003c18:	2601      	movle	r6, #1
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	f200 80b2 	bhi.w	8003d84 <_dtoa_r+0x33c>
 8003c20:	e8df f003 	tbb	[pc, r3]
 8003c24:	782d8684 	.word	0x782d8684
 8003c28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003c2a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8003c2c:	441d      	add	r5, r3
 8003c2e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	dd11      	ble.n	8003c5a <_dtoa_r+0x212>
 8003c36:	9a02      	ldr	r2, [sp, #8]
 8003c38:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003c3c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003c40:	fa22 f000 	lsr.w	r0, r2, r0
 8003c44:	fa09 f303 	lsl.w	r3, r9, r3
 8003c48:	4318      	orrs	r0, r3
 8003c4a:	f7fc fbcb 	bl	80003e4 <__aeabi_ui2d>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003c54:	3d01      	subs	r5, #1
 8003c56:	9310      	str	r3, [sp, #64]	; 0x40
 8003c58:	e773      	b.n	8003b42 <_dtoa_r+0xfa>
 8003c5a:	f1c3 0020 	rsb	r0, r3, #32
 8003c5e:	9b02      	ldr	r3, [sp, #8]
 8003c60:	fa03 f000 	lsl.w	r0, r3, r0
 8003c64:	e7f1      	b.n	8003c4a <_dtoa_r+0x202>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e7b2      	b.n	8003bd0 <_dtoa_r+0x188>
 8003c6a:	900d      	str	r0, [sp, #52]	; 0x34
 8003c6c:	e7b1      	b.n	8003bd2 <_dtoa_r+0x18a>
 8003c6e:	f1cb 0300 	rsb	r3, fp, #0
 8003c72:	9308      	str	r3, [sp, #32]
 8003c74:	2300      	movs	r3, #0
 8003c76:	eba8 080b 	sub.w	r8, r8, fp
 8003c7a:	930c      	str	r3, [sp, #48]	; 0x30
 8003c7c:	e7be      	b.n	8003bfc <_dtoa_r+0x1b4>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	9309      	str	r3, [sp, #36]	; 0x24
 8003c82:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f340 8080 	ble.w	8003d8a <_dtoa_r+0x342>
 8003c8a:	4699      	mov	r9, r3
 8003c8c:	9304      	str	r3, [sp, #16]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2104      	movs	r1, #4
 8003c92:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003c94:	606a      	str	r2, [r5, #4]
 8003c96:	f101 0214 	add.w	r2, r1, #20
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d97a      	bls.n	8003d94 <_dtoa_r+0x34c>
 8003c9e:	6869      	ldr	r1, [r5, #4]
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f000 fcd4 	bl	800464e <_Balloc>
 8003ca6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ca8:	6028      	str	r0, [r5, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f1b9 0f0e 	cmp.w	r9, #14
 8003cb0:	9306      	str	r3, [sp, #24]
 8003cb2:	f200 80f0 	bhi.w	8003e96 <_dtoa_r+0x44e>
 8003cb6:	2e00      	cmp	r6, #0
 8003cb8:	f000 80ed 	beq.w	8003e96 <_dtoa_r+0x44e>
 8003cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cc0:	f1bb 0f00 	cmp.w	fp, #0
 8003cc4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003cc8:	dd79      	ble.n	8003dbe <_dtoa_r+0x376>
 8003cca:	4a26      	ldr	r2, [pc, #152]	; (8003d64 <_dtoa_r+0x31c>)
 8003ccc:	f00b 030f 	and.w	r3, fp, #15
 8003cd0:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003cd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003cd8:	06f0      	lsls	r0, r6, #27
 8003cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cde:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003ce2:	d55c      	bpl.n	8003d9e <_dtoa_r+0x356>
 8003ce4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <_dtoa_r+0x320>)
 8003cea:	2503      	movs	r5, #3
 8003cec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003cf0:	f7fc fd18 	bl	8000724 <__aeabi_ddiv>
 8003cf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003cf8:	f006 060f 	and.w	r6, r6, #15
 8003cfc:	4f1a      	ldr	r7, [pc, #104]	; (8003d68 <_dtoa_r+0x320>)
 8003cfe:	2e00      	cmp	r6, #0
 8003d00:	d14f      	bne.n	8003da2 <_dtoa_r+0x35a>
 8003d02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d0a:	f7fc fd0b 	bl	8000724 <__aeabi_ddiv>
 8003d0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d12:	e06e      	b.n	8003df2 <_dtoa_r+0x3aa>
 8003d14:	2301      	movs	r3, #1
 8003d16:	9309      	str	r3, [sp, #36]	; 0x24
 8003d18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003d1a:	445b      	add	r3, fp
 8003d1c:	f103 0901 	add.w	r9, r3, #1
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	464b      	mov	r3, r9
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	bfb8      	it	lt
 8003d28:	2301      	movlt	r3, #1
 8003d2a:	e7b0      	b.n	8003c8e <_dtoa_r+0x246>
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e7a7      	b.n	8003c80 <_dtoa_r+0x238>
 8003d30:	2300      	movs	r3, #0
 8003d32:	e7f0      	b.n	8003d16 <_dtoa_r+0x2ce>
 8003d34:	f3af 8000 	nop.w
 8003d38:	636f4361 	.word	0x636f4361
 8003d3c:	3fd287a7 	.word	0x3fd287a7
 8003d40:	8b60c8b3 	.word	0x8b60c8b3
 8003d44:	3fc68a28 	.word	0x3fc68a28
 8003d48:	509f79fb 	.word	0x509f79fb
 8003d4c:	3fd34413 	.word	0x3fd34413
 8003d50:	7ff00000 	.word	0x7ff00000
 8003d54:	080051fe 	.word	0x080051fe
 8003d58:	080051f5 	.word	0x080051f5
 8003d5c:	080051d2 	.word	0x080051d2
 8003d60:	3ff80000 	.word	0x3ff80000
 8003d64:	08005230 	.word	0x08005230
 8003d68:	08005208 	.word	0x08005208
 8003d6c:	2601      	movs	r6, #1
 8003d6e:	2300      	movs	r3, #0
 8003d70:	9609      	str	r6, [sp, #36]	; 0x24
 8003d72:	931e      	str	r3, [sp, #120]	; 0x78
 8003d74:	f04f 33ff 	mov.w	r3, #4294967295
 8003d78:	2200      	movs	r2, #0
 8003d7a:	9304      	str	r3, [sp, #16]
 8003d7c:	4699      	mov	r9, r3
 8003d7e:	2312      	movs	r3, #18
 8003d80:	921f      	str	r2, [sp, #124]	; 0x7c
 8003d82:	e784      	b.n	8003c8e <_dtoa_r+0x246>
 8003d84:	2301      	movs	r3, #1
 8003d86:	9309      	str	r3, [sp, #36]	; 0x24
 8003d88:	e7f4      	b.n	8003d74 <_dtoa_r+0x32c>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	9304      	str	r3, [sp, #16]
 8003d8e:	4699      	mov	r9, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	e7f5      	b.n	8003d80 <_dtoa_r+0x338>
 8003d94:	686a      	ldr	r2, [r5, #4]
 8003d96:	0049      	lsls	r1, r1, #1
 8003d98:	3201      	adds	r2, #1
 8003d9a:	606a      	str	r2, [r5, #4]
 8003d9c:	e77b      	b.n	8003c96 <_dtoa_r+0x24e>
 8003d9e:	2502      	movs	r5, #2
 8003da0:	e7ac      	b.n	8003cfc <_dtoa_r+0x2b4>
 8003da2:	07f1      	lsls	r1, r6, #31
 8003da4:	d508      	bpl.n	8003db8 <_dtoa_r+0x370>
 8003da6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dae:	f7fc fb8f 	bl	80004d0 <__aeabi_dmul>
 8003db2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003db6:	3501      	adds	r5, #1
 8003db8:	1076      	asrs	r6, r6, #1
 8003dba:	3708      	adds	r7, #8
 8003dbc:	e79f      	b.n	8003cfe <_dtoa_r+0x2b6>
 8003dbe:	f000 80a5 	beq.w	8003f0c <_dtoa_r+0x4c4>
 8003dc2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003dc6:	f1cb 0600 	rsb	r6, fp, #0
 8003dca:	4ba2      	ldr	r3, [pc, #648]	; (8004054 <_dtoa_r+0x60c>)
 8003dcc:	f006 020f 	and.w	r2, r6, #15
 8003dd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f7fc fb7a 	bl	80004d0 <__aeabi_dmul>
 8003ddc:	2502      	movs	r5, #2
 8003dde:	2300      	movs	r3, #0
 8003de0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003de4:	4f9c      	ldr	r7, [pc, #624]	; (8004058 <_dtoa_r+0x610>)
 8003de6:	1136      	asrs	r6, r6, #4
 8003de8:	2e00      	cmp	r6, #0
 8003dea:	f040 8084 	bne.w	8003ef6 <_dtoa_r+0x4ae>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d18d      	bne.n	8003d0e <_dtoa_r+0x2c6>
 8003df2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 808b 	beq.w	8003f10 <_dtoa_r+0x4c8>
 8003dfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dfe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003e02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e06:	2200      	movs	r2, #0
 8003e08:	4b94      	ldr	r3, [pc, #592]	; (800405c <_dtoa_r+0x614>)
 8003e0a:	f7fc fdd3 	bl	80009b4 <__aeabi_dcmplt>
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d07e      	beq.n	8003f10 <_dtoa_r+0x4c8>
 8003e12:	f1b9 0f00 	cmp.w	r9, #0
 8003e16:	d07b      	beq.n	8003f10 <_dtoa_r+0x4c8>
 8003e18:	9b04      	ldr	r3, [sp, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	dd37      	ble.n	8003e8e <_dtoa_r+0x446>
 8003e1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003e22:	2200      	movs	r2, #0
 8003e24:	4b8e      	ldr	r3, [pc, #568]	; (8004060 <_dtoa_r+0x618>)
 8003e26:	f7fc fb53 	bl	80004d0 <__aeabi_dmul>
 8003e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e2e:	9e04      	ldr	r6, [sp, #16]
 8003e30:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003e34:	3501      	adds	r5, #1
 8003e36:	4628      	mov	r0, r5
 8003e38:	f7fc fae4 	bl	8000404 <__aeabi_i2d>
 8003e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e40:	f7fc fb46 	bl	80004d0 <__aeabi_dmul>
 8003e44:	4b87      	ldr	r3, [pc, #540]	; (8004064 <_dtoa_r+0x61c>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	f7fc f990 	bl	800016c <__adddf3>
 8003e4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e52:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8003e56:	950b      	str	r5, [sp, #44]	; 0x2c
 8003e58:	2e00      	cmp	r6, #0
 8003e5a:	d15c      	bne.n	8003f16 <_dtoa_r+0x4ce>
 8003e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e60:	2200      	movs	r2, #0
 8003e62:	4b81      	ldr	r3, [pc, #516]	; (8004068 <_dtoa_r+0x620>)
 8003e64:	f7fc f980 	bl	8000168 <__aeabi_dsub>
 8003e68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e6a:	462b      	mov	r3, r5
 8003e6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e70:	f7fc fdbe 	bl	80009f0 <__aeabi_dcmpgt>
 8003e74:	2800      	cmp	r0, #0
 8003e76:	f040 82f7 	bne.w	8004468 <_dtoa_r+0xa20>
 8003e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e80:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003e84:	f7fc fd96 	bl	80009b4 <__aeabi_dcmplt>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	f040 82eb 	bne.w	8004464 <_dtoa_r+0xa1c>
 8003e8e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003e92:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f2c0 8150 	blt.w	800413e <_dtoa_r+0x6f6>
 8003e9e:	f1bb 0f0e 	cmp.w	fp, #14
 8003ea2:	f300 814c 	bgt.w	800413e <_dtoa_r+0x6f6>
 8003ea6:	4b6b      	ldr	r3, [pc, #428]	; (8004054 <_dtoa_r+0x60c>)
 8003ea8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003eb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f280 80da 	bge.w	8004070 <_dtoa_r+0x628>
 8003ebc:	f1b9 0f00 	cmp.w	r9, #0
 8003ec0:	f300 80d6 	bgt.w	8004070 <_dtoa_r+0x628>
 8003ec4:	f040 82cd 	bne.w	8004462 <_dtoa_r+0xa1a>
 8003ec8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	4b66      	ldr	r3, [pc, #408]	; (8004068 <_dtoa_r+0x620>)
 8003ed0:	f7fc fafe 	bl	80004d0 <__aeabi_dmul>
 8003ed4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ed8:	f7fc fd80 	bl	80009dc <__aeabi_dcmpge>
 8003edc:	464e      	mov	r6, r9
 8003ede:	464f      	mov	r7, r9
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	f040 82a4 	bne.w	800442e <_dtoa_r+0x9e6>
 8003ee6:	9b06      	ldr	r3, [sp, #24]
 8003ee8:	9a06      	ldr	r2, [sp, #24]
 8003eea:	1c5d      	adds	r5, r3, #1
 8003eec:	2331      	movs	r3, #49	; 0x31
 8003eee:	f10b 0b01 	add.w	fp, fp, #1
 8003ef2:	7013      	strb	r3, [r2, #0]
 8003ef4:	e29f      	b.n	8004436 <_dtoa_r+0x9ee>
 8003ef6:	07f2      	lsls	r2, r6, #31
 8003ef8:	d505      	bpl.n	8003f06 <_dtoa_r+0x4be>
 8003efa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003efe:	f7fc fae7 	bl	80004d0 <__aeabi_dmul>
 8003f02:	2301      	movs	r3, #1
 8003f04:	3501      	adds	r5, #1
 8003f06:	1076      	asrs	r6, r6, #1
 8003f08:	3708      	adds	r7, #8
 8003f0a:	e76d      	b.n	8003de8 <_dtoa_r+0x3a0>
 8003f0c:	2502      	movs	r5, #2
 8003f0e:	e770      	b.n	8003df2 <_dtoa_r+0x3aa>
 8003f10:	465f      	mov	r7, fp
 8003f12:	464e      	mov	r6, r9
 8003f14:	e78f      	b.n	8003e36 <_dtoa_r+0x3ee>
 8003f16:	9a06      	ldr	r2, [sp, #24]
 8003f18:	4b4e      	ldr	r3, [pc, #312]	; (8004054 <_dtoa_r+0x60c>)
 8003f1a:	4432      	add	r2, r6
 8003f1c:	9211      	str	r2, [sp, #68]	; 0x44
 8003f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f20:	1e71      	subs	r1, r6, #1
 8003f22:	2a00      	cmp	r2, #0
 8003f24:	d048      	beq.n	8003fb8 <_dtoa_r+0x570>
 8003f26:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2e:	2000      	movs	r0, #0
 8003f30:	494e      	ldr	r1, [pc, #312]	; (800406c <_dtoa_r+0x624>)
 8003f32:	f7fc fbf7 	bl	8000724 <__aeabi_ddiv>
 8003f36:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003f3a:	f7fc f915 	bl	8000168 <__aeabi_dsub>
 8003f3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f42:	9d06      	ldr	r5, [sp, #24]
 8003f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f48:	f7fc fd72 	bl	8000a30 <__aeabi_d2iz>
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	f7fc fa59 	bl	8000404 <__aeabi_i2d>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f5a:	f7fc f905 	bl	8000168 <__aeabi_dsub>
 8003f5e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003f62:	3630      	adds	r6, #48	; 0x30
 8003f64:	f805 6b01 	strb.w	r6, [r5], #1
 8003f68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f6c:	f7fc fd22 	bl	80009b4 <__aeabi_dcmplt>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d164      	bne.n	800403e <_dtoa_r+0x5f6>
 8003f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003f78:	2000      	movs	r0, #0
 8003f7a:	4938      	ldr	r1, [pc, #224]	; (800405c <_dtoa_r+0x614>)
 8003f7c:	f7fc f8f4 	bl	8000168 <__aeabi_dsub>
 8003f80:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003f84:	f7fc fd16 	bl	80009b4 <__aeabi_dcmplt>
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	f040 80b9 	bne.w	8004100 <_dtoa_r+0x6b8>
 8003f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f90:	429d      	cmp	r5, r3
 8003f92:	f43f af7c 	beq.w	8003e8e <_dtoa_r+0x446>
 8003f96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	4b30      	ldr	r3, [pc, #192]	; (8004060 <_dtoa_r+0x618>)
 8003f9e:	f7fc fa97 	bl	80004d0 <__aeabi_dmul>
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fac:	4b2c      	ldr	r3, [pc, #176]	; (8004060 <_dtoa_r+0x618>)
 8003fae:	f7fc fa8f 	bl	80004d0 <__aeabi_dmul>
 8003fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fb6:	e7c5      	b.n	8003f44 <_dtoa_r+0x4fc>
 8003fb8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fc0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003fc4:	f7fc fa84 	bl	80004d0 <__aeabi_dmul>
 8003fc8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003fcc:	9d06      	ldr	r5, [sp, #24]
 8003fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fd2:	f7fc fd2d 	bl	8000a30 <__aeabi_d2iz>
 8003fd6:	4606      	mov	r6, r0
 8003fd8:	f7fc fa14 	bl	8000404 <__aeabi_i2d>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fe4:	f7fc f8c0 	bl	8000168 <__aeabi_dsub>
 8003fe8:	3630      	adds	r6, #48	; 0x30
 8003fea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003fec:	f805 6b01 	strb.w	r6, [r5], #1
 8003ff0:	42ab      	cmp	r3, r5
 8003ff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	d124      	bne.n	8004046 <_dtoa_r+0x5fe>
 8003ffc:	4b1b      	ldr	r3, [pc, #108]	; (800406c <_dtoa_r+0x624>)
 8003ffe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004002:	f7fc f8b3 	bl	800016c <__adddf3>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800400e:	f7fc fcef 	bl	80009f0 <__aeabi_dcmpgt>
 8004012:	2800      	cmp	r0, #0
 8004014:	d174      	bne.n	8004100 <_dtoa_r+0x6b8>
 8004016:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800401a:	2000      	movs	r0, #0
 800401c:	4913      	ldr	r1, [pc, #76]	; (800406c <_dtoa_r+0x624>)
 800401e:	f7fc f8a3 	bl	8000168 <__aeabi_dsub>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800402a:	f7fc fcc3 	bl	80009b4 <__aeabi_dcmplt>
 800402e:	2800      	cmp	r0, #0
 8004030:	f43f af2d 	beq.w	8003e8e <_dtoa_r+0x446>
 8004034:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004038:	1e6a      	subs	r2, r5, #1
 800403a:	2b30      	cmp	r3, #48	; 0x30
 800403c:	d001      	beq.n	8004042 <_dtoa_r+0x5fa>
 800403e:	46bb      	mov	fp, r7
 8004040:	e04d      	b.n	80040de <_dtoa_r+0x696>
 8004042:	4615      	mov	r5, r2
 8004044:	e7f6      	b.n	8004034 <_dtoa_r+0x5ec>
 8004046:	4b06      	ldr	r3, [pc, #24]	; (8004060 <_dtoa_r+0x618>)
 8004048:	f7fc fa42 	bl	80004d0 <__aeabi_dmul>
 800404c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004050:	e7bd      	b.n	8003fce <_dtoa_r+0x586>
 8004052:	bf00      	nop
 8004054:	08005230 	.word	0x08005230
 8004058:	08005208 	.word	0x08005208
 800405c:	3ff00000 	.word	0x3ff00000
 8004060:	40240000 	.word	0x40240000
 8004064:	401c0000 	.word	0x401c0000
 8004068:	40140000 	.word	0x40140000
 800406c:	3fe00000 	.word	0x3fe00000
 8004070:	9d06      	ldr	r5, [sp, #24]
 8004072:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800407a:	4630      	mov	r0, r6
 800407c:	4639      	mov	r1, r7
 800407e:	f7fc fb51 	bl	8000724 <__aeabi_ddiv>
 8004082:	f7fc fcd5 	bl	8000a30 <__aeabi_d2iz>
 8004086:	4680      	mov	r8, r0
 8004088:	f7fc f9bc 	bl	8000404 <__aeabi_i2d>
 800408c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004090:	f7fc fa1e 	bl	80004d0 <__aeabi_dmul>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4630      	mov	r0, r6
 800409a:	4639      	mov	r1, r7
 800409c:	f7fc f864 	bl	8000168 <__aeabi_dsub>
 80040a0:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80040a4:	f805 6b01 	strb.w	r6, [r5], #1
 80040a8:	9e06      	ldr	r6, [sp, #24]
 80040aa:	4602      	mov	r2, r0
 80040ac:	1bae      	subs	r6, r5, r6
 80040ae:	45b1      	cmp	r9, r6
 80040b0:	460b      	mov	r3, r1
 80040b2:	d137      	bne.n	8004124 <_dtoa_r+0x6dc>
 80040b4:	f7fc f85a 	bl	800016c <__adddf3>
 80040b8:	4606      	mov	r6, r0
 80040ba:	460f      	mov	r7, r1
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040c4:	f7fc fc76 	bl	80009b4 <__aeabi_dcmplt>
 80040c8:	b9c8      	cbnz	r0, 80040fe <_dtoa_r+0x6b6>
 80040ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040ce:	4632      	mov	r2, r6
 80040d0:	463b      	mov	r3, r7
 80040d2:	f7fc fc65 	bl	80009a0 <__aeabi_dcmpeq>
 80040d6:	b110      	cbz	r0, 80040de <_dtoa_r+0x696>
 80040d8:	f018 0f01 	tst.w	r8, #1
 80040dc:	d10f      	bne.n	80040fe <_dtoa_r+0x6b6>
 80040de:	4651      	mov	r1, sl
 80040e0:	4620      	mov	r0, r4
 80040e2:	f000 fae8 	bl	80046b6 <_Bfree>
 80040e6:	2300      	movs	r3, #0
 80040e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80040ea:	702b      	strb	r3, [r5, #0]
 80040ec:	f10b 0301 	add.w	r3, fp, #1
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f43f acec 	beq.w	8003ad2 <_dtoa_r+0x8a>
 80040fa:	601d      	str	r5, [r3, #0]
 80040fc:	e4e9      	b.n	8003ad2 <_dtoa_r+0x8a>
 80040fe:	465f      	mov	r7, fp
 8004100:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004104:	1e6b      	subs	r3, r5, #1
 8004106:	2a39      	cmp	r2, #57	; 0x39
 8004108:	d106      	bne.n	8004118 <_dtoa_r+0x6d0>
 800410a:	9a06      	ldr	r2, [sp, #24]
 800410c:	429a      	cmp	r2, r3
 800410e:	d107      	bne.n	8004120 <_dtoa_r+0x6d8>
 8004110:	2330      	movs	r3, #48	; 0x30
 8004112:	7013      	strb	r3, [r2, #0]
 8004114:	4613      	mov	r3, r2
 8004116:	3701      	adds	r7, #1
 8004118:	781a      	ldrb	r2, [r3, #0]
 800411a:	3201      	adds	r2, #1
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	e78e      	b.n	800403e <_dtoa_r+0x5f6>
 8004120:	461d      	mov	r5, r3
 8004122:	e7ed      	b.n	8004100 <_dtoa_r+0x6b8>
 8004124:	2200      	movs	r2, #0
 8004126:	4bb5      	ldr	r3, [pc, #724]	; (80043fc <_dtoa_r+0x9b4>)
 8004128:	f7fc f9d2 	bl	80004d0 <__aeabi_dmul>
 800412c:	2200      	movs	r2, #0
 800412e:	2300      	movs	r3, #0
 8004130:	4606      	mov	r6, r0
 8004132:	460f      	mov	r7, r1
 8004134:	f7fc fc34 	bl	80009a0 <__aeabi_dcmpeq>
 8004138:	2800      	cmp	r0, #0
 800413a:	d09c      	beq.n	8004076 <_dtoa_r+0x62e>
 800413c:	e7cf      	b.n	80040de <_dtoa_r+0x696>
 800413e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004140:	2a00      	cmp	r2, #0
 8004142:	f000 8129 	beq.w	8004398 <_dtoa_r+0x950>
 8004146:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004148:	2a01      	cmp	r2, #1
 800414a:	f300 810e 	bgt.w	800436a <_dtoa_r+0x922>
 800414e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004150:	2a00      	cmp	r2, #0
 8004152:	f000 8106 	beq.w	8004362 <_dtoa_r+0x91a>
 8004156:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800415a:	4645      	mov	r5, r8
 800415c:	9e08      	ldr	r6, [sp, #32]
 800415e:	9a07      	ldr	r2, [sp, #28]
 8004160:	2101      	movs	r1, #1
 8004162:	441a      	add	r2, r3
 8004164:	4620      	mov	r0, r4
 8004166:	4498      	add	r8, r3
 8004168:	9207      	str	r2, [sp, #28]
 800416a:	f000 fb44 	bl	80047f6 <__i2b>
 800416e:	4607      	mov	r7, r0
 8004170:	2d00      	cmp	r5, #0
 8004172:	dd0b      	ble.n	800418c <_dtoa_r+0x744>
 8004174:	9b07      	ldr	r3, [sp, #28]
 8004176:	2b00      	cmp	r3, #0
 8004178:	dd08      	ble.n	800418c <_dtoa_r+0x744>
 800417a:	42ab      	cmp	r3, r5
 800417c:	bfa8      	it	ge
 800417e:	462b      	movge	r3, r5
 8004180:	9a07      	ldr	r2, [sp, #28]
 8004182:	eba8 0803 	sub.w	r8, r8, r3
 8004186:	1aed      	subs	r5, r5, r3
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	9307      	str	r3, [sp, #28]
 800418c:	9b08      	ldr	r3, [sp, #32]
 800418e:	b1fb      	cbz	r3, 80041d0 <_dtoa_r+0x788>
 8004190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8104 	beq.w	80043a0 <_dtoa_r+0x958>
 8004198:	2e00      	cmp	r6, #0
 800419a:	dd11      	ble.n	80041c0 <_dtoa_r+0x778>
 800419c:	4639      	mov	r1, r7
 800419e:	4632      	mov	r2, r6
 80041a0:	4620      	mov	r0, r4
 80041a2:	f000 fbbd 	bl	8004920 <__pow5mult>
 80041a6:	4652      	mov	r2, sl
 80041a8:	4601      	mov	r1, r0
 80041aa:	4607      	mov	r7, r0
 80041ac:	4620      	mov	r0, r4
 80041ae:	f000 fb2b 	bl	8004808 <__multiply>
 80041b2:	4651      	mov	r1, sl
 80041b4:	900a      	str	r0, [sp, #40]	; 0x28
 80041b6:	4620      	mov	r0, r4
 80041b8:	f000 fa7d 	bl	80046b6 <_Bfree>
 80041bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041be:	469a      	mov	sl, r3
 80041c0:	9b08      	ldr	r3, [sp, #32]
 80041c2:	1b9a      	subs	r2, r3, r6
 80041c4:	d004      	beq.n	80041d0 <_dtoa_r+0x788>
 80041c6:	4651      	mov	r1, sl
 80041c8:	4620      	mov	r0, r4
 80041ca:	f000 fba9 	bl	8004920 <__pow5mult>
 80041ce:	4682      	mov	sl, r0
 80041d0:	2101      	movs	r1, #1
 80041d2:	4620      	mov	r0, r4
 80041d4:	f000 fb0f 	bl	80047f6 <__i2b>
 80041d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041da:	4606      	mov	r6, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f340 80e1 	ble.w	80043a4 <_dtoa_r+0x95c>
 80041e2:	461a      	mov	r2, r3
 80041e4:	4601      	mov	r1, r0
 80041e6:	4620      	mov	r0, r4
 80041e8:	f000 fb9a 	bl	8004920 <__pow5mult>
 80041ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80041ee:	4606      	mov	r6, r0
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	f340 80da 	ble.w	80043aa <_dtoa_r+0x962>
 80041f6:	2300      	movs	r3, #0
 80041f8:	9308      	str	r3, [sp, #32]
 80041fa:	6933      	ldr	r3, [r6, #16]
 80041fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004200:	6918      	ldr	r0, [r3, #16]
 8004202:	f000 faaa 	bl	800475a <__hi0bits>
 8004206:	f1c0 0020 	rsb	r0, r0, #32
 800420a:	9b07      	ldr	r3, [sp, #28]
 800420c:	4418      	add	r0, r3
 800420e:	f010 001f 	ands.w	r0, r0, #31
 8004212:	f000 80f0 	beq.w	80043f6 <_dtoa_r+0x9ae>
 8004216:	f1c0 0320 	rsb	r3, r0, #32
 800421a:	2b04      	cmp	r3, #4
 800421c:	f340 80e2 	ble.w	80043e4 <_dtoa_r+0x99c>
 8004220:	9b07      	ldr	r3, [sp, #28]
 8004222:	f1c0 001c 	rsb	r0, r0, #28
 8004226:	4480      	add	r8, r0
 8004228:	4405      	add	r5, r0
 800422a:	4403      	add	r3, r0
 800422c:	9307      	str	r3, [sp, #28]
 800422e:	f1b8 0f00 	cmp.w	r8, #0
 8004232:	dd05      	ble.n	8004240 <_dtoa_r+0x7f8>
 8004234:	4651      	mov	r1, sl
 8004236:	4642      	mov	r2, r8
 8004238:	4620      	mov	r0, r4
 800423a:	f000 fbbf 	bl	80049bc <__lshift>
 800423e:	4682      	mov	sl, r0
 8004240:	9b07      	ldr	r3, [sp, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	dd05      	ble.n	8004252 <_dtoa_r+0x80a>
 8004246:	4631      	mov	r1, r6
 8004248:	461a      	mov	r2, r3
 800424a:	4620      	mov	r0, r4
 800424c:	f000 fbb6 	bl	80049bc <__lshift>
 8004250:	4606      	mov	r6, r0
 8004252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80d3 	beq.w	8004400 <_dtoa_r+0x9b8>
 800425a:	4631      	mov	r1, r6
 800425c:	4650      	mov	r0, sl
 800425e:	f000 fbfe 	bl	8004a5e <__mcmp>
 8004262:	2800      	cmp	r0, #0
 8004264:	f280 80cc 	bge.w	8004400 <_dtoa_r+0x9b8>
 8004268:	2300      	movs	r3, #0
 800426a:	4651      	mov	r1, sl
 800426c:	220a      	movs	r2, #10
 800426e:	4620      	mov	r0, r4
 8004270:	f000 fa38 	bl	80046e4 <__multadd>
 8004274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004276:	f10b 3bff 	add.w	fp, fp, #4294967295
 800427a:	4682      	mov	sl, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 81a9 	beq.w	80045d4 <_dtoa_r+0xb8c>
 8004282:	2300      	movs	r3, #0
 8004284:	4639      	mov	r1, r7
 8004286:	220a      	movs	r2, #10
 8004288:	4620      	mov	r0, r4
 800428a:	f000 fa2b 	bl	80046e4 <__multadd>
 800428e:	9b04      	ldr	r3, [sp, #16]
 8004290:	4607      	mov	r7, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	dc03      	bgt.n	800429e <_dtoa_r+0x856>
 8004296:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004298:	2b02      	cmp	r3, #2
 800429a:	f300 80b9 	bgt.w	8004410 <_dtoa_r+0x9c8>
 800429e:	2d00      	cmp	r5, #0
 80042a0:	dd05      	ble.n	80042ae <_dtoa_r+0x866>
 80042a2:	4639      	mov	r1, r7
 80042a4:	462a      	mov	r2, r5
 80042a6:	4620      	mov	r0, r4
 80042a8:	f000 fb88 	bl	80049bc <__lshift>
 80042ac:	4607      	mov	r7, r0
 80042ae:	9b08      	ldr	r3, [sp, #32]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8110 	beq.w	80044d6 <_dtoa_r+0xa8e>
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4620      	mov	r0, r4
 80042ba:	f000 f9c8 	bl	800464e <_Balloc>
 80042be:	4605      	mov	r5, r0
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	f107 010c 	add.w	r1, r7, #12
 80042c6:	3202      	adds	r2, #2
 80042c8:	0092      	lsls	r2, r2, #2
 80042ca:	300c      	adds	r0, #12
 80042cc:	f000 f9b4 	bl	8004638 <memcpy>
 80042d0:	2201      	movs	r2, #1
 80042d2:	4629      	mov	r1, r5
 80042d4:	4620      	mov	r0, r4
 80042d6:	f000 fb71 	bl	80049bc <__lshift>
 80042da:	9707      	str	r7, [sp, #28]
 80042dc:	4607      	mov	r7, r0
 80042de:	9b02      	ldr	r3, [sp, #8]
 80042e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	9308      	str	r3, [sp, #32]
 80042ea:	4631      	mov	r1, r6
 80042ec:	4650      	mov	r0, sl
 80042ee:	f7ff fb1d 	bl	800392c <quorem>
 80042f2:	9907      	ldr	r1, [sp, #28]
 80042f4:	4605      	mov	r5, r0
 80042f6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80042fa:	4650      	mov	r0, sl
 80042fc:	f000 fbaf 	bl	8004a5e <__mcmp>
 8004300:	463a      	mov	r2, r7
 8004302:	9002      	str	r0, [sp, #8]
 8004304:	4631      	mov	r1, r6
 8004306:	4620      	mov	r0, r4
 8004308:	f000 fbc3 	bl	8004a92 <__mdiff>
 800430c:	68c3      	ldr	r3, [r0, #12]
 800430e:	4602      	mov	r2, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	f040 80e2 	bne.w	80044da <_dtoa_r+0xa92>
 8004316:	4601      	mov	r1, r0
 8004318:	9009      	str	r0, [sp, #36]	; 0x24
 800431a:	4650      	mov	r0, sl
 800431c:	f000 fb9f 	bl	8004a5e <__mcmp>
 8004320:	4603      	mov	r3, r0
 8004322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004324:	4611      	mov	r1, r2
 8004326:	4620      	mov	r0, r4
 8004328:	9309      	str	r3, [sp, #36]	; 0x24
 800432a:	f000 f9c4 	bl	80046b6 <_Bfree>
 800432e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	f040 80d4 	bne.w	80044de <_dtoa_r+0xa96>
 8004336:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004338:	2a00      	cmp	r2, #0
 800433a:	f040 80d0 	bne.w	80044de <_dtoa_r+0xa96>
 800433e:	9a08      	ldr	r2, [sp, #32]
 8004340:	2a00      	cmp	r2, #0
 8004342:	f040 80cc 	bne.w	80044de <_dtoa_r+0xa96>
 8004346:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800434a:	f000 80e8 	beq.w	800451e <_dtoa_r+0xad6>
 800434e:	9b02      	ldr	r3, [sp, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	dd01      	ble.n	8004358 <_dtoa_r+0x910>
 8004354:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004358:	f108 0501 	add.w	r5, r8, #1
 800435c:	f888 9000 	strb.w	r9, [r8]
 8004360:	e06b      	b.n	800443a <_dtoa_r+0x9f2>
 8004362:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004364:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004368:	e6f7      	b.n	800415a <_dtoa_r+0x712>
 800436a:	9b08      	ldr	r3, [sp, #32]
 800436c:	f109 36ff 	add.w	r6, r9, #4294967295
 8004370:	42b3      	cmp	r3, r6
 8004372:	bfb7      	itett	lt
 8004374:	9b08      	ldrlt	r3, [sp, #32]
 8004376:	1b9e      	subge	r6, r3, r6
 8004378:	1af2      	sublt	r2, r6, r3
 800437a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800437c:	bfbf      	itttt	lt
 800437e:	9608      	strlt	r6, [sp, #32]
 8004380:	189b      	addlt	r3, r3, r2
 8004382:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004384:	2600      	movlt	r6, #0
 8004386:	f1b9 0f00 	cmp.w	r9, #0
 800438a:	bfb9      	ittee	lt
 800438c:	eba8 0509 	sublt.w	r5, r8, r9
 8004390:	2300      	movlt	r3, #0
 8004392:	4645      	movge	r5, r8
 8004394:	464b      	movge	r3, r9
 8004396:	e6e2      	b.n	800415e <_dtoa_r+0x716>
 8004398:	9e08      	ldr	r6, [sp, #32]
 800439a:	4645      	mov	r5, r8
 800439c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800439e:	e6e7      	b.n	8004170 <_dtoa_r+0x728>
 80043a0:	9a08      	ldr	r2, [sp, #32]
 80043a2:	e710      	b.n	80041c6 <_dtoa_r+0x77e>
 80043a4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	dc18      	bgt.n	80043dc <_dtoa_r+0x994>
 80043aa:	9b02      	ldr	r3, [sp, #8]
 80043ac:	b9b3      	cbnz	r3, 80043dc <_dtoa_r+0x994>
 80043ae:	9b03      	ldr	r3, [sp, #12]
 80043b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043b4:	b9a3      	cbnz	r3, 80043e0 <_dtoa_r+0x998>
 80043b6:	9b03      	ldr	r3, [sp, #12]
 80043b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043bc:	0d1b      	lsrs	r3, r3, #20
 80043be:	051b      	lsls	r3, r3, #20
 80043c0:	b12b      	cbz	r3, 80043ce <_dtoa_r+0x986>
 80043c2:	9b07      	ldr	r3, [sp, #28]
 80043c4:	f108 0801 	add.w	r8, r8, #1
 80043c8:	3301      	adds	r3, #1
 80043ca:	9307      	str	r3, [sp, #28]
 80043cc:	2301      	movs	r3, #1
 80043ce:	9308      	str	r3, [sp, #32]
 80043d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f47f af11 	bne.w	80041fa <_dtoa_r+0x7b2>
 80043d8:	2001      	movs	r0, #1
 80043da:	e716      	b.n	800420a <_dtoa_r+0x7c2>
 80043dc:	2300      	movs	r3, #0
 80043de:	e7f6      	b.n	80043ce <_dtoa_r+0x986>
 80043e0:	9b02      	ldr	r3, [sp, #8]
 80043e2:	e7f4      	b.n	80043ce <_dtoa_r+0x986>
 80043e4:	f43f af23 	beq.w	800422e <_dtoa_r+0x7e6>
 80043e8:	9a07      	ldr	r2, [sp, #28]
 80043ea:	331c      	adds	r3, #28
 80043ec:	441a      	add	r2, r3
 80043ee:	4498      	add	r8, r3
 80043f0:	441d      	add	r5, r3
 80043f2:	4613      	mov	r3, r2
 80043f4:	e71a      	b.n	800422c <_dtoa_r+0x7e4>
 80043f6:	4603      	mov	r3, r0
 80043f8:	e7f6      	b.n	80043e8 <_dtoa_r+0x9a0>
 80043fa:	bf00      	nop
 80043fc:	40240000 	.word	0x40240000
 8004400:	f1b9 0f00 	cmp.w	r9, #0
 8004404:	dc33      	bgt.n	800446e <_dtoa_r+0xa26>
 8004406:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004408:	2b02      	cmp	r3, #2
 800440a:	dd30      	ble.n	800446e <_dtoa_r+0xa26>
 800440c:	f8cd 9010 	str.w	r9, [sp, #16]
 8004410:	9b04      	ldr	r3, [sp, #16]
 8004412:	b963      	cbnz	r3, 800442e <_dtoa_r+0x9e6>
 8004414:	4631      	mov	r1, r6
 8004416:	2205      	movs	r2, #5
 8004418:	4620      	mov	r0, r4
 800441a:	f000 f963 	bl	80046e4 <__multadd>
 800441e:	4601      	mov	r1, r0
 8004420:	4606      	mov	r6, r0
 8004422:	4650      	mov	r0, sl
 8004424:	f000 fb1b 	bl	8004a5e <__mcmp>
 8004428:	2800      	cmp	r0, #0
 800442a:	f73f ad5c 	bgt.w	8003ee6 <_dtoa_r+0x49e>
 800442e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004430:	9d06      	ldr	r5, [sp, #24]
 8004432:	ea6f 0b03 	mvn.w	fp, r3
 8004436:	2300      	movs	r3, #0
 8004438:	9307      	str	r3, [sp, #28]
 800443a:	4631      	mov	r1, r6
 800443c:	4620      	mov	r0, r4
 800443e:	f000 f93a 	bl	80046b6 <_Bfree>
 8004442:	2f00      	cmp	r7, #0
 8004444:	f43f ae4b 	beq.w	80040de <_dtoa_r+0x696>
 8004448:	9b07      	ldr	r3, [sp, #28]
 800444a:	b12b      	cbz	r3, 8004458 <_dtoa_r+0xa10>
 800444c:	42bb      	cmp	r3, r7
 800444e:	d003      	beq.n	8004458 <_dtoa_r+0xa10>
 8004450:	4619      	mov	r1, r3
 8004452:	4620      	mov	r0, r4
 8004454:	f000 f92f 	bl	80046b6 <_Bfree>
 8004458:	4639      	mov	r1, r7
 800445a:	4620      	mov	r0, r4
 800445c:	f000 f92b 	bl	80046b6 <_Bfree>
 8004460:	e63d      	b.n	80040de <_dtoa_r+0x696>
 8004462:	2600      	movs	r6, #0
 8004464:	4637      	mov	r7, r6
 8004466:	e7e2      	b.n	800442e <_dtoa_r+0x9e6>
 8004468:	46bb      	mov	fp, r7
 800446a:	4637      	mov	r7, r6
 800446c:	e53b      	b.n	8003ee6 <_dtoa_r+0x49e>
 800446e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004470:	f8cd 9010 	str.w	r9, [sp, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f47f af12 	bne.w	800429e <_dtoa_r+0x856>
 800447a:	9d06      	ldr	r5, [sp, #24]
 800447c:	4631      	mov	r1, r6
 800447e:	4650      	mov	r0, sl
 8004480:	f7ff fa54 	bl	800392c <quorem>
 8004484:	9b06      	ldr	r3, [sp, #24]
 8004486:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800448a:	f805 9b01 	strb.w	r9, [r5], #1
 800448e:	9a04      	ldr	r2, [sp, #16]
 8004490:	1aeb      	subs	r3, r5, r3
 8004492:	429a      	cmp	r2, r3
 8004494:	f300 8081 	bgt.w	800459a <_dtoa_r+0xb52>
 8004498:	9b06      	ldr	r3, [sp, #24]
 800449a:	2a01      	cmp	r2, #1
 800449c:	bfac      	ite	ge
 800449e:	189b      	addge	r3, r3, r2
 80044a0:	3301      	addlt	r3, #1
 80044a2:	4698      	mov	r8, r3
 80044a4:	2300      	movs	r3, #0
 80044a6:	9307      	str	r3, [sp, #28]
 80044a8:	4651      	mov	r1, sl
 80044aa:	2201      	movs	r2, #1
 80044ac:	4620      	mov	r0, r4
 80044ae:	f000 fa85 	bl	80049bc <__lshift>
 80044b2:	4631      	mov	r1, r6
 80044b4:	4682      	mov	sl, r0
 80044b6:	f000 fad2 	bl	8004a5e <__mcmp>
 80044ba:	2800      	cmp	r0, #0
 80044bc:	dc34      	bgt.n	8004528 <_dtoa_r+0xae0>
 80044be:	d102      	bne.n	80044c6 <_dtoa_r+0xa7e>
 80044c0:	f019 0f01 	tst.w	r9, #1
 80044c4:	d130      	bne.n	8004528 <_dtoa_r+0xae0>
 80044c6:	4645      	mov	r5, r8
 80044c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80044cc:	1e6a      	subs	r2, r5, #1
 80044ce:	2b30      	cmp	r3, #48	; 0x30
 80044d0:	d1b3      	bne.n	800443a <_dtoa_r+0x9f2>
 80044d2:	4615      	mov	r5, r2
 80044d4:	e7f8      	b.n	80044c8 <_dtoa_r+0xa80>
 80044d6:	4638      	mov	r0, r7
 80044d8:	e6ff      	b.n	80042da <_dtoa_r+0x892>
 80044da:	2301      	movs	r3, #1
 80044dc:	e722      	b.n	8004324 <_dtoa_r+0x8dc>
 80044de:	9a02      	ldr	r2, [sp, #8]
 80044e0:	2a00      	cmp	r2, #0
 80044e2:	db04      	blt.n	80044ee <_dtoa_r+0xaa6>
 80044e4:	d128      	bne.n	8004538 <_dtoa_r+0xaf0>
 80044e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80044e8:	bb32      	cbnz	r2, 8004538 <_dtoa_r+0xaf0>
 80044ea:	9a08      	ldr	r2, [sp, #32]
 80044ec:	bb22      	cbnz	r2, 8004538 <_dtoa_r+0xaf0>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f77f af32 	ble.w	8004358 <_dtoa_r+0x910>
 80044f4:	4651      	mov	r1, sl
 80044f6:	2201      	movs	r2, #1
 80044f8:	4620      	mov	r0, r4
 80044fa:	f000 fa5f 	bl	80049bc <__lshift>
 80044fe:	4631      	mov	r1, r6
 8004500:	4682      	mov	sl, r0
 8004502:	f000 faac 	bl	8004a5e <__mcmp>
 8004506:	2800      	cmp	r0, #0
 8004508:	dc05      	bgt.n	8004516 <_dtoa_r+0xace>
 800450a:	f47f af25 	bne.w	8004358 <_dtoa_r+0x910>
 800450e:	f019 0f01 	tst.w	r9, #1
 8004512:	f43f af21 	beq.w	8004358 <_dtoa_r+0x910>
 8004516:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800451a:	f47f af1b 	bne.w	8004354 <_dtoa_r+0x90c>
 800451e:	2339      	movs	r3, #57	; 0x39
 8004520:	f108 0801 	add.w	r8, r8, #1
 8004524:	f808 3c01 	strb.w	r3, [r8, #-1]
 8004528:	4645      	mov	r5, r8
 800452a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800452e:	1e6a      	subs	r2, r5, #1
 8004530:	2b39      	cmp	r3, #57	; 0x39
 8004532:	d03a      	beq.n	80045aa <_dtoa_r+0xb62>
 8004534:	3301      	adds	r3, #1
 8004536:	e03f      	b.n	80045b8 <_dtoa_r+0xb70>
 8004538:	2b00      	cmp	r3, #0
 800453a:	f108 0501 	add.w	r5, r8, #1
 800453e:	dd05      	ble.n	800454c <_dtoa_r+0xb04>
 8004540:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004544:	d0eb      	beq.n	800451e <_dtoa_r+0xad6>
 8004546:	f109 0901 	add.w	r9, r9, #1
 800454a:	e707      	b.n	800435c <_dtoa_r+0x914>
 800454c:	9b06      	ldr	r3, [sp, #24]
 800454e:	9a04      	ldr	r2, [sp, #16]
 8004550:	1aeb      	subs	r3, r5, r3
 8004552:	4293      	cmp	r3, r2
 8004554:	46a8      	mov	r8, r5
 8004556:	f805 9c01 	strb.w	r9, [r5, #-1]
 800455a:	d0a5      	beq.n	80044a8 <_dtoa_r+0xa60>
 800455c:	4651      	mov	r1, sl
 800455e:	2300      	movs	r3, #0
 8004560:	220a      	movs	r2, #10
 8004562:	4620      	mov	r0, r4
 8004564:	f000 f8be 	bl	80046e4 <__multadd>
 8004568:	9b07      	ldr	r3, [sp, #28]
 800456a:	4682      	mov	sl, r0
 800456c:	42bb      	cmp	r3, r7
 800456e:	f04f 020a 	mov.w	r2, #10
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	9907      	ldr	r1, [sp, #28]
 8004578:	4620      	mov	r0, r4
 800457a:	d104      	bne.n	8004586 <_dtoa_r+0xb3e>
 800457c:	f000 f8b2 	bl	80046e4 <__multadd>
 8004580:	9007      	str	r0, [sp, #28]
 8004582:	4607      	mov	r7, r0
 8004584:	e6b1      	b.n	80042ea <_dtoa_r+0x8a2>
 8004586:	f000 f8ad 	bl	80046e4 <__multadd>
 800458a:	2300      	movs	r3, #0
 800458c:	9007      	str	r0, [sp, #28]
 800458e:	220a      	movs	r2, #10
 8004590:	4639      	mov	r1, r7
 8004592:	4620      	mov	r0, r4
 8004594:	f000 f8a6 	bl	80046e4 <__multadd>
 8004598:	e7f3      	b.n	8004582 <_dtoa_r+0xb3a>
 800459a:	4651      	mov	r1, sl
 800459c:	2300      	movs	r3, #0
 800459e:	220a      	movs	r2, #10
 80045a0:	4620      	mov	r0, r4
 80045a2:	f000 f89f 	bl	80046e4 <__multadd>
 80045a6:	4682      	mov	sl, r0
 80045a8:	e768      	b.n	800447c <_dtoa_r+0xa34>
 80045aa:	9b06      	ldr	r3, [sp, #24]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d105      	bne.n	80045bc <_dtoa_r+0xb74>
 80045b0:	2331      	movs	r3, #49	; 0x31
 80045b2:	9a06      	ldr	r2, [sp, #24]
 80045b4:	f10b 0b01 	add.w	fp, fp, #1
 80045b8:	7013      	strb	r3, [r2, #0]
 80045ba:	e73e      	b.n	800443a <_dtoa_r+0x9f2>
 80045bc:	4615      	mov	r5, r2
 80045be:	e7b4      	b.n	800452a <_dtoa_r+0xae2>
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <_dtoa_r+0xba0>)
 80045c2:	f7ff baa3 	b.w	8003b0c <_dtoa_r+0xc4>
 80045c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f47f aa7d 	bne.w	8003ac8 <_dtoa_r+0x80>
 80045ce:	4b07      	ldr	r3, [pc, #28]	; (80045ec <_dtoa_r+0xba4>)
 80045d0:	f7ff ba9c 	b.w	8003b0c <_dtoa_r+0xc4>
 80045d4:	9b04      	ldr	r3, [sp, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f73f af4f 	bgt.w	800447a <_dtoa_r+0xa32>
 80045dc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80045de:	2b02      	cmp	r3, #2
 80045e0:	f77f af4b 	ble.w	800447a <_dtoa_r+0xa32>
 80045e4:	e714      	b.n	8004410 <_dtoa_r+0x9c8>
 80045e6:	bf00      	nop
 80045e8:	080051d1 	.word	0x080051d1
 80045ec:	080051f5 	.word	0x080051f5

080045f0 <_localeconv_r>:
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <_localeconv_r+0x14>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6a18      	ldr	r0, [r3, #32]
 80045f6:	4b04      	ldr	r3, [pc, #16]	; (8004608 <_localeconv_r+0x18>)
 80045f8:	2800      	cmp	r0, #0
 80045fa:	bf08      	it	eq
 80045fc:	4618      	moveq	r0, r3
 80045fe:	30f0      	adds	r0, #240	; 0xf0
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	2000001c 	.word	0x2000001c
 8004608:	20000080 	.word	0x20000080

0800460c <malloc>:
 800460c:	4b02      	ldr	r3, [pc, #8]	; (8004618 <malloc+0xc>)
 800460e:	4601      	mov	r1, r0
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	f000 bb47 	b.w	8004ca4 <_malloc_r>
 8004616:	bf00      	nop
 8004618:	2000001c 	.word	0x2000001c

0800461c <memchr>:
 800461c:	b510      	push	{r4, lr}
 800461e:	b2c9      	uxtb	r1, r1
 8004620:	4402      	add	r2, r0
 8004622:	4290      	cmp	r0, r2
 8004624:	4603      	mov	r3, r0
 8004626:	d101      	bne.n	800462c <memchr+0x10>
 8004628:	2000      	movs	r0, #0
 800462a:	bd10      	pop	{r4, pc}
 800462c:	781c      	ldrb	r4, [r3, #0]
 800462e:	3001      	adds	r0, #1
 8004630:	428c      	cmp	r4, r1
 8004632:	d1f6      	bne.n	8004622 <memchr+0x6>
 8004634:	4618      	mov	r0, r3
 8004636:	bd10      	pop	{r4, pc}

08004638 <memcpy>:
 8004638:	b510      	push	{r4, lr}
 800463a:	1e43      	subs	r3, r0, #1
 800463c:	440a      	add	r2, r1
 800463e:	4291      	cmp	r1, r2
 8004640:	d100      	bne.n	8004644 <memcpy+0xc>
 8004642:	bd10      	pop	{r4, pc}
 8004644:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004648:	f803 4f01 	strb.w	r4, [r3, #1]!
 800464c:	e7f7      	b.n	800463e <memcpy+0x6>

0800464e <_Balloc>:
 800464e:	b570      	push	{r4, r5, r6, lr}
 8004650:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004652:	4604      	mov	r4, r0
 8004654:	460e      	mov	r6, r1
 8004656:	b93d      	cbnz	r5, 8004668 <_Balloc+0x1a>
 8004658:	2010      	movs	r0, #16
 800465a:	f7ff ffd7 	bl	800460c <malloc>
 800465e:	6260      	str	r0, [r4, #36]	; 0x24
 8004660:	6045      	str	r5, [r0, #4]
 8004662:	6085      	str	r5, [r0, #8]
 8004664:	6005      	str	r5, [r0, #0]
 8004666:	60c5      	str	r5, [r0, #12]
 8004668:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800466a:	68eb      	ldr	r3, [r5, #12]
 800466c:	b183      	cbz	r3, 8004690 <_Balloc+0x42>
 800466e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004676:	b9b8      	cbnz	r0, 80046a8 <_Balloc+0x5a>
 8004678:	2101      	movs	r1, #1
 800467a:	fa01 f506 	lsl.w	r5, r1, r6
 800467e:	1d6a      	adds	r2, r5, #5
 8004680:	0092      	lsls	r2, r2, #2
 8004682:	4620      	mov	r0, r4
 8004684:	f000 fab3 	bl	8004bee <_calloc_r>
 8004688:	b160      	cbz	r0, 80046a4 <_Balloc+0x56>
 800468a:	6046      	str	r6, [r0, #4]
 800468c:	6085      	str	r5, [r0, #8]
 800468e:	e00e      	b.n	80046ae <_Balloc+0x60>
 8004690:	2221      	movs	r2, #33	; 0x21
 8004692:	2104      	movs	r1, #4
 8004694:	4620      	mov	r0, r4
 8004696:	f000 faaa 	bl	8004bee <_calloc_r>
 800469a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800469c:	60e8      	str	r0, [r5, #12]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e4      	bne.n	800466e <_Balloc+0x20>
 80046a4:	2000      	movs	r0, #0
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	6802      	ldr	r2, [r0, #0]
 80046aa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80046ae:	2300      	movs	r3, #0
 80046b0:	6103      	str	r3, [r0, #16]
 80046b2:	60c3      	str	r3, [r0, #12]
 80046b4:	bd70      	pop	{r4, r5, r6, pc}

080046b6 <_Bfree>:
 80046b6:	b570      	push	{r4, r5, r6, lr}
 80046b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80046ba:	4606      	mov	r6, r0
 80046bc:	460d      	mov	r5, r1
 80046be:	b93c      	cbnz	r4, 80046d0 <_Bfree+0x1a>
 80046c0:	2010      	movs	r0, #16
 80046c2:	f7ff ffa3 	bl	800460c <malloc>
 80046c6:	6270      	str	r0, [r6, #36]	; 0x24
 80046c8:	6044      	str	r4, [r0, #4]
 80046ca:	6084      	str	r4, [r0, #8]
 80046cc:	6004      	str	r4, [r0, #0]
 80046ce:	60c4      	str	r4, [r0, #12]
 80046d0:	b13d      	cbz	r5, 80046e2 <_Bfree+0x2c>
 80046d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80046d4:	686a      	ldr	r2, [r5, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046dc:	6029      	str	r1, [r5, #0]
 80046de:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80046e2:	bd70      	pop	{r4, r5, r6, pc}

080046e4 <__multadd>:
 80046e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e8:	461f      	mov	r7, r3
 80046ea:	4606      	mov	r6, r0
 80046ec:	460c      	mov	r4, r1
 80046ee:	2300      	movs	r3, #0
 80046f0:	690d      	ldr	r5, [r1, #16]
 80046f2:	f101 0e14 	add.w	lr, r1, #20
 80046f6:	f8de 0000 	ldr.w	r0, [lr]
 80046fa:	3301      	adds	r3, #1
 80046fc:	b281      	uxth	r1, r0
 80046fe:	fb02 7101 	mla	r1, r2, r1, r7
 8004702:	0c00      	lsrs	r0, r0, #16
 8004704:	0c0f      	lsrs	r7, r1, #16
 8004706:	fb02 7000 	mla	r0, r2, r0, r7
 800470a:	b289      	uxth	r1, r1
 800470c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004710:	429d      	cmp	r5, r3
 8004712:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004716:	f84e 1b04 	str.w	r1, [lr], #4
 800471a:	dcec      	bgt.n	80046f6 <__multadd+0x12>
 800471c:	b1d7      	cbz	r7, 8004754 <__multadd+0x70>
 800471e:	68a3      	ldr	r3, [r4, #8]
 8004720:	429d      	cmp	r5, r3
 8004722:	db12      	blt.n	800474a <__multadd+0x66>
 8004724:	6861      	ldr	r1, [r4, #4]
 8004726:	4630      	mov	r0, r6
 8004728:	3101      	adds	r1, #1
 800472a:	f7ff ff90 	bl	800464e <_Balloc>
 800472e:	4680      	mov	r8, r0
 8004730:	6922      	ldr	r2, [r4, #16]
 8004732:	f104 010c 	add.w	r1, r4, #12
 8004736:	3202      	adds	r2, #2
 8004738:	0092      	lsls	r2, r2, #2
 800473a:	300c      	adds	r0, #12
 800473c:	f7ff ff7c 	bl	8004638 <memcpy>
 8004740:	4621      	mov	r1, r4
 8004742:	4630      	mov	r0, r6
 8004744:	f7ff ffb7 	bl	80046b6 <_Bfree>
 8004748:	4644      	mov	r4, r8
 800474a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800474e:	3501      	adds	r5, #1
 8004750:	615f      	str	r7, [r3, #20]
 8004752:	6125      	str	r5, [r4, #16]
 8004754:	4620      	mov	r0, r4
 8004756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800475a <__hi0bits>:
 800475a:	0c02      	lsrs	r2, r0, #16
 800475c:	0412      	lsls	r2, r2, #16
 800475e:	4603      	mov	r3, r0
 8004760:	b9b2      	cbnz	r2, 8004790 <__hi0bits+0x36>
 8004762:	0403      	lsls	r3, r0, #16
 8004764:	2010      	movs	r0, #16
 8004766:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800476a:	bf04      	itt	eq
 800476c:	021b      	lsleq	r3, r3, #8
 800476e:	3008      	addeq	r0, #8
 8004770:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004774:	bf04      	itt	eq
 8004776:	011b      	lsleq	r3, r3, #4
 8004778:	3004      	addeq	r0, #4
 800477a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800477e:	bf04      	itt	eq
 8004780:	009b      	lsleq	r3, r3, #2
 8004782:	3002      	addeq	r0, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	db06      	blt.n	8004796 <__hi0bits+0x3c>
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	d503      	bpl.n	8004794 <__hi0bits+0x3a>
 800478c:	3001      	adds	r0, #1
 800478e:	4770      	bx	lr
 8004790:	2000      	movs	r0, #0
 8004792:	e7e8      	b.n	8004766 <__hi0bits+0xc>
 8004794:	2020      	movs	r0, #32
 8004796:	4770      	bx	lr

08004798 <__lo0bits>:
 8004798:	6803      	ldr	r3, [r0, #0]
 800479a:	4601      	mov	r1, r0
 800479c:	f013 0207 	ands.w	r2, r3, #7
 80047a0:	d00b      	beq.n	80047ba <__lo0bits+0x22>
 80047a2:	07da      	lsls	r2, r3, #31
 80047a4:	d423      	bmi.n	80047ee <__lo0bits+0x56>
 80047a6:	0798      	lsls	r0, r3, #30
 80047a8:	bf49      	itett	mi
 80047aa:	085b      	lsrmi	r3, r3, #1
 80047ac:	089b      	lsrpl	r3, r3, #2
 80047ae:	2001      	movmi	r0, #1
 80047b0:	600b      	strmi	r3, [r1, #0]
 80047b2:	bf5c      	itt	pl
 80047b4:	600b      	strpl	r3, [r1, #0]
 80047b6:	2002      	movpl	r0, #2
 80047b8:	4770      	bx	lr
 80047ba:	b298      	uxth	r0, r3
 80047bc:	b9a8      	cbnz	r0, 80047ea <__lo0bits+0x52>
 80047be:	2010      	movs	r0, #16
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80047c6:	bf04      	itt	eq
 80047c8:	0a1b      	lsreq	r3, r3, #8
 80047ca:	3008      	addeq	r0, #8
 80047cc:	071a      	lsls	r2, r3, #28
 80047ce:	bf04      	itt	eq
 80047d0:	091b      	lsreq	r3, r3, #4
 80047d2:	3004      	addeq	r0, #4
 80047d4:	079a      	lsls	r2, r3, #30
 80047d6:	bf04      	itt	eq
 80047d8:	089b      	lsreq	r3, r3, #2
 80047da:	3002      	addeq	r0, #2
 80047dc:	07da      	lsls	r2, r3, #31
 80047de:	d402      	bmi.n	80047e6 <__lo0bits+0x4e>
 80047e0:	085b      	lsrs	r3, r3, #1
 80047e2:	d006      	beq.n	80047f2 <__lo0bits+0x5a>
 80047e4:	3001      	adds	r0, #1
 80047e6:	600b      	str	r3, [r1, #0]
 80047e8:	4770      	bx	lr
 80047ea:	4610      	mov	r0, r2
 80047ec:	e7e9      	b.n	80047c2 <__lo0bits+0x2a>
 80047ee:	2000      	movs	r0, #0
 80047f0:	4770      	bx	lr
 80047f2:	2020      	movs	r0, #32
 80047f4:	4770      	bx	lr

080047f6 <__i2b>:
 80047f6:	b510      	push	{r4, lr}
 80047f8:	460c      	mov	r4, r1
 80047fa:	2101      	movs	r1, #1
 80047fc:	f7ff ff27 	bl	800464e <_Balloc>
 8004800:	2201      	movs	r2, #1
 8004802:	6144      	str	r4, [r0, #20]
 8004804:	6102      	str	r2, [r0, #16]
 8004806:	bd10      	pop	{r4, pc}

08004808 <__multiply>:
 8004808:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800480c:	4614      	mov	r4, r2
 800480e:	690a      	ldr	r2, [r1, #16]
 8004810:	6923      	ldr	r3, [r4, #16]
 8004812:	4689      	mov	r9, r1
 8004814:	429a      	cmp	r2, r3
 8004816:	bfbe      	ittt	lt
 8004818:	460b      	movlt	r3, r1
 800481a:	46a1      	movlt	r9, r4
 800481c:	461c      	movlt	r4, r3
 800481e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004822:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004826:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800482a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800482e:	eb07 060a 	add.w	r6, r7, sl
 8004832:	429e      	cmp	r6, r3
 8004834:	bfc8      	it	gt
 8004836:	3101      	addgt	r1, #1
 8004838:	f7ff ff09 	bl	800464e <_Balloc>
 800483c:	f100 0514 	add.w	r5, r0, #20
 8004840:	462b      	mov	r3, r5
 8004842:	2200      	movs	r2, #0
 8004844:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004848:	4543      	cmp	r3, r8
 800484a:	d316      	bcc.n	800487a <__multiply+0x72>
 800484c:	f104 0214 	add.w	r2, r4, #20
 8004850:	f109 0114 	add.w	r1, r9, #20
 8004854:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004858:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800485c:	9301      	str	r3, [sp, #4]
 800485e:	9c01      	ldr	r4, [sp, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	4294      	cmp	r4, r2
 8004864:	d80c      	bhi.n	8004880 <__multiply+0x78>
 8004866:	2e00      	cmp	r6, #0
 8004868:	dd03      	ble.n	8004872 <__multiply+0x6a>
 800486a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800486e:	2b00      	cmp	r3, #0
 8004870:	d054      	beq.n	800491c <__multiply+0x114>
 8004872:	6106      	str	r6, [r0, #16]
 8004874:	b003      	add	sp, #12
 8004876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800487a:	f843 2b04 	str.w	r2, [r3], #4
 800487e:	e7e3      	b.n	8004848 <__multiply+0x40>
 8004880:	f8b3 a000 	ldrh.w	sl, [r3]
 8004884:	3204      	adds	r2, #4
 8004886:	f1ba 0f00 	cmp.w	sl, #0
 800488a:	d020      	beq.n	80048ce <__multiply+0xc6>
 800488c:	46ae      	mov	lr, r5
 800488e:	4689      	mov	r9, r1
 8004890:	f04f 0c00 	mov.w	ip, #0
 8004894:	f859 4b04 	ldr.w	r4, [r9], #4
 8004898:	f8be b000 	ldrh.w	fp, [lr]
 800489c:	b2a3      	uxth	r3, r4
 800489e:	fb0a b303 	mla	r3, sl, r3, fp
 80048a2:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80048a6:	f8de 4000 	ldr.w	r4, [lr]
 80048aa:	4463      	add	r3, ip
 80048ac:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80048b0:	fb0a c40b 	mla	r4, sl, fp, ip
 80048b4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80048be:	454f      	cmp	r7, r9
 80048c0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80048c4:	f84e 3b04 	str.w	r3, [lr], #4
 80048c8:	d8e4      	bhi.n	8004894 <__multiply+0x8c>
 80048ca:	f8ce c000 	str.w	ip, [lr]
 80048ce:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80048d2:	f1b9 0f00 	cmp.w	r9, #0
 80048d6:	d01f      	beq.n	8004918 <__multiply+0x110>
 80048d8:	46ae      	mov	lr, r5
 80048da:	468c      	mov	ip, r1
 80048dc:	f04f 0a00 	mov.w	sl, #0
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	f8bc 4000 	ldrh.w	r4, [ip]
 80048e6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	fb09 b404 	mla	r4, r9, r4, fp
 80048f0:	44a2      	add	sl, r4
 80048f2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80048f6:	f84e 3b04 	str.w	r3, [lr], #4
 80048fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80048fe:	f8be 4000 	ldrh.w	r4, [lr]
 8004902:	0c1b      	lsrs	r3, r3, #16
 8004904:	fb09 4303 	mla	r3, r9, r3, r4
 8004908:	4567      	cmp	r7, ip
 800490a:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800490e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004912:	d8e6      	bhi.n	80048e2 <__multiply+0xda>
 8004914:	f8ce 3000 	str.w	r3, [lr]
 8004918:	3504      	adds	r5, #4
 800491a:	e7a0      	b.n	800485e <__multiply+0x56>
 800491c:	3e01      	subs	r6, #1
 800491e:	e7a2      	b.n	8004866 <__multiply+0x5e>

08004920 <__pow5mult>:
 8004920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004924:	4615      	mov	r5, r2
 8004926:	f012 0203 	ands.w	r2, r2, #3
 800492a:	4606      	mov	r6, r0
 800492c:	460f      	mov	r7, r1
 800492e:	d007      	beq.n	8004940 <__pow5mult+0x20>
 8004930:	4c21      	ldr	r4, [pc, #132]	; (80049b8 <__pow5mult+0x98>)
 8004932:	3a01      	subs	r2, #1
 8004934:	2300      	movs	r3, #0
 8004936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800493a:	f7ff fed3 	bl	80046e4 <__multadd>
 800493e:	4607      	mov	r7, r0
 8004940:	10ad      	asrs	r5, r5, #2
 8004942:	d035      	beq.n	80049b0 <__pow5mult+0x90>
 8004944:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004946:	b93c      	cbnz	r4, 8004958 <__pow5mult+0x38>
 8004948:	2010      	movs	r0, #16
 800494a:	f7ff fe5f 	bl	800460c <malloc>
 800494e:	6270      	str	r0, [r6, #36]	; 0x24
 8004950:	6044      	str	r4, [r0, #4]
 8004952:	6084      	str	r4, [r0, #8]
 8004954:	6004      	str	r4, [r0, #0]
 8004956:	60c4      	str	r4, [r0, #12]
 8004958:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800495c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004960:	b94c      	cbnz	r4, 8004976 <__pow5mult+0x56>
 8004962:	f240 2171 	movw	r1, #625	; 0x271
 8004966:	4630      	mov	r0, r6
 8004968:	f7ff ff45 	bl	80047f6 <__i2b>
 800496c:	2300      	movs	r3, #0
 800496e:	4604      	mov	r4, r0
 8004970:	f8c8 0008 	str.w	r0, [r8, #8]
 8004974:	6003      	str	r3, [r0, #0]
 8004976:	f04f 0800 	mov.w	r8, #0
 800497a:	07eb      	lsls	r3, r5, #31
 800497c:	d50a      	bpl.n	8004994 <__pow5mult+0x74>
 800497e:	4639      	mov	r1, r7
 8004980:	4622      	mov	r2, r4
 8004982:	4630      	mov	r0, r6
 8004984:	f7ff ff40 	bl	8004808 <__multiply>
 8004988:	4681      	mov	r9, r0
 800498a:	4639      	mov	r1, r7
 800498c:	4630      	mov	r0, r6
 800498e:	f7ff fe92 	bl	80046b6 <_Bfree>
 8004992:	464f      	mov	r7, r9
 8004994:	106d      	asrs	r5, r5, #1
 8004996:	d00b      	beq.n	80049b0 <__pow5mult+0x90>
 8004998:	6820      	ldr	r0, [r4, #0]
 800499a:	b938      	cbnz	r0, 80049ac <__pow5mult+0x8c>
 800499c:	4622      	mov	r2, r4
 800499e:	4621      	mov	r1, r4
 80049a0:	4630      	mov	r0, r6
 80049a2:	f7ff ff31 	bl	8004808 <__multiply>
 80049a6:	6020      	str	r0, [r4, #0]
 80049a8:	f8c0 8000 	str.w	r8, [r0]
 80049ac:	4604      	mov	r4, r0
 80049ae:	e7e4      	b.n	800497a <__pow5mult+0x5a>
 80049b0:	4638      	mov	r0, r7
 80049b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049b6:	bf00      	nop
 80049b8:	080052f8 	.word	0x080052f8

080049bc <__lshift>:
 80049bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c0:	460c      	mov	r4, r1
 80049c2:	4607      	mov	r7, r0
 80049c4:	4616      	mov	r6, r2
 80049c6:	6923      	ldr	r3, [r4, #16]
 80049c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80049cc:	eb0a 0903 	add.w	r9, sl, r3
 80049d0:	6849      	ldr	r1, [r1, #4]
 80049d2:	68a3      	ldr	r3, [r4, #8]
 80049d4:	f109 0501 	add.w	r5, r9, #1
 80049d8:	42ab      	cmp	r3, r5
 80049da:	db31      	blt.n	8004a40 <__lshift+0x84>
 80049dc:	4638      	mov	r0, r7
 80049de:	f7ff fe36 	bl	800464e <_Balloc>
 80049e2:	2200      	movs	r2, #0
 80049e4:	4680      	mov	r8, r0
 80049e6:	4611      	mov	r1, r2
 80049e8:	f100 0314 	add.w	r3, r0, #20
 80049ec:	4552      	cmp	r2, sl
 80049ee:	db2a      	blt.n	8004a46 <__lshift+0x8a>
 80049f0:	6920      	ldr	r0, [r4, #16]
 80049f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80049f6:	f104 0114 	add.w	r1, r4, #20
 80049fa:	f016 021f 	ands.w	r2, r6, #31
 80049fe:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004a02:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004a06:	d022      	beq.n	8004a4e <__lshift+0x92>
 8004a08:	2000      	movs	r0, #0
 8004a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8004a0e:	680e      	ldr	r6, [r1, #0]
 8004a10:	4096      	lsls	r6, r2
 8004a12:	4330      	orrs	r0, r6
 8004a14:	f843 0b04 	str.w	r0, [r3], #4
 8004a18:	f851 0b04 	ldr.w	r0, [r1], #4
 8004a1c:	458e      	cmp	lr, r1
 8004a1e:	fa20 f00c 	lsr.w	r0, r0, ip
 8004a22:	d8f4      	bhi.n	8004a0e <__lshift+0x52>
 8004a24:	6018      	str	r0, [r3, #0]
 8004a26:	b108      	cbz	r0, 8004a2c <__lshift+0x70>
 8004a28:	f109 0502 	add.w	r5, r9, #2
 8004a2c:	3d01      	subs	r5, #1
 8004a2e:	4638      	mov	r0, r7
 8004a30:	f8c8 5010 	str.w	r5, [r8, #16]
 8004a34:	4621      	mov	r1, r4
 8004a36:	f7ff fe3e 	bl	80046b6 <_Bfree>
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a40:	3101      	adds	r1, #1
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	e7c8      	b.n	80049d8 <__lshift+0x1c>
 8004a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004a4a:	3201      	adds	r2, #1
 8004a4c:	e7ce      	b.n	80049ec <__lshift+0x30>
 8004a4e:	3b04      	subs	r3, #4
 8004a50:	f851 2b04 	ldr.w	r2, [r1], #4
 8004a54:	458e      	cmp	lr, r1
 8004a56:	f843 2f04 	str.w	r2, [r3, #4]!
 8004a5a:	d8f9      	bhi.n	8004a50 <__lshift+0x94>
 8004a5c:	e7e6      	b.n	8004a2c <__lshift+0x70>

08004a5e <__mcmp>:
 8004a5e:	6903      	ldr	r3, [r0, #16]
 8004a60:	690a      	ldr	r2, [r1, #16]
 8004a62:	b530      	push	{r4, r5, lr}
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	d10c      	bne.n	8004a82 <__mcmp+0x24>
 8004a68:	0092      	lsls	r2, r2, #2
 8004a6a:	3014      	adds	r0, #20
 8004a6c:	3114      	adds	r1, #20
 8004a6e:	1884      	adds	r4, r0, r2
 8004a70:	4411      	add	r1, r2
 8004a72:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004a76:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004a7a:	4295      	cmp	r5, r2
 8004a7c:	d003      	beq.n	8004a86 <__mcmp+0x28>
 8004a7e:	d305      	bcc.n	8004a8c <__mcmp+0x2e>
 8004a80:	2301      	movs	r3, #1
 8004a82:	4618      	mov	r0, r3
 8004a84:	bd30      	pop	{r4, r5, pc}
 8004a86:	42a0      	cmp	r0, r4
 8004a88:	d3f3      	bcc.n	8004a72 <__mcmp+0x14>
 8004a8a:	e7fa      	b.n	8004a82 <__mcmp+0x24>
 8004a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a90:	e7f7      	b.n	8004a82 <__mcmp+0x24>

08004a92 <__mdiff>:
 8004a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a96:	460d      	mov	r5, r1
 8004a98:	4607      	mov	r7, r0
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	4614      	mov	r4, r2
 8004aa0:	f7ff ffdd 	bl	8004a5e <__mcmp>
 8004aa4:	1e06      	subs	r6, r0, #0
 8004aa6:	d108      	bne.n	8004aba <__mdiff+0x28>
 8004aa8:	4631      	mov	r1, r6
 8004aaa:	4638      	mov	r0, r7
 8004aac:	f7ff fdcf 	bl	800464e <_Balloc>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	6146      	str	r6, [r0, #20]
 8004ab4:	6103      	str	r3, [r0, #16]
 8004ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aba:	bfa4      	itt	ge
 8004abc:	4623      	movge	r3, r4
 8004abe:	462c      	movge	r4, r5
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	6861      	ldr	r1, [r4, #4]
 8004ac4:	bfa6      	itte	ge
 8004ac6:	461d      	movge	r5, r3
 8004ac8:	2600      	movge	r6, #0
 8004aca:	2601      	movlt	r6, #1
 8004acc:	f7ff fdbf 	bl	800464e <_Balloc>
 8004ad0:	f04f 0c00 	mov.w	ip, #0
 8004ad4:	60c6      	str	r6, [r0, #12]
 8004ad6:	692b      	ldr	r3, [r5, #16]
 8004ad8:	6926      	ldr	r6, [r4, #16]
 8004ada:	f104 0214 	add.w	r2, r4, #20
 8004ade:	f105 0914 	add.w	r9, r5, #20
 8004ae2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004ae6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004aea:	f100 0114 	add.w	r1, r0, #20
 8004aee:	f852 ab04 	ldr.w	sl, [r2], #4
 8004af2:	f859 5b04 	ldr.w	r5, [r9], #4
 8004af6:	fa1f f38a 	uxth.w	r3, sl
 8004afa:	4463      	add	r3, ip
 8004afc:	b2ac      	uxth	r4, r5
 8004afe:	1b1b      	subs	r3, r3, r4
 8004b00:	0c2c      	lsrs	r4, r5, #16
 8004b02:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004b06:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004b10:	45c8      	cmp	r8, r9
 8004b12:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004b16:	4696      	mov	lr, r2
 8004b18:	f841 4b04 	str.w	r4, [r1], #4
 8004b1c:	d8e7      	bhi.n	8004aee <__mdiff+0x5c>
 8004b1e:	45be      	cmp	lr, r7
 8004b20:	d305      	bcc.n	8004b2e <__mdiff+0x9c>
 8004b22:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004b26:	b18b      	cbz	r3, 8004b4c <__mdiff+0xba>
 8004b28:	6106      	str	r6, [r0, #16]
 8004b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b2e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004b32:	b2a2      	uxth	r2, r4
 8004b34:	4462      	add	r2, ip
 8004b36:	1413      	asrs	r3, r2, #16
 8004b38:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004b3c:	b292      	uxth	r2, r2
 8004b3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004b42:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004b46:	f841 2b04 	str.w	r2, [r1], #4
 8004b4a:	e7e8      	b.n	8004b1e <__mdiff+0x8c>
 8004b4c:	3e01      	subs	r6, #1
 8004b4e:	e7e8      	b.n	8004b22 <__mdiff+0x90>

08004b50 <__d2b>:
 8004b50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004b54:	461c      	mov	r4, r3
 8004b56:	2101      	movs	r1, #1
 8004b58:	4690      	mov	r8, r2
 8004b5a:	9e08      	ldr	r6, [sp, #32]
 8004b5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004b5e:	f7ff fd76 	bl	800464e <_Balloc>
 8004b62:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004b66:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004b6a:	4607      	mov	r7, r0
 8004b6c:	bb34      	cbnz	r4, 8004bbc <__d2b+0x6c>
 8004b6e:	9201      	str	r2, [sp, #4]
 8004b70:	f1b8 0f00 	cmp.w	r8, #0
 8004b74:	d027      	beq.n	8004bc6 <__d2b+0x76>
 8004b76:	a802      	add	r0, sp, #8
 8004b78:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004b7c:	f7ff fe0c 	bl	8004798 <__lo0bits>
 8004b80:	9900      	ldr	r1, [sp, #0]
 8004b82:	b1f0      	cbz	r0, 8004bc2 <__d2b+0x72>
 8004b84:	9a01      	ldr	r2, [sp, #4]
 8004b86:	f1c0 0320 	rsb	r3, r0, #32
 8004b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	40c2      	lsrs	r2, r0
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	9201      	str	r2, [sp, #4]
 8004b96:	9b01      	ldr	r3, [sp, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf14      	ite	ne
 8004b9c:	2102      	movne	r1, #2
 8004b9e:	2101      	moveq	r1, #1
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	6139      	str	r1, [r7, #16]
 8004ba4:	b1c4      	cbz	r4, 8004bd8 <__d2b+0x88>
 8004ba6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004baa:	4404      	add	r4, r0
 8004bac:	6034      	str	r4, [r6, #0]
 8004bae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004bb2:	6028      	str	r0, [r5, #0]
 8004bb4:	4638      	mov	r0, r7
 8004bb6:	b002      	add	sp, #8
 8004bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bbc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004bc0:	e7d5      	b.n	8004b6e <__d2b+0x1e>
 8004bc2:	6179      	str	r1, [r7, #20]
 8004bc4:	e7e7      	b.n	8004b96 <__d2b+0x46>
 8004bc6:	a801      	add	r0, sp, #4
 8004bc8:	f7ff fde6 	bl	8004798 <__lo0bits>
 8004bcc:	2101      	movs	r1, #1
 8004bce:	9b01      	ldr	r3, [sp, #4]
 8004bd0:	6139      	str	r1, [r7, #16]
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	3020      	adds	r0, #32
 8004bd6:	e7e5      	b.n	8004ba4 <__d2b+0x54>
 8004bd8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004bdc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004be0:	6030      	str	r0, [r6, #0]
 8004be2:	6918      	ldr	r0, [r3, #16]
 8004be4:	f7ff fdb9 	bl	800475a <__hi0bits>
 8004be8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004bec:	e7e1      	b.n	8004bb2 <__d2b+0x62>

08004bee <_calloc_r>:
 8004bee:	b538      	push	{r3, r4, r5, lr}
 8004bf0:	fb02 f401 	mul.w	r4, r2, r1
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	f000 f855 	bl	8004ca4 <_malloc_r>
 8004bfa:	4605      	mov	r5, r0
 8004bfc:	b118      	cbz	r0, 8004c06 <_calloc_r+0x18>
 8004bfe:	4622      	mov	r2, r4
 8004c00:	2100      	movs	r1, #0
 8004c02:	f7fe fa05 	bl	8003010 <memset>
 8004c06:	4628      	mov	r0, r5
 8004c08:	bd38      	pop	{r3, r4, r5, pc}
	...

08004c0c <_free_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4605      	mov	r5, r0
 8004c10:	2900      	cmp	r1, #0
 8004c12:	d043      	beq.n	8004c9c <_free_r+0x90>
 8004c14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c18:	1f0c      	subs	r4, r1, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bfb8      	it	lt
 8004c1e:	18e4      	addlt	r4, r4, r3
 8004c20:	f000 fa2a 	bl	8005078 <__malloc_lock>
 8004c24:	4a1e      	ldr	r2, [pc, #120]	; (8004ca0 <_free_r+0x94>)
 8004c26:	6813      	ldr	r3, [r2, #0]
 8004c28:	4610      	mov	r0, r2
 8004c2a:	b933      	cbnz	r3, 8004c3a <_free_r+0x2e>
 8004c2c:	6063      	str	r3, [r4, #4]
 8004c2e:	6014      	str	r4, [r2, #0]
 8004c30:	4628      	mov	r0, r5
 8004c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c36:	f000 ba20 	b.w	800507a <__malloc_unlock>
 8004c3a:	42a3      	cmp	r3, r4
 8004c3c:	d90b      	bls.n	8004c56 <_free_r+0x4a>
 8004c3e:	6821      	ldr	r1, [r4, #0]
 8004c40:	1862      	adds	r2, r4, r1
 8004c42:	4293      	cmp	r3, r2
 8004c44:	bf01      	itttt	eq
 8004c46:	681a      	ldreq	r2, [r3, #0]
 8004c48:	685b      	ldreq	r3, [r3, #4]
 8004c4a:	1852      	addeq	r2, r2, r1
 8004c4c:	6022      	streq	r2, [r4, #0]
 8004c4e:	6063      	str	r3, [r4, #4]
 8004c50:	6004      	str	r4, [r0, #0]
 8004c52:	e7ed      	b.n	8004c30 <_free_r+0x24>
 8004c54:	4613      	mov	r3, r2
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	b10a      	cbz	r2, 8004c5e <_free_r+0x52>
 8004c5a:	42a2      	cmp	r2, r4
 8004c5c:	d9fa      	bls.n	8004c54 <_free_r+0x48>
 8004c5e:	6819      	ldr	r1, [r3, #0]
 8004c60:	1858      	adds	r0, r3, r1
 8004c62:	42a0      	cmp	r0, r4
 8004c64:	d10b      	bne.n	8004c7e <_free_r+0x72>
 8004c66:	6820      	ldr	r0, [r4, #0]
 8004c68:	4401      	add	r1, r0
 8004c6a:	1858      	adds	r0, r3, r1
 8004c6c:	4282      	cmp	r2, r0
 8004c6e:	6019      	str	r1, [r3, #0]
 8004c70:	d1de      	bne.n	8004c30 <_free_r+0x24>
 8004c72:	6810      	ldr	r0, [r2, #0]
 8004c74:	6852      	ldr	r2, [r2, #4]
 8004c76:	4401      	add	r1, r0
 8004c78:	6019      	str	r1, [r3, #0]
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	e7d8      	b.n	8004c30 <_free_r+0x24>
 8004c7e:	d902      	bls.n	8004c86 <_free_r+0x7a>
 8004c80:	230c      	movs	r3, #12
 8004c82:	602b      	str	r3, [r5, #0]
 8004c84:	e7d4      	b.n	8004c30 <_free_r+0x24>
 8004c86:	6820      	ldr	r0, [r4, #0]
 8004c88:	1821      	adds	r1, r4, r0
 8004c8a:	428a      	cmp	r2, r1
 8004c8c:	bf01      	itttt	eq
 8004c8e:	6811      	ldreq	r1, [r2, #0]
 8004c90:	6852      	ldreq	r2, [r2, #4]
 8004c92:	1809      	addeq	r1, r1, r0
 8004c94:	6021      	streq	r1, [r4, #0]
 8004c96:	6062      	str	r2, [r4, #4]
 8004c98:	605c      	str	r4, [r3, #4]
 8004c9a:	e7c9      	b.n	8004c30 <_free_r+0x24>
 8004c9c:	bd38      	pop	{r3, r4, r5, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000218 	.word	0x20000218

08004ca4 <_malloc_r>:
 8004ca4:	b570      	push	{r4, r5, r6, lr}
 8004ca6:	1ccd      	adds	r5, r1, #3
 8004ca8:	f025 0503 	bic.w	r5, r5, #3
 8004cac:	3508      	adds	r5, #8
 8004cae:	2d0c      	cmp	r5, #12
 8004cb0:	bf38      	it	cc
 8004cb2:	250c      	movcc	r5, #12
 8004cb4:	2d00      	cmp	r5, #0
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	db01      	blt.n	8004cbe <_malloc_r+0x1a>
 8004cba:	42a9      	cmp	r1, r5
 8004cbc:	d903      	bls.n	8004cc6 <_malloc_r+0x22>
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	6033      	str	r3, [r6, #0]
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	bd70      	pop	{r4, r5, r6, pc}
 8004cc6:	f000 f9d7 	bl	8005078 <__malloc_lock>
 8004cca:	4a23      	ldr	r2, [pc, #140]	; (8004d58 <_malloc_r+0xb4>)
 8004ccc:	6814      	ldr	r4, [r2, #0]
 8004cce:	4621      	mov	r1, r4
 8004cd0:	b991      	cbnz	r1, 8004cf8 <_malloc_r+0x54>
 8004cd2:	4c22      	ldr	r4, [pc, #136]	; (8004d5c <_malloc_r+0xb8>)
 8004cd4:	6823      	ldr	r3, [r4, #0]
 8004cd6:	b91b      	cbnz	r3, 8004ce0 <_malloc_r+0x3c>
 8004cd8:	4630      	mov	r0, r6
 8004cda:	f000 f991 	bl	8005000 <_sbrk_r>
 8004cde:	6020      	str	r0, [r4, #0]
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f000 f98c 	bl	8005000 <_sbrk_r>
 8004ce8:	1c43      	adds	r3, r0, #1
 8004cea:	d126      	bne.n	8004d3a <_malloc_r+0x96>
 8004cec:	230c      	movs	r3, #12
 8004cee:	4630      	mov	r0, r6
 8004cf0:	6033      	str	r3, [r6, #0]
 8004cf2:	f000 f9c2 	bl	800507a <__malloc_unlock>
 8004cf6:	e7e4      	b.n	8004cc2 <_malloc_r+0x1e>
 8004cf8:	680b      	ldr	r3, [r1, #0]
 8004cfa:	1b5b      	subs	r3, r3, r5
 8004cfc:	d41a      	bmi.n	8004d34 <_malloc_r+0x90>
 8004cfe:	2b0b      	cmp	r3, #11
 8004d00:	d90f      	bls.n	8004d22 <_malloc_r+0x7e>
 8004d02:	600b      	str	r3, [r1, #0]
 8004d04:	18cc      	adds	r4, r1, r3
 8004d06:	50cd      	str	r5, [r1, r3]
 8004d08:	4630      	mov	r0, r6
 8004d0a:	f000 f9b6 	bl	800507a <__malloc_unlock>
 8004d0e:	f104 000b 	add.w	r0, r4, #11
 8004d12:	1d23      	adds	r3, r4, #4
 8004d14:	f020 0007 	bic.w	r0, r0, #7
 8004d18:	1ac3      	subs	r3, r0, r3
 8004d1a:	d01b      	beq.n	8004d54 <_malloc_r+0xb0>
 8004d1c:	425a      	negs	r2, r3
 8004d1e:	50e2      	str	r2, [r4, r3]
 8004d20:	bd70      	pop	{r4, r5, r6, pc}
 8004d22:	428c      	cmp	r4, r1
 8004d24:	bf0b      	itete	eq
 8004d26:	6863      	ldreq	r3, [r4, #4]
 8004d28:	684b      	ldrne	r3, [r1, #4]
 8004d2a:	6013      	streq	r3, [r2, #0]
 8004d2c:	6063      	strne	r3, [r4, #4]
 8004d2e:	bf18      	it	ne
 8004d30:	460c      	movne	r4, r1
 8004d32:	e7e9      	b.n	8004d08 <_malloc_r+0x64>
 8004d34:	460c      	mov	r4, r1
 8004d36:	6849      	ldr	r1, [r1, #4]
 8004d38:	e7ca      	b.n	8004cd0 <_malloc_r+0x2c>
 8004d3a:	1cc4      	adds	r4, r0, #3
 8004d3c:	f024 0403 	bic.w	r4, r4, #3
 8004d40:	42a0      	cmp	r0, r4
 8004d42:	d005      	beq.n	8004d50 <_malloc_r+0xac>
 8004d44:	1a21      	subs	r1, r4, r0
 8004d46:	4630      	mov	r0, r6
 8004d48:	f000 f95a 	bl	8005000 <_sbrk_r>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d0cd      	beq.n	8004cec <_malloc_r+0x48>
 8004d50:	6025      	str	r5, [r4, #0]
 8004d52:	e7d9      	b.n	8004d08 <_malloc_r+0x64>
 8004d54:	bd70      	pop	{r4, r5, r6, pc}
 8004d56:	bf00      	nop
 8004d58:	20000218 	.word	0x20000218
 8004d5c:	2000021c 	.word	0x2000021c

08004d60 <__ssputs_r>:
 8004d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d64:	688e      	ldr	r6, [r1, #8]
 8004d66:	4682      	mov	sl, r0
 8004d68:	429e      	cmp	r6, r3
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	4691      	mov	r9, r2
 8004d6e:	4698      	mov	r8, r3
 8004d70:	d835      	bhi.n	8004dde <__ssputs_r+0x7e>
 8004d72:	898a      	ldrh	r2, [r1, #12]
 8004d74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d78:	d031      	beq.n	8004dde <__ssputs_r+0x7e>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	6825      	ldr	r5, [r4, #0]
 8004d7e:	6909      	ldr	r1, [r1, #16]
 8004d80:	1a6f      	subs	r7, r5, r1
 8004d82:	6965      	ldr	r5, [r4, #20]
 8004d84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d88:	fb95 f5f3 	sdiv	r5, r5, r3
 8004d8c:	f108 0301 	add.w	r3, r8, #1
 8004d90:	443b      	add	r3, r7
 8004d92:	429d      	cmp	r5, r3
 8004d94:	bf38      	it	cc
 8004d96:	461d      	movcc	r5, r3
 8004d98:	0553      	lsls	r3, r2, #21
 8004d9a:	d531      	bpl.n	8004e00 <__ssputs_r+0xa0>
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	f7ff ff81 	bl	8004ca4 <_malloc_r>
 8004da2:	4606      	mov	r6, r0
 8004da4:	b950      	cbnz	r0, 8004dbc <__ssputs_r+0x5c>
 8004da6:	230c      	movs	r3, #12
 8004da8:	f8ca 3000 	str.w	r3, [sl]
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	f04f 30ff 	mov.w	r0, #4294967295
 8004db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db6:	81a3      	strh	r3, [r4, #12]
 8004db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dbc:	463a      	mov	r2, r7
 8004dbe:	6921      	ldr	r1, [r4, #16]
 8004dc0:	f7ff fc3a 	bl	8004638 <memcpy>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	6126      	str	r6, [r4, #16]
 8004dd2:	443e      	add	r6, r7
 8004dd4:	6026      	str	r6, [r4, #0]
 8004dd6:	4646      	mov	r6, r8
 8004dd8:	6165      	str	r5, [r4, #20]
 8004dda:	1bed      	subs	r5, r5, r7
 8004ddc:	60a5      	str	r5, [r4, #8]
 8004dde:	4546      	cmp	r6, r8
 8004de0:	bf28      	it	cs
 8004de2:	4646      	movcs	r6, r8
 8004de4:	4649      	mov	r1, r9
 8004de6:	4632      	mov	r2, r6
 8004de8:	6820      	ldr	r0, [r4, #0]
 8004dea:	f000 f92b 	bl	8005044 <memmove>
 8004dee:	68a3      	ldr	r3, [r4, #8]
 8004df0:	2000      	movs	r0, #0
 8004df2:	1b9b      	subs	r3, r3, r6
 8004df4:	60a3      	str	r3, [r4, #8]
 8004df6:	6823      	ldr	r3, [r4, #0]
 8004df8:	441e      	add	r6, r3
 8004dfa:	6026      	str	r6, [r4, #0]
 8004dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e00:	462a      	mov	r2, r5
 8004e02:	f000 f93b 	bl	800507c <_realloc_r>
 8004e06:	4606      	mov	r6, r0
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d1e1      	bne.n	8004dd0 <__ssputs_r+0x70>
 8004e0c:	6921      	ldr	r1, [r4, #16]
 8004e0e:	4650      	mov	r0, sl
 8004e10:	f7ff fefc 	bl	8004c0c <_free_r>
 8004e14:	e7c7      	b.n	8004da6 <__ssputs_r+0x46>
	...

08004e18 <_svfiprintf_r>:
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1c:	b09d      	sub	sp, #116	; 0x74
 8004e1e:	9303      	str	r3, [sp, #12]
 8004e20:	898b      	ldrh	r3, [r1, #12]
 8004e22:	4680      	mov	r8, r0
 8004e24:	061c      	lsls	r4, r3, #24
 8004e26:	460d      	mov	r5, r1
 8004e28:	4616      	mov	r6, r2
 8004e2a:	d50f      	bpl.n	8004e4c <_svfiprintf_r+0x34>
 8004e2c:	690b      	ldr	r3, [r1, #16]
 8004e2e:	b96b      	cbnz	r3, 8004e4c <_svfiprintf_r+0x34>
 8004e30:	2140      	movs	r1, #64	; 0x40
 8004e32:	f7ff ff37 	bl	8004ca4 <_malloc_r>
 8004e36:	6028      	str	r0, [r5, #0]
 8004e38:	6128      	str	r0, [r5, #16]
 8004e3a:	b928      	cbnz	r0, 8004e48 <_svfiprintf_r+0x30>
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	f8c8 3000 	str.w	r3, [r8]
 8004e42:	f04f 30ff 	mov.w	r0, #4294967295
 8004e46:	e0c4      	b.n	8004fd2 <_svfiprintf_r+0x1ba>
 8004e48:	2340      	movs	r3, #64	; 0x40
 8004e4a:	616b      	str	r3, [r5, #20]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e50:	2320      	movs	r3, #32
 8004e52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e56:	2330      	movs	r3, #48	; 0x30
 8004e58:	f04f 0b01 	mov.w	fp, #1
 8004e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e60:	4637      	mov	r7, r6
 8004e62:	463c      	mov	r4, r7
 8004e64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d13c      	bne.n	8004ee6 <_svfiprintf_r+0xce>
 8004e6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004e70:	d00b      	beq.n	8004e8a <_svfiprintf_r+0x72>
 8004e72:	4653      	mov	r3, sl
 8004e74:	4632      	mov	r2, r6
 8004e76:	4629      	mov	r1, r5
 8004e78:	4640      	mov	r0, r8
 8004e7a:	f7ff ff71 	bl	8004d60 <__ssputs_r>
 8004e7e:	3001      	adds	r0, #1
 8004e80:	f000 80a2 	beq.w	8004fc8 <_svfiprintf_r+0x1b0>
 8004e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e86:	4453      	add	r3, sl
 8004e88:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8a:	783b      	ldrb	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 809b 	beq.w	8004fc8 <_svfiprintf_r+0x1b0>
 8004e92:	2300      	movs	r3, #0
 8004e94:	f04f 32ff 	mov.w	r2, #4294967295
 8004e98:	9304      	str	r3, [sp, #16]
 8004e9a:	9307      	str	r3, [sp, #28]
 8004e9c:	9205      	str	r2, [sp, #20]
 8004e9e:	9306      	str	r3, [sp, #24]
 8004ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea6:	2205      	movs	r2, #5
 8004ea8:	7821      	ldrb	r1, [r4, #0]
 8004eaa:	4850      	ldr	r0, [pc, #320]	; (8004fec <_svfiprintf_r+0x1d4>)
 8004eac:	f7ff fbb6 	bl	800461c <memchr>
 8004eb0:	1c67      	adds	r7, r4, #1
 8004eb2:	9b04      	ldr	r3, [sp, #16]
 8004eb4:	b9d8      	cbnz	r0, 8004eee <_svfiprintf_r+0xd6>
 8004eb6:	06d9      	lsls	r1, r3, #27
 8004eb8:	bf44      	itt	mi
 8004eba:	2220      	movmi	r2, #32
 8004ebc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ec0:	071a      	lsls	r2, r3, #28
 8004ec2:	bf44      	itt	mi
 8004ec4:	222b      	movmi	r2, #43	; 0x2b
 8004ec6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004eca:	7822      	ldrb	r2, [r4, #0]
 8004ecc:	2a2a      	cmp	r2, #42	; 0x2a
 8004ece:	d016      	beq.n	8004efe <_svfiprintf_r+0xe6>
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	200a      	movs	r0, #10
 8004ed4:	9a07      	ldr	r2, [sp, #28]
 8004ed6:	4627      	mov	r7, r4
 8004ed8:	783b      	ldrb	r3, [r7, #0]
 8004eda:	3401      	adds	r4, #1
 8004edc:	3b30      	subs	r3, #48	; 0x30
 8004ede:	2b09      	cmp	r3, #9
 8004ee0:	d950      	bls.n	8004f84 <_svfiprintf_r+0x16c>
 8004ee2:	b1c9      	cbz	r1, 8004f18 <_svfiprintf_r+0x100>
 8004ee4:	e011      	b.n	8004f0a <_svfiprintf_r+0xf2>
 8004ee6:	2b25      	cmp	r3, #37	; 0x25
 8004ee8:	d0c0      	beq.n	8004e6c <_svfiprintf_r+0x54>
 8004eea:	4627      	mov	r7, r4
 8004eec:	e7b9      	b.n	8004e62 <_svfiprintf_r+0x4a>
 8004eee:	4a3f      	ldr	r2, [pc, #252]	; (8004fec <_svfiprintf_r+0x1d4>)
 8004ef0:	463c      	mov	r4, r7
 8004ef2:	1a80      	subs	r0, r0, r2
 8004ef4:	fa0b f000 	lsl.w	r0, fp, r0
 8004ef8:	4318      	orrs	r0, r3
 8004efa:	9004      	str	r0, [sp, #16]
 8004efc:	e7d3      	b.n	8004ea6 <_svfiprintf_r+0x8e>
 8004efe:	9a03      	ldr	r2, [sp, #12]
 8004f00:	1d11      	adds	r1, r2, #4
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	9103      	str	r1, [sp, #12]
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	db01      	blt.n	8004f0e <_svfiprintf_r+0xf6>
 8004f0a:	9207      	str	r2, [sp, #28]
 8004f0c:	e004      	b.n	8004f18 <_svfiprintf_r+0x100>
 8004f0e:	4252      	negs	r2, r2
 8004f10:	f043 0302 	orr.w	r3, r3, #2
 8004f14:	9207      	str	r2, [sp, #28]
 8004f16:	9304      	str	r3, [sp, #16]
 8004f18:	783b      	ldrb	r3, [r7, #0]
 8004f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f1c:	d10d      	bne.n	8004f3a <_svfiprintf_r+0x122>
 8004f1e:	787b      	ldrb	r3, [r7, #1]
 8004f20:	1c79      	adds	r1, r7, #1
 8004f22:	2b2a      	cmp	r3, #42	; 0x2a
 8004f24:	d132      	bne.n	8004f8c <_svfiprintf_r+0x174>
 8004f26:	9b03      	ldr	r3, [sp, #12]
 8004f28:	3702      	adds	r7, #2
 8004f2a:	1d1a      	adds	r2, r3, #4
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	9203      	str	r2, [sp, #12]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bfb8      	it	lt
 8004f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f38:	9305      	str	r3, [sp, #20]
 8004f3a:	4c2d      	ldr	r4, [pc, #180]	; (8004ff0 <_svfiprintf_r+0x1d8>)
 8004f3c:	2203      	movs	r2, #3
 8004f3e:	7839      	ldrb	r1, [r7, #0]
 8004f40:	4620      	mov	r0, r4
 8004f42:	f7ff fb6b 	bl	800461c <memchr>
 8004f46:	b138      	cbz	r0, 8004f58 <_svfiprintf_r+0x140>
 8004f48:	2340      	movs	r3, #64	; 0x40
 8004f4a:	1b00      	subs	r0, r0, r4
 8004f4c:	fa03 f000 	lsl.w	r0, r3, r0
 8004f50:	9b04      	ldr	r3, [sp, #16]
 8004f52:	3701      	adds	r7, #1
 8004f54:	4303      	orrs	r3, r0
 8004f56:	9304      	str	r3, [sp, #16]
 8004f58:	7839      	ldrb	r1, [r7, #0]
 8004f5a:	2206      	movs	r2, #6
 8004f5c:	4825      	ldr	r0, [pc, #148]	; (8004ff4 <_svfiprintf_r+0x1dc>)
 8004f5e:	1c7e      	adds	r6, r7, #1
 8004f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f64:	f7ff fb5a 	bl	800461c <memchr>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d035      	beq.n	8004fd8 <_svfiprintf_r+0x1c0>
 8004f6c:	4b22      	ldr	r3, [pc, #136]	; (8004ff8 <_svfiprintf_r+0x1e0>)
 8004f6e:	b9fb      	cbnz	r3, 8004fb0 <_svfiprintf_r+0x198>
 8004f70:	9b03      	ldr	r3, [sp, #12]
 8004f72:	3307      	adds	r3, #7
 8004f74:	f023 0307 	bic.w	r3, r3, #7
 8004f78:	3308      	adds	r3, #8
 8004f7a:	9303      	str	r3, [sp, #12]
 8004f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f7e:	444b      	add	r3, r9
 8004f80:	9309      	str	r3, [sp, #36]	; 0x24
 8004f82:	e76d      	b.n	8004e60 <_svfiprintf_r+0x48>
 8004f84:	fb00 3202 	mla	r2, r0, r2, r3
 8004f88:	2101      	movs	r1, #1
 8004f8a:	e7a4      	b.n	8004ed6 <_svfiprintf_r+0xbe>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	240a      	movs	r4, #10
 8004f90:	4618      	mov	r0, r3
 8004f92:	9305      	str	r3, [sp, #20]
 8004f94:	460f      	mov	r7, r1
 8004f96:	783a      	ldrb	r2, [r7, #0]
 8004f98:	3101      	adds	r1, #1
 8004f9a:	3a30      	subs	r2, #48	; 0x30
 8004f9c:	2a09      	cmp	r2, #9
 8004f9e:	d903      	bls.n	8004fa8 <_svfiprintf_r+0x190>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0ca      	beq.n	8004f3a <_svfiprintf_r+0x122>
 8004fa4:	9005      	str	r0, [sp, #20]
 8004fa6:	e7c8      	b.n	8004f3a <_svfiprintf_r+0x122>
 8004fa8:	fb04 2000 	mla	r0, r4, r0, r2
 8004fac:	2301      	movs	r3, #1
 8004fae:	e7f1      	b.n	8004f94 <_svfiprintf_r+0x17c>
 8004fb0:	ab03      	add	r3, sp, #12
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	462a      	mov	r2, r5
 8004fb6:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <_svfiprintf_r+0x1e4>)
 8004fb8:	a904      	add	r1, sp, #16
 8004fba:	4640      	mov	r0, r8
 8004fbc:	f7fe f8c2 	bl	8003144 <_printf_float>
 8004fc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004fc4:	4681      	mov	r9, r0
 8004fc6:	d1d9      	bne.n	8004f7c <_svfiprintf_r+0x164>
 8004fc8:	89ab      	ldrh	r3, [r5, #12]
 8004fca:	065b      	lsls	r3, r3, #25
 8004fcc:	f53f af39 	bmi.w	8004e42 <_svfiprintf_r+0x2a>
 8004fd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fd2:	b01d      	add	sp, #116	; 0x74
 8004fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd8:	ab03      	add	r3, sp, #12
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	462a      	mov	r2, r5
 8004fde:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <_svfiprintf_r+0x1e4>)
 8004fe0:	a904      	add	r1, sp, #16
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	f7fe fb5e 	bl	80036a4 <_printf_i>
 8004fe8:	e7ea      	b.n	8004fc0 <_svfiprintf_r+0x1a8>
 8004fea:	bf00      	nop
 8004fec:	08005304 	.word	0x08005304
 8004ff0:	0800530a 	.word	0x0800530a
 8004ff4:	0800530e 	.word	0x0800530e
 8004ff8:	08003145 	.word	0x08003145
 8004ffc:	08004d61 	.word	0x08004d61

08005000 <_sbrk_r>:
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	2300      	movs	r3, #0
 8005004:	4c05      	ldr	r4, [pc, #20]	; (800501c <_sbrk_r+0x1c>)
 8005006:	4605      	mov	r5, r0
 8005008:	4608      	mov	r0, r1
 800500a:	6023      	str	r3, [r4, #0]
 800500c:	f000 f872 	bl	80050f4 <_sbrk>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d102      	bne.n	800501a <_sbrk_r+0x1a>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	b103      	cbz	r3, 800501a <_sbrk_r+0x1a>
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	20000490 	.word	0x20000490

08005020 <__ascii_mbtowc>:
 8005020:	b082      	sub	sp, #8
 8005022:	b901      	cbnz	r1, 8005026 <__ascii_mbtowc+0x6>
 8005024:	a901      	add	r1, sp, #4
 8005026:	b142      	cbz	r2, 800503a <__ascii_mbtowc+0x1a>
 8005028:	b14b      	cbz	r3, 800503e <__ascii_mbtowc+0x1e>
 800502a:	7813      	ldrb	r3, [r2, #0]
 800502c:	600b      	str	r3, [r1, #0]
 800502e:	7812      	ldrb	r2, [r2, #0]
 8005030:	1c10      	adds	r0, r2, #0
 8005032:	bf18      	it	ne
 8005034:	2001      	movne	r0, #1
 8005036:	b002      	add	sp, #8
 8005038:	4770      	bx	lr
 800503a:	4610      	mov	r0, r2
 800503c:	e7fb      	b.n	8005036 <__ascii_mbtowc+0x16>
 800503e:	f06f 0001 	mvn.w	r0, #1
 8005042:	e7f8      	b.n	8005036 <__ascii_mbtowc+0x16>

08005044 <memmove>:
 8005044:	4288      	cmp	r0, r1
 8005046:	b510      	push	{r4, lr}
 8005048:	eb01 0302 	add.w	r3, r1, r2
 800504c:	d803      	bhi.n	8005056 <memmove+0x12>
 800504e:	1e42      	subs	r2, r0, #1
 8005050:	4299      	cmp	r1, r3
 8005052:	d10c      	bne.n	800506e <memmove+0x2a>
 8005054:	bd10      	pop	{r4, pc}
 8005056:	4298      	cmp	r0, r3
 8005058:	d2f9      	bcs.n	800504e <memmove+0xa>
 800505a:	1881      	adds	r1, r0, r2
 800505c:	1ad2      	subs	r2, r2, r3
 800505e:	42d3      	cmn	r3, r2
 8005060:	d100      	bne.n	8005064 <memmove+0x20>
 8005062:	bd10      	pop	{r4, pc}
 8005064:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005068:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800506c:	e7f7      	b.n	800505e <memmove+0x1a>
 800506e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005072:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005076:	e7eb      	b.n	8005050 <memmove+0xc>

08005078 <__malloc_lock>:
 8005078:	4770      	bx	lr

0800507a <__malloc_unlock>:
 800507a:	4770      	bx	lr

0800507c <_realloc_r>:
 800507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507e:	4607      	mov	r7, r0
 8005080:	4614      	mov	r4, r2
 8005082:	460e      	mov	r6, r1
 8005084:	b921      	cbnz	r1, 8005090 <_realloc_r+0x14>
 8005086:	4611      	mov	r1, r2
 8005088:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800508c:	f7ff be0a 	b.w	8004ca4 <_malloc_r>
 8005090:	b922      	cbnz	r2, 800509c <_realloc_r+0x20>
 8005092:	f7ff fdbb 	bl	8004c0c <_free_r>
 8005096:	4625      	mov	r5, r4
 8005098:	4628      	mov	r0, r5
 800509a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800509c:	f000 f821 	bl	80050e2 <_malloc_usable_size_r>
 80050a0:	4284      	cmp	r4, r0
 80050a2:	d90f      	bls.n	80050c4 <_realloc_r+0x48>
 80050a4:	4621      	mov	r1, r4
 80050a6:	4638      	mov	r0, r7
 80050a8:	f7ff fdfc 	bl	8004ca4 <_malloc_r>
 80050ac:	4605      	mov	r5, r0
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d0f2      	beq.n	8005098 <_realloc_r+0x1c>
 80050b2:	4631      	mov	r1, r6
 80050b4:	4622      	mov	r2, r4
 80050b6:	f7ff fabf 	bl	8004638 <memcpy>
 80050ba:	4631      	mov	r1, r6
 80050bc:	4638      	mov	r0, r7
 80050be:	f7ff fda5 	bl	8004c0c <_free_r>
 80050c2:	e7e9      	b.n	8005098 <_realloc_r+0x1c>
 80050c4:	4635      	mov	r5, r6
 80050c6:	e7e7      	b.n	8005098 <_realloc_r+0x1c>

080050c8 <__ascii_wctomb>:
 80050c8:	b149      	cbz	r1, 80050de <__ascii_wctomb+0x16>
 80050ca:	2aff      	cmp	r2, #255	; 0xff
 80050cc:	bf8b      	itete	hi
 80050ce:	238a      	movhi	r3, #138	; 0x8a
 80050d0:	700a      	strbls	r2, [r1, #0]
 80050d2:	6003      	strhi	r3, [r0, #0]
 80050d4:	2001      	movls	r0, #1
 80050d6:	bf88      	it	hi
 80050d8:	f04f 30ff 	movhi.w	r0, #4294967295
 80050dc:	4770      	bx	lr
 80050de:	4608      	mov	r0, r1
 80050e0:	4770      	bx	lr

080050e2 <_malloc_usable_size_r>:
 80050e2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80050e6:	2800      	cmp	r0, #0
 80050e8:	f1a0 0004 	sub.w	r0, r0, #4
 80050ec:	bfbc      	itt	lt
 80050ee:	580b      	ldrlt	r3, [r1, r0]
 80050f0:	18c0      	addlt	r0, r0, r3
 80050f2:	4770      	bx	lr

080050f4 <_sbrk>:
 80050f4:	4b04      	ldr	r3, [pc, #16]	; (8005108 <_sbrk+0x14>)
 80050f6:	4602      	mov	r2, r0
 80050f8:	6819      	ldr	r1, [r3, #0]
 80050fa:	b909      	cbnz	r1, 8005100 <_sbrk+0xc>
 80050fc:	4903      	ldr	r1, [pc, #12]	; (800510c <_sbrk+0x18>)
 80050fe:	6019      	str	r1, [r3, #0]
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	4402      	add	r2, r0
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	4770      	bx	lr
 8005108:	20000220 	.word	0x20000220
 800510c:	20000494 	.word	0x20000494

08005110 <_init>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	bf00      	nop
 8005114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005116:	bc08      	pop	{r3}
 8005118:	469e      	mov	lr, r3
 800511a:	4770      	bx	lr

0800511c <_fini>:
 800511c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800511e:	bf00      	nop
 8005120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005122:	bc08      	pop	{r3}
 8005124:	469e      	mov	lr, r3
 8005126:	4770      	bx	lr
