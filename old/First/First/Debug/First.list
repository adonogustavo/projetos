
First.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080013b0  080013b0  000113b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080013dc  080013dc  000113dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013e0  080013e0  000113e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080013e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000090  20000004  080013e8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000094  080013e8  00020094  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000101f6  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000021ac  00000000  00000000  00030223  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005137  00000000  00000000  000323cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000770  00000000  00000000  00037508  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000968  00000000  00000000  00037c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004484  00000000  00000000  000385e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002fed  00000000  00000000  0003ca64  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003fa51  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000155c  00000000  00000000  0003fad0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001398 	.word	0x08001398

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001398 	.word	0x08001398

0800014c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800014c:	4b08      	ldr	r3, [pc, #32]	; (8000170 <HAL_InitTick+0x24>)
{
 800014e:	b510      	push	{r4, lr}
 8000150:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000152:	6818      	ldr	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f9a6 	bl	80004ac <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f96c 	bl	8000444 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}
 8000170:	20000000 	.word	0x20000000

08000174 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <HAL_Init+0x20>)
{
 8000176:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800017c:	f043 0310 	orr.w	r3, r3, #16
 8000180:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000182:	f000 f94d 	bl	8000420 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f7ff ffe0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 800018c:	f001 f80a 	bl	80011a4 <HAL_MspInit>
}
 8000190:	2000      	movs	r0, #0
 8000192:	bd08      	pop	{r3, pc}
 8000194:	40022000 	.word	0x40022000

08000198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000198:	4a02      	ldr	r2, [pc, #8]	; (80001a4 <HAL_IncTick+0xc>)
 800019a:	6813      	ldr	r3, [r2, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000020 	.word	0x20000020

080001a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a8:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <HAL_GetTick+0x8>)
 80001aa:	6818      	ldr	r0, [r3, #0]
}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000020 	.word	0x20000020

080001b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80001b6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80001b8:	f7ff fff6 	bl	80001a8 <HAL_GetTick>
 80001bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80001be:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c0:	1c63      	adds	r3, r4, #1
  {
     wait++;
 80001c2:	bf18      	it	ne
 80001c4:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80001c6:	f7ff ffef 	bl	80001a8 <HAL_GetTick>
 80001ca:	1b40      	subs	r0, r0, r5
 80001cc:	42a0      	cmp	r0, r4
 80001ce:	d3fa      	bcc.n	80001c6 <HAL_Delay+0x12>
  {
  }
}
 80001d0:	b003      	add	sp, #12
 80001d2:	bd30      	pop	{r4, r5, pc}

080001d4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80001d4:	2300      	movs	r3, #0
{ 
 80001d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80001d8:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80001da:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80001de:	2b01      	cmp	r3, #1
 80001e0:	d074      	beq.n	80002cc <HAL_ADC_ConfigChannel+0xf8>
 80001e2:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80001e4:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80001e6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80001ea:	2d06      	cmp	r5, #6
 80001ec:	6802      	ldr	r2, [r0, #0]
 80001ee:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80001f2:	680c      	ldr	r4, [r1, #0]
 80001f4:	d825      	bhi.n	8000242 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80001f6:	442b      	add	r3, r5
 80001f8:	251f      	movs	r5, #31
 80001fa:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80001fc:	3b05      	subs	r3, #5
 80001fe:	409d      	lsls	r5, r3
 8000200:	ea26 0505 	bic.w	r5, r6, r5
 8000204:	fa04 f303 	lsl.w	r3, r4, r3
 8000208:	432b      	orrs	r3, r5
 800020a:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800020c:	2c09      	cmp	r4, #9
 800020e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8000212:	688d      	ldr	r5, [r1, #8]
 8000214:	d92f      	bls.n	8000276 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000216:	2607      	movs	r6, #7
 8000218:	4423      	add	r3, r4
 800021a:	68d1      	ldr	r1, [r2, #12]
 800021c:	3b1e      	subs	r3, #30
 800021e:	409e      	lsls	r6, r3
 8000220:	ea21 0106 	bic.w	r1, r1, r6
 8000224:	fa05 f303 	lsl.w	r3, r5, r3
 8000228:	430b      	orrs	r3, r1
 800022a:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800022c:	f1a4 0310 	sub.w	r3, r4, #16
 8000230:	2b01      	cmp	r3, #1
 8000232:	d92b      	bls.n	800028c <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000234:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000236:	2200      	movs	r2, #0
 8000238:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800023c:	4618      	mov	r0, r3
 800023e:	b002      	add	sp, #8
 8000240:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000242:	2d0c      	cmp	r5, #12
 8000244:	d80b      	bhi.n	800025e <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000246:	442b      	add	r3, r5
 8000248:	251f      	movs	r5, #31
 800024a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800024c:	3b23      	subs	r3, #35	; 0x23
 800024e:	409d      	lsls	r5, r3
 8000250:	ea26 0505 	bic.w	r5, r6, r5
 8000254:	fa04 f303 	lsl.w	r3, r4, r3
 8000258:	432b      	orrs	r3, r5
 800025a:	6313      	str	r3, [r2, #48]	; 0x30
 800025c:	e7d6      	b.n	800020c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800025e:	442b      	add	r3, r5
 8000260:	251f      	movs	r5, #31
 8000262:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000264:	3b41      	subs	r3, #65	; 0x41
 8000266:	409d      	lsls	r5, r3
 8000268:	ea26 0505 	bic.w	r5, r6, r5
 800026c:	fa04 f303 	lsl.w	r3, r4, r3
 8000270:	432b      	orrs	r3, r5
 8000272:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000274:	e7ca      	b.n	800020c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000276:	2607      	movs	r6, #7
 8000278:	6911      	ldr	r1, [r2, #16]
 800027a:	4423      	add	r3, r4
 800027c:	409e      	lsls	r6, r3
 800027e:	ea21 0106 	bic.w	r1, r1, r6
 8000282:	fa05 f303 	lsl.w	r3, r5, r3
 8000286:	430b      	orrs	r3, r1
 8000288:	6113      	str	r3, [r2, #16]
 800028a:	e7cf      	b.n	800022c <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <HAL_ADC_ConfigChannel+0xfc>)
 800028e:	429a      	cmp	r2, r3
 8000290:	d116      	bne.n	80002c0 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000292:	6893      	ldr	r3, [r2, #8]
 8000294:	021b      	lsls	r3, r3, #8
 8000296:	d4cd      	bmi.n	8000234 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000298:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800029a:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800029c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002a0:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002a2:	d1c7      	bne.n	8000234 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <HAL_ADC_ConfigChannel+0x100>)
 80002a6:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <HAL_ADC_ConfigChannel+0x104>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80002ae:	230a      	movs	r3, #10
 80002b0:	4353      	muls	r3, r2
            wait_loop_index--;
 80002b2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80002b4:	9b01      	ldr	r3, [sp, #4]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0bc      	beq.n	8000234 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80002ba:	9b01      	ldr	r3, [sp, #4]
 80002bc:	3b01      	subs	r3, #1
 80002be:	e7f8      	b.n	80002b2 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80002c2:	f043 0320 	orr.w	r3, r3, #32
 80002c6:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80002c8:	2301      	movs	r3, #1
 80002ca:	e7b4      	b.n	8000236 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80002cc:	2302      	movs	r3, #2
 80002ce:	e7b5      	b.n	800023c <HAL_ADC_ConfigChannel+0x68>
 80002d0:	40012400 	.word	0x40012400
 80002d4:	20000000 	.word	0x20000000
 80002d8:	000f4240 	.word	0x000f4240

080002dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80002dc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002de:	6803      	ldr	r3, [r0, #0]
{
 80002e0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	07d2      	lsls	r2, r2, #31
 80002e6:	d401      	bmi.n	80002ec <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80002e8:	2000      	movs	r0, #0
 80002ea:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80002ec:	689a      	ldr	r2, [r3, #8]
 80002ee:	f022 0201 	bic.w	r2, r2, #1
 80002f2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80002f4:	f7ff ff58 	bl	80001a8 <HAL_GetTick>
 80002f8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80002fa:	6823      	ldr	r3, [r4, #0]
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	07db      	lsls	r3, r3, #31
 8000300:	d5f2      	bpl.n	80002e8 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000302:	f7ff ff51 	bl	80001a8 <HAL_GetTick>
 8000306:	1b40      	subs	r0, r0, r5
 8000308:	2802      	cmp	r0, #2
 800030a:	d9f6      	bls.n	80002fa <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800030c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800030e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000310:	f043 0310 	orr.w	r3, r3, #16
 8000314:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000316:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000318:	f043 0301 	orr.w	r3, r3, #1
 800031c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800031e:	bd38      	pop	{r3, r4, r5, pc}

08000320 <HAL_ADC_Init>:
{
 8000320:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8000322:	4604      	mov	r4, r0
 8000324:	2800      	cmp	r0, #0
 8000326:	d071      	beq.n	800040c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000328:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800032a:	b923      	cbnz	r3, 8000336 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800032c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800032e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000332:	f000 ff7f 	bl	8001234 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000336:	4620      	mov	r0, r4
 8000338:	f7ff ffd0 	bl	80002dc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800033c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800033e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8000342:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000344:	d164      	bne.n	8000410 <HAL_ADC_Init+0xf0>
 8000346:	2800      	cmp	r0, #0
 8000348:	d162      	bne.n	8000410 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800034a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800034c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000350:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8000352:	f023 0302 	bic.w	r3, r3, #2
 8000356:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800035a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800035c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800035e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000360:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000362:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000366:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800036a:	d038      	beq.n	80003de <HAL_ADC_Init+0xbe>
 800036c:	2901      	cmp	r1, #1
 800036e:	bf14      	ite	ne
 8000370:	4606      	movne	r6, r0
 8000372:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000376:	6965      	ldr	r5, [r4, #20]
 8000378:	2d01      	cmp	r5, #1
 800037a:	d107      	bne.n	800038c <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800037c:	2b00      	cmp	r3, #0
 800037e:	d130      	bne.n	80003e2 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000380:	69a3      	ldr	r3, [r4, #24]
 8000382:	3b01      	subs	r3, #1
 8000384:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000388:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800038c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800038e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000392:	685d      	ldr	r5, [r3, #4]
 8000394:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000398:	ea45 0506 	orr.w	r5, r5, r6
 800039c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800039e:	689e      	ldr	r6, [r3, #8]
 80003a0:	4d1d      	ldr	r5, [pc, #116]	; (8000418 <HAL_ADC_Init+0xf8>)
 80003a2:	ea05 0506 	and.w	r5, r5, r6
 80003a6:	ea45 0502 	orr.w	r5, r5, r2
 80003aa:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80003ac:	d001      	beq.n	80003b2 <HAL_ADC_Init+0x92>
 80003ae:	2901      	cmp	r1, #1
 80003b0:	d120      	bne.n	80003f4 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80003b2:	6921      	ldr	r1, [r4, #16]
 80003b4:	3901      	subs	r1, #1
 80003b6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80003b8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80003ba:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80003be:	4329      	orrs	r1, r5
 80003c0:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003c2:	6899      	ldr	r1, [r3, #8]
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <HAL_ADC_Init+0xfc>)
 80003c6:	400b      	ands	r3, r1
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d115      	bne.n	80003f8 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80003cc:	2300      	movs	r3, #0
 80003ce:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80003d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003d2:	f023 0303 	bic.w	r3, r3, #3
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	62a3      	str	r3, [r4, #40]	; 0x28
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80003de:	460e      	mov	r6, r1
 80003e0:	e7c9      	b.n	8000376 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003e4:	f043 0320 	orr.w	r3, r3, #32
 80003e8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80003f2:	e7cb      	b.n	800038c <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80003f4:	2100      	movs	r1, #0
 80003f6:	e7df      	b.n	80003b8 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80003f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003fa:	f023 0312 	bic.w	r3, r3, #18
 80003fe:	f043 0310 	orr.w	r3, r3, #16
 8000402:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000404:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000406:	f043 0301 	orr.w	r3, r3, #1
 800040a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800040c:	2001      	movs	r0, #1
}
 800040e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000410:	f043 0310 	orr.w	r3, r3, #16
 8000414:	62a3      	str	r3, [r4, #40]	; 0x28
 8000416:	e7f9      	b.n	800040c <HAL_ADC_Init+0xec>
 8000418:	ffe1f7fd 	.word	0xffe1f7fd
 800041c:	ff1f0efe 	.word	0xff1f0efe

08000420 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000422:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000424:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000426:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800042a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800042e:	041b      	lsls	r3, r3, #16
 8000430:	0c1b      	lsrs	r3, r3, #16
 8000432:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800043a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800043c:	60d3      	str	r3, [r2, #12]
 800043e:	4770      	bx	lr
 8000440:	e000ed00 	.word	0xe000ed00

08000444 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000444:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	68dc      	ldr	r4, [r3, #12]
 800044a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800044e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000452:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000454:	2b04      	cmp	r3, #4
 8000456:	bf28      	it	cs
 8000458:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800045a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800045c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000460:	bf98      	it	ls
 8000462:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000464:	fa05 f303 	lsl.w	r3, r5, r3
 8000468:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046c:	bf88      	it	hi
 800046e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000470:	4019      	ands	r1, r3
 8000472:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000474:	fa05 f404 	lsl.w	r4, r5, r4
 8000478:	3c01      	subs	r4, #1
 800047a:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800047c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800047e:	ea42 0201 	orr.w	r2, r2, r1
 8000482:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000486:	bfaf      	iteee	ge
 8000488:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800048c:	4b06      	ldrlt	r3, [pc, #24]	; (80004a8 <HAL_NVIC_SetPriority+0x64>)
 800048e:	f000 000f 	andlt.w	r0, r0, #15
 8000492:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000494:	bfa5      	ittet	ge
 8000496:	b2d2      	uxtbge	r2, r2
 8000498:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049c:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800049e:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80004a2:	bd30      	pop	{r4, r5, pc}
 80004a4:	e000ed00 	.word	0xe000ed00
 80004a8:	e000ed14 	.word	0xe000ed14

080004ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004ac:	3801      	subs	r0, #1
 80004ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80004b2:	d20a      	bcs.n	80004ca <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	4a06      	ldr	r2, [pc, #24]	; (80004d4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004c2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004c6:	601a      	str	r2, [r3, #0]
 80004c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e000e010 	.word	0xe000e010
 80004d4:	e000ed00 	.word	0xe000ed00

080004d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80004da:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	bf0c      	ite	eq
 80004e0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80004e4:	f022 0204 	bicne.w	r2, r2, #4
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	4770      	bx	lr
 80004ec:	e000e010 	.word	0xe000e010

080004f0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80004f0:	4770      	bx	lr

080004f2 <HAL_SYSTICK_IRQHandler>:
{
 80004f2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80004f4:	f7ff fffc 	bl	80004f0 <HAL_SYSTICK_Callback>
 80004f8:	bd08      	pop	{r3, pc}
	...

080004fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000500:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000502:	4616      	mov	r6, r2
 8000504:	4b62      	ldr	r3, [pc, #392]	; (8000690 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000506:	f8df e19c 	ldr.w	lr, [pc, #412]	; 80006a4 <HAL_GPIO_Init+0x1a8>
 800050a:	f8df c19c 	ldr.w	ip, [pc, #412]	; 80006a8 <HAL_GPIO_Init+0x1ac>
    ioposition = (0x01U << position);
 800050e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000512:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000514:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000518:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800051c:	45a0      	cmp	r8, r4
 800051e:	d17b      	bne.n	8000618 <HAL_GPIO_Init+0x11c>
      switch (GPIO_Init->Mode)
 8000520:	684d      	ldr	r5, [r1, #4]
 8000522:	2d12      	cmp	r5, #18
 8000524:	f000 80ab 	beq.w	800067e <HAL_GPIO_Init+0x182>
 8000528:	f200 8084 	bhi.w	8000634 <HAL_GPIO_Init+0x138>
 800052c:	2d02      	cmp	r5, #2
 800052e:	f000 80a3 	beq.w	8000678 <HAL_GPIO_Init+0x17c>
 8000532:	d878      	bhi.n	8000626 <HAL_GPIO_Init+0x12a>
 8000534:	2d00      	cmp	r5, #0
 8000536:	f000 808a 	beq.w	800064e <HAL_GPIO_Init+0x152>
 800053a:	2d01      	cmp	r5, #1
 800053c:	f000 809a 	beq.w	8000674 <HAL_GPIO_Init+0x178>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000540:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000544:	2cff      	cmp	r4, #255	; 0xff
 8000546:	bf93      	iteet	ls
 8000548:	4682      	movls	sl, r0
 800054a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800054e:	3d08      	subhi	r5, #8
 8000550:	f8d0 b000 	ldrls.w	fp, [r0]
 8000554:	bf92      	itee	ls
 8000556:	00b5      	lslls	r5, r6, #2
 8000558:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800055c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800055e:	fa09 f805 	lsl.w	r8, r9, r5
 8000562:	ea2b 0808 	bic.w	r8, fp, r8
 8000566:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800056a:	bf88      	it	hi
 800056c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000570:	ea48 0505 	orr.w	r5, r8, r5
 8000574:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000578:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800057c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000580:	d04a      	beq.n	8000618 <HAL_GPIO_Init+0x11c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000582:	4d44      	ldr	r5, [pc, #272]	; (8000694 <HAL_GPIO_Init+0x198>)
 8000584:	4f43      	ldr	r7, [pc, #268]	; (8000694 <HAL_GPIO_Init+0x198>)
 8000586:	69ad      	ldr	r5, [r5, #24]
 8000588:	f026 0803 	bic.w	r8, r6, #3
 800058c:	f045 0501 	orr.w	r5, r5, #1
 8000590:	61bd      	str	r5, [r7, #24]
 8000592:	69bd      	ldr	r5, [r7, #24]
 8000594:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000598:	f005 0501 	and.w	r5, r5, #1
 800059c:	9501      	str	r5, [sp, #4]
 800059e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005a2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005a6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005a8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80005ac:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80005b0:	fa09 f90b 	lsl.w	r9, r9, fp
 80005b4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005b8:	4d37      	ldr	r5, [pc, #220]	; (8000698 <HAL_GPIO_Init+0x19c>)
 80005ba:	42a8      	cmp	r0, r5
 80005bc:	d064      	beq.n	8000688 <HAL_GPIO_Init+0x18c>
 80005be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005c2:	42a8      	cmp	r0, r5
 80005c4:	d062      	beq.n	800068c <HAL_GPIO_Init+0x190>
 80005c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80005ca:	42a8      	cmp	r0, r5
 80005cc:	bf0c      	ite	eq
 80005ce:	2502      	moveq	r5, #2
 80005d0:	2503      	movne	r5, #3
 80005d2:	fa05 f50b 	lsl.w	r5, r5, fp
 80005d6:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80005da:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80005de:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005e0:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 80005e4:	bf14      	ite	ne
 80005e6:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80005e8:	43a5      	biceq	r5, r4
 80005ea:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80005ec:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005ee:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80005f2:	bf14      	ite	ne
 80005f4:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80005f6:	43a5      	biceq	r5, r4
 80005f8:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80005fa:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005fc:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000600:	bf14      	ite	ne
 8000602:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000604:	43a5      	biceq	r5, r4
 8000606:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000608:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800060a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 800060e:	bf14      	ite	ne
 8000610:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000612:	ea25 0404 	biceq.w	r4, r5, r4
 8000616:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000618:	3601      	adds	r6, #1
 800061a:	2e10      	cmp	r6, #16
 800061c:	f47f af77 	bne.w	800050e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000620:	b003      	add	sp, #12
 8000622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000626:	2d03      	cmp	r5, #3
 8000628:	d022      	beq.n	8000670 <HAL_GPIO_Init+0x174>
 800062a:	2d11      	cmp	r5, #17
 800062c:	d188      	bne.n	8000540 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800062e:	68ca      	ldr	r2, [r1, #12]
 8000630:	3204      	adds	r2, #4
          break;
 8000632:	e785      	b.n	8000540 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000634:	4f19      	ldr	r7, [pc, #100]	; (800069c <HAL_GPIO_Init+0x1a0>)
 8000636:	42bd      	cmp	r5, r7
 8000638:	d009      	beq.n	800064e <HAL_GPIO_Init+0x152>
 800063a:	d812      	bhi.n	8000662 <HAL_GPIO_Init+0x166>
 800063c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80006ac <HAL_GPIO_Init+0x1b0>
 8000640:	454d      	cmp	r5, r9
 8000642:	d004      	beq.n	800064e <HAL_GPIO_Init+0x152>
 8000644:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000648:	454d      	cmp	r5, r9
 800064a:	f47f af79 	bne.w	8000540 <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800064e:	688a      	ldr	r2, [r1, #8]
 8000650:	b1c2      	cbz	r2, 8000684 <HAL_GPIO_Init+0x188>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000652:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000654:	bf0c      	ite	eq
 8000656:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800065a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800065e:	2208      	movs	r2, #8
 8000660:	e76e      	b.n	8000540 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000662:	4f0f      	ldr	r7, [pc, #60]	; (80006a0 <HAL_GPIO_Init+0x1a4>)
 8000664:	42bd      	cmp	r5, r7
 8000666:	d0f2      	beq.n	800064e <HAL_GPIO_Init+0x152>
 8000668:	4575      	cmp	r5, lr
 800066a:	d0f0      	beq.n	800064e <HAL_GPIO_Init+0x152>
 800066c:	4565      	cmp	r5, ip
 800066e:	e7ec      	b.n	800064a <HAL_GPIO_Init+0x14e>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000670:	2200      	movs	r2, #0
 8000672:	e765      	b.n	8000540 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000674:	68ca      	ldr	r2, [r1, #12]
          break;
 8000676:	e763      	b.n	8000540 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000678:	68ca      	ldr	r2, [r1, #12]
 800067a:	3208      	adds	r2, #8
          break;
 800067c:	e760      	b.n	8000540 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800067e:	68ca      	ldr	r2, [r1, #12]
 8000680:	320c      	adds	r2, #12
          break;
 8000682:	e75d      	b.n	8000540 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000684:	2204      	movs	r2, #4
 8000686:	e75b      	b.n	8000540 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000688:	2500      	movs	r5, #0
 800068a:	e7a2      	b.n	80005d2 <HAL_GPIO_Init+0xd6>
 800068c:	2501      	movs	r5, #1
 800068e:	e7a0      	b.n	80005d2 <HAL_GPIO_Init+0xd6>
 8000690:	40010400 	.word	0x40010400
 8000694:	40021000 	.word	0x40021000
 8000698:	40010800 	.word	0x40010800
 800069c:	10210000 	.word	0x10210000
 80006a0:	10310000 	.word	0x10310000
 80006a4:	10320000 	.word	0x10320000
 80006a8:	10220000 	.word	0x10220000
 80006ac:	10110000 	.word	0x10110000

080006b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80006b0:	b10a      	cbz	r2, 80006b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80006b2:	6101      	str	r1, [r0, #16]
 80006b4:	4770      	bx	lr
 80006b6:	0409      	lsls	r1, r1, #16
 80006b8:	e7fb      	b.n	80006b2 <HAL_GPIO_WritePin+0x2>
	...

080006bc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006bc:	6803      	ldr	r3, [r0, #0]
{
 80006be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006c2:	07db      	lsls	r3, r3, #31
{
 80006c4:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006c6:	d410      	bmi.n	80006ea <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006c8:	682b      	ldr	r3, [r5, #0]
 80006ca:	079f      	lsls	r7, r3, #30
 80006cc:	d45e      	bmi.n	800078c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006ce:	682b      	ldr	r3, [r5, #0]
 80006d0:	0719      	lsls	r1, r3, #28
 80006d2:	f100 8095 	bmi.w	8000800 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006d6:	682b      	ldr	r3, [r5, #0]
 80006d8:	075a      	lsls	r2, r3, #29
 80006da:	f100 80bf 	bmi.w	800085c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80006de:	69ea      	ldr	r2, [r5, #28]
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	f040 812d 	bne.w	8000940 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80006e6:	2000      	movs	r0, #0
 80006e8:	e014      	b.n	8000714 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80006ea:	4c90      	ldr	r4, [pc, #576]	; (800092c <HAL_RCC_OscConfig+0x270>)
 80006ec:	6863      	ldr	r3, [r4, #4]
 80006ee:	f003 030c 	and.w	r3, r3, #12
 80006f2:	2b04      	cmp	r3, #4
 80006f4:	d007      	beq.n	8000706 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006f6:	6863      	ldr	r3, [r4, #4]
 80006f8:	f003 030c 	and.w	r3, r3, #12
 80006fc:	2b08      	cmp	r3, #8
 80006fe:	d10c      	bne.n	800071a <HAL_RCC_OscConfig+0x5e>
 8000700:	6863      	ldr	r3, [r4, #4]
 8000702:	03de      	lsls	r6, r3, #15
 8000704:	d509      	bpl.n	800071a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	039c      	lsls	r4, r3, #14
 800070a:	d5dd      	bpl.n	80006c8 <HAL_RCC_OscConfig+0xc>
 800070c:	686b      	ldr	r3, [r5, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1da      	bne.n	80006c8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000712:	2001      	movs	r0, #1
}
 8000714:	b002      	add	sp, #8
 8000716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800071a:	686b      	ldr	r3, [r5, #4]
 800071c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000720:	d110      	bne.n	8000744 <HAL_RCC_OscConfig+0x88>
 8000722:	6823      	ldr	r3, [r4, #0]
 8000724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000728:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800072a:	f7ff fd3d 	bl	80001a8 <HAL_GetTick>
 800072e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000730:	6823      	ldr	r3, [r4, #0]
 8000732:	0398      	lsls	r0, r3, #14
 8000734:	d4c8      	bmi.n	80006c8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000736:	f7ff fd37 	bl	80001a8 <HAL_GetTick>
 800073a:	1b80      	subs	r0, r0, r6
 800073c:	2864      	cmp	r0, #100	; 0x64
 800073e:	d9f7      	bls.n	8000730 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000740:	2003      	movs	r0, #3
 8000742:	e7e7      	b.n	8000714 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000744:	b99b      	cbnz	r3, 800076e <HAL_RCC_OscConfig+0xb2>
 8000746:	6823      	ldr	r3, [r4, #0]
 8000748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800074c:	6023      	str	r3, [r4, #0]
 800074e:	6823      	ldr	r3, [r4, #0]
 8000750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000754:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000756:	f7ff fd27 	bl	80001a8 <HAL_GetTick>
 800075a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800075c:	6823      	ldr	r3, [r4, #0]
 800075e:	0399      	lsls	r1, r3, #14
 8000760:	d5b2      	bpl.n	80006c8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000762:	f7ff fd21 	bl	80001a8 <HAL_GetTick>
 8000766:	1b80      	subs	r0, r0, r6
 8000768:	2864      	cmp	r0, #100	; 0x64
 800076a:	d9f7      	bls.n	800075c <HAL_RCC_OscConfig+0xa0>
 800076c:	e7e8      	b.n	8000740 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800076e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000772:	6823      	ldr	r3, [r4, #0]
 8000774:	d103      	bne.n	800077e <HAL_RCC_OscConfig+0xc2>
 8000776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800077a:	6023      	str	r3, [r4, #0]
 800077c:	e7d1      	b.n	8000722 <HAL_RCC_OscConfig+0x66>
 800077e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000782:	6023      	str	r3, [r4, #0]
 8000784:	6823      	ldr	r3, [r4, #0]
 8000786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800078a:	e7cd      	b.n	8000728 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800078c:	4c67      	ldr	r4, [pc, #412]	; (800092c <HAL_RCC_OscConfig+0x270>)
 800078e:	6863      	ldr	r3, [r4, #4]
 8000790:	f013 0f0c 	tst.w	r3, #12
 8000794:	d007      	beq.n	80007a6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000796:	6863      	ldr	r3, [r4, #4]
 8000798:	f003 030c 	and.w	r3, r3, #12
 800079c:	2b08      	cmp	r3, #8
 800079e:	d110      	bne.n	80007c2 <HAL_RCC_OscConfig+0x106>
 80007a0:	6863      	ldr	r3, [r4, #4]
 80007a2:	03da      	lsls	r2, r3, #15
 80007a4:	d40d      	bmi.n	80007c2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007a6:	6823      	ldr	r3, [r4, #0]
 80007a8:	079b      	lsls	r3, r3, #30
 80007aa:	d502      	bpl.n	80007b2 <HAL_RCC_OscConfig+0xf6>
 80007ac:	692b      	ldr	r3, [r5, #16]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d1af      	bne.n	8000712 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007b2:	6823      	ldr	r3, [r4, #0]
 80007b4:	696a      	ldr	r2, [r5, #20]
 80007b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80007ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80007be:	6023      	str	r3, [r4, #0]
 80007c0:	e785      	b.n	80006ce <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007c2:	692a      	ldr	r2, [r5, #16]
 80007c4:	4b5a      	ldr	r3, [pc, #360]	; (8000930 <HAL_RCC_OscConfig+0x274>)
 80007c6:	b16a      	cbz	r2, 80007e4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80007c8:	2201      	movs	r2, #1
 80007ca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007cc:	f7ff fcec 	bl	80001a8 <HAL_GetTick>
 80007d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007d2:	6823      	ldr	r3, [r4, #0]
 80007d4:	079f      	lsls	r7, r3, #30
 80007d6:	d4ec      	bmi.n	80007b2 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007d8:	f7ff fce6 	bl	80001a8 <HAL_GetTick>
 80007dc:	1b80      	subs	r0, r0, r6
 80007de:	2802      	cmp	r0, #2
 80007e0:	d9f7      	bls.n	80007d2 <HAL_RCC_OscConfig+0x116>
 80007e2:	e7ad      	b.n	8000740 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80007e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007e6:	f7ff fcdf 	bl	80001a8 <HAL_GetTick>
 80007ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	0798      	lsls	r0, r3, #30
 80007f0:	f57f af6d 	bpl.w	80006ce <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007f4:	f7ff fcd8 	bl	80001a8 <HAL_GetTick>
 80007f8:	1b80      	subs	r0, r0, r6
 80007fa:	2802      	cmp	r0, #2
 80007fc:	d9f6      	bls.n	80007ec <HAL_RCC_OscConfig+0x130>
 80007fe:	e79f      	b.n	8000740 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000800:	69aa      	ldr	r2, [r5, #24]
 8000802:	4c4a      	ldr	r4, [pc, #296]	; (800092c <HAL_RCC_OscConfig+0x270>)
 8000804:	4b4b      	ldr	r3, [pc, #300]	; (8000934 <HAL_RCC_OscConfig+0x278>)
 8000806:	b1da      	cbz	r2, 8000840 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000808:	2201      	movs	r2, #1
 800080a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800080c:	f7ff fccc 	bl	80001a8 <HAL_GetTick>
 8000810:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000814:	079b      	lsls	r3, r3, #30
 8000816:	d50d      	bpl.n	8000834 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000818:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800081c:	4b46      	ldr	r3, [pc, #280]	; (8000938 <HAL_RCC_OscConfig+0x27c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	fbb3 f3f2 	udiv	r3, r3, r2
 8000824:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000826:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000828:	9b01      	ldr	r3, [sp, #4]
 800082a:	1e5a      	subs	r2, r3, #1
 800082c:	9201      	str	r2, [sp, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f9      	bne.n	8000826 <HAL_RCC_OscConfig+0x16a>
 8000832:	e750      	b.n	80006d6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000834:	f7ff fcb8 	bl	80001a8 <HAL_GetTick>
 8000838:	1b80      	subs	r0, r0, r6
 800083a:	2802      	cmp	r0, #2
 800083c:	d9e9      	bls.n	8000812 <HAL_RCC_OscConfig+0x156>
 800083e:	e77f      	b.n	8000740 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000840:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000842:	f7ff fcb1 	bl	80001a8 <HAL_GetTick>
 8000846:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800084a:	079f      	lsls	r7, r3, #30
 800084c:	f57f af43 	bpl.w	80006d6 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000850:	f7ff fcaa 	bl	80001a8 <HAL_GetTick>
 8000854:	1b80      	subs	r0, r0, r6
 8000856:	2802      	cmp	r0, #2
 8000858:	d9f6      	bls.n	8000848 <HAL_RCC_OscConfig+0x18c>
 800085a:	e771      	b.n	8000740 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800085c:	4c33      	ldr	r4, [pc, #204]	; (800092c <HAL_RCC_OscConfig+0x270>)
 800085e:	69e3      	ldr	r3, [r4, #28]
 8000860:	00d8      	lsls	r0, r3, #3
 8000862:	d424      	bmi.n	80008ae <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000864:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	69e3      	ldr	r3, [r4, #28]
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	61e3      	str	r3, [r4, #28]
 800086e:	69e3      	ldr	r3, [r4, #28]
 8000870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000878:	4e30      	ldr	r6, [pc, #192]	; (800093c <HAL_RCC_OscConfig+0x280>)
 800087a:	6833      	ldr	r3, [r6, #0]
 800087c:	05d9      	lsls	r1, r3, #23
 800087e:	d518      	bpl.n	80008b2 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000880:	68eb      	ldr	r3, [r5, #12]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d126      	bne.n	80008d4 <HAL_RCC_OscConfig+0x218>
 8000886:	6a23      	ldr	r3, [r4, #32]
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800088e:	f7ff fc8b 	bl	80001a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000892:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000896:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000898:	6a23      	ldr	r3, [r4, #32]
 800089a:	079b      	lsls	r3, r3, #30
 800089c:	d53f      	bpl.n	800091e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 800089e:	2f00      	cmp	r7, #0
 80008a0:	f43f af1d 	beq.w	80006de <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008a4:	69e3      	ldr	r3, [r4, #28]
 80008a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008aa:	61e3      	str	r3, [r4, #28]
 80008ac:	e717      	b.n	80006de <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80008ae:	2700      	movs	r7, #0
 80008b0:	e7e2      	b.n	8000878 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008b2:	6833      	ldr	r3, [r6, #0]
 80008b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008b8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80008ba:	f7ff fc75 	bl	80001a8 <HAL_GetTick>
 80008be:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008c0:	6833      	ldr	r3, [r6, #0]
 80008c2:	05da      	lsls	r2, r3, #23
 80008c4:	d4dc      	bmi.n	8000880 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008c6:	f7ff fc6f 	bl	80001a8 <HAL_GetTick>
 80008ca:	eba0 0008 	sub.w	r0, r0, r8
 80008ce:	2864      	cmp	r0, #100	; 0x64
 80008d0:	d9f6      	bls.n	80008c0 <HAL_RCC_OscConfig+0x204>
 80008d2:	e735      	b.n	8000740 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008d4:	b9ab      	cbnz	r3, 8000902 <HAL_RCC_OscConfig+0x246>
 80008d6:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008d8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008dc:	f023 0301 	bic.w	r3, r3, #1
 80008e0:	6223      	str	r3, [r4, #32]
 80008e2:	6a23      	ldr	r3, [r4, #32]
 80008e4:	f023 0304 	bic.w	r3, r3, #4
 80008e8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008ea:	f7ff fc5d 	bl	80001a8 <HAL_GetTick>
 80008ee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008f0:	6a23      	ldr	r3, [r4, #32]
 80008f2:	0798      	lsls	r0, r3, #30
 80008f4:	d5d3      	bpl.n	800089e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008f6:	f7ff fc57 	bl	80001a8 <HAL_GetTick>
 80008fa:	1b80      	subs	r0, r0, r6
 80008fc:	4540      	cmp	r0, r8
 80008fe:	d9f7      	bls.n	80008f0 <HAL_RCC_OscConfig+0x234>
 8000900:	e71e      	b.n	8000740 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000902:	2b05      	cmp	r3, #5
 8000904:	6a23      	ldr	r3, [r4, #32]
 8000906:	d103      	bne.n	8000910 <HAL_RCC_OscConfig+0x254>
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	6223      	str	r3, [r4, #32]
 800090e:	e7ba      	b.n	8000886 <HAL_RCC_OscConfig+0x1ca>
 8000910:	f023 0301 	bic.w	r3, r3, #1
 8000914:	6223      	str	r3, [r4, #32]
 8000916:	6a23      	ldr	r3, [r4, #32]
 8000918:	f023 0304 	bic.w	r3, r3, #4
 800091c:	e7b6      	b.n	800088c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800091e:	f7ff fc43 	bl	80001a8 <HAL_GetTick>
 8000922:	eba0 0008 	sub.w	r0, r0, r8
 8000926:	42b0      	cmp	r0, r6
 8000928:	d9b6      	bls.n	8000898 <HAL_RCC_OscConfig+0x1dc>
 800092a:	e709      	b.n	8000740 <HAL_RCC_OscConfig+0x84>
 800092c:	40021000 	.word	0x40021000
 8000930:	42420000 	.word	0x42420000
 8000934:	42420480 	.word	0x42420480
 8000938:	20000000 	.word	0x20000000
 800093c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000940:	4c22      	ldr	r4, [pc, #136]	; (80009cc <HAL_RCC_OscConfig+0x310>)
 8000942:	6863      	ldr	r3, [r4, #4]
 8000944:	f003 030c 	and.w	r3, r3, #12
 8000948:	2b08      	cmp	r3, #8
 800094a:	f43f aee2 	beq.w	8000712 <HAL_RCC_OscConfig+0x56>
 800094e:	2300      	movs	r3, #0
 8000950:	4e1f      	ldr	r6, [pc, #124]	; (80009d0 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000952:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000954:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000956:	d12b      	bne.n	80009b0 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000958:	f7ff fc26 	bl	80001a8 <HAL_GetTick>
 800095c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800095e:	6823      	ldr	r3, [r4, #0]
 8000960:	0199      	lsls	r1, r3, #6
 8000962:	d41f      	bmi.n	80009a4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000964:	6a2b      	ldr	r3, [r5, #32]
 8000966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800096a:	d105      	bne.n	8000978 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800096c:	6862      	ldr	r2, [r4, #4]
 800096e:	68a9      	ldr	r1, [r5, #8]
 8000970:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000974:	430a      	orrs	r2, r1
 8000976:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000978:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800097a:	6862      	ldr	r2, [r4, #4]
 800097c:	430b      	orrs	r3, r1
 800097e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000982:	4313      	orrs	r3, r2
 8000984:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000986:	2301      	movs	r3, #1
 8000988:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800098a:	f7ff fc0d 	bl	80001a8 <HAL_GetTick>
 800098e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	019a      	lsls	r2, r3, #6
 8000994:	f53f aea7 	bmi.w	80006e6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000998:	f7ff fc06 	bl	80001a8 <HAL_GetTick>
 800099c:	1b40      	subs	r0, r0, r5
 800099e:	2802      	cmp	r0, #2
 80009a0:	d9f6      	bls.n	8000990 <HAL_RCC_OscConfig+0x2d4>
 80009a2:	e6cd      	b.n	8000740 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009a4:	f7ff fc00 	bl	80001a8 <HAL_GetTick>
 80009a8:	1bc0      	subs	r0, r0, r7
 80009aa:	2802      	cmp	r0, #2
 80009ac:	d9d7      	bls.n	800095e <HAL_RCC_OscConfig+0x2a2>
 80009ae:	e6c7      	b.n	8000740 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80009b0:	f7ff fbfa 	bl	80001a8 <HAL_GetTick>
 80009b4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	019b      	lsls	r3, r3, #6
 80009ba:	f57f ae94 	bpl.w	80006e6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009be:	f7ff fbf3 	bl	80001a8 <HAL_GetTick>
 80009c2:	1b40      	subs	r0, r0, r5
 80009c4:	2802      	cmp	r0, #2
 80009c6:	d9f6      	bls.n	80009b6 <HAL_RCC_OscConfig+0x2fa>
 80009c8:	e6ba      	b.n	8000740 <HAL_RCC_OscConfig+0x84>
 80009ca:	bf00      	nop
 80009cc:	40021000 	.word	0x40021000
 80009d0:	42420060 	.word	0x42420060

080009d4 <HAL_RCC_GetSysClockFreq>:
{
 80009d4:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 80009d8:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009da:	ac02      	add	r4, sp, #8
 80009dc:	f103 0510 	add.w	r5, r3, #16
 80009e0:	4622      	mov	r2, r4
 80009e2:	6818      	ldr	r0, [r3, #0]
 80009e4:	6859      	ldr	r1, [r3, #4]
 80009e6:	3308      	adds	r3, #8
 80009e8:	c203      	stmia	r2!, {r0, r1}
 80009ea:	42ab      	cmp	r3, r5
 80009ec:	4614      	mov	r4, r2
 80009ee:	d1f7      	bne.n	80009e0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80009f0:	2301      	movs	r3, #1
 80009f2:	f88d 3004 	strb.w	r3, [sp, #4]
 80009f6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80009f8:	4912      	ldr	r1, [pc, #72]	; (8000a44 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80009fa:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80009fe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a00:	f003 020c 	and.w	r2, r3, #12
 8000a04:	2a08      	cmp	r2, #8
 8000a06:	d118      	bne.n	8000a3a <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a08:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a0c:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a0e:	bf48      	it	mi
 8000a10:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a12:	a806      	add	r0, sp, #24
 8000a14:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a16:	bf48      	it	mi
 8000a18:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000a1c:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000a20:	bf41      	itttt	mi
 8000a22:	aa06      	addmi	r2, sp, #24
 8000a24:	189b      	addmi	r3, r3, r2
 8000a26:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000a2a:	4b07      	ldrmi	r3, [pc, #28]	; (8000a48 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a2c:	bf54      	ite	pl
 8000a2e:	4b07      	ldrpl	r3, [pc, #28]	; (8000a4c <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000a30:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a34:	4358      	muls	r0, r3
}
 8000a36:	b007      	add	sp, #28
 8000a38:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000a3c:	e7fb      	b.n	8000a36 <HAL_RCC_GetSysClockFreq+0x62>
 8000a3e:	bf00      	nop
 8000a40:	080013b0 	.word	0x080013b0
 8000a44:	40021000 	.word	0x40021000
 8000a48:	007a1200 	.word	0x007a1200
 8000a4c:	003d0900 	.word	0x003d0900

08000a50 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a50:	4a4d      	ldr	r2, [pc, #308]	; (8000b88 <HAL_RCC_ClockConfig+0x138>)
{
 8000a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a56:	6813      	ldr	r3, [r2, #0]
{
 8000a58:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	428b      	cmp	r3, r1
{
 8000a60:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a62:	d328      	bcc.n	8000ab6 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a64:	682a      	ldr	r2, [r5, #0]
 8000a66:	0791      	lsls	r1, r2, #30
 8000a68:	d432      	bmi.n	8000ad0 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a6a:	07d2      	lsls	r2, r2, #31
 8000a6c:	d438      	bmi.n	8000ae0 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a6e:	4a46      	ldr	r2, [pc, #280]	; (8000b88 <HAL_RCC_ClockConfig+0x138>)
 8000a70:	6813      	ldr	r3, [r2, #0]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	429e      	cmp	r6, r3
 8000a78:	d373      	bcc.n	8000b62 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a7a:	682a      	ldr	r2, [r5, #0]
 8000a7c:	4c43      	ldr	r4, [pc, #268]	; (8000b8c <HAL_RCC_ClockConfig+0x13c>)
 8000a7e:	f012 0f04 	tst.w	r2, #4
 8000a82:	d179      	bne.n	8000b78 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a84:	0713      	lsls	r3, r2, #28
 8000a86:	d506      	bpl.n	8000a96 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a88:	6863      	ldr	r3, [r4, #4]
 8000a8a:	692a      	ldr	r2, [r5, #16]
 8000a8c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a94:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a96:	f7ff ff9d 	bl	80009d4 <HAL_RCC_GetSysClockFreq>
 8000a9a:	6863      	ldr	r3, [r4, #4]
 8000a9c:	4a3c      	ldr	r2, [pc, #240]	; (8000b90 <HAL_RCC_ClockConfig+0x140>)
 8000a9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000aa2:	5cd3      	ldrb	r3, [r2, r3]
 8000aa4:	40d8      	lsrs	r0, r3
 8000aa6:	4b3b      	ldr	r3, [pc, #236]	; (8000b94 <HAL_RCC_ClockConfig+0x144>)
 8000aa8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fb4e 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000ab0:	2000      	movs	r0, #0
}
 8000ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ab6:	6813      	ldr	r3, [r2, #0]
 8000ab8:	f023 0307 	bic.w	r3, r3, #7
 8000abc:	430b      	orrs	r3, r1
 8000abe:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ac0:	6813      	ldr	r3, [r2, #0]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d0cc      	beq.n	8000a64 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000aca:	2001      	movs	r0, #1
 8000acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ad0:	492e      	ldr	r1, [pc, #184]	; (8000b8c <HAL_RCC_ClockConfig+0x13c>)
 8000ad2:	68a8      	ldr	r0, [r5, #8]
 8000ad4:	684b      	ldr	r3, [r1, #4]
 8000ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ada:	4303      	orrs	r3, r0
 8000adc:	604b      	str	r3, [r1, #4]
 8000ade:	e7c4      	b.n	8000a6a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae0:	686a      	ldr	r2, [r5, #4]
 8000ae2:	4c2a      	ldr	r4, [pc, #168]	; (8000b8c <HAL_RCC_ClockConfig+0x13c>)
 8000ae4:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae6:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae8:	d11c      	bne.n	8000b24 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aea:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aee:	d0ec      	beq.n	8000aca <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000af0:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000af2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000af6:	f023 0303 	bic.w	r3, r3, #3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000afe:	f7ff fb53 	bl	80001a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b02:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000b04:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d114      	bne.n	8000b34 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b0a:	6863      	ldr	r3, [r4, #4]
 8000b0c:	f003 030c 	and.w	r3, r3, #12
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d0ac      	beq.n	8000a6e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b14:	f7ff fb48 	bl	80001a8 <HAL_GetTick>
 8000b18:	1bc0      	subs	r0, r0, r7
 8000b1a:	4540      	cmp	r0, r8
 8000b1c:	d9f5      	bls.n	8000b0a <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000b1e:	2003      	movs	r0, #3
 8000b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b24:	2a02      	cmp	r2, #2
 8000b26:	d102      	bne.n	8000b2e <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b2c:	e7df      	b.n	8000aee <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b2e:	f013 0f02 	tst.w	r3, #2
 8000b32:	e7dc      	b.n	8000aee <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d10f      	bne.n	8000b58 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b38:	6863      	ldr	r3, [r4, #4]
 8000b3a:	f003 030c 	and.w	r3, r3, #12
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d095      	beq.n	8000a6e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b42:	f7ff fb31 	bl	80001a8 <HAL_GetTick>
 8000b46:	1bc0      	subs	r0, r0, r7
 8000b48:	4540      	cmp	r0, r8
 8000b4a:	d9f5      	bls.n	8000b38 <HAL_RCC_ClockConfig+0xe8>
 8000b4c:	e7e7      	b.n	8000b1e <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b4e:	f7ff fb2b 	bl	80001a8 <HAL_GetTick>
 8000b52:	1bc0      	subs	r0, r0, r7
 8000b54:	4540      	cmp	r0, r8
 8000b56:	d8e2      	bhi.n	8000b1e <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b58:	6863      	ldr	r3, [r4, #4]
 8000b5a:	f013 0f0c 	tst.w	r3, #12
 8000b5e:	d1f6      	bne.n	8000b4e <HAL_RCC_ClockConfig+0xfe>
 8000b60:	e785      	b.n	8000a6e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b62:	6813      	ldr	r3, [r2, #0]
 8000b64:	f023 0307 	bic.w	r3, r3, #7
 8000b68:	4333      	orrs	r3, r6
 8000b6a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b6c:	6813      	ldr	r3, [r2, #0]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	429e      	cmp	r6, r3
 8000b74:	d1a9      	bne.n	8000aca <HAL_RCC_ClockConfig+0x7a>
 8000b76:	e780      	b.n	8000a7a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b78:	6863      	ldr	r3, [r4, #4]
 8000b7a:	68e9      	ldr	r1, [r5, #12]
 8000b7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b80:	430b      	orrs	r3, r1
 8000b82:	6063      	str	r3, [r4, #4]
 8000b84:	e77e      	b.n	8000a84 <HAL_RCC_ClockConfig+0x34>
 8000b86:	bf00      	nop
 8000b88:	40022000 	.word	0x40022000
 8000b8c:	40021000 	.word	0x40021000
 8000b90:	080013cb 	.word	0x080013cb
 8000b94:	20000000 	.word	0x20000000

08000b98 <HAL_RCC_GetHCLKFreq>:
}
 8000b98:	4b01      	ldr	r3, [pc, #4]	; (8000ba0 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	20000000 	.word	0x20000000

08000ba4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000ba4:	6803      	ldr	r3, [r0, #0]
{
 8000ba6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000baa:	07d9      	lsls	r1, r3, #31
{
 8000bac:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000bae:	d520      	bpl.n	8000bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000bb0:	4c35      	ldr	r4, [pc, #212]	; (8000c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000bb2:	69e3      	ldr	r3, [r4, #28]
 8000bb4:	00da      	lsls	r2, r3, #3
 8000bb6:	d432      	bmi.n	8000c1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000bb8:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	69e3      	ldr	r3, [r4, #28]
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	61e3      	str	r3, [r4, #28]
 8000bc2:	69e3      	ldr	r3, [r4, #28]
 8000bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bcc:	4e2f      	ldr	r6, [pc, #188]	; (8000c8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000bce:	6833      	ldr	r3, [r6, #0]
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	d526      	bpl.n	8000c22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000bd4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000bd6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000bda:	d136      	bne.n	8000c4a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000bdc:	6a23      	ldr	r3, [r4, #32]
 8000bde:	686a      	ldr	r2, [r5, #4]
 8000be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000be4:	4313      	orrs	r3, r2
 8000be6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000be8:	b11f      	cbz	r7, 8000bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bea:	69e3      	ldr	r3, [r4, #28]
 8000bec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000bf2:	6828      	ldr	r0, [r5, #0]
 8000bf4:	0783      	lsls	r3, r0, #30
 8000bf6:	d506      	bpl.n	8000c06 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000bf8:	4a23      	ldr	r2, [pc, #140]	; (8000c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000bfa:	68a9      	ldr	r1, [r5, #8]
 8000bfc:	6853      	ldr	r3, [r2, #4]
 8000bfe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c02:	430b      	orrs	r3, r1
 8000c04:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000c06:	f010 0010 	ands.w	r0, r0, #16
 8000c0a:	d01b      	beq.n	8000c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000c0c:	4a1e      	ldr	r2, [pc, #120]	; (8000c88 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000c0e:	68e9      	ldr	r1, [r5, #12]
 8000c10:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000c12:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000c14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c18:	430b      	orrs	r3, r1
 8000c1a:	6053      	str	r3, [r2, #4]
 8000c1c:	e012      	b.n	8000c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000c1e:	2700      	movs	r7, #0
 8000c20:	e7d4      	b.n	8000bcc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c22:	6833      	ldr	r3, [r6, #0]
 8000c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c28:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000c2a:	f7ff fabd 	bl	80001a8 <HAL_GetTick>
 8000c2e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c30:	6833      	ldr	r3, [r6, #0]
 8000c32:	05d8      	lsls	r0, r3, #23
 8000c34:	d4ce      	bmi.n	8000bd4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c36:	f7ff fab7 	bl	80001a8 <HAL_GetTick>
 8000c3a:	eba0 0008 	sub.w	r0, r0, r8
 8000c3e:	2864      	cmp	r0, #100	; 0x64
 8000c40:	d9f6      	bls.n	8000c30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000c42:	2003      	movs	r0, #3
}
 8000c44:	b002      	add	sp, #8
 8000c46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c4a:	686a      	ldr	r2, [r5, #4]
 8000c4c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d0c3      	beq.n	8000bdc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c54:	2001      	movs	r0, #1
 8000c56:	4a0e      	ldr	r2, [pc, #56]	; (8000c90 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c58:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c5a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c5c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c62:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000c64:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000c66:	07d9      	lsls	r1, r3, #31
 8000c68:	d5b8      	bpl.n	8000bdc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000c6a:	f7ff fa9d 	bl	80001a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c6e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000c72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c74:	6a23      	ldr	r3, [r4, #32]
 8000c76:	079a      	lsls	r2, r3, #30
 8000c78:	d4b0      	bmi.n	8000bdc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000c7a:	f7ff fa95 	bl	80001a8 <HAL_GetTick>
 8000c7e:	1b80      	subs	r0, r0, r6
 8000c80:	4540      	cmp	r0, r8
 8000c82:	d9f7      	bls.n	8000c74 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000c84:	e7dd      	b.n	8000c42 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40007000 	.word	0x40007000
 8000c90:	42420440 	.word	0x42420440

08000c94 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000c94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000c98:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	f04f 0302 	mov.w	r3, #2
 8000ca0:	d01c      	beq.n	8000cdc <HAL_TIM_ConfigClockSource+0x48>
 8000ca2:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8000ca4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000ca8:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000caa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000cae:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000cb0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000cb4:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000cb8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000cba:	680a      	ldr	r2, [r1, #0]
 8000cbc:	2a40      	cmp	r2, #64	; 0x40
 8000cbe:	d079      	beq.n	8000db4 <HAL_TIM_ConfigClockSource+0x120>
 8000cc0:	d819      	bhi.n	8000cf6 <HAL_TIM_ConfigClockSource+0x62>
 8000cc2:	2a10      	cmp	r2, #16
 8000cc4:	f000 8093 	beq.w	8000dee <HAL_TIM_ConfigClockSource+0x15a>
 8000cc8:	d80a      	bhi.n	8000ce0 <HAL_TIM_ConfigClockSource+0x4c>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f000 8089 	beq.w	8000de2 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000cdc:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000ce0:	2a20      	cmp	r2, #32
 8000ce2:	f000 808a 	beq.w	8000dfa <HAL_TIM_ConfigClockSource+0x166>
 8000ce6:	2a30      	cmp	r2, #48	; 0x30
 8000ce8:	d1f2      	bne.n	8000cd0 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000cea:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000cf0:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000cf4:	e036      	b.n	8000d64 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000cf6:	2a70      	cmp	r2, #112	; 0x70
 8000cf8:	d036      	beq.n	8000d68 <HAL_TIM_ConfigClockSource+0xd4>
 8000cfa:	d81b      	bhi.n	8000d34 <HAL_TIM_ConfigClockSource+0xa0>
 8000cfc:	2a50      	cmp	r2, #80	; 0x50
 8000cfe:	d042      	beq.n	8000d86 <HAL_TIM_ConfigClockSource+0xf2>
 8000d00:	2a60      	cmp	r2, #96	; 0x60
 8000d02:	d1e5      	bne.n	8000cd0 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d04:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000d06:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d08:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8000d0c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d0e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d10:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000d12:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000d14:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000d18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000d1c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000d20:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000d24:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000d26:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000d28:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d2e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000d32:	e017      	b.n	8000d64 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000d34:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000d38:	d011      	beq.n	8000d5e <HAL_TIM_ConfigClockSource+0xca>
 8000d3a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000d3e:	d1c7      	bne.n	8000cd0 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000d40:	688a      	ldr	r2, [r1, #8]
 8000d42:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000d44:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000d46:	68c9      	ldr	r1, [r1, #12]
 8000d48:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000d4a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000d4e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d52:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000d54:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d5c:	e002      	b.n	8000d64 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	e7b3      	b.n	8000cd0 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000d68:	688a      	ldr	r2, [r1, #8]
 8000d6a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000d6c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000d6e:	68c9      	ldr	r1, [r1, #12]
 8000d70:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000d72:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000d76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d7a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000d7c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000d7e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000d80:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000d84:	e7ee      	b.n	8000d64 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000d86:	684c      	ldr	r4, [r1, #4]
 8000d88:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000d8a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d8c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d8e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d92:	f025 0501 	bic.w	r5, r5, #1
 8000d96:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d98:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000d9a:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d9c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000da0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000da4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000da6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000da8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000daa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000dae:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000db2:	e7d7      	b.n	8000d64 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000db4:	684c      	ldr	r4, [r1, #4]
 8000db6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000db8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000dba:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000dbc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000dc0:	f025 0501 	bic.w	r5, r5, #1
 8000dc4:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000dc6:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8000dc8:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000dca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000dce:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8000dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000dd4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000dd6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dd8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ddc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000de0:	e7c0      	b.n	8000d64 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000de2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000de4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000de8:	f042 0207 	orr.w	r2, r2, #7
 8000dec:	e7ba      	b.n	8000d64 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000dee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000df0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000df4:	f042 0217 	orr.w	r2, r2, #23
 8000df8:	e7b4      	b.n	8000d64 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000dfa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dfc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e00:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000e04:	e7ae      	b.n	8000d64 <HAL_TIM_ConfigClockSource+0xd0>
	...

08000e08 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e08:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <TIM_Base_SetConfig+0x5c>)
{
 8000e0a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e0c:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8000e0e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e10:	d005      	beq.n	8000e1e <TIM_Base_SetConfig+0x16>
 8000e12:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e16:	d002      	beq.n	8000e1e <TIM_Base_SetConfig+0x16>
 8000e18:	4c13      	ldr	r4, [pc, #76]	; (8000e68 <TIM_Base_SetConfig+0x60>)
 8000e1a:	42a0      	cmp	r0, r4
 8000e1c:	d110      	bne.n	8000e40 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= Structure->CounterMode;
 8000e1e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e24:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8000e26:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e2a:	d005      	beq.n	8000e38 <TIM_Base_SetConfig+0x30>
 8000e2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e30:	d002      	beq.n	8000e38 <TIM_Base_SetConfig+0x30>
 8000e32:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <TIM_Base_SetConfig+0x60>)
 8000e34:	4290      	cmp	r0, r2
 8000e36:	d103      	bne.n	8000e40 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e38:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e3e:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000e40:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8000e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8000e46:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8000e48:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000e4a:	688b      	ldr	r3, [r1, #8]
 8000e4c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000e4e:	680b      	ldr	r3, [r1, #0]
 8000e50:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <TIM_Base_SetConfig+0x5c>)
 8000e54:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8000e56:	bf04      	itt	eq
 8000e58:	690b      	ldreq	r3, [r1, #16]
 8000e5a:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	6143      	str	r3, [r0, #20]
 8000e60:	bd10      	pop	{r4, pc}
 8000e62:	bf00      	nop
 8000e64:	40012c00 	.word	0x40012c00
 8000e68:	40000400 	.word	0x40000400

08000e6c <HAL_TIM_Base_Init>:
{
 8000e6c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000e6e:	4604      	mov	r4, r0
 8000e70:	b1a0      	cbz	r0, 8000e9c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000e72:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000e76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e7a:	b91b      	cbnz	r3, 8000e84 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000e7c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000e80:	f000 f9f8 	bl	8001274 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000e84:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e86:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000e88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e8c:	1d21      	adds	r1, r4, #4
 8000e8e:	f7ff ffbb 	bl	8000e08 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000e92:	2301      	movs	r3, #1
  return HAL_OK;
 8000e94:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000e96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000e9a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e9c:	2001      	movs	r0, #1
}
 8000e9e:	bd10      	pop	{r4, pc}

08000ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000ea0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000ea4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	f04f 0302 	mov.w	r3, #2
 8000eac:	d018      	beq.n	8000ee0 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000eae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000eb2:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000eb4:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000eb6:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000eb8:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000eba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ebe:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000ec0:	685a      	ldr	r2, [r3, #4]
 8000ec2:	4322      	orrs	r2, r4
 8000ec4:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ecc:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000eda:	2300      	movs	r3, #0
 8000edc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8000ee0:	4618      	mov	r0, r3

  return HAL_OK;
}
 8000ee2:	bd10      	pop	{r4, pc}

08000ee4 <write_lcd>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

void write_lcd (uint8_t data, uint8_t cmd_data)
{
 8000ee4:	b510      	push	{r4, lr}
	// identifica comando ou dado
	if (cmd_data) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8000ee6:	460a      	mov	r2, r1
{
 8000ee8:	4604      	mov	r4, r0
	if (cmd_data) HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8000eea:	b101      	cbz	r1, 8000eee <write_lcd+0xa>
 8000eec:	2201      	movs	r2, #1
	else 					HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000eee:	2108      	movs	r1, #8
 8000ef0:	4835      	ldr	r0, [pc, #212]	; (8000fc8 <write_lcd+0xe4>)
 8000ef2:	f7ff fbdd 	bl	80006b0 <HAL_GPIO_WritePin>

	// 4 bits high
	if (data & 0x80) HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000ef6:	0623      	lsls	r3, r4, #24
 8000ef8:	bf4c      	ite	mi
 8000efa:	2201      	movmi	r2, #1
	else						 HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000efc:	2200      	movpl	r2, #0
 8000efe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f02:	4832      	ldr	r0, [pc, #200]	; (8000fcc <write_lcd+0xe8>)
 8000f04:	f7ff fbd4 	bl	80006b0 <HAL_GPIO_WritePin>
	if (data & 0x40) HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000f08:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 8000f0c:	bf18      	it	ne
 8000f0e:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000f10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f14:	482d      	ldr	r0, [pc, #180]	; (8000fcc <write_lcd+0xe8>)
 8000f16:	f7ff fbcb 	bl	80006b0 <HAL_GPIO_WritePin>
	if (data & 0x20) HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000f1a:	f014 0220 	ands.w	r2, r4, #32
 8000f1e:	bf18      	it	ne
 8000f20:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f26:	4829      	ldr	r0, [pc, #164]	; (8000fcc <write_lcd+0xe8>)
 8000f28:	f7ff fbc2 	bl	80006b0 <HAL_GPIO_WritePin>
	if (data & 0x10) HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000f2c:	f014 0210 	ands.w	r2, r4, #16
 8000f30:	bf18      	it	ne
 8000f32:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f38:	4824      	ldr	r0, [pc, #144]	; (8000fcc <write_lcd+0xe8>)
 8000f3a:	f7ff fbb9 	bl	80006b0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f44:	4821      	ldr	r0, [pc, #132]	; (8000fcc <write_lcd+0xe8>)
 8000f46:	f7ff fbb3 	bl	80006b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f7ff f932 	bl	80001b4 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f56:	481d      	ldr	r0, [pc, #116]	; (8000fcc <write_lcd+0xe8>)
 8000f58:	f7ff fbaa 	bl	80006b0 <HAL_GPIO_WritePin>

	// 4 bits Low
	if (data & 0x08) HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_SET);
 8000f5c:	f014 0208 	ands.w	r2, r4, #8
 8000f60:	bf18      	it	ne
 8000f62:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D7_GPIO_Port, D7_Pin, GPIO_PIN_RESET);
 8000f64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f68:	4818      	ldr	r0, [pc, #96]	; (8000fcc <write_lcd+0xe8>)
 8000f6a:	f7ff fba1 	bl	80006b0 <HAL_GPIO_WritePin>
	if (data & 0x04) HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000f6e:	f014 0204 	ands.w	r2, r4, #4
 8000f72:	bf18      	it	ne
 8000f74:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f7a:	4814      	ldr	r0, [pc, #80]	; (8000fcc <write_lcd+0xe8>)
 8000f7c:	f7ff fb98 	bl	80006b0 <HAL_GPIO_WritePin>
	if (data & 0x02) HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000f80:	f014 0202 	ands.w	r2, r4, #2
 8000f84:	bf18      	it	ne
 8000f86:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f8c:	480f      	ldr	r0, [pc, #60]	; (8000fcc <write_lcd+0xe8>)
 8000f8e:	f7ff fb8f 	bl	80006b0 <HAL_GPIO_WritePin>
	if (data & 0x01) HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000f92:	f014 0201 	ands.w	r2, r4, #1
 8000f96:	bf18      	it	ne
 8000f98:	2201      	movne	r2, #1
	else						 HAL_GPIO_WritePin (D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <write_lcd+0xe8>)
 8000fa0:	f7ff fb86 	bl	80006b0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <write_lcd+0xe8>)
 8000fac:	f7ff fb80 	bl	80006b0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f7ff f8ff 	bl	80001b4 <HAL_Delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
}
 8000fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <write_lcd+0xe8>)
 8000fc2:	f7ff bb75 	b.w	80006b0 <HAL_GPIO_WritePin>
 8000fc6:	bf00      	nop
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	40010800 	.word	0x40010800

08000fd0 <string_lcd>:
	write_lcd(0x01, 0);
}

/* string_lcd - escreve string no LCD */
void string_lcd (char *string)
{
 8000fd0:	b510      	push	{r4, lr}
 8000fd2:	1e44      	subs	r4, r0, #1
	while(*string) write_lcd(*string++, 1);
 8000fd4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000fd8:	b900      	cbnz	r0, 8000fdc <string_lcd+0xc>
}
 8000fda:	bd10      	pop	{r4, pc}
	while(*string) write_lcd(*string++, 1);
 8000fdc:	2101      	movs	r1, #1
 8000fde:	f7ff ff81 	bl	8000ee4 <write_lcd>
 8000fe2:	e7f7      	b.n	8000fd4 <string_lcd+0x4>

08000fe4 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe4:	2301      	movs	r3, #1
{
 8000fe6:	b510      	push	{r4, lr}
 8000fe8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fea:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000fec:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fee:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000ff0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ff2:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff6:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ffa:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000ffc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f7ff fb5d 	bl	80006bc <HAL_RCC_OscConfig>
 8001002:	4601      	mov	r1, r0
 8001004:	b100      	cbz	r0, 8001008 <SystemClock_Config+0x24>
 8001006:	e7fe      	b.n	8001006 <SystemClock_Config+0x22>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800100c:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100e:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001010:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001016:	f7ff fd1b 	bl	8000a50 <HAL_RCC_ClockConfig>
 800101a:	b100      	cbz	r0, 800101e <SystemClock_Config+0x3a>
 800101c:	e7fe      	b.n	800101c <SystemClock_Config+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800101e:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001020:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001022:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f7ff fdbe 	bl	8000ba4 <HAL_RCCEx_PeriphCLKConfig>
 8001028:	4604      	mov	r4, r0
 800102a:	b100      	cbz	r0, 800102e <SystemClock_Config+0x4a>
 800102c:	e7fe      	b.n	800102c <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800102e:	f7ff fdb3 	bl	8000b98 <HAL_RCC_GetHCLKFreq>
 8001032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001036:	fbb0 f0f3 	udiv	r0, r0, r3
 800103a:	f7ff fa37 	bl	80004ac <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800103e:	2004      	movs	r0, #4
 8001040:	f7ff fa4a 	bl	80004d8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001044:	4622      	mov	r2, r4
 8001046:	4621      	mov	r1, r4
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff f9fa 	bl	8000444 <HAL_NVIC_SetPriority>
}
 8001050:	b014      	add	sp, #80	; 0x50
 8001052:	bd10      	pop	{r4, pc}

08001054 <main>:
{
 8001054:	b500      	push	{lr}
 8001056:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001058:	f7ff f88c 	bl	8000174 <HAL_Init>
  SystemClock_Config();
 800105c:	f7ff ffc2 	bl	8000fe4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b48      	ldr	r3, [pc, #288]	; (8001184 <main+0x130>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin, GPIO_PIN_RESET);
 8001062:	f240 410b 	movw	r1, #1035	; 0x40b
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin, GPIO_PIN_RESET);
 8001068:	4847      	ldr	r0, [pc, #284]	; (8001188 <main+0x134>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	f042 0204 	orr.w	r2, r2, #4
 800106e:	619a      	str	r2, [r3, #24]
 8001070:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, SIG_Pin|D7_Pin|D6_Pin|D5_Pin 
                          |D4_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD1_Pin LD2_Pin LD3_Pin RS_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	f002 0204 	and.w	r2, r2, #4
 8001078:	9200      	str	r2, [sp, #0]
 800107a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2402      	movs	r4, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	f042 0208 	orr.w	r2, r2, #8
 8001084:	619a      	str	r2, [r3, #24]
 8001086:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin, GPIO_PIN_RESET);
 8001088:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	f003 0308 	and.w	r3, r3, #8
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin, GPIO_PIN_RESET);
 8001092:	f7ff fb0d 	bl	80006b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SIG_Pin|D7_Pin|D6_Pin|D5_Pin 
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 800109c:	483b      	ldr	r0, [pc, #236]	; (800118c <main+0x138>)
 800109e:	f7ff fb07 	bl	80006b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin;
 80010a2:	f240 430b 	movw	r3, #1035	; 0x40b
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	a904      	add	r1, sp, #16
 80010a8:	4837      	ldr	r0, [pc, #220]	; (8001188 <main+0x134>)

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010aa:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin;
 80010ac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f7ff fa23 	bl	80004fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 80010b6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	a904      	add	r1, sp, #16
 80010bc:	4832      	ldr	r0, [pc, #200]	; (8001188 <main+0x134>)
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin;
 80010be:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c4:	f7ff fa1a 	bl	80004fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SIG_Pin D7_Pin D6_Pin D5_Pin 
                           D4_Pin EN_Pin */
  GPIO_InitStruct.Pin = SIG_Pin|D7_Pin|D6_Pin|D5_Pin 
 80010c8:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
                          |D4_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	482f      	ldr	r0, [pc, #188]	; (800118c <main+0x138>)
 80010ce:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SIG_Pin|D7_Pin|D6_Pin|D5_Pin 
 80010d0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d4:	9505      	str	r5, [sp, #20]
  hadc1.Instance = ADC1;
 80010d6:	4c2e      	ldr	r4, [pc, #184]	; (8001190 <main+0x13c>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f7ff fa10 	bl	80004fc <HAL_GPIO_Init>
  hadc1.Instance = ADC1;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <main+0x140>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010de:	4620      	mov	r0, r4
  hadc1.Instance = ADC1;
 80010e0:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e2:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010e6:	60a6      	str	r6, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010e8:	60e6      	str	r6, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ea:	6166      	str	r6, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ec:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ee:	6066      	str	r6, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010f0:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f2:	f7ff f915 	bl	8000320 <HAL_ADC_Init>
 80010f6:	b100      	cbz	r0, 80010fa <main+0xa6>
 80010f8:	e7fe      	b.n	80010f8 <main+0xa4>
  sConfig.Channel = ADC_CHANNEL_0;
 80010fa:	9004      	str	r0, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80010fc:	9006      	str	r0, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010fe:	a904      	add	r1, sp, #16
 8001100:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001102:	9505      	str	r5, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001104:	f7ff f866 	bl	80001d4 <HAL_ADC_ConfigChannel>
 8001108:	b100      	cbz	r0, 800110c <main+0xb8>
 800110a:	e7fe      	b.n	800110a <main+0xb6>
  htim2.Init.Prescaler = 399;
 800110c:	f240 138f 	movw	r3, #399	; 0x18f
 8001110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Instance = TIM2;
 8001114:	4c20      	ldr	r4, [pc, #128]	; (8001198 <main+0x144>)
  htim2.Init.Prescaler = 399;
 8001116:	e884 000c 	stmia.w	r4, {r2, r3}
  htim2.Init.Period = 499;
 800111a:	f240 13f3 	movw	r3, #499	; 0x1f3
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	60a0      	str	r0, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001120:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001122:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001124:	4620      	mov	r0, r4
  htim2.Init.Period = 499;
 8001126:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001128:	f7ff fea0 	bl	8000e6c <HAL_TIM_Base_Init>
 800112c:	b100      	cbz	r0, 8001130 <main+0xdc>
 800112e:	e7fe      	b.n	800112e <main+0xda>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001134:	a904      	add	r1, sp, #16
 8001136:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001138:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800113a:	f7ff fdab 	bl	8000c94 <HAL_TIM_ConfigClockSource>
 800113e:	b100      	cbz	r0, 8001142 <main+0xee>
 8001140:	e7fe      	b.n	8001140 <main+0xec>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001142:	9002      	str	r0, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001144:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001146:	a902      	add	r1, sp, #8
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff fea9 	bl	8000ea0 <HAL_TIMEx_MasterConfigSynchronization>
 800114e:	4604      	mov	r4, r0
 8001150:	b100      	cbz	r0, 8001154 <main+0x100>
 8001152:	e7fe      	b.n	8001152 <main+0xfe>
  write_lcd(0x01,0);
 8001154:	4601      	mov	r1, r0
 8001156:	4628      	mov	r0, r5
 8001158:	f7ff fec4 	bl	8000ee4 <write_lcd>
  write_lcd(0x80,0);
 800115c:	4621      	mov	r1, r4
 800115e:	2080      	movs	r0, #128	; 0x80
 8001160:	f7ff fec0 	bl	8000ee4 <write_lcd>
  string_lcd("LNNANO");
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <main+0x148>)
 8001166:	f7ff ff33 	bl	8000fd0 <string_lcd>
  write_lcd(0xC0,0);
 800116a:	4621      	mov	r1, r4
 800116c:	20c0      	movs	r0, #192	; 0xc0
 800116e:	f7ff feb9 	bl	8000ee4 <write_lcd>
  string_lcd("DSF");
 8001172:	480b      	ldr	r0, [pc, #44]	; (80011a0 <main+0x14c>)
 8001174:	f7ff ff2c 	bl	8000fd0 <string_lcd>
  HAL_GPIO_WritePin(LD1_GPIO_Port,LD1_Pin, GPIO_PIN_SET);
 8001178:	462a      	mov	r2, r5
 800117a:	4629      	mov	r1, r5
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <main+0x134>)
 800117e:	f7ff fa97 	bl	80006b0 <HAL_GPIO_WritePin>
 8001182:	e7fe      	b.n	8001182 <main+0x12e>
 8001184:	40021000 	.word	0x40021000
 8001188:	40010c00 	.word	0x40010c00
 800118c:	40010800 	.word	0x40010800
 8001190:	20000024 	.word	0x20000024
 8001194:	40012400 	.word	0x40012400
 8001198:	20000054 	.word	0x20000054
 800119c:	080013c0 	.word	0x080013c0
 80011a0:	080013c7 	.word	0x080013c7

080011a4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_MspInit+0x88>)
{
 80011a6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80011a8:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011aa:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ac:	f042 0201 	orr.w	r2, r2, #1
 80011b0:	619a      	str	r2, [r3, #24]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011bc:	f7ff f930 	bl	8000420 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	f06f 000b 	mvn.w	r0, #11
 80011c6:	4611      	mov	r1, r2
 80011c8:	f7ff f93c 	bl	8000444 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f06f 000a 	mvn.w	r0, #10
 80011d2:	4611      	mov	r1, r2
 80011d4:	f7ff f936 	bl	8000444 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	f06f 0009 	mvn.w	r0, #9
 80011de:	4611      	mov	r1, r2
 80011e0:	f7ff f930 	bl	8000444 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f06f 0004 	mvn.w	r0, #4
 80011ea:	4611      	mov	r1, r2
 80011ec:	f7ff f92a 	bl	8000444 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f06f 0003 	mvn.w	r0, #3
 80011f6:	4611      	mov	r1, r2
 80011f8:	f7ff f924 	bl	8000444 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f06f 0001 	mvn.w	r0, #1
 8001202:	4611      	mov	r1, r2
 8001204:	f7ff f91e 	bl	8000444 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	f04f 30ff 	mov.w	r0, #4294967295
 800120e:	4611      	mov	r1, r2
 8001210:	f7ff f918 	bl	8000444 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_MspInit+0x8c>)
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001224:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	b003      	add	sp, #12
 8001228:	f85d fb04 	ldr.w	pc, [sp], #4
 800122c:	40021000 	.word	0x40021000
 8001230:	40010000 	.word	0x40010000

08001234 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001234:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001236:	6802      	ldr	r2, [r0, #0]
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_ADC_MspInit+0x38>)
 800123a:	429a      	cmp	r2, r3
 800123c:	d112      	bne.n	8001264 <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800123e:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001242:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = RV1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(RV1_GPIO_Port, &GPIO_InitStruct);
 8001244:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800124a:	619a      	str	r2, [r3, #24]
 800124c:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(RV1_GPIO_Port, &GPIO_InitStruct);
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <HAL_ADC_MspInit+0x3c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RV1_Pin;
 8001258:	2301      	movs	r3, #1
 800125a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125c:	2303      	movs	r3, #3
 800125e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(RV1_GPIO_Port, &GPIO_InitStruct);
 8001260:	f7ff f94c 	bl	80004fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001264:	b007      	add	sp, #28
 8001266:	f85d fb04 	ldr.w	pc, [sp], #4
 800126a:	bf00      	nop
 800126c:	40012400 	.word	0x40012400
 8001270:	40010800 	.word	0x40010800

08001274 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8001274:	6803      	ldr	r3, [r0, #0]
{
 8001276:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8001278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800127c:	d10a      	bne.n	8001294 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001282:	69da      	ldr	r2, [r3, #28]
 8001284:	f042 0201 	orr.w	r2, r2, #1
 8001288:	61da      	str	r2, [r3, #28]
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	9301      	str	r3, [sp, #4]
 8001292:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001294:	b002      	add	sp, #8
 8001296:	4770      	bx	lr

08001298 <NMI_Handler>:
 8001298:	4770      	bx	lr

0800129a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800129a:	e7fe      	b.n	800129a <HardFault_Handler>

0800129c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800129c:	e7fe      	b.n	800129c <MemManage_Handler>

0800129e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800129e:	e7fe      	b.n	800129e <BusFault_Handler>

080012a0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80012a0:	e7fe      	b.n	80012a0 <UsageFault_Handler>

080012a2 <SVC_Handler>:
 80012a2:	4770      	bx	lr

080012a4 <DebugMon_Handler>:
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80012a6:	4770      	bx	lr

080012a8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80012a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012aa:	f7fe ff75 	bl	8000198 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80012b2:	f7ff b91e 	b.w	80004f2 <HAL_SYSTICK_IRQHandler>
	...

080012b8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <SystemInit+0x40>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	f042 0201 	orr.w	r2, r2, #1
 80012c0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012c2:	6859      	ldr	r1, [r3, #4]
 80012c4:	4a0d      	ldr	r2, [pc, #52]	; (80012fc <SystemInit+0x44>)
 80012c6:	400a      	ands	r2, r1
 80012c8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80012d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012d4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012dc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80012e4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80012e6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80012ea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012f0:	4b03      	ldr	r3, [pc, #12]	; (8001300 <SystemInit+0x48>)
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	f8ff0000 	.word	0xf8ff0000
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001304:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001306:	e003      	b.n	8001310 <LoopCopyDataInit>

08001308 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800130a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800130c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800130e:	3104      	adds	r1, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001314:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001316:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001318:	d3f6      	bcc.n	8001308 <CopyDataInit>
  ldr r2, =_sbss
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800131c:	e002      	b.n	8001324 <LoopFillZerobss>

0800131e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001320:	f842 3b04 	str.w	r3, [r2], #4

08001324 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001326:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001328:	d3f9      	bcc.n	800131e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132a:	f7ff ffc5 	bl	80012b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f000 f80f 	bl	8001350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001332:	f7ff fe8f 	bl	8001054 <main>
  bx lr
 8001336:	4770      	bx	lr
  ldr r3, =_sidata
 8001338:	080013e4 	.word	0x080013e4
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001340:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001344:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001348:	20000094 	.word	0x20000094

0800134c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_2_IRQHandler>
	...

08001350 <__libc_init_array>:
 8001350:	b570      	push	{r4, r5, r6, lr}
 8001352:	2500      	movs	r5, #0
 8001354:	4e0c      	ldr	r6, [pc, #48]	; (8001388 <__libc_init_array+0x38>)
 8001356:	4c0d      	ldr	r4, [pc, #52]	; (800138c <__libc_init_array+0x3c>)
 8001358:	1ba4      	subs	r4, r4, r6
 800135a:	10a4      	asrs	r4, r4, #2
 800135c:	42a5      	cmp	r5, r4
 800135e:	d109      	bne.n	8001374 <__libc_init_array+0x24>
 8001360:	f000 f81a 	bl	8001398 <_init>
 8001364:	2500      	movs	r5, #0
 8001366:	4e0a      	ldr	r6, [pc, #40]	; (8001390 <__libc_init_array+0x40>)
 8001368:	4c0a      	ldr	r4, [pc, #40]	; (8001394 <__libc_init_array+0x44>)
 800136a:	1ba4      	subs	r4, r4, r6
 800136c:	10a4      	asrs	r4, r4, #2
 800136e:	42a5      	cmp	r5, r4
 8001370:	d105      	bne.n	800137e <__libc_init_array+0x2e>
 8001372:	bd70      	pop	{r4, r5, r6, pc}
 8001374:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001378:	4798      	blx	r3
 800137a:	3501      	adds	r5, #1
 800137c:	e7ee      	b.n	800135c <__libc_init_array+0xc>
 800137e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001382:	4798      	blx	r3
 8001384:	3501      	adds	r5, #1
 8001386:	e7f2      	b.n	800136e <__libc_init_array+0x1e>
 8001388:	080013dc 	.word	0x080013dc
 800138c:	080013dc 	.word	0x080013dc
 8001390:	080013dc 	.word	0x080013dc
 8001394:	080013e0 	.word	0x080013e0

08001398 <_init>:
 8001398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139a:	bf00      	nop
 800139c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800139e:	bc08      	pop	{r3}
 80013a0:	469e      	mov	lr, r3
 80013a2:	4770      	bx	lr

080013a4 <_fini>:
 80013a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a6:	bf00      	nop
 80013a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013aa:	bc08      	pop	{r3}
 80013ac:	469e      	mov	lr, r3
 80013ae:	4770      	bx	lr
