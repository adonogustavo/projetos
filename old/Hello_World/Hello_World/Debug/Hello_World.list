
Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009520  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080096f0  080096f0  000196f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080097a4  080097a4  000197a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080097ac  080097ac  000197ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080097b0  080097b0  000197b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  080097b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000096a8  20000094  08009848  00020094  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000973c  08009848  0002973c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 10 .debug_info   00059b92  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a391  00000000  00000000  00079c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001f32a  00000000  00000000  00083fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000025d8  00000000  00000000  000a3318  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003180  00000000  00000000  000a58f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001766a  00000000  00000000  000a8a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000e818  00000000  00000000  000c00da  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000ce8f2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000072e8  00000000  00000000  000ce970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080096d8 	.word	0x080096d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	080096d8 	.word	0x080096d8

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b97a 	b.w	800051c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	468c      	mov	ip, r1
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	9e08      	ldr	r6, [sp, #32]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d151      	bne.n	80002f4 <__udivmoddi4+0xb4>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d96d      	bls.n	8000332 <__udivmoddi4+0xf2>
 8000256:	fab2 fe82 	clz	lr, r2
 800025a:	f1be 0f00 	cmp.w	lr, #0
 800025e:	d00b      	beq.n	8000278 <__udivmoddi4+0x38>
 8000260:	f1ce 0c20 	rsb	ip, lr, #32
 8000264:	fa01 f50e 	lsl.w	r5, r1, lr
 8000268:	fa20 fc0c 	lsr.w	ip, r0, ip
 800026c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000270:	ea4c 0c05 	orr.w	ip, ip, r5
 8000274:	fa00 f40e 	lsl.w	r4, r0, lr
 8000278:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800027c:	0c25      	lsrs	r5, r4, #16
 800027e:	fbbc f8fa 	udiv	r8, ip, sl
 8000282:	fa1f f987 	uxth.w	r9, r7
 8000286:	fb0a cc18 	mls	ip, sl, r8, ip
 800028a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800028e:	fb08 f309 	mul.w	r3, r8, r9
 8000292:	42ab      	cmp	r3, r5
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x6c>
 8000296:	19ed      	adds	r5, r5, r7
 8000298:	f108 32ff 	add.w	r2, r8, #4294967295
 800029c:	f080 8123 	bcs.w	80004e6 <__udivmoddi4+0x2a6>
 80002a0:	42ab      	cmp	r3, r5
 80002a2:	f240 8120 	bls.w	80004e6 <__udivmoddi4+0x2a6>
 80002a6:	f1a8 0802 	sub.w	r8, r8, #2
 80002aa:	443d      	add	r5, r7
 80002ac:	1aed      	subs	r5, r5, r3
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002bc:	fb00 f909 	mul.w	r9, r0, r9
 80002c0:	45a1      	cmp	r9, r4
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x98>
 80002c4:	19e4      	adds	r4, r4, r7
 80002c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ca:	f080 810a 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80002ce:	45a1      	cmp	r9, r4
 80002d0:	f240 8107 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80002d4:	3802      	subs	r0, #2
 80002d6:	443c      	add	r4, r7
 80002d8:	eba4 0409 	sub.w	r4, r4, r9
 80002dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e0:	2100      	movs	r1, #0
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d061      	beq.n	80003aa <__udivmoddi4+0x16a>
 80002e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ea:	2300      	movs	r3, #0
 80002ec:	6034      	str	r4, [r6, #0]
 80002ee:	6073      	str	r3, [r6, #4]
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0xc8>
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d054      	beq.n	80003a6 <__udivmoddi4+0x166>
 80002fc:	2100      	movs	r1, #0
 80002fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000302:	4608      	mov	r0, r1
 8000304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000308:	fab3 f183 	clz	r1, r3
 800030c:	2900      	cmp	r1, #0
 800030e:	f040 808e 	bne.w	800042e <__udivmoddi4+0x1ee>
 8000312:	42ab      	cmp	r3, r5
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xdc>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80fa 	bhi.w	8000510 <__udivmoddi4+0x2d0>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb65 0503 	sbc.w	r5, r5, r3
 8000322:	2001      	movs	r0, #1
 8000324:	46ac      	mov	ip, r5
 8000326:	2e00      	cmp	r6, #0
 8000328:	d03f      	beq.n	80003aa <__udivmoddi4+0x16a>
 800032a:	e886 1010 	stmia.w	r6, {r4, ip}
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	b912      	cbnz	r2, 800033a <__udivmoddi4+0xfa>
 8000334:	2701      	movs	r7, #1
 8000336:	fbb7 f7f2 	udiv	r7, r7, r2
 800033a:	fab7 fe87 	clz	lr, r7
 800033e:	f1be 0f00 	cmp.w	lr, #0
 8000342:	d134      	bne.n	80003ae <__udivmoddi4+0x16e>
 8000344:	1beb      	subs	r3, r5, r7
 8000346:	0c3a      	lsrs	r2, r7, #16
 8000348:	fa1f fc87 	uxth.w	ip, r7
 800034c:	2101      	movs	r1, #1
 800034e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000352:	0c25      	lsrs	r5, r4, #16
 8000354:	fb02 3318 	mls	r3, r2, r8, r3
 8000358:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800035c:	fb0c f308 	mul.w	r3, ip, r8
 8000360:	42ab      	cmp	r3, r5
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x134>
 8000364:	19ed      	adds	r5, r5, r7
 8000366:	f108 30ff 	add.w	r0, r8, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x132>
 800036c:	42ab      	cmp	r3, r5
 800036e:	f200 80d1 	bhi.w	8000514 <__udivmoddi4+0x2d4>
 8000372:	4680      	mov	r8, r0
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb5 f0f2 	udiv	r0, r5, r2
 800037c:	fb02 5510 	mls	r5, r2, r0, r5
 8000380:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000384:	fb0c fc00 	mul.w	ip, ip, r0
 8000388:	45a4      	cmp	ip, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x15c>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x15a>
 8000394:	45a4      	cmp	ip, r4
 8000396:	f200 80b8 	bhi.w	800050a <__udivmoddi4+0x2ca>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 040c 	sub.w	r4, r4, ip
 80003a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a4:	e79d      	b.n	80002e2 <__udivmoddi4+0xa2>
 80003a6:	4631      	mov	r1, r6
 80003a8:	4630      	mov	r0, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	f1ce 0420 	rsb	r4, lr, #32
 80003b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ba:	fa20 f804 	lsr.w	r8, r0, r4
 80003be:	0c3a      	lsrs	r2, r7, #16
 80003c0:	fa25 f404 	lsr.w	r4, r5, r4
 80003c4:	ea48 0803 	orr.w	r8, r8, r3
 80003c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d0:	fb02 4411 	mls	r4, r2, r1, r4
 80003d4:	fa1f fc87 	uxth.w	ip, r7
 80003d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003dc:	fb01 f30c 	mul.w	r3, r1, ip
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x1bc>
 80003e8:	19ed      	adds	r5, r5, r7
 80003ea:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ee:	f080 808a 	bcs.w	8000506 <__udivmoddi4+0x2c6>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8087 	bls.w	8000506 <__udivmoddi4+0x2c6>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	fa1f f588 	uxth.w	r5, r8
 8000402:	fbb3 f0f2 	udiv	r0, r3, r2
 8000406:	fb02 3310 	mls	r3, r2, r0, r3
 800040a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040e:	fb00 f30c 	mul.w	r3, r0, ip
 8000412:	42ab      	cmp	r3, r5
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x1e6>
 8000416:	19ed      	adds	r5, r5, r7
 8000418:	f100 38ff 	add.w	r8, r0, #4294967295
 800041c:	d26f      	bcs.n	80004fe <__udivmoddi4+0x2be>
 800041e:	42ab      	cmp	r3, r5
 8000420:	d96d      	bls.n	80004fe <__udivmoddi4+0x2be>
 8000422:	3802      	subs	r0, #2
 8000424:	443d      	add	r5, r7
 8000426:	1aeb      	subs	r3, r5, r3
 8000428:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042c:	e78f      	b.n	800034e <__udivmoddi4+0x10e>
 800042e:	f1c1 0720 	rsb	r7, r1, #32
 8000432:	fa22 f807 	lsr.w	r8, r2, r7
 8000436:	408b      	lsls	r3, r1
 8000438:	fa05 f401 	lsl.w	r4, r5, r1
 800043c:	ea48 0303 	orr.w	r3, r8, r3
 8000440:	fa20 fe07 	lsr.w	lr, r0, r7
 8000444:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000448:	40fd      	lsrs	r5, r7
 800044a:	ea4e 0e04 	orr.w	lr, lr, r4
 800044e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000452:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000456:	fb0c 5519 	mls	r5, ip, r9, r5
 800045a:	fa1f f883 	uxth.w	r8, r3
 800045e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000462:	fb09 f408 	mul.w	r4, r9, r8
 8000466:	42ac      	cmp	r4, r5
 8000468:	fa02 f201 	lsl.w	r2, r2, r1
 800046c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x244>
 8000472:	18ed      	adds	r5, r5, r3
 8000474:	f109 30ff 	add.w	r0, r9, #4294967295
 8000478:	d243      	bcs.n	8000502 <__udivmoddi4+0x2c2>
 800047a:	42ac      	cmp	r4, r5
 800047c:	d941      	bls.n	8000502 <__udivmoddi4+0x2c2>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	441d      	add	r5, r3
 8000484:	1b2d      	subs	r5, r5, r4
 8000486:	fa1f fe8e 	uxth.w	lr, lr
 800048a:	fbb5 f0fc 	udiv	r0, r5, ip
 800048e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000492:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000496:	fb00 f808 	mul.w	r8, r0, r8
 800049a:	45a0      	cmp	r8, r4
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x26e>
 800049e:	18e4      	adds	r4, r4, r3
 80004a0:	f100 35ff 	add.w	r5, r0, #4294967295
 80004a4:	d229      	bcs.n	80004fa <__udivmoddi4+0x2ba>
 80004a6:	45a0      	cmp	r8, r4
 80004a8:	d927      	bls.n	80004fa <__udivmoddi4+0x2ba>
 80004aa:	3802      	subs	r0, #2
 80004ac:	441c      	add	r4, r3
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	eba4 0408 	sub.w	r4, r4, r8
 80004b6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c6      	mov	lr, r8
 80004be:	464d      	mov	r5, r9
 80004c0:	d315      	bcc.n	80004ee <__udivmoddi4+0x2ae>
 80004c2:	d012      	beq.n	80004ea <__udivmoddi4+0x2aa>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x29c>
 80004c6:	ebba 030e 	subs.w	r3, sl, lr
 80004ca:	eb64 0405 	sbc.w	r4, r4, r5
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40cb      	lsrs	r3, r1
 80004d4:	431f      	orrs	r7, r3
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	6037      	str	r7, [r6, #0]
 80004da:	6074      	str	r4, [r6, #4]
 80004dc:	2100      	movs	r1, #0
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	4618      	mov	r0, r3
 80004e4:	e6f8      	b.n	80002d8 <__udivmoddi4+0x98>
 80004e6:	4690      	mov	r8, r2
 80004e8:	e6e0      	b.n	80002ac <__udivmoddi4+0x6c>
 80004ea:	45c2      	cmp	sl, r8
 80004ec:	d2ea      	bcs.n	80004c4 <__udivmoddi4+0x284>
 80004ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f2:	eb69 0503 	sbc.w	r5, r9, r3
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7e4      	b.n	80004c4 <__udivmoddi4+0x284>
 80004fa:	4628      	mov	r0, r5
 80004fc:	e7d7      	b.n	80004ae <__udivmoddi4+0x26e>
 80004fe:	4640      	mov	r0, r8
 8000500:	e791      	b.n	8000426 <__udivmoddi4+0x1e6>
 8000502:	4681      	mov	r9, r0
 8000504:	e7be      	b.n	8000484 <__udivmoddi4+0x244>
 8000506:	4601      	mov	r1, r0
 8000508:	e778      	b.n	80003fc <__udivmoddi4+0x1bc>
 800050a:	3802      	subs	r0, #2
 800050c:	443c      	add	r4, r7
 800050e:	e745      	b.n	800039c <__udivmoddi4+0x15c>
 8000510:	4608      	mov	r0, r1
 8000512:	e708      	b.n	8000326 <__udivmoddi4+0xe6>
 8000514:	f1a8 0802 	sub.w	r8, r8, #2
 8000518:	443d      	add	r5, r7
 800051a:	e72b      	b.n	8000374 <__udivmoddi4+0x134>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000520:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000522:	2003      	movs	r0, #3
 8000524:	f000 f970 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000528:	2000      	movs	r0, #0
 800052a:	f008 fd7d 	bl	8009028 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800052e:	f008 f919 	bl	8008764 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000532:	2000      	movs	r0, #0
 8000534:	bd08      	pop	{r3, pc}
	...

08000538 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000538:	4a03      	ldr	r2, [pc, #12]	; (8000548 <HAL_IncTick+0x10>)
 800053a:	4b04      	ldr	r3, [pc, #16]	; (800054c <HAL_IncTick+0x14>)
 800053c:	6811      	ldr	r1, [r2, #0]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	440b      	add	r3, r1
 8000542:	6013      	str	r3, [r2, #0]
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	20008228 	.word	0x20008228
 800054c:	20000000 	.word	0x20000000

08000550 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <HAL_GetTick+0x8>)
 8000552:	6818      	ldr	r0, [r3, #0]
}
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20008228 	.word	0x20008228

0800055c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800055c:	b538      	push	{r3, r4, r5, lr}
 800055e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000560:	f7ff fff6 	bl	8000550 <HAL_GetTick>
 8000564:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000566:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000568:	bf1e      	ittt	ne
 800056a:	4b04      	ldrne	r3, [pc, #16]	; (800057c <HAL_Delay+0x20>)
 800056c:	781b      	ldrbne	r3, [r3, #0]
 800056e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000570:	f7ff ffee 	bl	8000550 <HAL_GetTick>
 8000574:	1b40      	subs	r0, r0, r5
 8000576:	4284      	cmp	r4, r0
 8000578:	d8fa      	bhi.n	8000570 <HAL_Delay+0x14>
  {
  }
}
 800057a:	bd38      	pop	{r3, r4, r5, pc}
 800057c:	20000000 	.word	0x20000000

08000580 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000580:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000582:	4604      	mov	r4, r0
 8000584:	2800      	cmp	r0, #0
 8000586:	f000 8099 	beq.w	80006bc <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800058a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800058c:	b923      	cbnz	r3, 8000598 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800058e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000590:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000594:	f008 f916 	bl	80087c4 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000598:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800059a:	06db      	lsls	r3, r3, #27
 800059c:	f100 808c 	bmi.w	80006b8 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005a6:	f023 0302 	bic.w	r3, r3, #2
 80005aa:	f043 0302 	orr.w	r3, r3, #2
 80005ae:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80005b0:	4b43      	ldr	r3, [pc, #268]	; (80006c0 <HAL_ADC_Init+0x140>)
 80005b2:	685a      	ldr	r2, [r3, #4]
 80005b4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005b8:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	6861      	ldr	r1, [r4, #4]
 80005be:	430a      	orrs	r2, r1
 80005c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005c2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005c4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005c6:	685a      	ldr	r2, [r3, #4]
 80005c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005d4:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005d6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005d8:	685a      	ldr	r2, [r3, #4]
 80005da:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005de:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005e0:	685a      	ldr	r2, [r3, #4]
 80005e2:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005e4:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005e6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005f0:	689a      	ldr	r2, [r3, #8]
 80005f2:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005f4:	4933      	ldr	r1, [pc, #204]	; (80006c4 <HAL_ADC_Init+0x144>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005f6:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005fa:	428a      	cmp	r2, r1
 80005fc:	d050      	beq.n	80006a0 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80005fe:	6899      	ldr	r1, [r3, #8]
 8000600:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000604:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000606:	6899      	ldr	r1, [r3, #8]
 8000608:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800060a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800060c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800060e:	689a      	ldr	r2, [r3, #8]
 8000610:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000616:	689a      	ldr	r2, [r3, #8]
 8000618:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800061a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800061c:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800061e:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000620:	f022 0202 	bic.w	r2, r2, #2
 8000624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000626:	689a      	ldr	r2, [r3, #8]
 8000628:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800062c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800062e:	6a22      	ldr	r2, [r4, #32]
 8000630:	2a00      	cmp	r2, #0
 8000632:	d03d      	beq.n	80006b0 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000634:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000636:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800063c:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800063e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000640:	685a      	ldr	r2, [r3, #4]
 8000642:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000646:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000648:	685a      	ldr	r2, [r3, #4]
 800064a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800064e:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8000650:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000654:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000656:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800065a:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800065c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800065e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000660:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000664:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000668:	689a      	ldr	r2, [r3, #8]
 800066a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800066e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000676:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800067a:	689a      	ldr	r2, [r3, #8]
 800067c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000682:	689a      	ldr	r2, [r3, #8]
 8000684:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000688:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800068a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800068c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800068e:	f023 0303 	bic.w	r3, r3, #3
 8000692:	f043 0301 	orr.w	r3, r3, #1
 8000696:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000698:	2300      	movs	r3, #0
 800069a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800069e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006a8:	689a      	ldr	r2, [r3, #8]
 80006aa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006ae:	e7b4      	b.n	800061a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006b0:	685a      	ldr	r2, [r3, #4]
 80006b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006b6:	e7ca      	b.n	800064e <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 80006b8:	2001      	movs	r0, #1
 80006ba:	e7ed      	b.n	8000698 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 80006bc:	2001      	movs	r0, #1
}
 80006be:	bd10      	pop	{r4, pc}
 80006c0:	40012300 	.word	0x40012300
 80006c4:	0f000001 	.word	0x0f000001

080006c8 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 80006c8:	2300      	movs	r3, #0
{
 80006ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 80006cc:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006ce:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d071      	beq.n	80007ba <HAL_ADC_ConfigChannel+0xf2>
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006d6:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 80006d8:	2301      	movs	r3, #1
 80006da:	6804      	ldr	r4, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006dc:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 80006de:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80006e2:	b2ae      	uxth	r6, r5
 80006e4:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 80006e6:	d931      	bls.n	800074c <HAL_ADC_ConfigChannel+0x84>
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006e8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 80006ec:	f04f 0e07 	mov.w	lr, #7
 80006f0:	68e7      	ldr	r7, [r4, #12]
 80006f2:	3b1e      	subs	r3, #30
 80006f4:	fa0e fe03 	lsl.w	lr, lr, r3
 80006f8:	ea27 070e 	bic.w	r7, r7, lr
 80006fc:	60e7      	str	r7, [r4, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80006fe:	4f3d      	ldr	r7, [pc, #244]	; (80007f4 <HAL_ADC_ConfigChannel+0x12c>)
 8000700:	42bd      	cmp	r5, r7
 8000702:	d11e      	bne.n	8000742 <HAL_ADC_ConfigChannel+0x7a>
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000704:	68e3      	ldr	r3, [r4, #12]
 8000706:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800070a:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7)
 800070c:	684a      	ldr	r2, [r1, #4]
 800070e:	2a06      	cmp	r2, #6
 8000710:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000714:	d82a      	bhi.n	800076c <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000716:	4413      	add	r3, r2
 8000718:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800071a:	1f59      	subs	r1, r3, #5
 800071c:	231f      	movs	r3, #31
 800071e:	408b      	lsls	r3, r1
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000720:	fa06 f101 	lsl.w	r1, r6, r1
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000724:	ea27 0303 	bic.w	r3, r7, r3
 8000728:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800072a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800072c:	4311      	orrs	r1, r2
 800072e:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000730:	4b31      	ldr	r3, [pc, #196]	; (80007f8 <HAL_ADC_ConfigChannel+0x130>)
 8000732:	429c      	cmp	r4, r3
 8000734:	d039      	beq.n	80007aa <HAL_ADC_ConfigChannel+0xe2>
  __HAL_UNLOCK(hadc);
 8000736:	2300      	movs	r3, #0
 8000738:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800073c:	4618      	mov	r0, r3
}
 800073e:	b003      	add	sp, #12
 8000740:	bdf0      	pop	{r4, r5, r6, r7, pc}
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000742:	68e7      	ldr	r7, [r4, #12]
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	433b      	orrs	r3, r7
 800074a:	e7de      	b.n	800070a <HAL_ADC_ConfigChannel+0x42>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800074c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000750:	f04f 0e07 	mov.w	lr, #7
 8000754:	6927      	ldr	r7, [r4, #16]
 8000756:	fa0e fe03 	lsl.w	lr, lr, r3
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800075e:	ea27 070e 	bic.w	r7, r7, lr
 8000762:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000764:	6927      	ldr	r7, [r4, #16]
 8000766:	433b      	orrs	r3, r7
 8000768:	6123      	str	r3, [r4, #16]
 800076a:	e7cf      	b.n	800070c <HAL_ADC_ConfigChannel+0x44>
  else if (sConfig->Rank < 13)
 800076c:	2a0c      	cmp	r2, #12
 800076e:	d80e      	bhi.n	800078e <HAL_ADC_ConfigChannel+0xc6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000770:	4413      	add	r3, r2
 8000772:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000774:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 8000778:	231f      	movs	r3, #31
 800077a:	4093      	lsls	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800077c:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000780:	ea21 0303 	bic.w	r3, r1, r3
 8000784:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000786:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000788:	431a      	orrs	r2, r3
 800078a:	6322      	str	r2, [r4, #48]	; 0x30
 800078c:	e7d0      	b.n	8000730 <HAL_ADC_ConfigChannel+0x68>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800078e:	4413      	add	r3, r2
 8000790:	221f      	movs	r2, #31
 8000792:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000794:	3b41      	subs	r3, #65	; 0x41
 8000796:	409a      	lsls	r2, r3
 8000798:	ea21 0202 	bic.w	r2, r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800079c:	fa06 f103 	lsl.w	r1, r6, r3
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007a0:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007a4:	4311      	orrs	r1, r2
 80007a6:	62e1      	str	r1, [r4, #44]	; 0x2c
 80007a8:	e7c2      	b.n	8000730 <HAL_ADC_ConfigChannel+0x68>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007aa:	2d12      	cmp	r5, #18
 80007ac:	d107      	bne.n	80007be <HAL_ADC_ConfigChannel+0xf6>
    ADC->CCR |= ADC_CCR_VBATE;
 80007ae:	4a13      	ldr	r2, [pc, #76]	; (80007fc <HAL_ADC_ConfigChannel+0x134>)
 80007b0:	6853      	ldr	r3, [r2, #4]
 80007b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007b6:	6053      	str	r3, [r2, #4]
 80007b8:	e7bd      	b.n	8000736 <HAL_ADC_ConfigChannel+0x6e>
  __HAL_LOCK(hadc);
 80007ba:	2002      	movs	r0, #2
 80007bc:	e7bf      	b.n	800073e <HAL_ADC_ConfigChannel+0x76>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <HAL_ADC_ConfigChannel+0x12c>)
 80007c0:	429d      	cmp	r5, r3
 80007c2:	d001      	beq.n	80007c8 <HAL_ADC_ConfigChannel+0x100>
 80007c4:	2d11      	cmp	r5, #17
 80007c6:	d1b6      	bne.n	8000736 <HAL_ADC_ConfigChannel+0x6e>
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007c8:	490c      	ldr	r1, [pc, #48]	; (80007fc <HAL_ADC_ConfigChannel+0x134>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007ca:	429d      	cmp	r5, r3
    ADC->CCR |= ADC_CCR_TSVREFE;
 80007cc:	684a      	ldr	r2, [r1, #4]
 80007ce:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007d2:	604a      	str	r2, [r1, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80007d4:	d1af      	bne.n	8000736 <HAL_ADC_ConfigChannel+0x6e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <HAL_ADC_ConfigChannel+0x138>)
 80007d8:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <HAL_ADC_ConfigChannel+0x13c>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80007e0:	230a      	movs	r3, #10
 80007e2:	4353      	muls	r3, r2
        counter--;
 80007e4:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80007e6:	9b01      	ldr	r3, [sp, #4]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0a4      	beq.n	8000736 <HAL_ADC_ConfigChannel+0x6e>
        counter--;
 80007ec:	9b01      	ldr	r3, [sp, #4]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	e7f8      	b.n	80007e4 <HAL_ADC_ConfigChannel+0x11c>
 80007f2:	bf00      	nop
 80007f4:	10000012 	.word	0x10000012
 80007f8:	40012000 	.word	0x40012000
 80007fc:	40012300 	.word	0x40012300
 8000800:	2000002c 	.word	0x2000002c
 8000804:	000f4240 	.word	0x000f4240

08000808 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800080a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800080e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000816:	041b      	lsls	r3, r3, #16
 8000818:	0c1b      	lsrs	r3, r3, #16
 800081a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800081e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000822:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000824:	60d3      	str	r3, [r2, #12]
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	68dc      	ldr	r4, [r3, #12]
 8000832:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000836:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800083a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083c:	2b04      	cmp	r3, #4
 800083e:	bf28      	it	cs
 8000840:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000842:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000848:	bf8c      	ite	hi
 800084a:	3c03      	subhi	r4, #3
 800084c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800084e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 8000852:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	f103 33ff 	add.w	r3, r3, #4294967295
 8000858:	ea01 0103 	and.w	r1, r1, r3
 800085c:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000860:	fa05 f404 	lsl.w	r4, r5, r4
 8000864:	f104 34ff 	add.w	r4, r4, #4294967295
 8000868:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	ea42 0201 	orr.w	r2, r2, r1
 8000870:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 8000874:	da05      	bge.n	8000882 <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000876:	f000 000f 	and.w	r0, r0, #15
 800087a:	b2d2      	uxtb	r2, r2
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_NVIC_SetPriority+0x6c>)
 800087e:	541a      	strb	r2, [r3, r0]
 8000880:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000882:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000886:	b2d2      	uxtb	r2, r2
 8000888:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800088c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000890:	bd30      	pop	{r4, r5, pc}
 8000892:	bf00      	nop
 8000894:	e000ed00 	.word	0xe000ed00
 8000898:	e000ed14 	.word	0xe000ed14

0800089c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800089c:	0942      	lsrs	r2, r0, #5
 800089e:	2301      	movs	r3, #1
 80008a0:	f000 001f 	and.w	r0, r0, #31
 80008a4:	fa03 f000 	lsl.w	r0, r3, r0
 80008a8:	4b01      	ldr	r3, [pc, #4]	; (80008b0 <HAL_NVIC_EnableIRQ+0x14>)
 80008aa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80008ae:	4770      	bx	lr
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b4:	3801      	subs	r0, #1
 80008b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80008ba:	d20a      	bcs.n	80008d2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	21f0      	movs	r1, #240	; 0xf0
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008c2:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ca:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008cc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008d2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000e010 	.word	0xe000e010
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80008e0:	4b04      	ldr	r3, [pc, #16]	; (80008f4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80008e2:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	bf0c      	ite	eq
 80008e8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80008ec:	f022 0204 	bicne.w	r2, r2, #4
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	4770      	bx	lr
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80008f8:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80008fa:	4604      	mov	r4, r0
 80008fc:	b908      	cbnz	r0, 8000902 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80008fe:	2001      	movs	r0, #1
 8000900:	bd10      	pop	{r4, pc}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8000902:	7f43      	ldrb	r3, [r0, #29]
 8000904:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000908:	b913      	cbnz	r3, 8000910 <HAL_CRC_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800090a:	7702      	strb	r2, [r0, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800090c:	f007 ff86 	bl	800881c <HAL_CRC_MspInit>
  }
  
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8000910:	2302      	movs	r3, #2
 8000912:	7763      	strb	r3, [r4, #29]
  
  /* check whether or not non-default generating polynomial has been 
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse)); 
  if(hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000914:	7923      	ldrb	r3, [r4, #4]
 8000916:	b9e3      	cbnz	r3, 8000952 <HAL_CRC_Init+0x5a>
  {
    /* initialize IP with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_CRC_Init+0x70>)
 800091c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	f022 0218 	bic.w	r2, r2, #24
 8000924:	609a      	str	r2, [r3, #8]
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if(hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000926:	7962      	ldrb	r2, [r4, #5]
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	b9d2      	cbnz	r2, 8000962 <HAL_CRC_Init+0x6a>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 800092c:	f04f 32ff 	mov.w	r2, #4294967295
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000930:	611a      	str	r2, [r3, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
  
  /* Return function status */
  return HAL_OK;
 8000932:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8000934:	689a      	ldr	r2, [r3, #8]
 8000936:	6961      	ldr	r1, [r4, #20]
 8000938:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800093c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800093e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8000940:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000948:	430a      	orrs	r2, r1
 800094a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800094c:	2301      	movs	r3, #1
 800094e:	7763      	strb	r3, [r4, #29]
}
 8000950:	bd10      	pop	{r4, pc}
    if(HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000952:	68e2      	ldr	r2, [r4, #12]
 8000954:	4620      	mov	r0, r4
 8000956:	68a1      	ldr	r1, [r4, #8]
 8000958:	f000 f808 	bl	800096c <HAL_CRCEx_Polynomial_Set>
 800095c:	2800      	cmp	r0, #0
 800095e:	d0e2      	beq.n	8000926 <HAL_CRC_Init+0x2e>
 8000960:	e7cd      	b.n	80008fe <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000962:	6922      	ldr	r2, [r4, #16]
 8000964:	e7e4      	b.n	8000930 <HAL_CRC_Init+0x38>
 8000966:	bf00      	nop
 8000968:	04c11db7 	.word	0x04c11db7

0800096c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800096c:	231f      	movs	r3, #31
{
 800096e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & ((uint32_t)(0x1) << msb)) == 0) && (msb-- > 0))
 8000970:	fa21 f403 	lsr.w	r4, r1, r3
 8000974:	07e4      	lsls	r4, r4, #31
 8000976:	d40a      	bmi.n	800098e <HAL_CRCEx_Polynomial_Set+0x22>
 8000978:	f113 33ff 	adds.w	r3, r3, #4294967295
 800097c:	d2f8      	bcs.n	8000970 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800097e:	2a10      	cmp	r2, #16
 8000980:	d003      	beq.n	800098a <HAL_CRCEx_Polynomial_Set+0x1e>
 8000982:	2a18      	cmp	r2, #24
 8000984:	d001      	beq.n	800098a <HAL_CRCEx_Polynomial_Set+0x1e>
 8000986:	2a08      	cmp	r2, #8
 8000988:	d10b      	bne.n	80009a2 <HAL_CRCEx_Polynomial_Set+0x36>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      { 
        return  HAL_ERROR;
 800098a:	2001      	movs	r0, #1
 800098c:	bd10      	pop	{r4, pc}
  switch (PolyLength)
 800098e:	2a10      	cmp	r2, #16
 8000990:	d010      	beq.n	80009b4 <HAL_CRCEx_Polynomial_Set+0x48>
 8000992:	2a18      	cmp	r2, #24
 8000994:	d003      	beq.n	800099e <HAL_CRCEx_Polynomial_Set+0x32>
 8000996:	2a08      	cmp	r2, #8
 8000998:	d103      	bne.n	80009a2 <HAL_CRCEx_Polynomial_Set+0x36>
      {
        return  HAL_ERROR;
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800099a:	2b0f      	cmp	r3, #15
 800099c:	e000      	b.n	80009a0 <HAL_CRCEx_Polynomial_Set+0x34>
      if (msb >= HAL_CRC_LENGTH_7B)
 800099e:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80009a0:	d8f3      	bhi.n	800098a <HAL_CRCEx_Polynomial_Set+0x1e>
  default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 80009a2:	6800      	ldr	r0, [r0, #0]
 80009a4:	6141      	str	r1, [r0, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 80009a6:	6883      	ldr	r3, [r0, #8]
 80009a8:	f023 0318 	bic.w	r3, r3, #24
 80009ac:	431a      	orrs	r2, r3
 80009ae:	6082      	str	r2, [r0, #8]
  
  /* Return function status */
  return HAL_OK;
 80009b0:	2000      	movs	r0, #0
 80009b2:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80009b4:	2b07      	cmp	r3, #7
 80009b6:	e7f3      	b.n	80009a0 <HAL_CRCEx_Polynomial_Set+0x34>

080009b8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 80009b8:	b538      	push	{r3, r4, r5, lr}
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80009ba:	4604      	mov	r4, r0
 80009bc:	2800      	cmp	r0, #0
 80009be:	d03d      	beq.n	8000a3c <HAL_DCMI_Init+0x84>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80009c0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80009c4:	b90b      	cbnz	r3, 80009ca <HAL_DCMI_Init+0x12>
  {
    /* Init the low level hardware */
    HAL_DCMI_MspInit(hdcmi);
 80009c6:	f007 ff3f 	bl	8008848 <HAL_DCMI_MspInit>
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80009ca:	6822      	ldr	r2, [r4, #0]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 80009cc:	2302      	movs	r3, #2
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80009ce:	68e5      	ldr	r5, [r4, #12]
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 80009d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <HAL_DCMI_Init+0x88>)
 80009d6:	6811      	ldr	r1, [r2, #0]
 80009d8:	400b      	ands	r3, r1
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80009da:	6861      	ldr	r1, [r4, #4]
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80009dc:	6013      	str	r3, [r2, #0]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart);
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80009de:	2910      	cmp	r1, #16
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80009e0:	6963      	ldr	r3, [r4, #20]
 80009e2:	6810      	ldr	r0, [r2, #0]
 80009e4:	ea43 0301 	orr.w	r3, r3, r1
 80009e8:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80009ec:	6925      	ldr	r5, [r4, #16]
 80009ee:	ea43 0305 	orr.w	r3, r3, r5
 80009f2:	68a5      	ldr	r5, [r4, #8]
 80009f4:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80009f8:	69a5      	ldr	r5, [r4, #24]
 80009fa:	ea43 0305 	orr.w	r3, r3, r5
 80009fe:	6a25      	ldr	r5, [r4, #32]
 8000a00:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8000a04:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8000a06:	ea43 0305 	orr.w	r3, r3, r5
 8000a0a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000a0c:	ea43 0305 	orr.w	r3, r3, r5
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8000a10:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000a12:	ea43 0305 	orr.w	r3, r3, r5
 8000a16:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000a18:	ea43 0305 	orr.w	r3, r3, r5
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8000a1c:	ea43 0300 	orr.w	r3, r3, r0
 8000a20:	6013      	str	r3, [r2, #0]
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8000a22:	d101      	bne.n	8000a28 <HAL_DCMI_Init+0x70>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8000a24:	69e3      	ldr	r3, [r4, #28]
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8000a26:	6193      	str	r3, [r2, #24]
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000a28:	68d3      	ldr	r3, [r2, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000a2a:	2000      	movs	r0, #0
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8000a2c:	f043 031e 	orr.w	r3, r3, #30
 8000a30:	60d3      	str	r3, [r2, #12]
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000a32:	2301      	movs	r3, #1
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8000a34:	64e0      	str	r0, [r4, #76]	; 0x4c
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8000a36:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8000a3a:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8000a3c:	2001      	movs	r0, #1
}
 8000a3e:	bd38      	pop	{r3, r4, r5, pc}
 8000a40:	ffe0f007 	.word	0xffe0f007

08000a44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a44:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000a46:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000a4a:	2c01      	cmp	r4, #1
 8000a4c:	d035      	beq.n	8000aba <HAL_DMA_Start_IT+0x76>
 8000a4e:	2401      	movs	r4, #1
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a50:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8000a52:	2500      	movs	r5, #0
  __HAL_LOCK(hdma);
 8000a54:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a58:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000a5c:	2c01      	cmp	r4, #1
 8000a5e:	f04f 0402 	mov.w	r4, #2
 8000a62:	d128      	bne.n	8000ab6 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a64:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a68:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a6a:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a6c:	6825      	ldr	r5, [r4, #0]
 8000a6e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000a72:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000a74:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a76:	6883      	ldr	r3, [r0, #8]
 8000a78:	2b40      	cmp	r3, #64	; 0x40
 8000a7a:	d119      	bne.n	8000ab0 <HAL_DMA_Start_IT+0x6c>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8000a7c:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8000a7e:	60e1      	str	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a80:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000a82:	233f      	movs	r3, #63	; 0x3f
 8000a84:	4093      	lsls	r3, r2
 8000a86:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000a88:	6823      	ldr	r3, [r4, #0]
 8000a8a:	f043 0316 	orr.w	r3, r3, #22
 8000a8e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000a90:	6963      	ldr	r3, [r4, #20]
 8000a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a96:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000a98:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000a9a:	b11b      	cbz	r3, 8000aa4 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000a9c:	6823      	ldr	r3, [r4, #0]
 8000a9e:	f043 0308 	orr.w	r3, r3, #8
 8000aa2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000aa4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000aa6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6023      	str	r3, [r4, #0]
 8000aae:	bd70      	pop	{r4, r5, r6, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000ab0:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000ab2:	60e2      	str	r2, [r4, #12]
 8000ab4:	e7e4      	b.n	8000a80 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8000ab6:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000aba:	2002      	movs	r0, #2
}
 8000abc:	bd70      	pop	{r4, r5, r6, pc}

08000abe <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8000abe:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8000ac0:	4770      	bx	lr

08000ac2 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8000ac2:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8000ac4:	4604      	mov	r4, r0
 8000ac6:	b330      	cbz	r0, 8000b16 <HAL_DMA2D_Init+0x54>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000ac8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000acc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ad0:	b91b      	cbnz	r3, 8000ada <HAL_DMA2D_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000ad2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000ad6:	f007 ff0f 	bl	80088f8 <HAL_DMA2D_MspInit>
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000ada:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8000adc:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000ade:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000ae0:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8000ae2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000ae6:	6813      	ldr	r3, [r2, #0]
 8000ae8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000aec:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000aee:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000af0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000af2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000af4:	f023 0307 	bic.w	r3, r3, #7
 8000af8:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000afa:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000afc:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8000afe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b00:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000b08:	430b      	orrs	r3, r1
 8000b0a:	6413      	str	r3, [r2, #64]	; 0x40

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000b0c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000b0e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000b10:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8000b14:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000b16:	2001      	movs	r0, #1
}
 8000b18:	bd10      	pop	{r4, pc}

08000b1a <HAL_DMA2D_LineEventCallback>:
 8000b1a:	4770      	bx	lr

08000b1c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8000b1c:	4770      	bx	lr

08000b1e <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000b1e:	6803      	ldr	r3, [r0, #0]
{
 8000b20:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000b22:	685e      	ldr	r6, [r3, #4]
{
 8000b24:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000b26:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8000b28:	07f2      	lsls	r2, r6, #31
 8000b2a:	d514      	bpl.n	8000b56 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != RESET)    
 8000b2c:	05e9      	lsls	r1, r5, #23
 8000b2e:	d512      	bpl.n	8000b56 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);  
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b36:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000b38:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000b3a:	f042 0201 	orr.w	r2, r2, #1
 8000b3e:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000b40:	2201      	movs	r2, #1
 8000b42:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000b44:	2304      	movs	r3, #4
 8000b46:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8000b50:	6943      	ldr	r3, [r0, #20]
 8000b52:	b103      	cbz	r3, 8000b56 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8000b54:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8000b56:	06b2      	lsls	r2, r6, #26
 8000b58:	d516      	bpl.n	8000b88 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != RESET)    
 8000b5a:	04ab      	lsls	r3, r5, #18
 8000b5c:	d514      	bpl.n	8000b88 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000b5e:	6823      	ldr	r3, [r4, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b66:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000b68:	2220      	movs	r2, #32
 8000b6a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;    
 8000b6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000b74:	2304      	movs	r3, #4
 8000b76:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8000b80:	6963      	ldr	r3, [r4, #20]
 8000b82:	b10b      	cbz	r3, 8000b88 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8000b84:	4620      	mov	r0, r4
 8000b86:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8000b88:	0730      	lsls	r0, r6, #28
 8000b8a:	d516      	bpl.n	8000bba <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != RESET)    
 8000b8c:	0529      	lsls	r1, r5, #20
 8000b8e:	d514      	bpl.n	8000bba <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b98:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8000b9a:	2208      	movs	r2, #8
 8000b9c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;    
 8000b9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8000bac:	2300      	movs	r3, #0
 8000bae:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8000bb2:	6963      	ldr	r3, [r4, #20]
 8000bb4:	b10b      	cbz	r3, 8000bba <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8000bba:	0772      	lsls	r2, r6, #29
 8000bbc:	d50b      	bpl.n	8000bd6 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != RESET)    
 8000bbe:	056b      	lsls	r3, r5, #21
 8000bc0:	d509      	bpl.n	8000bd6 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000bc2:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8000bc4:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bcc:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8000bce:	2204      	movs	r2, #4
 8000bd0:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8000bd2:	f7ff ffa2 	bl	8000b1a <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8000bd6:	07b0      	lsls	r0, r6, #30
 8000bd8:	d514      	bpl.n	8000c04 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != RESET)    
 8000bda:	05a9      	lsls	r1, r5, #22
 8000bdc:	d512      	bpl.n	8000c04 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8000bde:	6823      	ldr	r3, [r4, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000be6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8000be8:	2202      	movs	r2, #2
 8000bea:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 8000bec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000bee:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 8000bfc:	6923      	ldr	r3, [r4, #16]
 8000bfe:	b10b      	cbz	r3, 8000c04 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8000c00:	4620      	mov	r0, r4
 8000c02:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 8000c04:	06f2      	lsls	r2, r6, #27
 8000c06:	d513      	bpl.n	8000c30 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != RESET)    
 8000c08:	04eb      	lsls	r3, r5, #19
 8000c0a:	d511      	bpl.n	8000c30 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000c0c:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 8000c0e:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c16:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8000c18:	2210      	movs	r2, #16
 8000c1a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 8000c1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000c1e:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8000c20:	2301      	movs	r3, #1
 8000c22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);       
 8000c26:	2300      	movs	r3, #0
 8000c28:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 8000c2c:	f7ff ff76 	bl	8000b1c <HAL_DMA2D_CLUTLoadingCpltCallback>
 8000c30:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c34 <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8000c34:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	f04f 0302 	mov.w	r3, #2
{ 
 8000c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8000c40:	d037      	beq.n	8000cb2 <HAL_DMA2D_ConfigLayer+0x7e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000c42:	010e      	lsls	r6, r1, #4
  __HAL_LOCK(hdma2d);
 8000c44:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8000c46:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000c4a:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 8000c4c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8000c50:	4f1c      	ldr	r7, [pc, #112]	; (8000cc4 <HAL_DMA2D_ConfigLayer+0x90>)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000c52:	69dd      	ldr	r5, [r3, #28]
 8000c54:	6a1a      	ldr	r2, [r3, #32]
 8000c56:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000c58:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000c5c:	3d09      	subs	r5, #9
 8000c5e:	6803      	ldr	r3, [r0, #0]
 8000c60:	2d01      	cmp	r5, #1
 8000c62:	d80f      	bhi.n	8000c84 <HAL_DMA2D_ConfigLayer+0x50>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000c64:	f004 4e7f 	and.w	lr, r4, #4278190080	; 0xff000000
 8000c68:	ea4e 0202 	orr.w	r2, lr, r2
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8000c6c:	b969      	cbnz	r1, 8000c8a <HAL_DMA2D_ConfigLayer+0x56>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000c6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000c70:	4039      	ands	r1, r7
 8000c72:	430a      	orrs	r2, r1
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000c76:	6982      	ldr	r2, [r0, #24]
 8000c78:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000c7a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000c7c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
 8000c82:	e010      	b.n	8000ca6 <HAL_DMA2D_ConfigLayer+0x72>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000c84:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == 0)
 8000c88:	b1a9      	cbz	r1, 8000cb6 <HAL_DMA2D_ConfigLayer+0x82>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000c8a:	69d9      	ldr	r1, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8000c8c:	4406      	add	r6, r0
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000c8e:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000c90:	ea01 0107 	and.w	r1, r1, r7
 8000c94:	ea42 0201 	orr.w	r2, r2, r1
 8000c98:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8000c9a:	69b2      	ldr	r2, [r6, #24]
 8000c9c:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000c9e:	d802      	bhi.n	8000ca6 <HAL_DMA2D_ConfigLayer+0x72>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8000ca0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8000ca4:	621c      	str	r4, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8000cac:	2300      	movs	r3, #0
 8000cae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000cb6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000cb8:	4039      	ands	r1, r7
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000cbe:	6982      	ldr	r2, [r0, #24]
 8000cc0:	619a      	str	r2, [r3, #24]
 8000cc2:	e7f0      	b.n	8000ca6 <HAL_DMA2D_ConfigLayer+0x72>
 8000cc4:	00fcfff0 	.word	0x00fcfff0

08000cc8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000ccc:	b129      	cbz	r1, 8000cda <ETH_MACDMAConfig+0x12>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000cce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cd2:	60c3      	str	r3, [r0, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8000cd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cd8:	6083      	str	r3, [r0, #8]
  macinit.Jabber = ETH_JABBER_ENABLE;
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000cda:	69e3      	ldr	r3, [r4, #28]
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
  macinit.VLANTagIdentifier = 0x0;
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8000cdc:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000cde:	2b00      	cmp	r3, #0
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 8000ce0:	68e0      	ldr	r0, [r4, #12]
 8000ce2:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8000ce4:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000ce6:	bf08      	it	eq
 8000ce8:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 8000cec:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000cf0:	482e      	ldr	r0, [pc, #184]	; (8000dac <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000cf2:	bf18      	it	ne
 8000cf4:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000cf6:	4028      	ands	r0, r5
 8000cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfc:	4303      	orrs	r3, r0
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000cfe:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000d00:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000d02:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000d04:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d06:	f7ff fc29 	bl	800055c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000d0a:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000d0c:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d0e:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8000d10:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000d12:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8000d14:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d16:	f7ff fc21 	bl	800055c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000d1a:	6823      	ldr	r3, [r4, #0]
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d1c:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8000d1e:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000d20:	2500      	movs	r5, #0
 8000d22:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000d24:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8000d26:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000d28:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000d2c:	0412      	lsls	r2, r2, #16
 8000d2e:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8000d30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000d34:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8000d36:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d38:	f7ff fc10 	bl	800055c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000d3c:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d3e:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8000d40:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8000d42:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8000d44:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d46:	f7ff fc09 	bl	800055c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000d4a:	6822      	ldr	r2, [r4, #0]
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d4c:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8000d50:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8000d52:	f241 0518 	movw	r5, #4120	; 0x1018
 8000d56:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8000d58:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8000d5a:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8000d62:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8000d64:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d66:	f7ff fbf9 	bl	800055c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8000d6a:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d6c:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000d6e:	4a11      	ldr	r2, [pc, #68]	; (8000db4 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 8000d70:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8000d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d76:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8000d78:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8000d7a:	f7ff fbef 	bl	800055c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8000d7e:	6822      	ldr	r2, [r4, #0]
 8000d80:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8000d84:	601d      	str	r5, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000d86:	69a3      	ldr	r3, [r4, #24]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d107      	bne.n	8000d9c <ETH_MACDMAConfig+0xd4>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000d8c:	f241 011c 	movw	r1, #4124	; 0x101c
 8000d90:	5853      	ldr	r3, [r2, r1]
 8000d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9a:	5053      	str	r3, [r2, r1]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000d9c:	6963      	ldr	r3, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000d9e:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8000da0:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000da2:	6011      	str	r1, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000da4:	681a      	ldr	r2, [r3, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <ETH_MACDMAConfig+0xf4>)
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	bd70      	pop	{r4, r5, r6, pc}
 8000dac:	ff20810f 	.word	0xff20810f
 8000db0:	f8de3f23 	.word	0xf8de3f23
 8000db4:	02c12080 	.word	0x02c12080
 8000db8:	40028040 	.word	0x40028040
 8000dbc:	40028044 	.word	0x40028044

08000dc0 <HAL_ETH_ReadPHYRegister>:
{
 8000dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000dc2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000dc6:	4605      	mov	r5, r0
 8000dc8:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000dca:	2b82      	cmp	r3, #130	; 0x82
 8000dcc:	d030      	beq.n	8000e30 <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 8000dce:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000dd0:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000dd2:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000dd4:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000dd8:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000dda:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000dde:	f003 011c 	and.w	r1, r3, #28
 8000de2:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000de4:	8a04      	ldrh	r4, [r0, #16]
 8000de6:	02e4      	lsls	r4, r4, #11
 8000de8:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000dea:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000dec:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000df0:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000df2:	f7ff fbad 	bl	8000550 <HAL_GetTick>
 8000df6:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000df8:	f014 0001 	ands.w	r0, r4, #1
 8000dfc:	d107      	bne.n	8000e0e <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000dfe:	682b      	ldr	r3, [r5, #0]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000e06:	2301      	movs	r3, #1
 8000e08:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000e0e:	f7ff fb9f 	bl	8000550 <HAL_GetTick>
 8000e12:	1bc0      	subs	r0, r0, r7
 8000e14:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000e18:	d307      	bcc.n	8000e2a <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000e1a:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000e1c:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000e1e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000e22:	2300      	movs	r3, #0
 8000e24:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000e2a:	682b      	ldr	r3, [r5, #0]
 8000e2c:	691c      	ldr	r4, [r3, #16]
 8000e2e:	e7e3      	b.n	8000df8 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000e30:	2002      	movs	r0, #2
}
 8000e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000e34 <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000e34:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000e38:	2b42      	cmp	r3, #66	; 0x42
{
 8000e3a:	b570      	push	{r4, r5, r6, lr}
 8000e3c:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000e3e:	d02e      	beq.n	8000e9e <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000e40:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000e42:	018c      	lsls	r4, r1, #6
 8000e44:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000e46:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000e4a:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8000e4e:	6803      	ldr	r3, [r0, #0]
 8000e50:	f044 0403 	orr.w	r4, r4, #3
 8000e54:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000e56:	f000 001c 	and.w	r0, r0, #28
 8000e5a:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000e5c:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000e5e:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000e60:	02e4      	lsls	r4, r4, #11
 8000e62:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000e64:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000e66:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000e68:	f7ff fb72 	bl	8000550 <HAL_GetTick>
 8000e6c:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000e6e:	f014 0001 	ands.w	r0, r4, #1
 8000e72:	d103      	bne.n	8000e7c <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000e74:	2301      	movs	r3, #1
 8000e76:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000e7a:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000e7c:	f7ff fb68 	bl	8000550 <HAL_GetTick>
 8000e80:	1b80      	subs	r0, r0, r6
 8000e82:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000e86:	d307      	bcc.n	8000e98 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000e88:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000e8a:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000e8c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000e90:	2300      	movs	r3, #0
 8000e92:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8000e96:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000e98:	682b      	ldr	r3, [r5, #0]
 8000e9a:	691c      	ldr	r4, [r3, #16]
 8000e9c:	e7e7      	b.n	8000e6e <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000e9e:	2002      	movs	r0, #2
}
 8000ea0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ea4 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000ea4:	2300      	movs	r3, #0
{
 8000ea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000ea8:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000eaa:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000eac:	2800      	cmp	r0, #0
 8000eae:	f000 80dd 	beq.w	800106c <HAL_ETH_Init+0x1c8>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000eb2:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000eb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eba:	b91b      	cbnz	r3, 8000ec4 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000ebc:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000ec0:	f007 fd38 	bl	8008934 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec4:	4b6a      	ldr	r3, [pc, #424]	; (8001070 <HAL_ETH_Init+0x1cc>)
 8000ec6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ec8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ecc:	645a      	str	r2, [r3, #68]	; 0x44
 8000ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000ed8:	4b66      	ldr	r3, [pc, #408]	; (8001074 <HAL_ETH_Init+0x1d0>)
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000ee0:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	6a21      	ldr	r1, [r4, #32]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000eea:	6823      	ldr	r3, [r4, #0]
 8000eec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	f042 0201 	orr.w	r2, r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000ef8:	f7ff fb2a 	bl	8000550 <HAL_GetTick>
 8000efc:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000f04:	6812      	ldr	r2, [r2, #0]
 8000f06:	07d0      	lsls	r0, r2, #31
 8000f08:	d41d      	bmi.n	8000f46 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8000f0a:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000f0c:	f001 fb32 	bl	8002574 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000f10:	4b59      	ldr	r3, [pc, #356]	; (8001078 <HAL_ETH_Init+0x1d4>)
 8000f12:	4a5a      	ldr	r2, [pc, #360]	; (800107c <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000f14:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000f18:	4403      	add	r3, r0
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d822      	bhi.n	8000f64 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000f1e:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000f22:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000f24:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000f2c:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000f2e:	f7ff ff81 	bl	8000e34 <HAL_ETH_WritePHYRegister>
 8000f32:	4605      	mov	r5, r0
 8000f34:	b368      	cbz	r0, 8000f92 <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8000f36:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4620      	mov	r0, r4
 8000f3c:	f7ff fec4 	bl	8000cc8 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000f40:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000f44:	e00b      	b.n	8000f5e <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000f46:	f7ff fb03 	bl	8000550 <HAL_GetTick>
 8000f4a:	1b40      	subs	r0, r0, r5
 8000f4c:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000f50:	d9d5      	bls.n	8000efe <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000f52:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000f54:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000f56:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000f5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000f5e:	4628      	mov	r0, r5
 8000f60:	b003      	add	sp, #12
 8000f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000f64:	4b46      	ldr	r3, [pc, #280]	; (8001080 <HAL_ETH_Init+0x1dc>)
 8000f66:	4a47      	ldr	r2, [pc, #284]	; (8001084 <HAL_ETH_Init+0x1e0>)
 8000f68:	4403      	add	r3, r0
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d802      	bhi.n	8000f74 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000f6e:	f045 050c 	orr.w	r5, r5, #12
 8000f72:	e7d6      	b.n	8000f22 <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000f74:	4b44      	ldr	r3, [pc, #272]	; (8001088 <HAL_ETH_Init+0x1e4>)
 8000f76:	4a45      	ldr	r2, [pc, #276]	; (800108c <HAL_ETH_Init+0x1e8>)
 8000f78:	4403      	add	r3, r0
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d9d1      	bls.n	8000f22 <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000f7e:	4b44      	ldr	r3, [pc, #272]	; (8001090 <HAL_ETH_Init+0x1ec>)
 8000f80:	4a44      	ldr	r2, [pc, #272]	; (8001094 <HAL_ETH_Init+0x1f0>)
 8000f82:	4403      	add	r3, r0
 8000f84:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000f86:	bf94      	ite	ls
 8000f88:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000f8c:	f045 0510 	orrhi.w	r5, r5, #16
 8000f90:	e7c7      	b.n	8000f22 <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000f92:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000f96:	f7ff fae1 	bl	800055c <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000f9a:	6863      	ldr	r3, [r4, #4]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d053      	beq.n	8001048 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8000fa0:	f7ff fad6 	bl	8000550 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000fa4:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000fa8:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000faa:	466a      	mov	r2, sp
 8000fac:	2101      	movs	r1, #1
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f7ff ff06 	bl	8000dc0 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000fb4:	f7ff facc 	bl	8000550 <HAL_GetTick>
 8000fb8:	1b80      	subs	r0, r0, r6
 8000fba:	42b8      	cmp	r0, r7
 8000fbc:	d90b      	bls.n	8000fd6 <HAL_ETH_Init+0x132>
        ETH_MACDMAConfig(heth, err);
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	4620      	mov	r0, r4
 8000fc2:	f7ff fe81 	bl	8000cc8 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000fc6:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000fc8:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000fca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000fd4:	e7c3      	b.n	8000f5e <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000fd6:	9b00      	ldr	r3, [sp, #0]
 8000fd8:	0759      	lsls	r1, r3, #29
 8000fda:	d5e6      	bpl.n	8000faa <HAL_ETH_Init+0x106>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000fdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4620      	mov	r0, r4
 8000fe4:	f7ff ff26 	bl	8000e34 <HAL_ETH_WritePHYRegister>
 8000fe8:	2800      	cmp	r0, #0
 8000fea:	d1a4      	bne.n	8000f36 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000fec:	f7ff fab0 	bl	8000550 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000ff0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ff4:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ff6:	466a      	mov	r2, sp
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	f7ff fee0 	bl	8000dc0 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001000:	f7ff faa6 	bl	8000550 <HAL_GetTick>
 8001004:	1b80      	subs	r0, r0, r6
 8001006:	42b8      	cmp	r0, r7
 8001008:	d8d9      	bhi.n	8000fbe <HAL_ETH_Init+0x11a>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800100a:	9b00      	ldr	r3, [sp, #0]
 800100c:	069a      	lsls	r2, r3, #26
 800100e:	d5f2      	bpl.n	8000ff6 <HAL_ETH_Init+0x152>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001010:	466a      	mov	r2, sp
 8001012:	2110      	movs	r1, #16
 8001014:	4620      	mov	r0, r4
 8001016:	f7ff fed3 	bl	8000dc0 <HAL_ETH_ReadPHYRegister>
 800101a:	2800      	cmp	r0, #0
 800101c:	d18b      	bne.n	8000f36 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800101e:	9b00      	ldr	r3, [sp, #0]
 8001020:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001024:	bf18      	it	ne
 8001026:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800102a:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M; 
 800102c:	bf4c      	ite	mi
 800102e:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8001030:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001034:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8001036:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8001038:	2100      	movs	r1, #0
 800103a:	4620      	mov	r0, r4
 800103c:	f7ff fe44 	bl	8000cc8 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8001040:	2301      	movs	r3, #1
 8001042:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8001046:	e78a      	b.n	8000f5e <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001048:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800104a:	4629      	mov	r1, r5
 800104c:	68e2      	ldr	r2, [r4, #12]
 800104e:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001050:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001052:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8001056:	b292      	uxth	r2, r2
 8001058:	f7ff feec 	bl	8000e34 <HAL_ETH_WritePHYRegister>
 800105c:	2800      	cmp	r0, #0
 800105e:	f47f af6a 	bne.w	8000f36 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8001062:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001066:	f7ff fa79 	bl	800055c <HAL_Delay>
 800106a:	e7e5      	b.n	8001038 <HAL_ETH_Init+0x194>
    return HAL_ERROR;
 800106c:	2501      	movs	r5, #1
 800106e:	e776      	b.n	8000f5e <HAL_ETH_Init+0xba>
 8001070:	40023800 	.word	0x40023800
 8001074:	40013800 	.word	0x40013800
 8001078:	feced300 	.word	0xfeced300
 800107c:	00e4e1bf 	.word	0x00e4e1bf
 8001080:	fde9f140 	.word	0xfde9f140
 8001084:	017d783f 	.word	0x017d783f
 8001088:	fc6c7900 	.word	0xfc6c7900
 800108c:	026259ff 	.word	0x026259ff
 8001090:	fa0a1f00 	.word	0xfa0a1f00
 8001094:	02faf07f 	.word	0x02faf07f

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109c:	680b      	ldr	r3, [r1, #0]
{
 800109e:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001264 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a4:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010a6:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a8:	4a6c      	ldr	r2, [pc, #432]	; (800125c <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010aa:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8001268 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 80010ae:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b2:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 80010b4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80010bc:	45b6      	cmp	lr, r6
 80010be:	f040 80b3 	bne.w	8001228 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c2:	684c      	ldr	r4, [r1, #4]
 80010c4:	f024 0710 	bic.w	r7, r4, #16
 80010c8:	2f02      	cmp	r7, #2
 80010ca:	d116      	bne.n	80010fa <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80010cc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010d0:	f003 0b07 	and.w	fp, r3, #7
 80010d4:	f04f 0c0f 	mov.w	ip, #15
 80010d8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80010dc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80010e0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010e4:	fa0c fc0b 	lsl.w	ip, ip, fp
 80010e8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010ec:	690d      	ldr	r5, [r1, #16]
 80010ee:	fa05 f50b 	lsl.w	r5, r5, fp
 80010f2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 80010f6:	f8ca 5020 	str.w	r5, [sl, #32]
 80010fa:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010fe:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001100:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001104:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001108:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800110c:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800110e:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001112:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001114:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001116:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800111a:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 800111e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001122:	d811      	bhi.n	8001148 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001124:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001126:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 800112a:	68cf      	ldr	r7, [r1, #12]
 800112c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001130:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001134:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001136:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001138:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800113c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001140:	409f      	lsls	r7, r3
 8001142:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001146:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001148:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800114a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800114c:	688f      	ldr	r7, [r1, #8]
 800114e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001152:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001154:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001156:	00e5      	lsls	r5, r4, #3
 8001158:	d566      	bpl.n	8001228 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 800115e:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001162:	f003 0e03 	and.w	lr, r3, #3
 8001166:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 800116e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001172:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 800117a:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 800117e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8001182:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8001186:	9503      	str	r5, [sp, #12]
 8001188:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800118a:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 800118e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001192:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001196:	4d32      	ldr	r5, [pc, #200]	; (8001260 <HAL_GPIO_Init+0x1c8>)
 8001198:	42a8      	cmp	r0, r5
 800119a:	d04c      	beq.n	8001236 <HAL_GPIO_Init+0x19e>
 800119c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011a0:	42a8      	cmp	r0, r5
 80011a2:	d04a      	beq.n	800123a <HAL_GPIO_Init+0x1a2>
 80011a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011a8:	42a8      	cmp	r0, r5
 80011aa:	d048      	beq.n	800123e <HAL_GPIO_Init+0x1a6>
 80011ac:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011b0:	42a8      	cmp	r0, r5
 80011b2:	d046      	beq.n	8001242 <HAL_GPIO_Init+0x1aa>
 80011b4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011b8:	42a8      	cmp	r0, r5
 80011ba:	d044      	beq.n	8001246 <HAL_GPIO_Init+0x1ae>
 80011bc:	4548      	cmp	r0, r9
 80011be:	d044      	beq.n	800124a <HAL_GPIO_Init+0x1b2>
 80011c0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80011c4:	42a8      	cmp	r0, r5
 80011c6:	d042      	beq.n	800124e <HAL_GPIO_Init+0x1b6>
 80011c8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011cc:	42a8      	cmp	r0, r5
 80011ce:	d040      	beq.n	8001252 <HAL_GPIO_Init+0x1ba>
 80011d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011d4:	42a8      	cmp	r0, r5
 80011d6:	d03e      	beq.n	8001256 <HAL_GPIO_Init+0x1be>
 80011d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80011dc:	42a8      	cmp	r0, r5
 80011de:	bf14      	ite	ne
 80011e0:	250a      	movne	r5, #10
 80011e2:	2509      	moveq	r5, #9
 80011e4:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011e8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011ec:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80011f0:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 80011f6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	bf0c      	ite	eq
 80011fa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80011fc:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011fe:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8001202:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001204:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001206:	bf0c      	ite	eq
 8001208:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800120a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800120c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8001210:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001212:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001214:	bf0c      	ite	eq
 8001216:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001218:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800121a:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 800121c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800121e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001220:	bf54      	ite	pl
 8001222:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001224:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001226:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001228:	3301      	adds	r3, #1
 800122a:	2b10      	cmp	r3, #16
 800122c:	f47f af3f 	bne.w	80010ae <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001230:	b005      	add	sp, #20
 8001232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001236:	2500      	movs	r5, #0
 8001238:	e7d4      	b.n	80011e4 <HAL_GPIO_Init+0x14c>
 800123a:	2501      	movs	r5, #1
 800123c:	e7d2      	b.n	80011e4 <HAL_GPIO_Init+0x14c>
 800123e:	2502      	movs	r5, #2
 8001240:	e7d0      	b.n	80011e4 <HAL_GPIO_Init+0x14c>
 8001242:	2503      	movs	r5, #3
 8001244:	e7ce      	b.n	80011e4 <HAL_GPIO_Init+0x14c>
 8001246:	2504      	movs	r5, #4
 8001248:	e7cc      	b.n	80011e4 <HAL_GPIO_Init+0x14c>
 800124a:	2505      	movs	r5, #5
 800124c:	e7ca      	b.n	80011e4 <HAL_GPIO_Init+0x14c>
 800124e:	2506      	movs	r5, #6
 8001250:	e7c8      	b.n	80011e4 <HAL_GPIO_Init+0x14c>
 8001252:	2507      	movs	r5, #7
 8001254:	e7c6      	b.n	80011e4 <HAL_GPIO_Init+0x14c>
 8001256:	2508      	movs	r5, #8
 8001258:	e7c4      	b.n	80011e4 <HAL_GPIO_Init+0x14c>
 800125a:	bf00      	nop
 800125c:	40013c00 	.word	0x40013c00
 8001260:	40020000 	.word	0x40020000
 8001264:	40023800 	.word	0x40023800
 8001268:	40021400 	.word	0x40021400

0800126c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800126c:	6903      	ldr	r3, [r0, #16]
 800126e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001270:	bf14      	ite	ne
 8001272:	2001      	movne	r0, #1
 8001274:	2000      	moveq	r0, #0
 8001276:	4770      	bx	lr

08001278 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001278:	b10a      	cbz	r2, 800127e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800127a:	6181      	str	r1, [r0, #24]
 800127c:	4770      	bx	lr
 800127e:	0409      	lsls	r1, r1, #16
 8001280:	e7fb      	b.n	800127a <HAL_GPIO_WritePin+0x2>

08001282 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001282:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001286:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8001288:	f890 0290 	ldrb.w	r0, [r0, #656]	; 0x290
{
 800128c:	b085      	sub	sp, #20
  __HAL_LOCK(hhcd);
 800128e:	2801      	cmp	r0, #1
{
 8001290:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8001294:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8001298:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 800129c:	d025      	beq.n	80012ea <HAL_HCD_HC_Init+0x68>
 800129e:	2001      	movs	r0, #1
  hhcd->hc[ch_num].do_ping = 0;
 80012a0:	2600      	movs	r6, #0
  hhcd->hc[ch_num].dev_addr = dev_address;
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 80012a2:	f002 087f 	and.w	r8, r2, #127	; 0x7f
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 80012a6:	09d5      	lsrs	r5, r2, #7
  __HAL_LOCK(hhcd);
 80012a8:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  hhcd->hc[ch_num].do_ping = 0;
 80012ac:	2028      	movs	r0, #40	; 0x28
 80012ae:	fb00 4001 	mla	r0, r0, r1, r4
 80012b2:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 80012b6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 80012ba:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 80012be:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 80012c2:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7F;
 80012c6:	f880 803a 	strb.w	r8, [r0, #58]	; 0x3a
  hhcd->hc[ch_num].ep_is_in = ((epnum & 0x80) == 0x80);
 80012ca:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 80012ce:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance,
 80012d2:	f8cd c008 	str.w	ip, [sp, #8]
 80012d6:	6820      	ldr	r0, [r4, #0]
 80012d8:	e88d 4080 	stmia.w	sp, {r7, lr}
 80012dc:	f003 ffa0 	bl	8005220 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80012e0:	f884 6290 	strb.w	r6, [r4, #656]	; 0x290

  return status;
}
 80012e4:	b005      	add	sp, #20
 80012e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
 80012ea:	2002      	movs	r0, #2
 80012ec:	e7fa      	b.n	80012e4 <HAL_HCD_HC_Init+0x62>

080012ee <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 80012ee:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 80012f2:	2b01      	cmp	r3, #1
{
 80012f4:	b510      	push	{r4, lr}
 80012f6:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80012f8:	d009      	beq.n	800130e <HAL_HCD_HC_Halt+0x20>
 80012fa:	2301      	movs	r3, #1
 80012fc:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_HC_Halt(hhcd->Instance, ch_num);
 8001300:	6800      	ldr	r0, [r0, #0]
 8001302:	f003 ffff 	bl	8005304 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001306:	2000      	movs	r0, #0
 8001308:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290

  return status;
 800130c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800130e:	2002      	movs	r0, #2
}
 8001310:	bd10      	pop	{r4, pc}

08001312 <HAL_HCD_Init>:
{
 8001312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 8001316:	4607      	mov	r7, r0
{
 8001318:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 800131a:	b3a0      	cbz	r0, 8001386 <HAL_HCD_Init+0x74>
  hhcd->State = HAL_HCD_STATE_BUSY;
 800131c:	2303      	movs	r3, #3
 __HAL_HCD_DISABLE(hhcd);
 800131e:	463c      	mov	r4, r7
 USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001320:	466d      	mov	r5, sp
 8001322:	f107 0804 	add.w	r8, r7, #4
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001326:	f880 3291 	strb.w	r3, [r0, #657]	; 0x291
 USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 800132a:	463e      	mov	r6, r7
  HAL_HCD_MspInit(hhcd);
 800132c:	f007 ff26 	bl	800917c <HAL_HCD_MspInit>
 __HAL_HCD_DISABLE(hhcd);
 8001330:	f854 0b10 	ldr.w	r0, [r4], #16
 8001334:	f003 fe51 	bl	8004fda <USB_DisableGlobalInt>
 USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001340:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001344:	e885 0003 	stmia.w	r5, {r0, r1}
 8001348:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800134c:	6838      	ldr	r0, [r7, #0]
 USB_HostInit(hhcd->Instance, hhcd->Init);
 800134e:	466d      	mov	r5, sp
 USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001350:	f003 fe02 	bl	8004f58 <USB_CoreInit>
 USB_SetCurrentMode(hhcd->Instance , USB_OTG_HOST_MODE);
 8001354:	f856 0b10 	ldr.w	r0, [r6], #16
 8001358:	2101      	movs	r1, #1
 800135a:	f003 fe44 	bl	8004fe6 <USB_SetCurrentMode>
 USB_HostInit(hhcd->Instance, hhcd->Init);
 800135e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001362:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001366:	e894 0003 	ldmia.w	r4, {r0, r1}
 800136a:	e885 0003 	stmia.w	r5, {r0, r1}
 800136e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	f003 fee0 	bl	8005138 <USB_HostInit>
 hhcd->State= HAL_HCD_STATE_READY;
 8001378:	2301      	movs	r3, #1
 return HAL_OK;
 800137a:	2000      	movs	r0, #0
 hhcd->State= HAL_HCD_STATE_READY;
 800137c:	f887 3291 	strb.w	r3, [r7, #657]	; 0x291
}
 8001380:	b00a      	add	sp, #40	; 0x28
 8001382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001386:	2001      	movs	r0, #1
 8001388:	e7fa      	b.n	8001380 <HAL_HCD_Init+0x6e>
	...

0800138c <HAL_HCD_HC_SubmitRequest>:
                                            uint8_t ep_type,
                                            uint8_t token,
                                            uint8_t* pbuff,
                                            uint16_t length,
                                            uint8_t do_ping)
{
 800138c:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 800138e:	2428      	movs	r4, #40	; 0x28
{
 8001390:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8001394:	9e06      	ldr	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001396:	fb04 0401 	mla	r4, r4, r1, r0
{
 800139a:	f8bd 501c 	ldrh.w	r5, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 800139e:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 80013a2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if(token == 0)
 80013a6:	b96f      	cbnz	r7, 80013c4 <HAL_HCD_HC_SubmitRequest+0x38>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80013a8:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch(ep_type)
 80013aa:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80013ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch(ep_type)
 80013b0:	d02b      	beq.n	800140a <HAL_HCD_HC_SubmitRequest+0x7e>
 80013b2:	42bb      	cmp	r3, r7
 80013b4:	d029      	beq.n	800140a <HAL_HCD_HC_SubmitRequest+0x7e>
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d131      	bne.n	800141e <HAL_HCD_HC_SubmitRequest+0x92>
      }
    }
    break;

  case EP_TYPE_ISOC:
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80013ba:	2328      	movs	r3, #40	; 0x28
 80013bc:	2200      	movs	r2, #0
 80013be:	fb03 0301 	mla	r3, r3, r1, r0
 80013c2:	e02a      	b.n	800141a <HAL_HCD_HC_SubmitRequest+0x8e>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80013c4:	f04f 0e02 	mov.w	lr, #2
 80013c8:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch(ep_type)
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d826      	bhi.n	800141e <HAL_HCD_HC_SubmitRequest+0x92>
 80013d0:	a401      	add	r4, pc, #4	; (adr r4, 80013d8 <HAL_HCD_HC_SubmitRequest+0x4c>)
 80013d2:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 80013d6:	bf00      	nop
 80013d8:	080013e9 	.word	0x080013e9
 80013dc:	080013bb 	.word	0x080013bb
 80013e0:	0800140b 	.word	0x0800140b
 80013e4:	0800140b 	.word	0x0800140b
    if((token == 1) && (direction == 0)) /*send data */
 80013e8:	2f01      	cmp	r7, #1
 80013ea:	d118      	bne.n	800141e <HAL_HCD_HC_SubmitRequest+0x92>
 80013ec:	b9ba      	cbnz	r2, 800141e <HAL_HCD_HC_SubmitRequest+0x92>
      if ( length == 0 )
 80013ee:	b925      	cbnz	r5, 80013fa <HAL_HCD_HC_SubmitRequest+0x6e>
        hhcd->hc[ch_num].toggle_out = 1;
 80013f0:	2328      	movs	r3, #40	; 0x28
 80013f2:	fb03 0301 	mla	r3, r3, r1, r0
 80013f6:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
      if ( hhcd->hc[ch_num].toggle_out == 0)
 80013fa:	2328      	movs	r3, #40	; 0x28
 80013fc:	fb03 0301 	mla	r3, r3, r1, r0
 8001400:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
      if( hhcd->hc[ch_num].toggle_in == 0)
 8001404:	b14a      	cbz	r2, 800141a <HAL_HCD_HC_SubmitRequest+0x8e>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001406:	2202      	movs	r2, #2
 8001408:	e007      	b.n	800141a <HAL_HCD_HC_SubmitRequest+0x8e>
 800140a:	2328      	movs	r3, #40	; 0x28
      if ( hhcd->hc[ch_num].toggle_out == 0)
 800140c:	fb03 0301 	mla	r3, r3, r1, r0
    if(direction == 0)
 8001410:	b9d2      	cbnz	r2, 8001448 <HAL_HCD_HC_SubmitRequest+0xbc>
      if ( hhcd->hc[ch_num].toggle_out == 0)
 8001412:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8001416:	2c00      	cmp	r4, #0
 8001418:	d1f5      	bne.n	8001406 <HAL_HCD_HC_SubmitRequest+0x7a>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800141a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800141e:	2428      	movs	r4, #40	; 0x28
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state =   URB_IDLE;
 8001420:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001422:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_count = 0 ;
  hhcd->hc[ch_num].ch_num = ch_num;
 8001426:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 800142a:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 800142c:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 800142e:	649d      	str	r5, [r3, #72]	; 0x48
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001430:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state =   URB_IDLE;
 8001432:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0 ;
 8001436:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8001438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 800143c:	7c02      	ldrb	r2, [r0, #16]
 800143e:	6800      	ldr	r0, [r0, #0]
}
 8001440:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &(hhcd->hc[ch_num]), hhcd->Init.dma_enable);
 8001444:	f003 bfba 	b.w	80053bc <USB_HC_StartXfer>
      if( hhcd->hc[ch_num].toggle_in == 0)
 8001448:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 800144c:	e7da      	b.n	8001404 <HAL_HCD_HC_SubmitRequest+0x78>
 800144e:	bf00      	nop

08001450 <HAL_HCD_PortEnabled_Callback>:
 8001450:	4770      	bx	lr

08001452 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8001452:	4770      	bx	lr

08001454 <HAL_HCD_IRQHandler>:
{
 8001454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001458:	6806      	ldr	r6, [r0, #0]
{
 800145a:	b087      	sub	sp, #28
 800145c:	4604      	mov	r4, r0
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800145e:	4630      	mov	r0, r6
 8001460:	f003 fe0e 	bl	8005080 <USB_GetMode>
 8001464:	2801      	cmp	r0, #1
 8001466:	f040 80ea 	bne.w	800163e <HAL_HCD_IRQHandler+0x1ea>
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800146a:	6820      	ldr	r0, [r4, #0]
 800146c:	f003 fe04 	bl	8005078 <USB_ReadInterrupts>
 8001470:	2800      	cmp	r0, #0
 8001472:	f000 80e4 	beq.w	800163e <HAL_HCD_IRQHandler+0x1ea>
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001476:	6820      	ldr	r0, [r4, #0]
 8001478:	f003 fdfe 	bl	8005078 <USB_ReadInterrupts>
 800147c:	0280      	lsls	r0, r0, #10
 800147e:	d503      	bpl.n	8001488 <HAL_HCD_IRQHandler+0x34>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001486:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001488:	6820      	ldr	r0, [r4, #0]
 800148a:	f003 fdf5 	bl	8005078 <USB_ReadInterrupts>
 800148e:	02c1      	lsls	r1, r0, #11
 8001490:	d503      	bpl.n	800149a <HAL_HCD_IRQHandler+0x46>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001498:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800149a:	6820      	ldr	r0, [r4, #0]
 800149c:	f003 fdec 	bl	8005078 <USB_ReadInterrupts>
 80014a0:	0142      	lsls	r2, r0, #5
 80014a2:	d503      	bpl.n	80014ac <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80014a4:	6823      	ldr	r3, [r4, #0]
 80014a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014aa:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80014ac:	6820      	ldr	r0, [r4, #0]
 80014ae:	f003 fde3 	bl	8005078 <USB_ReadInterrupts>
 80014b2:	0783      	lsls	r3, r0, #30
 80014b4:	d502      	bpl.n	80014bc <HAL_HCD_IRQHandler+0x68>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80014b6:	6823      	ldr	r3, [r4, #0]
 80014b8:	2202      	movs	r2, #2
 80014ba:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80014bc:	6820      	ldr	r0, [r4, #0]
 80014be:	f003 fddb 	bl	8005078 <USB_ReadInterrupts>
 80014c2:	0087      	lsls	r7, r0, #2
 80014c4:	d510      	bpl.n	80014e8 <HAL_HCD_IRQHandler+0x94>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80014c6:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 80014ca:	4620      	mov	r0, r4
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80014cc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80014d0:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 80014d4:	f007 fee6 	bl	80092a4 <HAL_HCD_Disconnect_Callback>
       USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 80014d8:	2101      	movs	r1, #1
 80014da:	6820      	ldr	r0, [r4, #0]
 80014dc:	f003 fdd4 	bl	8005088 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014e6:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80014e8:	6820      	ldr	r0, [r4, #0]
 80014ea:	f003 fdc5 	bl	8005078 <USB_ReadInterrupts>
 80014ee:	01c5      	lsls	r5, r0, #7
 80014f0:	d543      	bpl.n	800157a <HAL_HCD_IRQHandler+0x126>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler  (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80014f2:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80014f4:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80014f8:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 80014fa:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80014fe:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001500:	9b05      	ldr	r3, [sp, #20]
 8001502:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001506:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

  /* Check whether Port Connect detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001508:	9b04      	ldr	r3, [sp, #16]
 800150a:	0798      	lsls	r0, r3, #30
 800150c:	d50d      	bpl.n	800152a <HAL_HCD_IRQHandler+0xd6>
  {
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800150e:	9b04      	ldr	r3, [sp, #16]
 8001510:	07d9      	lsls	r1, r3, #31
 8001512:	d506      	bpl.n	8001522 <HAL_HCD_IRQHandler+0xce>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001514:	69ab      	ldr	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8001516:	4620      	mov	r0, r4
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001518:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800151c:	61ab      	str	r3, [r5, #24]
      HAL_HCD_Connect_Callback(hhcd);
 800151e:	f007 febd 	bl	800929c <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001522:	9b05      	ldr	r3, [sp, #20]
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	9305      	str	r3, [sp, #20]

  }

  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800152a:	9b04      	ldr	r3, [sp, #16]
 800152c:	071a      	lsls	r2, r3, #28
 800152e:	d51a      	bpl.n	8001566 <HAL_HCD_IRQHandler+0x112>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001530:	9b05      	ldr	r3, [sp, #20]
 8001532:	f043 0308 	orr.w	r3, r3, #8
 8001536:	9305      	str	r3, [sp, #20]

    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001538:	9b04      	ldr	r3, [sp, #16]
 800153a:	075b      	lsls	r3, r3, #29
 800153c:	f140 808a 	bpl.w	8001654 <HAL_HCD_IRQHandler+0x200>
    {
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001540:	69a1      	ldr	r1, [r4, #24]
 8001542:	2902      	cmp	r1, #2
 8001544:	d17e      	bne.n	8001644 <HAL_HCD_IRQHandler+0x1f0>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001546:	9b04      	ldr	r3, [sp, #16]
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_6_MHZ );
        }
        else
        {
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001548:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800154a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800154e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          USB_InitFSLSPClkSel(hhcd->Instance ,HCFG_48_MHZ );
 8001552:	bf18      	it	ne
 8001554:	2101      	movne	r1, #1
 8001556:	f003 fd97 	bl	8005088 <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = (uint32_t)60000;
        }
      }

      HAL_HCD_PortEnabled_Callback(hhcd);
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff ff78 	bl	8001450 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8001560:	4620      	mov	r0, r4
 8001562:	f007 fe9b 	bl	800929c <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check For an overcurrent */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001566:	9b04      	ldr	r3, [sp, #16]
 8001568:	069f      	lsls	r7, r3, #26
 800156a:	d503      	bpl.n	8001574 <HAL_HCD_IRQHandler+0x120>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800156c:	9b05      	ldr	r3, [sp, #20]
 800156e:	f043 0320 	orr.w	r3, r3, #32
 8001572:	9305      	str	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001574:	9b05      	ldr	r3, [sp, #20]
 8001576:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800157a:	6820      	ldr	r0, [r4, #0]
 800157c:	f003 fd7c 	bl	8005078 <USB_ReadInterrupts>
 8001580:	0705      	lsls	r5, r0, #28
 8001582:	d505      	bpl.n	8001590 <HAL_HCD_IRQHandler+0x13c>
      HAL_HCD_SOF_Callback(hhcd);
 8001584:	4620      	mov	r0, r4
 8001586:	f007 fe85 	bl	8009294 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800158a:	6823      	ldr	r3, [r4, #0]
 800158c:	2208      	movs	r2, #8
 800158e:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001590:	6820      	ldr	r0, [r4, #0]
 8001592:	f003 fd71 	bl	8005078 <USB_ReadInterrupts>
 8001596:	0180      	lsls	r0, r0, #6
 8001598:	d513      	bpl.n	80015c2 <HAL_HCD_IRQHandler+0x16e>
 800159a:	f506 68a0 	add.w	r8, r6, #1280	; 0x500
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 800159e:	f04f 0b00 	mov.w	fp, #0
        if (interrupt & (1 << i))
 80015a2:	f04f 0901 	mov.w	r9, #1
    if(hhcd->hc[chnum].state == HC_XFRC)
 80015a6:	2728      	movs	r7, #40	; 0x28
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80015a8:	f04f 0a02 	mov.w	sl, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80015ac:	6820      	ldr	r0, [r4, #0]
 80015ae:	f003 fea4 	bl	80052fa <USB_HC_ReadInterrupt>
 80015b2:	9001      	str	r0, [sp, #4]
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 80015b4:	68a3      	ldr	r3, [r4, #8]
 80015b6:	459b      	cmp	fp, r3
 80015b8:	d35b      	bcc.n	8001672 <HAL_HCD_IRQHandler+0x21e>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80015ba:	6823      	ldr	r3, [r4, #0]
 80015bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015c0:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL))
 80015c2:	6820      	ldr	r0, [r4, #0]
 80015c4:	f003 fd58 	bl	8005078 <USB_ReadInterrupts>
 80015c8:	06c3      	lsls	r3, r0, #27
 80015ca:	d538      	bpl.n	800163e <HAL_HCD_IRQHandler+0x1ea>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015cc:	6825      	ldr	r5, [r4, #0]
 80015ce:	69ab      	ldr	r3, [r5, #24]
 80015d0:	f023 0310 	bic.w	r3, r3, #16
 80015d4:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP ;
 80015d6:	6a2f      	ldr	r7, [r5, #32]
  pktsts = (temp &  USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80015d8:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d129      	bne.n	8001634 <HAL_HCD_IRQHandler+0x1e0>
  pktcnt = (temp &  USB_OTG_GRXSTSP_BCNT) >> 4;
 80015e0:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80015e4:	f1b8 0f00 	cmp.w	r8, #0
 80015e8:	d024      	beq.n	8001634 <HAL_HCD_IRQHandler+0x1e0>
  channelnum = temp &  USB_OTG_GRXSTSP_EPNUM;
 80015ea:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0) && (hhcd->hc[channelnum].xfer_buff != (void  *)0))
 80015ee:	2628      	movs	r6, #40	; 0x28
 80015f0:	fb06 4607 	mla	r6, r6, r7, r4
 80015f4:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80015f6:	b1e9      	cbz	r1, 8001634 <HAL_HCD_IRQHandler+0x1e0>
      USB_ReadPacket(hhcd->Instance, hhcd->hc[channelnum].xfer_buff, pktcnt);
 80015f8:	4642      	mov	r2, r8
 80015fa:	4628      	mov	r0, r5
 80015fc:	f003 fd2c 	bl	8005058 <USB_ReadPacket>
      hhcd->hc[channelnum].xfer_buff += pktcnt;
 8001600:	6c73      	ldr	r3, [r6, #68]	; 0x44
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001602:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
      hhcd->hc[channelnum].xfer_buff += pktcnt;
 8001606:	4443      	add	r3, r8
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001608:	eb05 1547 	add.w	r5, r5, r7, lsl #5
      hhcd->hc[channelnum].xfer_buff += pktcnt;
 800160c:	6473      	str	r3, [r6, #68]	; 0x44
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 800160e:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001610:	692a      	ldr	r2, [r5, #16]
      hhcd->hc[channelnum].xfer_count  += pktcnt;
 8001612:	4443      	add	r3, r8
 8001614:	64f3      	str	r3, [r6, #76]	; 0x4c
      if((USBx_HC(channelnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0)
 8001616:	4bb7      	ldr	r3, [pc, #732]	; (80018f4 <HAL_HCD_IRQHandler+0x4a0>)
 8001618:	4013      	ands	r3, r2
 800161a:	b15b      	cbz	r3, 8001634 <HAL_HCD_IRQHandler+0x1e0>
        tmpreg = USBx_HC(channelnum)->HCCHAR;
 800161c:	682b      	ldr	r3, [r5, #0]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800161e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001622:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(channelnum)->HCCHAR = tmpreg;
 8001626:	602b      	str	r3, [r5, #0]
        hhcd->hc[channelnum].toggle_in ^= 1;
 8001628:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 800162c:	f083 0301 	eor.w	r3, r3, #1
 8001630:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001634:	6822      	ldr	r2, [r4, #0]
 8001636:	6993      	ldr	r3, [r2, #24]
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	6193      	str	r3, [r2, #24]
}
 800163e:	b007      	add	sp, #28
 8001640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 8001644:	68e3      	ldr	r3, [r4, #12]
 8001646:	2b03      	cmp	r3, #3
 8001648:	d187      	bne.n	800155a <HAL_HCD_IRQHandler+0x106>
          USBx_HOST->HFIR = (uint32_t)60000;
 800164a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800164e:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8001652:	e782      	b.n	800155a <HAL_HCD_IRQHandler+0x106>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001654:	4620      	mov	r0, r4
 8001656:	f7ff fefc 	bl	8001452 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800165a:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800165e:	6822      	ldr	r2, [r4, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001660:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001664:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001668:	6993      	ldr	r3, [r2, #24]
 800166a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	e779      	b.n	8001566 <HAL_HCD_IRQHandler+0x112>
        if (interrupt & (1 << i))
 8001672:	fa09 f30b 	lsl.w	r3, r9, fp
 8001676:	9a01      	ldr	r2, [sp, #4]
 8001678:	4213      	tst	r3, r2
 800167a:	f000 808a 	beq.w	8001792 <HAL_HCD_IRQHandler+0x33e>
          if ((USBx_HC(i)->HCCHAR) &  USB_OTG_HCCHAR_EPDIR)
 800167e:	f8d8 3000 	ldr.w	r3, [r8]
 8001682:	fa5f f58b 	uxtb.w	r5, fp
 8001686:	6820      	ldr	r0, [r4, #0]
 8001688:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800168c:	f000 8107 	beq.w	800189e <HAL_HCD_IRQHandler+0x44a>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 8001690:	016a      	lsls	r2, r5, #5
 8001692:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8001696:	18d6      	adds	r6, r2, r3
 8001698:	68b1      	ldr	r1, [r6, #8]
 800169a:	0749      	lsls	r1, r1, #29
 800169c:	d513      	bpl.n	80016c6 <HAL_HCD_IRQHandler+0x272>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800169e:	2104      	movs	r1, #4
 80016a0:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80016a2:	68f1      	ldr	r1, [r6, #12]
 80016a4:	f041 0102 	orr.w	r1, r1, #2
 80016a8:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 80016aa:	68b1      	ldr	r1, [r6, #8]
 80016ac:	0589      	lsls	r1, r1, #22
 80016ae:	d542      	bpl.n	8001736 <HAL_HCD_IRQHandler+0x2e2>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80016b0:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80016b2:	4629      	mov	r1, r5
 80016b4:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80016bc:	f003 fe22 	bl	8005304 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80016c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c4:	e0ca      	b.n	800185c <HAL_HCD_IRQHandler+0x408>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 80016c6:	68b1      	ldr	r1, [r6, #8]
 80016c8:	0689      	lsls	r1, r1, #26
 80016ca:	d502      	bpl.n	80016d2 <HAL_HCD_IRQHandler+0x27e>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80016cc:	2120      	movs	r1, #32
 80016ce:	60b1      	str	r1, [r6, #8]
 80016d0:	e7eb      	b.n	80016aa <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)
 80016d2:	68b1      	ldr	r1, [r6, #8]
 80016d4:	0709      	lsls	r1, r1, #28
 80016d6:	d515      	bpl.n	8001704 <HAL_HCD_IRQHandler+0x2b0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80016d8:	68f1      	ldr	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 80016da:	f04f 0e05 	mov.w	lr, #5
 80016de:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80016e0:	f041 0102 	orr.w	r1, r1, #2
 80016e4:	9202      	str	r2, [sp, #8]
 80016e6:	60f1      	str	r1, [r6, #12]
    hhcd->hc[chnum].state = HC_STALL;
 80016e8:	fb07 4105 	mla	r1, r7, r5, r4
 80016ec:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80016f0:	2110      	movs	r1, #16
 80016f2:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80016f4:	2108      	movs	r1, #8
 80016f6:	60b1      	str	r1, [r6, #8]
    USB_HC_Halt(hhcd->Instance, chnum);
 80016f8:	4629      	mov	r1, r5
 80016fa:	f003 fe03 	bl	8005304 <USB_HC_Halt>
 80016fe:	9a02      	ldr	r2, [sp, #8]
 8001700:	9b03      	ldr	r3, [sp, #12]
 8001702:	e7d2      	b.n	80016aa <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 8001704:	68b1      	ldr	r1, [r6, #8]
 8001706:	0549      	lsls	r1, r1, #21
 8001708:	d5cf      	bpl.n	80016aa <HAL_HCD_IRQHandler+0x256>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800170a:	68f1      	ldr	r1, [r6, #12]
 800170c:	9303      	str	r3, [sp, #12]
 800170e:	f041 0102 	orr.w	r1, r1, #2
 8001712:	9202      	str	r2, [sp, #8]
 8001714:	60f1      	str	r1, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8001716:	4629      	mov	r1, r5
 8001718:	f003 fdf4 	bl	8005304 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800171c:	2110      	movs	r1, #16
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800171e:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001720:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001722:	60b1      	str	r1, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001724:	fb07 4105 	mla	r1, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001728:	9a02      	ldr	r2, [sp, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800172a:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800172e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001732:	60b1      	str	r1, [r6, #8]
 8001734:	e7b9      	b.n	80016aa <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001736:	68b1      	ldr	r1, [r6, #8]
 8001738:	07c8      	lsls	r0, r1, #31
 800173a:	d53d      	bpl.n	80017b8 <HAL_HCD_IRQHandler+0x364>
    if (hhcd->Init.dma_enable)
 800173c:	6921      	ldr	r1, [r4, #16]
 800173e:	b149      	cbz	r1, 8001754 <HAL_HCD_IRQHandler+0x300>
                               (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001740:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 8001742:	fb07 4e05 	mla	lr, r7, r5, r4
                               (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001746:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].xfer_len - \
 800174a:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
 800174e:	1a09      	subs	r1, r1, r0
 8001750:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[chnum].state = HC_XFRC;
 8001754:	fb07 4105 	mla	r1, r7, r5, r4
    hhcd->hc[chnum].ErrCnt = 0;
 8001758:	2000      	movs	r0, #0
    hhcd->hc[chnum].state = HC_XFRC;
 800175a:	f881 905d 	strb.w	r9, [r1, #93]	; 0x5d
    hhcd->hc[chnum].ErrCnt = 0;
 800175e:	6588      	str	r0, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001760:	f8c6 9008 	str.w	r9, [r6, #8]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001764:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 8001768:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 800176c:	d116      	bne.n	800179c <HAL_HCD_IRQHandler+0x348>
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800176e:	68f3      	ldr	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 8001770:	4629      	mov	r1, r5
 8001772:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 800177a:	f003 fdc3 	bl	8005304 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800177e:	2310      	movs	r3, #16
 8001780:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].toggle_in ^= 1;
 8001782:	fb07 4505 	mla	r5, r7, r5, r4
 8001786:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 800178a:	f083 0301 	eor.w	r3, r3, #1
 800178e:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
      for (i = 0; i < hhcd->Init.Host_channels ; i++)
 8001792:	f10b 0b01 	add.w	fp, fp, #1
 8001796:	f108 0820 	add.w	r8, r8, #32
 800179a:	e70b      	b.n	80015b4 <HAL_HCD_IRQHandler+0x160>
    else if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800179c:	2803      	cmp	r0, #3
 800179e:	d1f0      	bne.n	8001782 <HAL_HCD_IRQHandler+0x32e>
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80017a0:	58d0      	ldr	r0, [r2, r3]
 80017a2:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 80017a6:	50d0      	str	r0, [r2, r3]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80017a8:	2201      	movs	r2, #1
      hhcd->hc[chnum].urb_state = URB_DONE;
 80017aa:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80017ae:	4620      	mov	r0, r4
 80017b0:	4629      	mov	r1, r5
 80017b2:	f007 fd7b 	bl	80092ac <HAL_HCD_HC_NotifyURBChange_Callback>
 80017b6:	e7e4      	b.n	8001782 <HAL_HCD_IRQHandler+0x32e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80017b8:	68b1      	ldr	r1, [r6, #8]
 80017ba:	0789      	lsls	r1, r1, #30
 80017bc:	d539      	bpl.n	8001832 <HAL_HCD_IRQHandler+0x3de>
    __HAL_HCD_MASK_HALT_HC_INT(chnum);
 80017be:	68f1      	ldr	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80017c0:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum);
 80017c4:	f021 0102 	bic.w	r1, r1, #2
 80017c8:	60f1      	str	r1, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 80017ca:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 80017ce:	2901      	cmp	r1, #1
 80017d0:	d10c      	bne.n	80017ec <HAL_HCD_IRQHandler+0x398>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80017d2:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80017d6:	fb07 4305 	mla	r3, r7, r5, r4
 80017da:	4629      	mov	r1, r5
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80017dc:	f8c6 a008 	str.w	sl, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80017e0:	4620      	mov	r0, r4
 80017e2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80017e6:	f007 fd61 	bl	80092ac <HAL_HCD_HC_NotifyURBChange_Callback>
 80017ea:	e7d2      	b.n	8001792 <HAL_HCD_IRQHandler+0x33e>
    else if (hhcd->hc[chnum].state == HC_STALL)
 80017ec:	2905      	cmp	r1, #5
 80017ee:	d0f0      	beq.n	80017d2 <HAL_HCD_IRQHandler+0x37e>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 80017f0:	2906      	cmp	r1, #6
 80017f2:	d001      	beq.n	80017f8 <HAL_HCD_IRQHandler+0x3a4>
 80017f4:	2908      	cmp	r1, #8
 80017f6:	d117      	bne.n	8001828 <HAL_HCD_IRQHandler+0x3d4>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 80017f8:	fb07 4105 	mla	r1, r7, r5, r4
 80017fc:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80017fe:	2803      	cmp	r0, #3
 8001800:	f100 0e01 	add.w	lr, r0, #1
        hhcd->hc[chnum].ErrCnt = 0;
 8001804:	bf88      	it	hi
 8001806:	2000      	movhi	r0, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 8001808:	f8c1 e058 	str.w	lr, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800180c:	bf91      	iteee	ls
 800180e:	f881 a05c 	strbls.w	sl, [r1, #92]	; 0x5c
        hhcd->hc[chnum].ErrCnt = 0;
 8001812:	6588      	strhi	r0, [r1, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001814:	2004      	movhi	r0, #4
 8001816:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 800181a:	58d1      	ldr	r1, [r2, r3]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800181c:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001820:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001824:	50d1      	str	r1, [r2, r3]
 8001826:	e7d6      	b.n	80017d6 <HAL_HCD_IRQHandler+0x382>
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001828:	2903      	cmp	r1, #3
 800182a:	d1d4      	bne.n	80017d6 <HAL_HCD_IRQHandler+0x382>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800182c:	f880 a05c 	strb.w	sl, [r0, #92]	; 0x5c
 8001830:	e7f3      	b.n	800181a <HAL_HCD_IRQHandler+0x3c6>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 8001832:	68b1      	ldr	r1, [r6, #8]
 8001834:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8001838:	d012      	beq.n	8001860 <HAL_HCD_IRQHandler+0x40c>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800183a:	68f3      	ldr	r3, [r6, #12]
     USB_HC_Halt(hhcd->Instance, chnum);
 800183c:	4629      	mov	r1, r5
 800183e:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	60f3      	str	r3, [r6, #12]
     hhcd->hc[chnum].ErrCnt++;
 8001846:	fb07 4305 	mla	r3, r7, r5, r4
 800184a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800184c:	3201      	adds	r2, #1
 800184e:	659a      	str	r2, [r3, #88]	; 0x58
     hhcd->hc[chnum].state = HC_XACTERR;
 8001850:	2206      	movs	r2, #6
 8001852:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
     USB_HC_Halt(hhcd->Instance, chnum);
 8001856:	f003 fd55 	bl	8005304 <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	60b3      	str	r3, [r6, #8]
 800185e:	e798      	b.n	8001792 <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001860:	68b3      	ldr	r3, [r6, #8]
 8001862:	06d8      	lsls	r0, r3, #27
 8001864:	d595      	bpl.n	8001792 <HAL_HCD_IRQHandler+0x33e>
    if(hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8001866:	fb07 4205 	mla	r2, r7, r5, r4
 800186a:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 800186e:	2b03      	cmp	r3, #3
 8001870:	d10a      	bne.n	8001888 <HAL_HCD_IRQHandler+0x434>
       hhcd->hc[chnum].ErrCnt = 0;
 8001872:	6591      	str	r1, [r2, #88]	; 0x58
         __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001874:	68f3      	ldr	r3, [r6, #12]
         USB_HC_Halt(hhcd->Instance, chnum);
 8001876:	4629      	mov	r1, r5
 8001878:	6820      	ldr	r0, [r4, #0]
         __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	60f3      	str	r3, [r6, #12]
         USB_HC_Halt(hhcd->Instance, chnum);
 8001880:	f003 fd40 	bl	8005304 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001884:	2310      	movs	r3, #16
 8001886:	e7e9      	b.n	800185c <HAL_HCD_IRQHandler+0x408>
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL)||
 8001888:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 800188c:	d1fa      	bne.n	8001884 <HAL_HCD_IRQHandler+0x430>
       hhcd->hc[chnum].ErrCnt = 0;
 800188e:	6593      	str	r3, [r2, #88]	; 0x58
       if (!hhcd->Init.dma_enable)
 8001890:	6923      	ldr	r3, [r4, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f6      	bne.n	8001884 <HAL_HCD_IRQHandler+0x430>
         hhcd->hc[chnum].state = HC_NAK;
 8001896:	2303      	movs	r3, #3
 8001898:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 800189c:	e7ea      	b.n	8001874 <HAL_HCD_IRQHandler+0x420>
  if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_AHBERR)
 800189e:	ea4f 1e45 	mov.w	lr, r5, lsl #5
 80018a2:	f500 61a0 	add.w	r1, r0, #1280	; 0x500
 80018a6:	eb0e 0601 	add.w	r6, lr, r1
 80018aa:	68b2      	ldr	r2, [r6, #8]
 80018ac:	f012 0204 	ands.w	r2, r2, #4
 80018b0:	d006      	beq.n	80018c0 <HAL_HCD_IRQHandler+0x46c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80018b2:	2304      	movs	r3, #4
 80018b4:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80018b6:	68f3      	ldr	r3, [r6, #12]
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	60f3      	str	r3, [r6, #12]
 80018be:	e768      	b.n	8001792 <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_ACK)
 80018c0:	68b3      	ldr	r3, [r6, #8]
 80018c2:	f013 0320 	ands.w	r3, r3, #32
 80018c6:	d017      	beq.n	80018f8 <HAL_HCD_IRQHandler+0x4a4>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80018c8:	2320      	movs	r3, #32
 80018ca:	60b3      	str	r3, [r6, #8]
    if( hhcd->hc[chnum].do_ping == 1)
 80018cc:	fb07 4305 	mla	r3, r7, r5, r4
 80018d0:	f893 103d 	ldrb.w	r1, [r3, #61]	; 0x3d
 80018d4:	2901      	cmp	r1, #1
 80018d6:	f47f af5c 	bne.w	8001792 <HAL_HCD_IRQHandler+0x33e>
      hhcd->hc[chnum].do_ping = 0;
 80018da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      USB_HC_Halt(hhcd->Instance, chnum);
 80018de:	4629      	mov	r1, r5
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80018e0:	f883 a05c 	strb.w	sl, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80018e4:	68f3      	ldr	r3, [r6, #12]
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	60f3      	str	r3, [r6, #12]
      USB_HC_Halt(hhcd->Instance, chnum);
 80018ec:	f003 fd0a 	bl	8005304 <USB_HC_Halt>
 80018f0:	e74f      	b.n	8001792 <HAL_HCD_IRQHandler+0x33e>
 80018f2:	bf00      	nop
 80018f4:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NYET)
 80018f8:	68b2      	ldr	r2, [r6, #8]
 80018fa:	0652      	lsls	r2, r2, #25
 80018fc:	d510      	bpl.n	8001920 <HAL_HCD_IRQHandler+0x4cc>
    hhcd->hc[chnum].state = HC_NYET;
 80018fe:	fb07 4205 	mla	r2, r7, r5, r4
 8001902:	2104      	movs	r1, #4
    hhcd->hc[chnum].do_ping = 1;
 8001904:	f882 903d 	strb.w	r9, [r2, #61]	; 0x3d
    hhcd->hc[chnum].ErrCnt= 0;
 8001908:	6593      	str	r3, [r2, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800190a:	68f3      	ldr	r3, [r6, #12]
    hhcd->hc[chnum].state = HC_NYET;
 800190c:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    USB_HC_Halt(hhcd->Instance, chnum);
 8001910:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001912:	f043 0302 	orr.w	r3, r3, #2
 8001916:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8001918:	f003 fcf4 	bl	8005304 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800191c:	2340      	movs	r3, #64	; 0x40
 800191e:	e79d      	b.n	800185c <HAL_HCD_IRQHandler+0x408>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_FRMOR)
 8001920:	68b2      	ldr	r2, [r6, #8]
 8001922:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8001926:	d005      	beq.n	8001934 <HAL_HCD_IRQHandler+0x4e0>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001928:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 800192a:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	60f3      	str	r3, [r6, #12]
 8001932:	e6c3      	b.n	80016bc <HAL_HCD_IRQHandler+0x268>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_XFRC)
 8001934:	68b3      	ldr	r3, [r6, #8]
 8001936:	07db      	lsls	r3, r3, #31
 8001938:	d510      	bpl.n	800195c <HAL_HCD_IRQHandler+0x508>
      hhcd->hc[chnum].ErrCnt = 0;
 800193a:	fb07 4305 	mla	r3, r7, r5, r4
    USB_HC_Halt(hhcd->Instance, chnum);
 800193e:	4629      	mov	r1, r5
      hhcd->hc[chnum].ErrCnt = 0;
 8001940:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001942:	68f2      	ldr	r2, [r6, #12]
      hhcd->hc[chnum].ErrCnt = 0;
 8001944:	9302      	str	r3, [sp, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 8001946:	f042 0202 	orr.w	r2, r2, #2
 800194a:	60f2      	str	r2, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 800194c:	f003 fcda 	bl	8005304 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XFRC;
 8001950:	9b02      	ldr	r3, [sp, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001952:	f8c6 9008 	str.w	r9, [r6, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8001956:	f883 905d 	strb.w	r9, [r3, #93]	; 0x5d
 800195a:	e71a      	b.n	8001792 <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_STALL)
 800195c:	68b3      	ldr	r3, [r6, #8]
 800195e:	071a      	lsls	r2, r3, #28
 8001960:	d50e      	bpl.n	8001980 <HAL_HCD_IRQHandler+0x52c>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001962:	2308      	movs	r3, #8
    USB_HC_Halt(hhcd->Instance, chnum);
 8001964:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_STALL;
 8001966:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800196a:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 800196c:	68f3      	ldr	r3, [r6, #12]
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 8001974:	f003 fcc6 	bl	8005304 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_STALL;
 8001978:	2305      	movs	r3, #5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800197a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 800197e:	e708      	b.n	8001792 <HAL_HCD_IRQHandler+0x33e>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_NAK)
 8001980:	68b3      	ldr	r3, [r6, #8]
 8001982:	06db      	lsls	r3, r3, #27
 8001984:	d514      	bpl.n	80019b0 <HAL_HCD_IRQHandler+0x55c>
    hhcd->hc[chnum].ErrCnt = 0;
 8001986:	fb07 4305 	mla	r3, r7, r5, r4
 800198a:	2200      	movs	r2, #0
 800198c:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[chnum].state = HC_NAK;
 800198e:	2203      	movs	r2, #3
 8001990:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if ( hhcd->hc[chnum].do_ping == 0)
 8001994:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001998:	b922      	cbnz	r2, 80019a4 <HAL_HCD_IRQHandler+0x550>
      if (hhcd->hc[chnum].speed == HCD_SPEED_HIGH)
 800199a:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800199e:	b90a      	cbnz	r2, 80019a4 <HAL_HCD_IRQHandler+0x550>
        hhcd->hc[chnum].do_ping = 1;
 80019a0:	f883 903d 	strb.w	r9, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80019a4:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80019a6:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	60f3      	str	r3, [r6, #12]
 80019ae:	e767      	b.n	8001880 <HAL_HCD_IRQHandler+0x42c>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_TXERR)
 80019b0:	68b3      	ldr	r3, [r6, #8]
 80019b2:	061a      	lsls	r2, r3, #24
 80019b4:	d50c      	bpl.n	80019d0 <HAL_HCD_IRQHandler+0x57c>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80019b6:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80019b8:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_XACTERR;
 80019ba:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80019c4:	f003 fc9e 	bl	8005304 <USB_HC_Halt>
    hhcd->hc[chnum].state = HC_XACTERR;
 80019c8:	2306      	movs	r3, #6
 80019ca:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80019ce:	e744      	b.n	800185a <HAL_HCD_IRQHandler+0x406>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_DTERR)
 80019d0:	68b3      	ldr	r3, [r6, #8]
 80019d2:	055b      	lsls	r3, r3, #21
 80019d4:	d50f      	bpl.n	80019f6 <HAL_HCD_IRQHandler+0x5a2>
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80019d6:	68f3      	ldr	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80019d8:	4629      	mov	r1, r5
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80019da:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(chnum);
 80019de:	f043 0302 	orr.w	r3, r3, #2
 80019e2:	60f3      	str	r3, [r6, #12]
    USB_HC_Halt(hhcd->Instance, chnum);
 80019e4:	f003 fc8e 	bl	8005304 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80019e8:	2310      	movs	r3, #16
 80019ea:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80019ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f0:	60b3      	str	r3, [r6, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80019f2:	2308      	movs	r3, #8
 80019f4:	e7c1      	b.n	800197a <HAL_HCD_IRQHandler+0x526>
  else if ((USBx_HC(chnum)->HCINT) &  USB_OTG_HCINT_CHH)
 80019f6:	68b3      	ldr	r3, [r6, #8]
 80019f8:	079a      	lsls	r2, r3, #30
 80019fa:	f57f aeca 	bpl.w	8001792 <HAL_HCD_IRQHandler+0x33e>
    __HAL_HCD_MASK_HALT_HC_INT(chnum);
 80019fe:	68f3      	ldr	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001a00:	fb07 4205 	mla	r2, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(chnum);
 8001a04:	f023 0302 	bic.w	r3, r3, #2
 8001a08:	60f3      	str	r3, [r6, #12]
    if(hhcd->hc[chnum].state == HC_XFRC)
 8001a0a:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10d      	bne.n	8001a2e <HAL_HCD_IRQHandler+0x5da>
      hhcd->hc[chnum].urb_state  = URB_DONE;
 8001a12:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[chnum].ep_type == EP_TYPE_BULK)
 8001a16:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	f47f aedb 	bne.w	80017d6 <HAL_HCD_IRQHandler+0x382>
        hhcd->hc[chnum].toggle_out ^= 1;
 8001a20:	f892 3051 	ldrb.w	r3, [r2, #81]	; 0x51
 8001a24:	f083 0301 	eor.w	r3, r3, #1
 8001a28:	f882 3051 	strb.w	r3, [r2, #81]	; 0x51
 8001a2c:	e6d3      	b.n	80017d6 <HAL_HCD_IRQHandler+0x382>
    else if (hhcd->hc[chnum].state == HC_NAK)
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d102      	bne.n	8001a38 <HAL_HCD_IRQHandler+0x5e4>
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8001a32:	f882 a05c 	strb.w	sl, [r2, #92]	; 0x5c
 8001a36:	e6ce      	b.n	80017d6 <HAL_HCD_IRQHandler+0x382>
    else if (hhcd->hc[chnum].state == HC_NYET)
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d0fa      	beq.n	8001a32 <HAL_HCD_IRQHandler+0x5de>
    else if (hhcd->hc[chnum].state == HC_STALL)
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d102      	bne.n	8001a46 <HAL_HCD_IRQHandler+0x5f2>
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8001a40:	f882 305c 	strb.w	r3, [r2, #92]	; 0x5c
 8001a44:	e6c7      	b.n	80017d6 <HAL_HCD_IRQHandler+0x382>
    else if((hhcd->hc[chnum].state == HC_XACTERR) ||
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d002      	beq.n	8001a50 <HAL_HCD_IRQHandler+0x5fc>
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	f47f aec3 	bne.w	80017d6 <HAL_HCD_IRQHandler+0x382>
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 8001a50:	fb07 4305 	mla	r3, r7, r5, r4
 8001a54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a56:	2a03      	cmp	r2, #3
 8001a58:	f102 0001 	add.w	r0, r2, #1
        hhcd->hc[chnum].ErrCnt = 0;
 8001a5c:	bf88      	it	hi
 8001a5e:	2200      	movhi	r2, #0
      if(hhcd->hc[chnum].ErrCnt++ > 3)
 8001a60:	6598      	str	r0, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8001a62:	bf91      	iteee	ls
 8001a64:	f883 a05c 	strbls.w	sl, [r3, #92]	; 0x5c
        hhcd->hc[chnum].ErrCnt = 0;
 8001a68:	659a      	strhi	r2, [r3, #88]	; 0x58
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8001a6a:	2204      	movhi	r2, #4
 8001a6c:	f883 205c 	strbhi.w	r2, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(chnum)->HCCHAR;
 8001a70:	f85e 3001 	ldr.w	r3, [lr, r1]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001a74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001a78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(chnum)->HCCHAR = tmpreg;
 8001a7c:	f84e 3001 	str.w	r3, [lr, r1]
 8001a80:	e6a9      	b.n	80017d6 <HAL_HCD_IRQHandler+0x382>
 8001a82:	bf00      	nop

08001a84 <HAL_HCD_Start>:
{
 8001a84:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8001a86:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
{
 8001a8a:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d00d      	beq.n	8001aac <HAL_HCD_Start+0x28>
 8001a90:	2501      	movs	r5, #1
 8001a92:	f880 5290 	strb.w	r5, [r0, #656]	; 0x290
  __HAL_HCD_ENABLE(hhcd);
 8001a96:	6800      	ldr	r0, [r0, #0]
 8001a98:	f003 fa99 	bl	8004fce <USB_EnableGlobalInt>
  USB_DriveVbus(hhcd->Instance, 1);
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	6820      	ldr	r0, [r4, #0]
 8001aa0:	f003 fb2b 	bl	80050fa <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8001aaa:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8001aac:	2002      	movs	r0, #2
}
 8001aae:	bd38      	pop	{r3, r4, r5, pc}

08001ab0 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8001ab0:	f890 3290 	ldrb.w	r3, [r0, #656]	; 0x290
 8001ab4:	2b01      	cmp	r3, #1
{
 8001ab6:	b510      	push	{r4, lr}
 8001ab8:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001aba:	d009      	beq.n	8001ad0 <HAL_HCD_Stop+0x20>
 8001abc:	2301      	movs	r3, #1
 8001abe:	f880 3290 	strb.w	r3, [r0, #656]	; 0x290
  USB_StopHost(hhcd->Instance);
 8001ac2:	6800      	ldr	r0, [r0, #0]
 8001ac4:	f003 fd36 	bl	8005534 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f884 0290 	strb.w	r0, [r4, #656]	; 0x290
  return HAL_OK;
 8001ace:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001ad0:	2002      	movs	r0, #2
}
 8001ad2:	bd10      	pop	{r4, pc}

08001ad4 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001ad4:	6800      	ldr	r0, [r0, #0]
 8001ad6:	f003 baf4 	b.w	80050c2 <USB_ResetPort>

08001ada <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8001ada:	2328      	movs	r3, #40	; 0x28
 8001adc:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001ae0:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8001ae4:	4770      	bx	lr

08001ae6 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8001ae6:	2328      	movs	r3, #40	; 0x28
 8001ae8:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001aec:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 8001aee:	4770      	bx	lr

08001af0 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001af0:	6800      	ldr	r0, [r0, #0]
 8001af2:	f003 bb90 	b.w	8005216 <USB_GetCurrentFrame>

08001af6 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8001af6:	6800      	ldr	r0, [r0, #0]
 8001af8:	f003 bb84 	b.w	8005204 <USB_GetHostSpeed>

08001afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001afc:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001afe:	4604      	mov	r4, r0
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d04a      	beq.n	8001b9a <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b04:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001b08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b0c:	b91b      	cbnz	r3, 8001b16 <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b0e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b12:	f006 ff5f 	bl	80089d4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b16:	2324      	movs	r3, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b18:	68e1      	ldr	r1, [r4, #12]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b1e:	2901      	cmp	r1, #1
  __HAL_I2C_DISABLE(hi2c);
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	f022 0201 	bic.w	r2, r2, #1
 8001b28:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b2a:	6862      	ldr	r2, [r4, #4]
 8001b2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b30:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b3c:	d124      	bne.n	8001b88 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b42:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b44:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b46:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b48:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b4a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b52:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b5a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b5c:	6922      	ldr	r2, [r4, #16]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	69a1      	ldr	r1, [r4, #24]
 8001b62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b66:	6a21      	ldr	r1, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b68:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b6a:	69e2      	ldr	r2, [r4, #28]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f042 0201 	orr.w	r2, r2, #1
 8001b76:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b7c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b80:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b82:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 8001b86:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b88:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b8c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b8e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b90:	d1d8      	bne.n	8001b44 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	e7d4      	b.n	8001b44 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001b9a:	2001      	movs	r0, #1
}
 8001b9c:	bd10      	pop	{r4, pc}

08001b9e <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b9e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	2a20      	cmp	r2, #32
{
 8001ba6:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba8:	d11d      	bne.n	8001be6 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001baa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d019      	beq.n	8001be6 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bb2:	2324      	movs	r3, #36	; 0x24
 8001bb4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bb8:	6803      	ldr	r3, [r0, #0]
 8001bba:	681c      	ldr	r4, [r3, #0]
 8001bbc:	f024 0401 	bic.w	r4, r4, #1
 8001bc0:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bc2:	681c      	ldr	r4, [r3, #0]
 8001bc4:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001bc8:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bca:	681c      	ldr	r4, [r3, #0]
 8001bcc:	4321      	orrs	r1, r4
 8001bce:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	f041 0101 	orr.w	r1, r1, #1
 8001bd6:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001bda:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001bde:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001be2:	4618      	mov	r0, r3
 8001be4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001be6:	2002      	movs	r0, #2
  }
}
 8001be8:	bd10      	pop	{r4, pc}

08001bea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bea:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bec:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001bf0:	b2e4      	uxtb	r4, r4
 8001bf2:	2c20      	cmp	r4, #32
 8001bf4:	d11c      	bne.n	8001c30 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d018      	beq.n	8001c30 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bfe:	2324      	movs	r3, #36	; 0x24
 8001c00:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c04:	6803      	ldr	r3, [r0, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	f022 0201 	bic.w	r2, r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c0e:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c10:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c14:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c18:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	f042 0201 	orr.w	r2, r2, #1
 8001c20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c22:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001c24:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001c28:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001c30:	2002      	movs	r0, #2
  }
}
 8001c32:	bd10      	pop	{r4, pc}

08001c34 <LTDC_SetConfig>:
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001c34:	01d2      	lsls	r2, r2, #7

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001c36:	f04f 0c00 	mov.w	ip, #0
{
 8001c3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001c3e:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001c40:	6804      	ldr	r4, [r0, #0]
 8001c42:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001c44:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001c46:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001c48:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001c4c:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001c4e:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001c52:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8001c56:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001c5a:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8001c5e:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001c60:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001c62:	68e0      	ldr	r0, [r4, #12]
 8001c64:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8001c68:	4430      	add	r0, r6
 8001c6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8001c6e:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8001c70:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8001c72:	68e0      	ldr	r0, [r4, #12]
 8001c74:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001c78:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001c7a:	6898      	ldr	r0, [r3, #8]
 8001c7c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001c80:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8001c82:	6888      	ldr	r0, [r1, #8]
 8001c84:	68e6      	ldr	r6, [r4, #12]
 8001c86:	3001      	adds	r0, #1
 8001c88:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8001c8c:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001c8e:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8001c90:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001c94:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001c96:	6918      	ldr	r0, [r3, #16]
 8001c98:	f020 0007 	bic.w	r0, r0, #7
 8001c9c:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001c9e:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001ca0:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8001ca2:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8001ca6:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001caa:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8001cae:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8001cb2:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8001cb6:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8001cba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001cbe:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001cc0:	6958      	ldr	r0, [r3, #20]
 8001cc2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8001cc6:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001cc8:	6948      	ldr	r0, [r1, #20]
 8001cca:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001ccc:	69d8      	ldr	r0, [r3, #28]
 8001cce:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001cd2:	f020 0007 	bic.w	r0, r0, #7
 8001cd6:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001cd8:	6a08      	ldr	r0, [r1, #32]
 8001cda:	69cd      	ldr	r5, [r1, #28]
 8001cdc:	4305      	orrs	r5, r0
 8001cde:	61dd      	str	r5, [r3, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001ce0:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001ce2:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001ce4:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001ce8:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001cea:	b31e      	cbz	r6, 8001d34 <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001cec:	2e01      	cmp	r6, #1
 8001cee:	d023      	beq.n	8001d38 <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001cf0:	1eb0      	subs	r0, r6, #2
 8001cf2:	2802      	cmp	r0, #2
 8001cf4:	d922      	bls.n	8001d3c <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001cf6:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8001cf8:	bf0c      	ite	eq
 8001cfa:	2002      	moveq	r0, #2
 8001cfc:	2001      	movne	r0, #1
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001cfe:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8001d00:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001d04:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8001d08:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8001d0a:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001d0c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8001d0e:	4345      	muls	r5, r0
 8001d10:	4378      	muls	r0, r7
 8001d12:	3003      	adds	r0, #3
 8001d14:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001d18:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001d1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001d1c:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001d20:	f020 0007 	bic.w	r0, r0, #7
 8001d24:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001d26:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001d28:	58a3      	ldr	r3, [r4, r2]
 8001d2a:	f043 0301 	orr.w	r3, r3, #1
 8001d2e:	50a3      	str	r3, [r4, r2]
 8001d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 8001d34:	2004      	movs	r0, #4
 8001d36:	e7e2      	b.n	8001cfe <LTDC_SetConfig+0xca>
    tmp = 3;
 8001d38:	2003      	movs	r0, #3
 8001d3a:	e7e0      	b.n	8001cfe <LTDC_SetConfig+0xca>
    tmp = 2;
 8001d3c:	2002      	movs	r0, #2
 8001d3e:	e7de      	b.n	8001cfe <LTDC_SetConfig+0xca>

08001d40 <HAL_LTDC_Init>:
{
 8001d40:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 8001d42:	4604      	mov	r4, r0
 8001d44:	2800      	cmp	r0, #0
 8001d46:	d067      	beq.n	8001e18 <HAL_LTDC_Init+0xd8>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8001d48:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001d4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d50:	b91b      	cbnz	r3, 8001d5a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8001d52:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8001d56:	f006 fe87 	bl	8008a68 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001d5a:	2302      	movs	r3, #2
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001d5c:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001d5e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001d6a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001d6c:	6862      	ldr	r2, [r4, #4]
 8001d6e:	6999      	ldr	r1, [r3, #24]
 8001d70:	4302      	orrs	r2, r0
 8001d72:	68e0      	ldr	r0, [r4, #12]
 8001d74:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8001d76:	6920      	ldr	r0, [r4, #16]
 8001d78:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16);
 8001d7a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001d7c:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001d7e:	4927      	ldr	r1, [pc, #156]	; (8001e1c <HAL_LTDC_Init+0xdc>)
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001d80:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	400a      	ands	r2, r1
 8001d86:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001d8e:	69a0      	ldr	r0, [r4, #24]
 8001d90:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8001d92:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001d94:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001da2:	6a20      	ldr	r0, [r4, #32]
 8001da4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8001da6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001da8:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	400a      	ands	r2, r1
 8001dae:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001db6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001db8:	4302      	orrs	r2, r0
 8001dba:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	4011      	ands	r1, r2
 8001dc0:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8001dc2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001dca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001dd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8001dd2:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001dd6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8001dda:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8001dde:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001de0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001de2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8001de6:	430a      	orrs	r2, r1
 8001de8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8001dec:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8001df0:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8001df2:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8001df4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df6:	f042 0204 	orr.w	r2, r2, #4
 8001dfa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8001dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dfe:	f042 0202 	orr.w	r2, r2, #2
 8001e02:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8001e0c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8001e0e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8001e12:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8001e16:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001e18:	2001      	movs	r0, #1
}
 8001e1a:	bd38      	pop	{r3, r4, r5, pc}
 8001e1c:	f000f800 	.word	0xf000f800

08001e20 <HAL_LTDC_ErrorCallback>:
 8001e20:	4770      	bx	lr

08001e22 <HAL_LTDC_LineEventCallback>:
 8001e22:	4770      	bx	lr

08001e24 <HAL_LTDC_ReloadEventCallback>:
{
 8001e24:	4770      	bx	lr

08001e26 <HAL_LTDC_IRQHandler>:
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8001e26:	6803      	ldr	r3, [r0, #0]
 8001e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e2a:	0751      	lsls	r1, r2, #29
{
 8001e2c:	b510      	push	{r4, lr}
 8001e2e:	4604      	mov	r4, r0
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8001e30:	d515      	bpl.n	8001e5e <HAL_LTDC_IRQHandler+0x38>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 8001e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e34:	0752      	lsls	r2, r2, #29
 8001e36:	d512      	bpl.n	8001e5e <HAL_LTDC_IRQHandler+0x38>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8001e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3a:	f022 0204 	bic.w	r2, r2, #4
 8001e3e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8001e40:	2204      	movs	r2, #4
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8001e44:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
      __HAL_UNLOCK(hltdc);
 8001e50:	2300      	movs	r3, #0
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8001e52:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 8001e56:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
      HAL_LTDC_ErrorCallback(hltdc);
 8001e5a:	f7ff ffe1 	bl	8001e20 <HAL_LTDC_ErrorCallback>
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 8001e5e:	6823      	ldr	r3, [r4, #0]
 8001e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e62:	0790      	lsls	r0, r2, #30
 8001e64:	d516      	bpl.n	8001e94 <HAL_LTDC_IRQHandler+0x6e>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8001e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e68:	0791      	lsls	r1, r2, #30
 8001e6a:	d513      	bpl.n	8001e94 <HAL_LTDC_IRQHandler+0x6e>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      HAL_LTDC_ErrorCallback(hltdc);
 8001e6e:	4620      	mov	r0, r4
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8001e70:	f022 0202 	bic.w	r2, r2, #2
 8001e74:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8001e76:	2202      	movs	r2, #2
 8001e78:	63da      	str	r2, [r3, #60]	; 0x3c
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8001e7a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8001e84:	2304      	movs	r3, #4
 8001e86:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      HAL_LTDC_ErrorCallback(hltdc);
 8001e90:	f7ff ffc6 	bl	8001e20 <HAL_LTDC_ErrorCallback>
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8001e94:	6823      	ldr	r3, [r4, #0]
 8001e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e98:	07d2      	lsls	r2, r2, #31
 8001e9a:	d510      	bpl.n	8001ebe <HAL_LTDC_IRQHandler+0x98>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 8001e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e9e:	07d0      	lsls	r0, r2, #31
 8001ea0:	d50d      	bpl.n	8001ebe <HAL_LTDC_IRQHandler+0x98>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      HAL_LTDC_LineEventCallback(hltdc);
 8001ea4:	4620      	mov	r0, r4
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8001ea6:	f022 0201 	bic.w	r2, r2, #1
 8001eaa:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8001eac:	2201      	movs	r2, #1
 8001eae:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_UNLOCK(hltdc);
 8001eb0:	2300      	movs	r3, #0
      hltdc->State = HAL_LTDC_STATE_READY;
 8001eb2:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 8001eb6:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      HAL_LTDC_LineEventCallback(hltdc);
 8001eba:	f7ff ffb2 	bl	8001e22 <HAL_LTDC_LineEventCallback>
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec2:	0711      	lsls	r1, r2, #28
 8001ec4:	d511      	bpl.n	8001eea <HAL_LTDC_IRQHandler+0xc4>
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8001ec6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec8:	0712      	lsls	r2, r2, #28
 8001eca:	d50e      	bpl.n	8001eea <HAL_LTDC_IRQHandler+0xc4>
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      HAL_LTDC_ReloadEventCallback(hltdc);
 8001ece:	4620      	mov	r0, r4
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8001ed0:	f022 0208 	bic.w	r2, r2, #8
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8001ed6:	2208      	movs	r2, #8
 8001ed8:	63da      	str	r2, [r3, #60]	; 0x3c
      hltdc->State = HAL_LTDC_STATE_READY;
 8001eda:	2301      	movs	r3, #1
 8001edc:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
      __HAL_UNLOCK(hltdc);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
      HAL_LTDC_ReloadEventCallback(hltdc);
 8001ee6:	f7ff ff9d 	bl	8001e24 <HAL_LTDC_ReloadEventCallback>
 8001eea:	bd10      	pop	{r4, pc}

08001eec <HAL_LTDC_ConfigLayer>:
{   
 8001eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8001eee:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{   
 8001ef2:	4606      	mov	r6, r0
 8001ef4:	468e      	mov	lr, r1
 8001ef6:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	f04f 0002 	mov.w	r0, #2
 8001efe:	d01d      	beq.n	8001f3c <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001f00:	2434      	movs	r4, #52	; 0x34
 8001f02:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001f04:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8001f08:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001f0a:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8001f0e:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001f12:	3438      	adds	r4, #56	; 0x38
 8001f14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f20:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001f22:	4630      	mov	r0, r6
 8001f24:	4662      	mov	r2, ip
 8001f26:	4671      	mov	r1, lr
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8001f28:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001f2a:	f7ff fe83 	bl	8001c34 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001f2e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8001f30:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001f32:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001f34:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001f38:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8001f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f40 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8001f42:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f46:	4c19      	ldr	r4, [pc, #100]	; (8001fac <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f48:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5e:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f60:	f7fe faf6 	bl	8000550 <HAL_GetTick>
 8001f64:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f66:	6863      	ldr	r3, [r4, #4]
 8001f68:	03da      	lsls	r2, r3, #15
 8001f6a:	d50c      	bpl.n	8001f86 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f72:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f74:	f7fe faec 	bl	8000550 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f78:	4c0c      	ldr	r4, [pc, #48]	; (8001fac <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8001f7a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f7c:	6863      	ldr	r3, [r4, #4]
 8001f7e:	039b      	lsls	r3, r3, #14
 8001f80:	d50a      	bpl.n	8001f98 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001f82:	2000      	movs	r0, #0
 8001f84:	e006      	b.n	8001f94 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f86:	f7fe fae3 	bl	8000550 <HAL_GetTick>
 8001f8a:	1b40      	subs	r0, r0, r5
 8001f8c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001f90:	d9e9      	bls.n	8001f66 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001f92:	2003      	movs	r0, #3
}
 8001f94:	b003      	add	sp, #12
 8001f96:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f98:	f7fe fada 	bl	8000550 <HAL_GetTick>
 8001f9c:	1b40      	subs	r0, r0, r5
 8001f9e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fa2:	d9eb      	bls.n	8001f7c <HAL_PWREx_EnableOverDrive+0x3c>
 8001fa4:	e7f5      	b.n	8001f92 <HAL_PWREx_EnableOverDrive+0x52>
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40007000 	.word	0x40007000

08001fb0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8001fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb4:	9d06      	ldr	r5, [sp, #24]
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	460f      	mov	r7, r1
 8001fba:	4616      	mov	r6, r2
 8001fbc:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001fbe:	6821      	ldr	r1, [r4, #0]
 8001fc0:	688a      	ldr	r2, [r1, #8]
 8001fc2:	423a      	tst	r2, r7
 8001fc4:	bf14      	ite	ne
 8001fc6:	2201      	movne	r2, #1
 8001fc8:	2200      	moveq	r2, #0
 8001fca:	42b2      	cmp	r2, r6
 8001fcc:	d102      	bne.n	8001fd4 <QSPI_WaitFlagStateUntilTimeout+0x24>
        
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001fce:	2000      	movs	r0, #0
}
 8001fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001fd4:	1c6b      	adds	r3, r5, #1
 8001fd6:	d0f3      	beq.n	8001fc0 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fd8:	b94d      	cbnz	r5, 8001fee <QSPI_WaitFlagStateUntilTimeout+0x3e>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001fda:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001fdc:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001fde:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001fe2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6463      	str	r3, [r4, #68]	; 0x44
 8001fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fee:	f7fe faaf 	bl	8000550 <HAL_GetTick>
 8001ff2:	eba0 0008 	sub.w	r0, r0, r8
 8001ff6:	4285      	cmp	r5, r0
 8001ff8:	d2e1      	bcs.n	8001fbe <QSPI_WaitFlagStateUntilTimeout+0xe>
 8001ffa:	e7ee      	b.n	8001fda <QSPI_WaitFlagStateUntilTimeout+0x2a>

08001ffc <HAL_QSPI_Init>:
{
 8001ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ffe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002000:	f7fe faa6 	bl	8000550 <HAL_GetTick>
 8002004:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8002006:	2c00      	cmp	r4, #0
 8002008:	d04d      	beq.n	80020a6 <HAL_QSPI_Init+0xaa>
  __HAL_LOCK(hqspi);
 800200a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800200e:	2b01      	cmp	r3, #1
 8002010:	d04b      	beq.n	80020aa <HAL_QSPI_Init+0xae>
 8002012:	2301      	movs	r3, #1
 8002014:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002018:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800201c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8002020:	b93a      	cbnz	r2, 8002032 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 8002022:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8002026:	4620      	mov	r0, r4
 8002028:	f006 fd7e 	bl	8008b28 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800202c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002030:	64a3      	str	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8002032:	6820      	ldr	r0, [r4, #0]
 8002034:	68a1      	ldr	r1, [r4, #8]
 8002036:	6802      	ldr	r2, [r0, #0]
 8002038:	3901      	subs	r1, #1
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800203a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 800203c:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8002040:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002044:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8002046:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002048:	2200      	movs	r2, #0
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	4620      	mov	r0, r4
 800204e:	462b      	mov	r3, r5
 8002050:	f7ff ffae 	bl	8001fb0 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8002054:	bb10      	cbnz	r0, 800209c <HAL_QSPI_Init+0xa0>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8002056:	6822      	ldr	r2, [r4, #0]
 8002058:	69e5      	ldr	r5, [r4, #28]
 800205a:	68e3      	ldr	r3, [r4, #12]
 800205c:	6811      	ldr	r1, [r2, #0]
 800205e:	432b      	orrs	r3, r5
 8002060:	6a25      	ldr	r5, [r4, #32]
 8002062:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002066:	432b      	orrs	r3, r5
 8002068:	6865      	ldr	r5, [r4, #4]
 800206a:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 800206e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8002072:	430b      	orrs	r3, r1
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8002074:	69a1      	ldr	r1, [r4, #24]
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8002076:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8002078:	6963      	ldr	r3, [r4, #20]
 800207a:	6855      	ldr	r5, [r2, #4]
 800207c:	430b      	orrs	r3, r1
 800207e:	6921      	ldr	r1, [r4, #16]
 8002080:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002084:	490a      	ldr	r1, [pc, #40]	; (80020b0 <HAL_QSPI_Init+0xb4>)
 8002086:	4029      	ands	r1, r5
 8002088:	430b      	orrs	r3, r1
 800208a:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800208c:	6813      	ldr	r3, [r2, #0]
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8002094:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8002096:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8002098:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 800209c:	2300      	movs	r3, #0
 800209e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80020a2:	b003      	add	sp, #12
 80020a4:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80020a6:	2001      	movs	r0, #1
 80020a8:	e7fb      	b.n	80020a2 <HAL_QSPI_Init+0xa6>
  __HAL_LOCK(hqspi);
 80020aa:	2002      	movs	r0, #2
 80020ac:	e7f9      	b.n	80020a2 <HAL_QSPI_Init+0xa6>
 80020ae:	bf00      	nop
 80020b0:	ffe0f8fe 	.word	0xffe0f8fe

080020b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020b8:	4604      	mov	r4, r0
 80020ba:	b918      	cbnz	r0, 80020c4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80020bc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80020be:	b002      	add	sp, #8
 80020c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c4:	6803      	ldr	r3, [r0, #0]
 80020c6:	07d8      	lsls	r0, r3, #31
 80020c8:	d410      	bmi.n	80020ec <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	0799      	lsls	r1, r3, #30
 80020ce:	d45e      	bmi.n	800218e <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d0:	6823      	ldr	r3, [r4, #0]
 80020d2:	0719      	lsls	r1, r3, #28
 80020d4:	f100 80a3 	bmi.w	800221e <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	075a      	lsls	r2, r3, #29
 80020dc:	f100 80c4 	bmi.w	8002268 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e0:	69a2      	ldr	r2, [r4, #24]
 80020e2:	2a00      	cmp	r2, #0
 80020e4:	f040 812e 	bne.w	8002344 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 80020e8:	2000      	movs	r0, #0
 80020ea:	e7e8      	b.n	80020be <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020ec:	4b93      	ldr	r3, [pc, #588]	; (800233c <HAL_RCC_OscConfig+0x288>)
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	f002 020c 	and.w	r2, r2, #12
 80020f4:	2a04      	cmp	r2, #4
 80020f6:	d007      	beq.n	8002108 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	f002 020c 	and.w	r2, r2, #12
 80020fe:	2a08      	cmp	r2, #8
 8002100:	d10a      	bne.n	8002118 <HAL_RCC_OscConfig+0x64>
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	025a      	lsls	r2, r3, #9
 8002106:	d507      	bpl.n	8002118 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b8c      	ldr	r3, [pc, #560]	; (800233c <HAL_RCC_OscConfig+0x288>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	039b      	lsls	r3, r3, #14
 800210e:	d5dc      	bpl.n	80020ca <HAL_RCC_OscConfig+0x16>
 8002110:	6863      	ldr	r3, [r4, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1d9      	bne.n	80020ca <HAL_RCC_OscConfig+0x16>
 8002116:	e7d1      	b.n	80020bc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002118:	6863      	ldr	r3, [r4, #4]
 800211a:	4d88      	ldr	r5, [pc, #544]	; (800233c <HAL_RCC_OscConfig+0x288>)
 800211c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002120:	d111      	bne.n	8002146 <HAL_RCC_OscConfig+0x92>
 8002122:	682b      	ldr	r3, [r5, #0]
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800212a:	f7fe fa11 	bl	8000550 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	4d83      	ldr	r5, [pc, #524]	; (800233c <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8002130:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002132:	682b      	ldr	r3, [r5, #0]
 8002134:	039f      	lsls	r7, r3, #14
 8002136:	d4c8      	bmi.n	80020ca <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002138:	f7fe fa0a 	bl	8000550 <HAL_GetTick>
 800213c:	1b80      	subs	r0, r0, r6
 800213e:	2864      	cmp	r0, #100	; 0x64
 8002140:	d9f7      	bls.n	8002132 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8002142:	2003      	movs	r0, #3
 8002144:	e7bb      	b.n	80020be <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002146:	b99b      	cbnz	r3, 8002170 <HAL_RCC_OscConfig+0xbc>
 8002148:	682b      	ldr	r3, [r5, #0]
 800214a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214e:	602b      	str	r3, [r5, #0]
 8002150:	682b      	ldr	r3, [r5, #0]
 8002152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002156:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002158:	f7fe f9fa 	bl	8000550 <HAL_GetTick>
 800215c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	682b      	ldr	r3, [r5, #0]
 8002160:	0398      	lsls	r0, r3, #14
 8002162:	d5b2      	bpl.n	80020ca <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002164:	f7fe f9f4 	bl	8000550 <HAL_GetTick>
 8002168:	1b80      	subs	r0, r0, r6
 800216a:	2864      	cmp	r0, #100	; 0x64
 800216c:	d9f7      	bls.n	800215e <HAL_RCC_OscConfig+0xaa>
 800216e:	e7e8      	b.n	8002142 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	d103      	bne.n	8002180 <HAL_RCC_OscConfig+0xcc>
 8002178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800217c:	602b      	str	r3, [r5, #0]
 800217e:	e7d0      	b.n	8002122 <HAL_RCC_OscConfig+0x6e>
 8002180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002184:	602b      	str	r3, [r5, #0]
 8002186:	682b      	ldr	r3, [r5, #0]
 8002188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218c:	e7cc      	b.n	8002128 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800218e:	4b6b      	ldr	r3, [pc, #428]	; (800233c <HAL_RCC_OscConfig+0x288>)
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	f012 0f0c 	tst.w	r2, #12
 8002196:	d007      	beq.n	80021a8 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	f002 020c 	and.w	r2, r2, #12
 800219e:	2a08      	cmp	r2, #8
 80021a0:	d111      	bne.n	80021c6 <HAL_RCC_OscConfig+0x112>
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	0259      	lsls	r1, r3, #9
 80021a6:	d40e      	bmi.n	80021c6 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a8:	4b64      	ldr	r3, [pc, #400]	; (800233c <HAL_RCC_OscConfig+0x288>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	0792      	lsls	r2, r2, #30
 80021ae:	d502      	bpl.n	80021b6 <HAL_RCC_OscConfig+0x102>
 80021b0:	68e2      	ldr	r2, [r4, #12]
 80021b2:	2a01      	cmp	r2, #1
 80021b4:	d182      	bne.n	80020bc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	6921      	ldr	r1, [r4, #16]
 80021ba:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80021be:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80021c2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021c4:	e784      	b.n	80020d0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021c6:	68e3      	ldr	r3, [r4, #12]
 80021c8:	4d5c      	ldr	r5, [pc, #368]	; (800233c <HAL_RCC_OscConfig+0x288>)
 80021ca:	b1bb      	cbz	r3, 80021fc <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80021d4:	f7fe f9bc 	bl	8000550 <HAL_GetTick>
 80021d8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021da:	682b      	ldr	r3, [r5, #0]
 80021dc:	079f      	lsls	r7, r3, #30
 80021de:	d507      	bpl.n	80021f0 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	682b      	ldr	r3, [r5, #0]
 80021e2:	6922      	ldr	r2, [r4, #16]
 80021e4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021ec:	602b      	str	r3, [r5, #0]
 80021ee:	e76f      	b.n	80020d0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021f0:	f7fe f9ae 	bl	8000550 <HAL_GetTick>
 80021f4:	1b80      	subs	r0, r0, r6
 80021f6:	2802      	cmp	r0, #2
 80021f8:	d9ef      	bls.n	80021da <HAL_RCC_OscConfig+0x126>
 80021fa:	e7a2      	b.n	8002142 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80021fc:	682b      	ldr	r3, [r5, #0]
 80021fe:	f023 0301 	bic.w	r3, r3, #1
 8002202:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002204:	f7fe f9a4 	bl	8000550 <HAL_GetTick>
 8002208:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800220a:	682b      	ldr	r3, [r5, #0]
 800220c:	0798      	lsls	r0, r3, #30
 800220e:	f57f af5f 	bpl.w	80020d0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002212:	f7fe f99d 	bl	8000550 <HAL_GetTick>
 8002216:	1b80      	subs	r0, r0, r6
 8002218:	2802      	cmp	r0, #2
 800221a:	d9f6      	bls.n	800220a <HAL_RCC_OscConfig+0x156>
 800221c:	e791      	b.n	8002142 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800221e:	6963      	ldr	r3, [r4, #20]
 8002220:	4d46      	ldr	r5, [pc, #280]	; (800233c <HAL_RCC_OscConfig+0x288>)
 8002222:	b183      	cbz	r3, 8002246 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8002224:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800222c:	f7fe f990 	bl	8000550 <HAL_GetTick>
 8002230:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002232:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002234:	079b      	lsls	r3, r3, #30
 8002236:	f53f af4f 	bmi.w	80020d8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800223a:	f7fe f989 	bl	8000550 <HAL_GetTick>
 800223e:	1b80      	subs	r0, r0, r6
 8002240:	2802      	cmp	r0, #2
 8002242:	d9f6      	bls.n	8002232 <HAL_RCC_OscConfig+0x17e>
 8002244:	e77d      	b.n	8002142 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8002246:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800224e:	f7fe f97f 	bl	8000550 <HAL_GetTick>
 8002252:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002256:	079f      	lsls	r7, r3, #30
 8002258:	f57f af3e 	bpl.w	80020d8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800225c:	f7fe f978 	bl	8000550 <HAL_GetTick>
 8002260:	1b80      	subs	r0, r0, r6
 8002262:	2802      	cmp	r0, #2
 8002264:	d9f6      	bls.n	8002254 <HAL_RCC_OscConfig+0x1a0>
 8002266:	e76c      	b.n	8002142 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002268:	4b34      	ldr	r3, [pc, #208]	; (800233c <HAL_RCC_OscConfig+0x288>)
 800226a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800226c:	00d0      	lsls	r0, r2, #3
 800226e:	d427      	bmi.n	80022c0 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002272:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002284:	4d2e      	ldr	r5, [pc, #184]	; (8002340 <HAL_RCC_OscConfig+0x28c>)
 8002286:	682b      	ldr	r3, [r5, #0]
 8002288:	05d9      	lsls	r1, r3, #23
 800228a:	d51b      	bpl.n	80022c4 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800228c:	68a3      	ldr	r3, [r4, #8]
 800228e:	4d2b      	ldr	r5, [pc, #172]	; (800233c <HAL_RCC_OscConfig+0x288>)
 8002290:	2b01      	cmp	r3, #1
 8002292:	d127      	bne.n	80022e4 <HAL_RCC_OscConfig+0x230>
 8002294:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800229c:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80022a0:	f7fe f956 	bl	8000550 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a4:	4f25      	ldr	r7, [pc, #148]	; (800233c <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 80022a6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022aa:	079b      	lsls	r3, r3, #30
 80022ac:	d53f      	bpl.n	800232e <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 80022ae:	2e00      	cmp	r6, #0
 80022b0:	f43f af16 	beq.w	80020e0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b4:	4a21      	ldr	r2, [pc, #132]	; (800233c <HAL_RCC_OscConfig+0x288>)
 80022b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022bc:	6413      	str	r3, [r2, #64]	; 0x40
 80022be:	e70f      	b.n	80020e0 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 80022c0:	2600      	movs	r6, #0
 80022c2:	e7df      	b.n	8002284 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80022cc:	f7fe f940 	bl	8000550 <HAL_GetTick>
 80022d0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d2:	682b      	ldr	r3, [r5, #0]
 80022d4:	05da      	lsls	r2, r3, #23
 80022d6:	d4d9      	bmi.n	800228c <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80022d8:	f7fe f93a 	bl	8000550 <HAL_GetTick>
 80022dc:	1bc0      	subs	r0, r0, r7
 80022de:	2864      	cmp	r0, #100	; 0x64
 80022e0:	d9f7      	bls.n	80022d2 <HAL_RCC_OscConfig+0x21e>
 80022e2:	e72e      	b.n	8002142 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	b9ab      	cbnz	r3, 8002312 <HAL_RCC_OscConfig+0x25e>
 80022e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	672b      	str	r3, [r5, #112]	; 0x70
 80022f2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80022fa:	f7fe f929 	bl	8000550 <HAL_GetTick>
 80022fe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002300:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002302:	0798      	lsls	r0, r3, #30
 8002304:	d5d3      	bpl.n	80022ae <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe f923 	bl	8000550 <HAL_GetTick>
 800230a:	1bc0      	subs	r0, r0, r7
 800230c:	4540      	cmp	r0, r8
 800230e:	d9f7      	bls.n	8002300 <HAL_RCC_OscConfig+0x24c>
 8002310:	e717      	b.n	8002142 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002312:	2b05      	cmp	r3, #5
 8002314:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002316:	d103      	bne.n	8002320 <HAL_RCC_OscConfig+0x26c>
 8002318:	f043 0304 	orr.w	r3, r3, #4
 800231c:	672b      	str	r3, [r5, #112]	; 0x70
 800231e:	e7b9      	b.n	8002294 <HAL_RCC_OscConfig+0x1e0>
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	672b      	str	r3, [r5, #112]	; 0x70
 8002326:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002328:	f023 0304 	bic.w	r3, r3, #4
 800232c:	e7b5      	b.n	800229a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800232e:	f7fe f90f 	bl	8000550 <HAL_GetTick>
 8002332:	eba0 0008 	sub.w	r0, r0, r8
 8002336:	42a8      	cmp	r0, r5
 8002338:	d9b6      	bls.n	80022a8 <HAL_RCC_OscConfig+0x1f4>
 800233a:	e702      	b.n	8002142 <HAL_RCC_OscConfig+0x8e>
 800233c:	40023800 	.word	0x40023800
 8002340:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002344:	4d24      	ldr	r5, [pc, #144]	; (80023d8 <HAL_RCC_OscConfig+0x324>)
 8002346:	68ab      	ldr	r3, [r5, #8]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	f43f aeb5 	beq.w	80020bc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002352:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002354:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8002356:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800235a:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235c:	d12e      	bne.n	80023bc <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800235e:	f7fe f8f7 	bl	8000550 <HAL_GetTick>
 8002362:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002364:	682b      	ldr	r3, [r5, #0]
 8002366:	0199      	lsls	r1, r3, #6
 8002368:	d422      	bmi.n	80023b0 <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236a:	6a22      	ldr	r2, [r4, #32]
 800236c:	69e3      	ldr	r3, [r4, #28]
 800236e:	4313      	orrs	r3, r2
 8002370:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002372:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002376:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800237a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800237c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002380:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002382:	4c15      	ldr	r4, [pc, #84]	; (80023d8 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002384:	0852      	lsrs	r2, r2, #1
 8002386:	3a01      	subs	r2, #1
 8002388:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800238c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800238e:	682b      	ldr	r3, [r5, #0]
 8002390:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002394:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002396:	f7fe f8db 	bl	8000550 <HAL_GetTick>
 800239a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	019a      	lsls	r2, r3, #6
 80023a0:	f53f aea2 	bmi.w	80020e8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe f8d4 	bl	8000550 <HAL_GetTick>
 80023a8:	1b40      	subs	r0, r0, r5
 80023aa:	2802      	cmp	r0, #2
 80023ac:	d9f6      	bls.n	800239c <HAL_RCC_OscConfig+0x2e8>
 80023ae:	e6c8      	b.n	8002142 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b0:	f7fe f8ce 	bl	8000550 <HAL_GetTick>
 80023b4:	1b80      	subs	r0, r0, r6
 80023b6:	2802      	cmp	r0, #2
 80023b8:	d9d4      	bls.n	8002364 <HAL_RCC_OscConfig+0x2b0>
 80023ba:	e6c2      	b.n	8002142 <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 80023bc:	f7fe f8c8 	bl	8000550 <HAL_GetTick>
 80023c0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c2:	682b      	ldr	r3, [r5, #0]
 80023c4:	019b      	lsls	r3, r3, #6
 80023c6:	f57f ae8f 	bpl.w	80020e8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ca:	f7fe f8c1 	bl	8000550 <HAL_GetTick>
 80023ce:	1b00      	subs	r0, r0, r4
 80023d0:	2802      	cmp	r0, #2
 80023d2:	d9f6      	bls.n	80023c2 <HAL_RCC_OscConfig+0x30e>
 80023d4:	e6b5      	b.n	8002142 <HAL_RCC_OscConfig+0x8e>
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800

080023dc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023dc:	4913      	ldr	r1, [pc, #76]	; (800242c <HAL_RCC_GetSysClockFreq+0x50>)
{
 80023de:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e0:	688b      	ldr	r3, [r1, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x16>
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ee:	4810      	ldr	r0, [pc, #64]	; (8002430 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80023f0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80023f2:	4810      	ldr	r0, [pc, #64]	; (8002434 <HAL_RCC_GetSysClockFreq+0x58>)
 80023f4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023f8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fa:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023fc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002400:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002404:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002408:	bf1a      	itte	ne
 800240a:	480a      	ldrne	r0, [pc, #40]	; (8002434 <HAL_RCC_GetSysClockFreq+0x58>)
 800240c:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240e:	4808      	ldreq	r0, [pc, #32]	; (8002430 <HAL_RCC_GetSysClockFreq+0x54>)
 8002410:	fba1 0100 	umull	r0, r1, r1, r0
 8002414:	f7fd fefc 	bl	8000210 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <HAL_RCC_GetSysClockFreq+0x50>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002420:	3301      	adds	r3, #1
 8002422:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8002424:	fbb0 f0f3 	udiv	r0, r0, r3
 8002428:	bd08      	pop	{r3, pc}
 800242a:	bf00      	nop
 800242c:	40023800 	.word	0x40023800
 8002430:	00f42400 	.word	0x00f42400
 8002434:	017d7840 	.word	0x017d7840

08002438 <HAL_RCC_ClockConfig>:
{
 8002438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800243c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800243e:	4604      	mov	r4, r0
 8002440:	b910      	cbnz	r0, 8002448 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002442:	2001      	movs	r0, #1
 8002444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002448:	4a46      	ldr	r2, [pc, #280]	; (8002564 <HAL_RCC_ClockConfig+0x12c>)
 800244a:	6813      	ldr	r3, [r2, #0]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	428b      	cmp	r3, r1
 8002452:	d328      	bcc.n	80024a6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002454:	6821      	ldr	r1, [r4, #0]
 8002456:	078f      	lsls	r7, r1, #30
 8002458:	d430      	bmi.n	80024bc <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	07c8      	lsls	r0, r1, #31
 800245c:	d443      	bmi.n	80024e6 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800245e:	4a41      	ldr	r2, [pc, #260]	; (8002564 <HAL_RCC_ClockConfig+0x12c>)
 8002460:	6813      	ldr	r3, [r2, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	429d      	cmp	r5, r3
 8002468:	d367      	bcc.n	800253a <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246a:	6822      	ldr	r2, [r4, #0]
 800246c:	0751      	lsls	r1, r2, #29
 800246e:	d470      	bmi.n	8002552 <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002470:	0713      	lsls	r3, r2, #28
 8002472:	d507      	bpl.n	8002484 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002474:	4a3c      	ldr	r2, [pc, #240]	; (8002568 <HAL_RCC_ClockConfig+0x130>)
 8002476:	6921      	ldr	r1, [r4, #16]
 8002478:	6893      	ldr	r3, [r2, #8]
 800247a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800247e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002482:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002484:	f7ff ffaa 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002488:	4b37      	ldr	r3, [pc, #220]	; (8002568 <HAL_RCC_ClockConfig+0x130>)
 800248a:	4a38      	ldr	r2, [pc, #224]	; (800256c <HAL_RCC_ClockConfig+0x134>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002492:	5cd3      	ldrb	r3, [r2, r3]
 8002494:	40d8      	lsrs	r0, r3
 8002496:	4b36      	ldr	r3, [pc, #216]	; (8002570 <HAL_RCC_ClockConfig+0x138>)
 8002498:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800249a:	2000      	movs	r0, #0
 800249c:	f006 fdc4 	bl	8009028 <HAL_InitTick>
  return HAL_OK;
 80024a0:	2000      	movs	r0, #0
 80024a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	6813      	ldr	r3, [r2, #0]
 80024a8:	f023 030f 	bic.w	r3, r3, #15
 80024ac:	430b      	orrs	r3, r1
 80024ae:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b0:	6813      	ldr	r3, [r2, #0]
 80024b2:	f003 030f 	and.w	r3, r3, #15
 80024b6:	4299      	cmp	r1, r3
 80024b8:	d1c3      	bne.n	8002442 <HAL_RCC_ClockConfig+0xa>
 80024ba:	e7cb      	b.n	8002454 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	f011 0f04 	tst.w	r1, #4
 80024c0:	4b29      	ldr	r3, [pc, #164]	; (8002568 <HAL_RCC_ClockConfig+0x130>)
 80024c2:	d003      	beq.n	80024cc <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80024ca:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024cc:	070e      	lsls	r6, r1, #28
 80024ce:	d503      	bpl.n	80024d8 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80024d6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	68a0      	ldr	r0, [r4, #8]
 80024dc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024e0:	4302      	orrs	r2, r0
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	e7b9      	b.n	800245a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e6:	6861      	ldr	r1, [r4, #4]
 80024e8:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <HAL_RCC_ClockConfig+0x130>)
 80024ea:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ec:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ee:	d11c      	bne.n	800252a <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f0:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f4:	d0a5      	beq.n	8002442 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f8:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fc:	4e1a      	ldr	r6, [pc, #104]	; (8002568 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fe:	f022 0203 	bic.w	r2, r2, #3
 8002502:	430a      	orrs	r2, r1
 8002504:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002506:	f7fe f823 	bl	8000550 <HAL_GetTick>
 800250a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250c:	68b3      	ldr	r3, [r6, #8]
 800250e:	6862      	ldr	r2, [r4, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002518:	d0a1      	beq.n	800245e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251a:	f7fe f819 	bl	8000550 <HAL_GetTick>
 800251e:	1bc0      	subs	r0, r0, r7
 8002520:	4540      	cmp	r0, r8
 8002522:	d9f3      	bls.n	800250c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8002524:	2003      	movs	r0, #3
}
 8002526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252a:	2902      	cmp	r1, #2
 800252c:	d102      	bne.n	8002534 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002532:	e7df      	b.n	80024f4 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	f012 0f02 	tst.w	r2, #2
 8002538:	e7dc      	b.n	80024f4 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	6813      	ldr	r3, [r2, #0]
 800253c:	f023 030f 	bic.w	r3, r3, #15
 8002540:	432b      	orrs	r3, r5
 8002542:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002544:	6813      	ldr	r3, [r2, #0]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	429d      	cmp	r5, r3
 800254c:	f47f af79 	bne.w	8002442 <HAL_RCC_ClockConfig+0xa>
 8002550:	e78b      	b.n	800246a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002552:	4905      	ldr	r1, [pc, #20]	; (8002568 <HAL_RCC_ClockConfig+0x130>)
 8002554:	68e0      	ldr	r0, [r4, #12]
 8002556:	688b      	ldr	r3, [r1, #8]
 8002558:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800255c:	4303      	orrs	r3, r0
 800255e:	608b      	str	r3, [r1, #8]
 8002560:	e786      	b.n	8002470 <HAL_RCC_ClockConfig+0x38>
 8002562:	bf00      	nop
 8002564:	40023c00 	.word	0x40023c00
 8002568:	40023800 	.word	0x40023800
 800256c:	08009770 	.word	0x08009770
 8002570:	2000002c 	.word	0x2000002c

08002574 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002574:	4b01      	ldr	r3, [pc, #4]	; (800257c <HAL_RCC_GetHCLKFreq+0x8>)
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	2000002c 	.word	0x2000002c

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002582:	4a05      	ldr	r2, [pc, #20]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	4a03      	ldr	r2, [pc, #12]	; (800259c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800258e:	6810      	ldr	r0, [r2, #0]
}
 8002590:	40d8      	lsrs	r0, r3
 8002592:	4770      	bx	lr
 8002594:	40023800 	.word	0x40023800
 8002598:	08009780 	.word	0x08009780
 800259c:	2000002c 	.word	0x2000002c

080025a0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <HAL_RCC_GetPCLK2Freq+0x14>)
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80025aa:	5cd3      	ldrb	r3, [r2, r3]
 80025ac:	4a03      	ldr	r2, [pc, #12]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x1c>)
 80025ae:	6810      	ldr	r0, [r2, #0]
}
 80025b0:	40d8      	lsrs	r0, r3
 80025b2:	4770      	bx	lr
 80025b4:	40023800 	.word	0x40023800
 80025b8:	08009780 	.word	0x08009780
 80025bc:	2000002c 	.word	0x2000002c

080025c0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025c0:	230f      	movs	r3, #15
 80025c2:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_GetClockConfig+0x34>)
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	f002 0203 	and.w	r2, r2, #3
 80025cc:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80025d4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80025dc:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	08db      	lsrs	r3, r3, #3
 80025e2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80025e6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_RCC_GetClockConfig+0x38>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 030f 	and.w	r3, r3, #15
 80025f0:	600b      	str	r3, [r1, #0]
 80025f2:	4770      	bx	lr
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40023c00 	.word	0x40023c00

080025fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002600:	6802      	ldr	r2, [r0, #0]
{
 8002602:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002604:	f012 0601 	ands.w	r6, r2, #1
 8002608:	d00b      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800260a:	4bb8      	ldr	r3, [pc, #736]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800260c:	6899      	ldr	r1, [r3, #8]
 800260e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002612:	6099      	str	r1, [r3, #8]
 8002614:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002616:	6899      	ldr	r1, [r3, #8]
 8002618:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800261a:	fab6 f686 	clz	r6, r6
 800261e:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002620:	6099      	str	r1, [r3, #8]
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002622:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8002626:	d012      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002628:	49b0      	ldr	r1, [pc, #704]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800262a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800262c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002630:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002634:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1; 
 8002638:	bf08      	it	eq
 800263a:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800263c:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002640:	bf16      	itet	ne
 8002642:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8002646:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002648:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800264a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800264e:	02d1      	lsls	r1, r2, #11
 8002650:	d510      	bpl.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002652:	48a6      	ldr	r0, [pc, #664]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002654:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002656:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800265a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800265e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002662:	ea43 0301 	orr.w	r3, r3, r1
 8002666:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800266a:	f000 8185 	beq.w	8002978 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 800266e:	2900      	cmp	r1, #0
 8002670:	bf08      	it	eq
 8002672:	2501      	moveq	r5, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 8002674:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8002678:	bf18      	it	ne
 800267a:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800267c:	0692      	lsls	r2, r2, #26
 800267e:	d531      	bpl.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002680:	4b9a      	ldr	r3, [pc, #616]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002682:	4f9b      	ldr	r7, [pc, #620]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002686:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269c:	603b      	str	r3, [r7, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800269e:	f7fd ff57 	bl	8000550 <HAL_GetTick>
 80026a2:	4680      	mov	r8, r0
    
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	05db      	lsls	r3, r3, #23
 80026a8:	f140 8168 	bpl.w	800297c <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026ac:	4f8f      	ldr	r7, [pc, #572]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026b0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80026b4:	f040 816d 	bne.w	8002992 <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80026ba:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80026be:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80026c2:	4a8a      	ldr	r2, [pc, #552]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026c4:	f040 818b 	bne.w	80029de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80026c8:	6891      	ldr	r1, [r2, #8]
 80026ca:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80026ce:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80026d2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80026d6:	4301      	orrs	r1, r0
 80026d8:	6091      	str	r1, [r2, #8]
 80026da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026de:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80026e0:	430b      	orrs	r3, r1
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	06da      	lsls	r2, r3, #27
 80026e8:	d50c      	bpl.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80026ea:	4a80      	ldr	r2, [pc, #512]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80026ec:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80026f0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80026f4:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80026f8:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80026fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80026fe:	4301      	orrs	r1, r0
 8002700:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002704:	045f      	lsls	r7, r3, #17
 8002706:	d508      	bpl.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002708:	4978      	ldr	r1, [pc, #480]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800270a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800270c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002710:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002714:	4302      	orrs	r2, r0
 8002716:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800271a:	0418      	lsls	r0, r3, #16
 800271c:	d508      	bpl.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800271e:	4973      	ldr	r1, [pc, #460]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002720:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8002722:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002726:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800272a:	4302      	orrs	r2, r0
 800272c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002730:	03d9      	lsls	r1, r3, #15
 8002732:	d508      	bpl.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002734:	496d      	ldr	r1, [pc, #436]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002736:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002738:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800273c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002740:	4302      	orrs	r2, r0
 8002742:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002746:	039a      	lsls	r2, r3, #14
 8002748:	d508      	bpl.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800274a:	4968      	ldr	r1, [pc, #416]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800274c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800274e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002752:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8002756:	4302      	orrs	r2, r0
 8002758:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800275c:	065f      	lsls	r7, r3, #25
 800275e:	d508      	bpl.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002760:	4962      	ldr	r1, [pc, #392]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002762:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002764:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002768:	f022 0203 	bic.w	r2, r2, #3
 800276c:	4302      	orrs	r2, r0
 800276e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002772:	0618      	lsls	r0, r3, #24
 8002774:	d508      	bpl.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002776:	495d      	ldr	r1, [pc, #372]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002778:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800277a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800277e:	f022 020c 	bic.w	r2, r2, #12
 8002782:	4302      	orrs	r2, r0
 8002784:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002788:	05d9      	lsls	r1, r3, #23
 800278a:	d508      	bpl.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800278c:	4957      	ldr	r1, [pc, #348]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800278e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002790:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002794:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002798:	4302      	orrs	r2, r0
 800279a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800279e:	059a      	lsls	r2, r3, #22
 80027a0:	d508      	bpl.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80027a2:	4952      	ldr	r1, [pc, #328]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80027a6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027aa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80027ae:	4302      	orrs	r2, r0
 80027b0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027b4:	055f      	lsls	r7, r3, #21
 80027b6:	d508      	bpl.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027b8:	494c      	ldr	r1, [pc, #304]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80027bc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027c0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027c4:	4302      	orrs	r2, r0
 80027c6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80027ca:	0518      	lsls	r0, r3, #20
 80027cc:	d508      	bpl.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80027ce:	4947      	ldr	r1, [pc, #284]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80027d2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80027da:	4302      	orrs	r2, r0
 80027dc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80027e0:	04d9      	lsls	r1, r3, #19
 80027e2:	d508      	bpl.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80027e4:	4941      	ldr	r1, [pc, #260]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027e6:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80027e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80027ec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80027f0:	4302      	orrs	r2, r0
 80027f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80027f6:	049a      	lsls	r2, r3, #18
 80027f8:	d508      	bpl.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80027fa:	493c      	ldr	r1, [pc, #240]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80027fc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80027fe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002802:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002806:	4302      	orrs	r2, r0
 8002808:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800280c:	025f      	lsls	r7, r3, #9
 800280e:	d508      	bpl.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002810:	4936      	ldr	r1, [pc, #216]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002812:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002814:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002818:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800281c:	4302      	orrs	r2, r0
 800281e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002822:	0298      	lsls	r0, r3, #10
 8002824:	d50c      	bpl.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002826:	4831      	ldr	r0, [pc, #196]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002828:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800282a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 800282e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002832:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1; 
 8002836:	bf08      	it	eq
 8002838:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800283a:	430a      	orrs	r2, r1
 800283c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8002840:	f013 0f08 	tst.w	r3, #8
 8002844:	bf18      	it	ne
 8002846:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002848:	0359      	lsls	r1, r3, #13
 800284a:	d508      	bpl.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800284c:	4927      	ldr	r1, [pc, #156]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800284e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002850:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002854:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002858:	4302      	orrs	r2, r0
 800285a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800285e:	021a      	lsls	r2, r3, #8
 8002860:	d509      	bpl.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002862:	4922      	ldr	r1, [pc, #136]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002864:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002868:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800286c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002870:	4302      	orrs	r2, r0
 8002872:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }  
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
  
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002876:	2e01      	cmp	r6, #1
 8002878:	f000 80b5 	beq.w	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800287c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002880:	f000 80b1 	beq.w	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002884:	2d01      	cmp	r5, #1
 8002886:	d175      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 8002888:	4d18      	ldr	r5, [pc, #96]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800288a:	682b      	ldr	r3, [r5, #0]
 800288c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002890:	602b      	str	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002892:	f7fd fe5d 	bl	8000550 <HAL_GetTick>
 8002896:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	009f      	lsls	r7, r3, #2
 800289c:	f100 8127 	bmi.w	8002aee <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028a0:	6821      	ldr	r1, [r4, #0]
 80028a2:	030e      	lsls	r6, r1, #12
 80028a4:	d501      	bpl.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80028a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028a8:	b11b      	cbz	r3, 80028b2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80028aa:	02cd      	lsls	r5, r1, #11
 80028ac:	d522      	bpl.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028b0:	bb03      	cbnz	r3, 80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028b2:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80028b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028b8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028c0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80028c4:	4303      	orrs	r3, r0
 80028c6:	6960      	ldr	r0, [r4, #20]
 80028c8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80028cc:	69a0      	ldr	r0, [r4, #24]
 80028ce:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80028d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028d6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80028da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80028dc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80028e0:	3801      	subs	r0, #1
 80028e2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80028e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028ea:	e003      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40007000 	.word	0x40007000
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028f4:	0288      	lsls	r0, r1, #10
 80028f6:	d515      	bpl.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80028f8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80028fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028fe:	d111      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002900:	4a82      	ldr	r2, [pc, #520]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002902:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002906:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800290a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800290e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002912:	4303      	orrs	r3, r0
 8002914:	6960      	ldr	r0, [r4, #20]
 8002916:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800291a:	6a20      	ldr	r0, [r4, #32]
 800291c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }        

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) 
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002924:	070a      	lsls	r2, r1, #28
 8002926:	d519      	bpl.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002928:	4978      	ldr	r1, [pc, #480]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800292a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800292e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002932:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8002936:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800293a:	4313      	orrs	r3, r2
 800293c:	6962      	ldr	r2, [r4, #20]
 800293e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002942:	69e2      	ldr	r2, [r4, #28]
 8002944:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800294c:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8002950:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002952:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }    
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800295c:	4c6b      	ldr	r4, [pc, #428]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	6023      	str	r3, [r4, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002966:	f7fd fdf3 	bl	8000550 <HAL_GetTick>
 800296a:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	f140 80c4 	bpl.w	8002afc <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002974:	2000      	movs	r0, #0
 8002976:	e009      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1; 
 8002978:	2601      	movs	r6, #1
 800297a:	e67b      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297c:	f7fd fde8 	bl	8000550 <HAL_GetTick>
 8002980:	eba0 0008 	sub.w	r0, r0, r8
 8002984:	2864      	cmp	r0, #100	; 0x64
 8002986:	f67f ae8d 	bls.w	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800298a:	2003      	movs	r0, #3
}
 800298c:	b003      	add	sp, #12
 800298e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002992:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002994:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002998:	4293      	cmp	r3, r2
 800299a:	f43f ae8d 	beq.w	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800299e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80029a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80029a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029aa:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80029ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029b2:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80029b4:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b8:	07d8      	lsls	r0, r3, #31
 80029ba:	f57f ae7d 	bpl.w	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80029be:	f7fd fdc7 	bl	8000550 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80029c6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029ca:	0799      	lsls	r1, r3, #30
 80029cc:	f53f ae74 	bmi.w	80026b8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d0:	f7fd fdbe 	bl	8000550 <HAL_GetTick>
 80029d4:	eba0 0008 	sub.w	r0, r0, r8
 80029d8:	4548      	cmp	r0, r9
 80029da:	d9f5      	bls.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80029dc:	e7d5      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029de:	6891      	ldr	r1, [r2, #8]
 80029e0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80029e4:	e678      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();  
 80029e6:	4e49      	ldr	r6, [pc, #292]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80029e8:	6833      	ldr	r3, [r6, #0]
 80029ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029ee:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80029f0:	f7fd fdae 	bl	8000550 <HAL_GetTick>
 80029f4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029f6:	6833      	ldr	r3, [r6, #0]
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	d472      	bmi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80029fc:	6822      	ldr	r2, [r4, #0]
 80029fe:	07d7      	lsls	r7, r2, #31
 8002a00:	d512      	bpl.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8002a02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a04:	b983      	cbnz	r3, 8002a28 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a06:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a0a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a12:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002a16:	430b      	orrs	r3, r1
 8002a18:	6861      	ldr	r1, [r4, #4]
 8002a1a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002a1e:	68a1      	ldr	r1, [r4, #8]
 8002a20:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002a24:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a28:	0316      	lsls	r6, r2, #12
 8002a2a:	d503      	bpl.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8002a2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a32:	d005      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x444>
 8002a34:	02d0      	lsls	r0, r2, #11
 8002a36:	d51e      	bpl.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8002a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a3e:	d11a      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a40:	4932      	ldr	r1, [pc, #200]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002a42:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a46:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a4e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002a52:	4303      	orrs	r3, r0
 8002a54:	6860      	ldr	r0, [r4, #4]
 8002a56:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a5a:	68e0      	ldr	r0, [r4, #12]
 8002a5c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002a60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 8002a64:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002a68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a6a:	f020 001f 	bic.w	r0, r0, #31
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	4303      	orrs	r3, r0
 8002a72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a76:	01d1      	lsls	r1, r2, #7
 8002a78:	d511      	bpl.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a7a:	4924      	ldr	r1, [pc, #144]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002a7c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a80:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a84:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002a88:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002a8c:	4303      	orrs	r3, r0
 8002a8e:	6860      	ldr	r0, [r4, #4]
 8002a90:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a94:	6920      	ldr	r0, [r4, #16]
 8002a96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002a9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002a9e:	0192      	lsls	r2, r2, #6
 8002aa0:	d50d      	bpl.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002aa2:	6923      	ldr	r3, [r4, #16]
 8002aa4:	6862      	ldr	r2, [r4, #4]
 8002aa6:	041b      	lsls	r3, r3, #16
 8002aa8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002aac:	68e2      	ldr	r2, [r4, #12]
 8002aae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ab2:	68a2      	ldr	r2, [r4, #8]
 8002ab4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002aba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002abe:	4e13      	ldr	r6, [pc, #76]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002ac0:	6833      	ldr	r3, [r6, #0]
 8002ac2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ac6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002ac8:	f7fd fd42 	bl	8000550 <HAL_GetTick>
 8002acc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ace:	6833      	ldr	r3, [r6, #0]
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	f53f aed7 	bmi.w	8002884 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ad6:	f7fd fd3b 	bl	8000550 <HAL_GetTick>
 8002ada:	1bc0      	subs	r0, r0, r7
 8002adc:	2864      	cmp	r0, #100	; 0x64
 8002ade:	d9f6      	bls.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ae0:	e753      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ae2:	f7fd fd35 	bl	8000550 <HAL_GetTick>
 8002ae6:	1bc0      	subs	r0, r0, r7
 8002ae8:	2864      	cmp	r0, #100	; 0x64
 8002aea:	d984      	bls.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002aec:	e74d      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002aee:	f7fd fd2f 	bl	8000550 <HAL_GetTick>
 8002af2:	1b80      	subs	r0, r0, r6
 8002af4:	2864      	cmp	r0, #100	; 0x64
 8002af6:	f67f aecf 	bls.w	8002898 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8002afa:	e746      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002afc:	f7fd fd28 	bl	8000550 <HAL_GetTick>
 8002b00:	1b40      	subs	r0, r0, r5
 8002b02:	2864      	cmp	r0, #100	; 0x64
 8002b04:	f67f af32 	bls.w	800296c <HAL_RCCEx_PeriphCLKConfig+0x370>
 8002b08:	e73f      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800

08002b10 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
  
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8002b10:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8002b14:	d12a      	bne.n	8002b6c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
  {
    saiclocksource = RCC->DCKCFGR1;   
 8002b16:	4b2c      	ldr	r3, [pc, #176]	; (8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002b18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8002b1c:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 8002b20:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002b24:	d032      	beq.n	8002b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8002b26:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
  
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;   
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 8002b2a:	d02d      	beq.n	8002b88 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
 8002b2c:	2a00      	cmp	r2, #0
 8002b2e:	d148      	bne.n	8002bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {
    case 0: /* PLLSAI is the clock source for SAI*/ 
      {
        /* Configure the PLLSAI division factor */
        /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */ 
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002b30:	685a      	ldr	r2, [r3, #4]
        {
          /* In Case the PLL Source is HSI (Internal Clock) */
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b32:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002b34:	0252      	lsls	r2, r2, #9
          /* In Case the PLL Source is HSE (External Clock) */
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
        }   
        /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
        /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002b36:	4a24      	ldr	r2, [pc, #144]	; (8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b38:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002b3c:	bf54      	ite	pl
 8002b3e:	4b23      	ldrpl	r3, [pc, #140]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002b40:	4b23      	ldrmi	r3, [pc, #140]	; (8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002b42:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002b46:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8002b4a:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8002b4e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002b52:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8002b54:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8002b58:	fbb0 f0f3 	udiv	r0, r0, r3
        
        /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8002b5c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002b60:	f3c3 2304 	ubfx	r3, r3, #8, #5
        /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
        
        /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8002b64:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8002b66:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8002b6a:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8002b6c:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8002b70:	d127      	bne.n	8002bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    saiclocksource = RCC->DCKCFGR1;   
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002b74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8002b78:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8002b7c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002b80:	d004      	beq.n	8002b8c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8002b82:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8002b86:	e7d0      	b.n	8002b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
      }
    case RCC_DCKCFGR1_SAI2SEL_1: /* External clock is the clock source for SAI2 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8002b88:	4812      	ldr	r0, [pc, #72]	; (8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>)
 8002b8a:	4770      	bx	lr
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002b8c:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b8e:	6858      	ldr	r0, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8002b90:	0253      	lsls	r3, r2, #9
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002b92:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002b94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8002b98:	bf54      	ite	pl
 8002b9a:	4b0c      	ldrpl	r3, [pc, #48]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002b9c:	4b0c      	ldrmi	r3, [pc, #48]	; (8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002b9e:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8002ba2:	fbb3 f3f0 	udiv	r3, r3, r0
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8002ba6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8002baa:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002bae:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8002bb0:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8002bb4:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1); 
 8002bb8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	e7d0      	b.n	8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t frequency = 0;
 8002bc2:	2000      	movs	r0, #0
      }
    }
  }
  
  return frequency;
}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	00f42400 	.word	0x00f42400
 8002bd0:	017d7840 	.word	0x017d7840
 8002bd4:	00bb8000 	.word	0x00bb8000

08002bd8 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002bd8:	6802      	ldr	r2, [r0, #0]
{
 8002bda:	b538      	push	{r3, r4, r5, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002bdc:	68d3      	ldr	r3, [r2, #12]
{
 8002bde:	4604      	mov	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002be0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002be4:	60d3      	str	r3, [r2, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002be6:	f7fd fcb3 	bl	8000550 <HAL_GetTick>
 8002bea:	4605      	mov	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	069b      	lsls	r3, r3, #26
 8002bf2:	d501      	bpl.n	8002bf8 <HAL_RTC_WaitForSynchro+0x20>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bf8:	f7fd fcaa 	bl	8000550 <HAL_GetTick>
 8002bfc:	1b40      	subs	r0, r0, r5
 8002bfe:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c02:	d9f3      	bls.n	8002bec <HAL_RTC_WaitForSynchro+0x14>
      return HAL_TIMEOUT;
 8002c04:	2003      	movs	r0, #3
}
 8002c06:	bd38      	pop	{r3, r4, r5, pc}

08002c08 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002c08:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0; 
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c0a:	6803      	ldr	r3, [r0, #0]
{
 8002c0c:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c0e:	68da      	ldr	r2, [r3, #12]
 8002c10:	0652      	lsls	r2, r2, #25
 8002c12:	d501      	bpl.n	8002c18 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8002c14:	2000      	movs	r0, #0
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c18:	f04f 32ff 	mov.w	r2, #4294967295
 8002c1c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002c1e:	f7fd fc97 	bl	8000550 <HAL_GetTick>
 8002c22:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	065b      	lsls	r3, r3, #25
 8002c2a:	d4f3      	bmi.n	8002c14 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c2c:	f7fd fc90 	bl	8000550 <HAL_GetTick>
 8002c30:	1b40      	subs	r0, r0, r5
 8002c32:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002c36:	d9f5      	bls.n	8002c24 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8002c38:	2003      	movs	r0, #3
}
 8002c3a:	bd38      	pop	{r3, r4, r5, pc}

08002c3c <HAL_RTC_Init>:
{
 8002c3c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8002c3e:	4604      	mov	r4, r0
 8002c40:	b1b0      	cbz	r0, 8002c70 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c42:	7f43      	ldrb	r3, [r0, #29]
 8002c44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c48:	b913      	cbnz	r3, 8002c50 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8002c4a:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8002c4c:	f005 ffbe 	bl	8008bcc <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002c50:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c52:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c54:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8002c56:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c5c:	2253      	movs	r2, #83	; 0x53
 8002c5e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c60:	f7ff ffd2 	bl	8002c08 <RTC_EnterInitMode>
 8002c64:	6823      	ldr	r3, [r4, #0]
 8002c66:	b128      	cbz	r0, 8002c74 <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002c68:	22ff      	movs	r2, #255	; 0xff
 8002c6a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 8002c70:	2001      	movs	r0, #1
}
 8002c72:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c74:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c76:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c78:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8002c7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c80:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c82:	6862      	ldr	r2, [r4, #4]
 8002c84:	6899      	ldr	r1, [r3, #8]
 8002c86:	432a      	orrs	r2, r5
 8002c88:	6965      	ldr	r5, [r4, #20]
 8002c8a:	432a      	orrs	r2, r5
 8002c8c:	430a      	orrs	r2, r1
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002c8e:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c90:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c92:	68e2      	ldr	r2, [r4, #12]
 8002c94:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002c96:	691a      	ldr	r2, [r3, #16]
 8002c98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002c9c:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002c9e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ca6:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002ca8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002caa:	f022 0208 	bic.w	r2, r2, #8
 8002cae:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType); 
 8002cb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002cb6:	22ff      	movs	r2, #255	; 0xff
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8002cbe:	bd38      	pop	{r3, r4, r5, pc}

08002cc0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
 8002cc0:	2300      	movs	r3, #0
  
  while(Value >= 10)
 8002cc2:	2809      	cmp	r0, #9
 8002cc4:	d803      	bhi.n	8002cce <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8002cc6:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8002cca:	b2c0      	uxtb	r0, r0
 8002ccc:	4770      	bx	lr
    Value -= 10;
 8002cce:	380a      	subs	r0, #10
    bcdhigh++;
 8002cd0:	3301      	adds	r3, #1
    Value -= 10;
 8002cd2:	b2c0      	uxtb	r0, r0
 8002cd4:	e7f5      	b.n	8002cc2 <RTC_ByteToBcd2+0x2>

08002cd6 <HAL_RTC_SetDate>:
{
 8002cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 __HAL_LOCK(hrtc);
 8002cd8:	7f03      	ldrb	r3, [r0, #28]
{
 8002cda:	4605      	mov	r5, r0
 8002cdc:	2602      	movs	r6, #2
 __HAL_LOCK(hrtc);
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d030      	beq.n	8002d44 <HAL_RTC_SetDate+0x6e>
 8002ce2:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8002ce4:	7746      	strb	r6, [r0, #29]
 __HAL_LOCK(hrtc);
 8002ce6:	7703      	strb	r3, [r0, #28]
 8002ce8:	784b      	ldrb	r3, [r1, #1]
 8002cea:	78c8      	ldrb	r0, [r1, #3]
 8002cec:	788e      	ldrb	r6, [r1, #2]
 8002cee:	780c      	ldrb	r4, [r1, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002cf0:	2a00      	cmp	r2, #0
 8002cf2:	d148      	bne.n	8002d86 <HAL_RTC_SetDate+0xb0>
 8002cf4:	06da      	lsls	r2, r3, #27
 8002cf6:	d503      	bpl.n	8002d00 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002cf8:	f023 0310 	bic.w	r3, r3, #16
 8002cfc:	330a      	adds	r3, #10
 8002cfe:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002d00:	f7ff ffde 	bl	8002cc0 <RTC_ByteToBcd2>
 8002d04:	4607      	mov	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8002d06:	7848      	ldrb	r0, [r1, #1]
 8002d08:	f7ff ffda 	bl	8002cc0 <RTC_ByteToBcd2>
 8002d0c:	4602      	mov	r2, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002d0e:	4630      	mov	r0, r6
 8002d10:	f7ff ffd6 	bl	8002cc0 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8002d14:	ea40 3044 	orr.w	r0, r0, r4, lsl #13
 8002d18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8002d1c:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d24:	4628      	mov	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24
 8002d28:	2253      	movs	r2, #83	; 0x53
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d2c:	f7ff ff6c 	bl	8002c08 <RTC_EnterInitMode>
 8002d30:	682b      	ldr	r3, [r5, #0]
 8002d32:	4606      	mov	r6, r0
 8002d34:	b140      	cbz	r0, 8002d48 <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002d36:	22ff      	movs	r2, #255	; 0xff
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	772b      	strb	r3, [r5, #28]
        return HAL_ERROR;
 8002d42:	2601      	movs	r6, #1
}
 8002d44:	4630      	mov	r0, r6
 8002d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d48:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8002d4c:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8002d50:	605c      	str	r4, [r3, #4]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d58:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	069b      	lsls	r3, r3, #26
 8002d5e:	d40a      	bmi.n	8002d76 <HAL_RTC_SetDate+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d60:	4628      	mov	r0, r5
 8002d62:	f7ff ff39 	bl	8002bd8 <HAL_RTC_WaitForSynchro>
 8002d66:	b130      	cbz	r0, 8002d76 <HAL_RTC_SetDate+0xa0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002d68:	682b      	ldr	r3, [r5, #0]
 8002d6a:	22ff      	movs	r2, #255	; 0xff
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d6e:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8002d70:	772e      	strb	r6, [r5, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d72:	776b      	strb	r3, [r5, #29]
 8002d74:	e7e5      	b.n	8002d42 <HAL_RTC_SetDate+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002d76:	682b      	ldr	r3, [r5, #0]
 8002d78:	22ff      	movs	r2, #255	; 0xff
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	776b      	strb	r3, [r5, #29]
    __HAL_UNLOCK(hrtc);
 8002d80:	2300      	movs	r3, #0
 8002d82:	772b      	strb	r3, [r5, #28]
    return HAL_OK;    
 8002d84:	e7de      	b.n	8002d44 <HAL_RTC_SetDate+0x6e>
                  (((uint32_t)sDate->Month) << 8) | \
 8002d86:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002d88:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
                  (((uint32_t)sDate->Month) << 8) | \
 8002d8c:	4330      	orrs	r0, r6
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8002d8e:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
 8002d92:	e7c5      	b.n	8002d20 <HAL_RTC_SetDate+0x4a>

08002d94 <HAL_RTC_SetTime>:
{
 8002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002d96:	7f03      	ldrb	r3, [r0, #28]
{
 8002d98:	4606      	mov	r6, r0
 8002d9a:	460f      	mov	r7, r1
 8002d9c:	2502      	movs	r5, #2
  __HAL_LOCK(hrtc);
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d02f      	beq.n	8002e02 <HAL_RTC_SetTime+0x6e>
 8002da2:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002da4:	7745      	strb	r5, [r0, #29]
  __HAL_LOCK(hrtc);
 8002da6:	7703      	strb	r3, [r0, #28]
 8002da8:	6803      	ldr	r3, [r0, #0]
 8002daa:	784d      	ldrb	r5, [r1, #1]
 8002dac:	7808      	ldrb	r0, [r1, #0]
 8002dae:	788c      	ldrb	r4, [r1, #2]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002db0:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8002db2:	bb42      	cbnz	r2, 8002e06 <HAL_RTC_SetTime+0x72>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002db4:	f013 0340 	ands.w	r3, r3, #64	; 0x40
      sTime->TimeFormat = 0x00;
 8002db8:	bf08      	it	eq
 8002dba:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002dbc:	f7ff ff80 	bl	8002cc0 <RTC_ByteToBcd2>
 8002dc0:	4601      	mov	r1, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	f7ff ff7c 	bl	8002cc0 <RTC_ByteToBcd2>
 8002dc8:	4602      	mov	r2, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f7ff ff78 	bl	8002cc0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8002dd0:	7b3b      	ldrb	r3, [r7, #12]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8002dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8002dd6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8002dda:	ea40 2402 	orr.w	r4, r0, r2, lsl #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dde:	6833      	ldr	r3, [r6, #0]
 8002de0:	22ca      	movs	r2, #202	; 0xca
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002de2:	4630      	mov	r0, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
 8002de6:	2253      	movs	r2, #83	; 0x53
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002dea:	f7ff ff0d 	bl	8002c08 <RTC_EnterInitMode>
 8002dee:	6833      	ldr	r3, [r6, #0]
 8002df0:	4605      	mov	r5, r0
 8002df2:	b1a0      	cbz	r0, 8002e1e <HAL_RTC_SetTime+0x8a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8002df4:	22ff      	movs	r2, #255	; 0xff
 8002df6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002df8:	2304      	movs	r3, #4
 8002dfa:	7773      	strb	r3, [r6, #29]
    __HAL_UNLOCK(hrtc);
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	7733      	strb	r3, [r6, #28]
        return HAL_ERROR;
 8002e00:	2501      	movs	r5, #1
}
 8002e02:	4628      	mov	r0, r5
 8002e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002e06:	022d      	lsls	r5, r5, #8
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e08:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002e0c:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
      sTime->TimeFormat = 0x00;
 8002e10:	bf08      	it	eq
 8002e12:	730b      	strbeq	r3, [r1, #12]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8002e14:	4320      	orrs	r0, r4
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8002e16:	7b0c      	ldrb	r4, [r1, #12]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8002e18:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8002e1c:	e7df      	b.n	8002dde <HAL_RTC_SetTime+0x4a>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e1e:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e22:	6978      	ldr	r0, [r7, #20]
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e24:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8002e28:	601c      	str	r4, [r3, #0]
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e30:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	6899      	ldr	r1, [r3, #8]
 8002e36:	4302      	orrs	r2, r0
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e42:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	069b      	lsls	r3, r3, #26
 8002e48:	d40a      	bmi.n	8002e60 <HAL_RTC_SetTime+0xcc>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f7ff fec4 	bl	8002bd8 <HAL_RTC_WaitForSynchro>
 8002e50:	b130      	cbz	r0, 8002e60 <HAL_RTC_SetTime+0xcc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8002e52:	6833      	ldr	r3, [r6, #0]
 8002e54:	22ff      	movs	r2, #255	; 0xff
 8002e56:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e58:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8002e5a:	7735      	strb	r5, [r6, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e5c:	7773      	strb	r3, [r6, #29]
 8002e5e:	e7cf      	b.n	8002e00 <HAL_RTC_SetTime+0x6c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e60:	6833      	ldr	r3, [r6, #0]
 8002e62:	22ff      	movs	r2, #255	; 0xff
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8002e66:	2301      	movs	r3, #1
 8002e68:	7773      	strb	r3, [r6, #29]
   __HAL_UNLOCK(hrtc); 
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	7733      	strb	r3, [r6, #28]
   return HAL_OK;
 8002e6e:	e7c8      	b.n	8002e02 <HAL_RTC_SetTime+0x6e>

08002e70 <HAL_RTC_SetAlarm>:
  __HAL_LOCK(hrtc);
 8002e70:	7f03      	ldrb	r3, [r0, #28]
 8002e72:	2b01      	cmp	r3, #1
{
 8002e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e78:	4604      	mov	r4, r0
 8002e7a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hrtc);
 8002e7e:	d056      	beq.n	8002f2e <HAL_RTC_SetAlarm+0xbe>
 8002e80:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e82:	7760      	strb	r0, [r4, #29]
 8002e84:	6a0e      	ldr	r6, [r1, #32]
  __HAL_LOCK(hrtc);
 8002e86:	7723      	strb	r3, [r4, #28]
 8002e88:	6823      	ldr	r3, [r4, #0]
 8002e8a:	7808      	ldrb	r0, [r1, #0]
 8002e8c:	f891 9001 	ldrb.w	r9, [r1, #1]
 8002e90:	788d      	ldrb	r5, [r1, #2]
 8002e92:	f891 8024 	ldrb.w	r8, [r1, #36]	; 0x24
 8002e96:	698f      	ldr	r7, [r1, #24]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e98:	689b      	ldr	r3, [r3, #8]
  if(Format == RTC_FORMAT_BIN)
 8002e9a:	2a00      	cmp	r2, #0
 8002e9c:	d149      	bne.n	8002f32 <HAL_RTC_SetAlarm+0xc2>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e9e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8002ea2:	ea46 0607 	orr.w	r6, r6, r7
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8002ea6:	bf08      	it	eq
 8002ea8:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8002eaa:	f7ff ff09 	bl	8002cc0 <RTC_ByteToBcd2>
 8002eae:	4682      	mov	sl, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8002eb0:	4648      	mov	r0, r9
 8002eb2:	f7ff ff05 	bl	8002cc0 <RTC_ByteToBcd2>
 8002eb6:	4602      	mov	r2, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002eb8:	4628      	mov	r0, r5
 8002eba:	f7ff ff01 	bl	8002cc0 <RTC_ByteToBcd2>
 8002ebe:	4681      	mov	r9, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8002ec0:	4640      	mov	r0, r8
 8002ec2:	f7ff fefd 	bl	8002cc0 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8002ec6:	7b0d      	ldrb	r5, [r1, #12]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8002ec8:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
 8002ecc:	ea45 0509 	orr.w	r5, r5, r9
 8002ed0:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8002ed4:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8002ed8:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002edc:	69cb      	ldr	r3, [r1, #28]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ede:	22ca      	movs	r2, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002ee0:	684e      	ldr	r6, [r1, #4]
 8002ee2:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ee8:	2253      	movs	r2, #83	; 0x53
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002eec:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8002eee:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002ef2:	689a      	ldr	r2, [r3, #8]
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002ef4:	d13d      	bne.n	8002f72 <HAL_RTC_SetAlarm+0x102>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002ef6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002efa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f02:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002f04:	f7fd fb24 	bl	8000550 <HAL_GetTick>
 8002f08:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	68df      	ldr	r7, [r3, #12]
 8002f0e:	f017 0701 	ands.w	r7, r7, #1
 8002f12:	d01f      	beq.n	8002f54 <HAL_RTC_SetAlarm+0xe4>
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002f14:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002f16:	645e      	str	r6, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 8002f1e:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 8002f20:	22ff      	movs	r2, #255	; 0xff
 8002f22:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hrtc);
 8002f24:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);   
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY; 
 8002f28:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8002f2a:	7720      	strb	r0, [r4, #28]
  hrtc->State = HAL_RTC_STATE_READY; 
 8002f2c:	7763      	strb	r3, [r4, #29]
}
 8002f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8002f32:	433e      	orrs	r6, r7
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002f34:	f013 0340 	ands.w	r3, r3, #64	; 0x40
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8002f38:	ea45 0506 	orr.w	r5, r5, r6
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8002f3c:	bf08      	it	eq
 8002f3e:	730b      	strbeq	r3, [r1, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8002f40:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8002f44:	7b08      	ldrb	r0, [r1, #12]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8002f46:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
 8002f4a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8002f4e:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
 8002f52:	e7c3      	b.n	8002edc <HAL_RTC_SetAlarm+0x6c>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f54:	f7fd fafc 	bl	8000550 <HAL_GetTick>
 8002f58:	eba0 0008 	sub.w	r0, r0, r8
 8002f5c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002f60:	d9d3      	bls.n	8002f0a <HAL_RTC_SetAlarm+0x9a>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8002f66:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT; 
 8002f6a:	7760      	strb	r0, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8002f6c:	7727      	strb	r7, [r4, #28]
        return HAL_TIMEOUT;
 8002f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002f72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f76:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f7e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002f80:	f7fd fae6 	bl	8000550 <HAL_GetTick>
 8002f84:	4680      	mov	r8, r0
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	68df      	ldr	r7, [r3, #12]
 8002f8a:	f017 0702 	ands.w	r7, r7, #2
 8002f8e:	d005      	beq.n	8002f9c <HAL_RTC_SetAlarm+0x12c>
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002f90:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002f92:	649e      	str	r6, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc); 
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9a:	e7c0      	b.n	8002f1e <HAL_RTC_SetAlarm+0xae>
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f9c:	f7fd fad8 	bl	8000550 <HAL_GetTick>
 8002fa0:	eba0 0008 	sub.w	r0, r0, r8
 8002fa4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002fa8:	d9ed      	bls.n	8002f86 <HAL_RTC_SetAlarm+0x116>
 8002faa:	e7da      	b.n	8002f62 <HAL_RTC_SetAlarm+0xf2>

08002fac <HAL_RTCEx_SetTimeStamp>:
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8002fac:	7f03      	ldrb	r3, [r0, #28]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	f04f 0302 	mov.w	r3, #2
{
 8002fb4:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8002fb6:	d01d      	beq.n	8002ff4 <HAL_RTCEx_SetTimeStamp+0x48>
  
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fb8:	7743      	strb	r3, [r0, #29]
  
  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8002fba:	6803      	ldr	r3, [r0, #0]
 8002fbc:	689c      	ldr	r4, [r3, #8]
 8002fbe:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
 8002fc2:	f024 0408 	bic.w	r4, r4, #8
    
  tmpreg|= TimeStampEdge;
 8002fc6:	430c      	orrs	r4, r1
  
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fc8:	21ca      	movs	r1, #202	; 0xca
 8002fca:	6259      	str	r1, [r3, #36]	; 0x24
 8002fcc:	2153      	movs	r1, #83	; 0x53
 8002fce:	6259      	str	r1, [r3, #36]	; 0x24
  
  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8002fd0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002fd2:	f021 0106 	bic.w	r1, r1, #6
 8002fd6:	64d9      	str	r1, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin); 
 8002fd8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8002fde:	609c      	str	r4, [r3, #8]
  
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe6:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);    
 8002fe8:	22ff      	movs	r2, #255	; 0xff
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8002fec:	2301      	movs	r3, #1
 8002fee:	7743      	strb	r3, [r0, #29]
  
  /* Process Unlocked */ 
  __HAL_UNLOCK(hrtc);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	7703      	strb	r3, [r0, #28]
  __HAL_LOCK(hrtc);
 8002ff4:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8002ff6:	bd10      	pop	{r4, pc}

08002ff8 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8002ff8:	6803      	ldr	r3, [r0, #0]
 8002ffa:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
  
  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002ffc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8003000:	4770      	bx	lr

08003002 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8003002:	6803      	ldr	r3, [r0, #0]
 8003004:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8003006:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
}
 800300a:	4770      	bx	lr

0800300c <SAI_Disable>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <SAI_Disable+0x3c>)
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800300e:	6801      	ldr	r1, [r0, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	f641 3358 	movw	r3, #7000	; 0x1b58
 8003016:	fbb2 f2f3 	udiv	r2, r2, r3
  __HAL_SAI_DISABLE(hsai);
 800301a:	680b      	ldr	r3, [r1, #0]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 800301c:	0092      	lsls	r2, r2, #2
  __HAL_SAI_DISABLE(hsai);
 800301e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003022:	600b      	str	r3, [r1, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8003024:	f112 32ff 	adds.w	r2, r2, #4294967295
 8003028:	d207      	bcs.n	800303a <SAI_Disable+0x2e>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800302a:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 800302e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003032:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
 8003036:	2003      	movs	r0, #3
      break;
 8003038:	4770      	bx	lr
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800303a:	680b      	ldr	r3, [r1, #0]
 800303c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8003040:	d1f0      	bne.n	8003024 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8003042:	4618      	mov	r0, r3

  return status;
}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	2000002c 	.word	0x2000002c

0800304c <HAL_SAI_Init>:
{
 800304c:	b570      	push	{r4, r5, r6, lr}
  if(hsai == NULL)
 800304e:	4604      	mov	r4, r0
 8003050:	2800      	cmp	r0, #0
 8003052:	f000 80c5 	beq.w	80031e0 <HAL_SAI_Init+0x194>
  if(hsai->State == HAL_SAI_STATE_RESET)
 8003056:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 800305a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800305e:	b91b      	cbnz	r3, 8003068 <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8003060:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8003064:	f005 ff8e 	bl	8008f84 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8003068:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 800306a:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 800306c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8003070:	f7ff ffcc 	bl	800300c <SAI_Disable>
  switch(hsai->Init.SynchroExt)
 8003074:	68e3      	ldr	r3, [r4, #12]
 8003076:	2b01      	cmp	r3, #1
 8003078:	f000 80a1 	beq.w	80031be <HAL_SAI_Init+0x172>
  uint32_t tmpregisterGCR = 0;
 800307c:	2b02      	cmp	r3, #2
 800307e:	bf0c      	ite	eq
 8003080:	2320      	moveq	r3, #32
 8003082:	2300      	movne	r3, #0
  switch(hsai->Init.Synchro)
 8003084:	68a2      	ldr	r2, [r4, #8]
 8003086:	2a02      	cmp	r2, #2
 8003088:	f000 809d 	beq.w	80031c6 <HAL_SAI_Init+0x17a>
 800308c:	2a03      	cmp	r2, #3
 800308e:	f000 8098 	beq.w	80031c2 <HAL_SAI_Init+0x176>
  uint32_t syncen_bits = 0;
 8003092:	2a01      	cmp	r2, #1
 8003094:	bf0c      	ite	eq
 8003096:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 800309a:	2500      	movne	r5, #0
  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800309c:	6822      	ldr	r2, [r4, #0]
 800309e:	4951      	ldr	r1, [pc, #324]	; (80031e4 <HAL_SAI_Init+0x198>)
 80030a0:	428a      	cmp	r2, r1
 80030a2:	d003      	beq.n	80030ac <HAL_SAI_Init+0x60>
 80030a4:	4850      	ldr	r0, [pc, #320]	; (80031e8 <HAL_SAI_Init+0x19c>)
 80030a6:	4282      	cmp	r2, r0
 80030a8:	f040 8090 	bne.w	80031cc <HAL_SAI_Init+0x180>
    SAI1->GCR = tmpregisterGCR;
 80030ac:	484f      	ldr	r0, [pc, #316]	; (80031ec <HAL_SAI_Init+0x1a0>)
    SAI2->GCR = tmpregisterGCR;
 80030ae:	6003      	str	r3, [r0, #0]
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80030b0:	69e3      	ldr	r3, [r4, #28]
 80030b2:	b313      	cbz	r3, 80030fa <HAL_SAI_Init+0xae>
    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80030b4:	428a      	cmp	r2, r1
 80030b6:	d003      	beq.n	80030c0 <HAL_SAI_Init+0x74>
 80030b8:	4b4b      	ldr	r3, [pc, #300]	; (80031e8 <HAL_SAI_Init+0x19c>)
 80030ba:	429a      	cmp	r2, r3
 80030bc:	f040 8088 	bne.w	80031d0 <HAL_SAI_Init+0x184>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80030c0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80030c4:	f7ff fd24 	bl	8002b10 <HAL_RCCEx_GetPeriphCLKFreq>
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	4a49      	ldr	r2, [pc, #292]	; (80031f0 <HAL_SAI_Init+0x1a4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d002      	beq.n	80030d6 <HAL_SAI_Init+0x8a>
 80030d0:	3220      	adds	r2, #32
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d103      	bne.n	80030de <HAL_SAI_Init+0x92>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80030d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80030da:	f7ff fd19 	bl	8002b10 <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80030de:	220a      	movs	r2, #10
 80030e0:	69e3      	ldr	r3, [r4, #28]
 80030e2:	4350      	muls	r0, r2
 80030e4:	025b      	lsls	r3, r3, #9
 80030e6:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 80030ea:	fbb0 f3f2 	udiv	r3, r0, r2
    if((tmpval % 10) > 8)
 80030ee:	fb02 0013 	mls	r0, r2, r3, r0
 80030f2:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv+= 1;
 80030f4:	bf08      	it	eq
 80030f6:	3301      	addeq	r3, #1
 80030f8:	6223      	str	r3, [r4, #32]
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80030fa:	6863      	ldr	r3, [r4, #4]
 80030fc:	f033 0202 	bics.w	r2, r3, #2
 8003100:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003102:	d167      	bne.n	80031d4 <HAL_SAI_Init+0x188>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8003104:	2a01      	cmp	r2, #1
 8003106:	bf14      	ite	ne
 8003108:	f44f 7100 	movne.w	r1, #512	; 0x200
 800310c:	2100      	moveq	r1, #0
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800310e:	6822      	ldr	r2, [r4, #0]
 8003110:	4838      	ldr	r0, [pc, #224]	; (80031f4 <HAL_SAI_Init+0x1a8>)
 8003112:	6816      	ldr	r6, [r2, #0]
 8003114:	4030      	ands	r0, r6
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003116:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003118:	4333      	orrs	r3, r6
 800311a:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800311c:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800311e:	4333      	orrs	r3, r6
 8003120:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003122:	6810      	ldr	r0, [r2, #0]
 8003124:	4333      	orrs	r3, r6
 8003126:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003128:	4333      	orrs	r3, r6
 800312a:	6926      	ldr	r6, [r4, #16]
 800312c:	4333      	orrs	r3, r6
 800312e:	6966      	ldr	r6, [r4, #20]
 8003130:	4333      	orrs	r3, r6
 8003132:	4303      	orrs	r3, r0
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003134:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003136:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800313a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800313c:	432b      	orrs	r3, r5
 800313e:	430b      	orrs	r3, r1
 8003140:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003142:	6853      	ldr	r3, [r2, #4]
 8003144:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003148:	f023 030f 	bic.w	r3, r3, #15
 800314c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800314e:	69a3      	ldr	r3, [r4, #24]
 8003150:	6851      	ldr	r1, [r2, #4]
 8003152:	4303      	orrs	r3, r0
 8003154:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003156:	4303      	orrs	r3, r0
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8003158:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800315a:	430b      	orrs	r3, r1
 800315c:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800315e:	4b26      	ldr	r3, [pc, #152]	; (80031f8 <HAL_SAI_Init+0x1ac>)
 8003160:	6891      	ldr	r1, [r2, #8]
 8003162:	400b      	ands	r3, r1
 8003164:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8003166:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003168:	6891      	ldr	r1, [r2, #8]
 800316a:	4303      	orrs	r3, r0
 800316c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800316e:	4303      	orrs	r3, r0
 8003170:	430b      	orrs	r3, r1
 8003172:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003174:	3901      	subs	r1, #1
 8003176:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8003178:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800317a:	3901      	subs	r1, #1
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 800317c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003180:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003182:	68d3      	ldr	r3, [r2, #12]
 8003184:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8003188:	f023 030f 	bic.w	r3, r3, #15
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	0c1b      	lsrs	r3, r3, #16
 8003190:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003192:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003194:	68d1      	ldr	r1, [r2, #12]
 8003196:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003198:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800319a:	2000      	movs	r0, #0
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800319c:	430b      	orrs	r3, r1
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800319e:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80031a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80031a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80031a6:	3901      	subs	r1, #1
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80031a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80031ac:	60d3      	str	r3, [r2, #12]
  hsai->State= HAL_SAI_STATE_READY;
 80031ae:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80031b0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 80031b4:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State= HAL_SAI_STATE_READY;
 80031b8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  return HAL_OK;
 80031bc:	bd70      	pop	{r4, r5, r6, pc}
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80031be:	2310      	movs	r3, #16
 80031c0:	e760      	b.n	8003084 <HAL_SAI_Init+0x38>
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80031c2:	f043 0301 	orr.w	r3, r3, #1
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80031c6:	f44f 6500 	mov.w	r5, #2048	; 0x800
      break;
 80031ca:	e767      	b.n	800309c <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 80031cc:	480b      	ldr	r0, [pc, #44]	; (80031fc <HAL_SAI_Init+0x1b0>)
 80031ce:	e76e      	b.n	80030ae <HAL_SAI_Init+0x62>
    uint32_t freq = 0;
 80031d0:	2000      	movs	r0, #0
 80031d2:	e779      	b.n	80030c8 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80031d4:	2a01      	cmp	r2, #1
 80031d6:	bf14      	ite	ne
 80031d8:	2100      	movne	r1, #0
 80031da:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80031de:	e796      	b.n	800310e <HAL_SAI_Init+0xc2>
    return HAL_ERROR;
 80031e0:	2001      	movs	r0, #1
}
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
 80031e4:	40015804 	.word	0x40015804
 80031e8:	40015824 	.word	0x40015824
 80031ec:	40015800 	.word	0x40015800
 80031f0:	40015c04 	.word	0x40015c04
 80031f4:	ff05c010 	.word	0xff05c010
 80031f8:	fff88000 	.word	0xfff88000
 80031fc:	40015c00 	.word	0x40015c00

08003200 <SD_DMATransmitCplt>:
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8003200:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8003206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800320c:	4770      	bx	lr

0800320e <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800320e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003212:	4605      	mov	r5, r0
 8003214:	b089      	sub	sp, #36	; 0x24
 8003216:	460e      	mov	r6, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7fd f99a 	bl	8000550 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
 800321c:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 800321e:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8003220:	2108      	movs	r1, #8
 8003222:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2] = {0, 0};
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8003228:	f001 fc79 	bl	8004b1e <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 800322c:	4604      	mov	r4, r0
 800322e:	bb40      	cbnz	r0, 8003282 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8003230:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8003232:	6828      	ldr	r0, [r5, #0]
 8003234:	0409      	lsls	r1, r1, #16
 8003236:	f001 fd7d 	bl	8004d34 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 800323a:	4604      	mov	r4, r0
 800323c:	bb08      	cbnz	r0, 8003282 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800323e:	f04f 33ff 	mov.w	r3, #4294967295
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003242:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
  SDMMC_ConfigData(hsd->Instance, &config);
 8003244:	a902      	add	r1, sp, #8
 8003246:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003248:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8;
 800324a:	2308      	movs	r3, #8
 800324c:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800324e:	2330      	movs	r3, #48	; 0x30
 8003250:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003252:	2302      	movs	r3, #2
 8003254:	9305      	str	r3, [sp, #20]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003256:	2301      	movs	r3, #1
 8003258:	9307      	str	r3, [sp, #28]
  SDMMC_ConfigData(hsd->Instance, &config);
 800325a:	f001 fc4d 	bl	8004af8 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800325e:	6828      	ldr	r0, [r5, #0]
 8003260:	f001 fd99 	bl	8004d96 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8003264:	4604      	mov	r4, r0
 8003266:	b960      	cbnz	r0, 8003282 <SD_FindSCR+0x74>
 8003268:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800326a:	f240 482a 	movw	r8, #1066	; 0x42a
 800326e:	6828      	ldr	r0, [r5, #0]
 8003270:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003272:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8003276:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8003278:	d007      	beq.n	800328a <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800327a:	0719      	lsls	r1, r3, #28
 800327c:	d518      	bpl.n	80032b0 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800327e:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8003280:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8003282:	4620      	mov	r0, r4
 8003284:	b009      	add	sp, #36	; 0x24
 8003286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800328a:	029b      	lsls	r3, r3, #10
 800328c:	d507      	bpl.n	800329e <SD_FindSCR+0x90>
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800328e:	f001 fb7d 	bl	800498c <SDMMC_ReadFIFO>
 8003292:	ab08      	add	r3, sp, #32
 8003294:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 8003298:	3701      	adds	r7, #1
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800329a:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800329e:	f7fd f957 	bl	8000550 <HAL_GetTick>
 80032a2:	eba0 0009 	sub.w	r0, r0, r9
 80032a6:	3001      	adds	r0, #1
 80032a8:	d1e1      	bne.n	800326e <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 80032aa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80032ae:	e7e8      	b.n	8003282 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80032b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032b2:	079a      	lsls	r2, r3, #30
 80032b4:	d501      	bpl.n	80032ba <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80032b6:	2402      	movs	r4, #2
 80032b8:	e7e2      	b.n	8003280 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80032ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80032bc:	069b      	lsls	r3, r3, #26
 80032be:	d501      	bpl.n	80032c4 <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80032c0:	2420      	movs	r4, #32
 80032c2:	e7dd      	b.n	8003280 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80032c4:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80032c8:	6383      	str	r3, [r0, #56]	; 0x38
 80032ca:	9b00      	ldr	r3, [sp, #0]
 80032cc:	ba1b      	rev	r3, r3
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80032ce:	6073      	str	r3, [r6, #4]
 80032d0:	9b01      	ldr	r3, [sp, #4]
 80032d2:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80032d4:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80032d6:	e7d4      	b.n	8003282 <SD_FindSCR+0x74>

080032d8 <HAL_SD_ReadBlocks_DMA>:
{
 80032d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032dc:	4616      	mov	r6, r2
 80032de:	b086      	sub	sp, #24
 80032e0:	4605      	mov	r5, r0
 80032e2:	461f      	mov	r7, r3
  if(NULL == pData)
 80032e4:	460a      	mov	r2, r1
 80032e6:	b939      	cbnz	r1, 80032f8 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80032e8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80032ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032ee:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80032f0:	2001      	movs	r0, #1
}
 80032f2:	b006      	add	sp, #24
 80032f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80032f8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80032fc:	b2c0      	uxtb	r0, r0
 80032fe:	2801      	cmp	r0, #1
 8003300:	d166      	bne.n	80033d0 <HAL_SD_ReadBlocks_DMA+0xf8>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003302:	19f4      	adds	r4, r6, r7
 8003304:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003306:	2300      	movs	r3, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003308:	428c      	cmp	r4, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800330a:	63ab      	str	r3, [r5, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800330c:	d904      	bls.n	8003318 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800330e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003314:	63ab      	str	r3, [r5, #56]	; 0x38
      return HAL_ERROR;
 8003316:	e7ec      	b.n	80032f2 <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->Instance->DCTRL = 0U;
 8003318:	682c      	ldr	r4, [r5, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800331a:	2103      	movs	r1, #3
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800331c:	ea4f 2847 	mov.w	r8, r7, lsl #9
    hsd->State = HAL_SD_STATE_BUSY;
 8003320:	f885 1034 	strb.w	r1, [r5, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003324:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003326:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003328:	492a      	ldr	r1, [pc, #168]	; (80033d4 <HAL_SD_ReadBlocks_DMA+0xfc>)
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800332a:	f440 7095 	orr.w	r0, r0, #298	; 0x12a
 800332e:	63e0      	str	r0, [r4, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003330:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8003332:	63c1      	str	r1, [r0, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003334:	4928      	ldr	r1, [pc, #160]	; (80033d8 <HAL_SD_ReadBlocks_DMA+0x100>)
    hsd->hdmarx->XferAbortCallback = NULL;
 8003336:	6503      	str	r3, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8003338:	ea4f 0398 	mov.w	r3, r8, lsr #2
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800333c:	64c1      	str	r1, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800333e:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8003342:	f7fd fb7f 	bl	8000a44 <HAL_DMA_Start_IT>
    __HAL_SD_DMA_ENABLE(hsd);
 8003346:	6828      	ldr	r0, [r5, #0]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8003348:	2401      	movs	r4, #1
    SDMMC_ConfigData(hsd->Instance, &config);
 800334a:	4669      	mov	r1, sp
    __HAL_SD_DMA_ENABLE(hsd);
 800334c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800334e:	9405      	str	r4, [sp, #20]
    __HAL_SD_DMA_ENABLE(hsd);
 8003350:	f043 0308 	orr.w	r3, r3, #8
 8003354:	62c3      	str	r3, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003356:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003358:	2b01      	cmp	r3, #1
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800335a:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800335e:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003362:	f04f 0390 	mov.w	r3, #144	; 0x90
      BlockAdd *= 512U;
 8003366:	bf18      	it	ne
 8003368:	0276      	lslne	r6, r6, #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800336a:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800336c:	2302      	movs	r3, #2
 800336e:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003370:	2300      	movs	r3, #0
 8003372:	9304      	str	r3, [sp, #16]
    SDMMC_ConfigData(hsd->Instance, &config);
 8003374:	f001 fbc0 	bl	8004af8 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800337c:	6828      	ldr	r0, [r5, #0]
 800337e:	f001 fbce 	bl	8004b1e <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003382:	b148      	cbz	r0, 8003398 <HAL_SD_ReadBlocks_DMA+0xc0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800338a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800338c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800338e:	4318      	orrs	r0, r3
 8003390:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003392:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8003396:	e7ab      	b.n	80032f0 <HAL_SD_ReadBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 8003398:	2f01      	cmp	r7, #1
 800339a:	d912      	bls.n	80033c2 <HAL_SD_ReadBlocks_DMA+0xea>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800339c:	2382      	movs	r3, #130	; 0x82
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800339e:	4631      	mov	r1, r6
 80033a0:	6828      	ldr	r0, [r5, #0]
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80033a2:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 80033a4:	f001 fbeb 	bl	8004b7e <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 80033a8:	2800      	cmp	r0, #0
 80033aa:	d0a2      	beq.n	80032f2 <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80033b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80033b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80033b6:	4318      	orrs	r0, r3
 80033b8:	63a8      	str	r0, [r5, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80033ba:	2001      	movs	r0, #1
 80033bc:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
      return HAL_ERROR;
 80033c0:	e797      	b.n	80032f2 <HAL_SD_ReadBlocks_DMA+0x1a>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80033c2:	2381      	movs	r3, #129	; 0x81
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80033c4:	4631      	mov	r1, r6
 80033c6:	6828      	ldr	r0, [r5, #0]
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80033c8:	632b      	str	r3, [r5, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80033ca:	f001 fbc0 	bl	8004b4e <SDMMC_CmdReadSingleBlock>
 80033ce:	e7eb      	b.n	80033a8 <HAL_SD_ReadBlocks_DMA+0xd0>
    return HAL_BUSY;
 80033d0:	2002      	movs	r0, #2
 80033d2:	e78e      	b.n	80032f2 <HAL_SD_ReadBlocks_DMA+0x1a>
 80033d4:	080034d9 	.word	0x080034d9
 80033d8:	08003a41 	.word	0x08003a41

080033dc <HAL_SD_WriteBlocks_DMA>:
{
 80033dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033de:	4604      	mov	r4, r0
 80033e0:	b087      	sub	sp, #28
 80033e2:	4615      	mov	r5, r2
 80033e4:	461e      	mov	r6, r3
  if(NULL == pData)
 80033e6:	460f      	mov	r7, r1
 80033e8:	b931      	cbnz	r1, 80033f8 <HAL_SD_WriteBlocks_DMA+0x1c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033ea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80033ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033f0:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80033f2:	2001      	movs	r0, #1
}
 80033f4:	b007      	add	sp, #28
 80033f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 80033f8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80033fc:	b2c0      	uxtb	r0, r0
 80033fe:	2801      	cmp	r0, #1
 8003400:	d162      	bne.n	80034c8 <HAL_SD_WriteBlocks_DMA+0xec>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003402:	18eb      	adds	r3, r5, r3
 8003404:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003406:	2200      	movs	r2, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003408:	428b      	cmp	r3, r1
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 800340a:	63a2      	str	r2, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800340c:	d904      	bls.n	8003418 <HAL_SD_WriteBlocks_DMA+0x3c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800340e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003410:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003414:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8003416:	e7ed      	b.n	80033f4 <HAL_SD_WriteBlocks_DMA+0x18>
    hsd->Instance->DCTRL = 0U;
 8003418:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 800341a:	2303      	movs	r3, #3
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800341c:	492b      	ldr	r1, [pc, #172]	; (80034cc <HAL_SD_WriteBlocks_DMA+0xf0>)
    hsd->State = HAL_SD_STATE_BUSY;
 800341e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8003422:	62c2      	str	r2, [r0, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8003424:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003426:	f043 031a 	orr.w	r3, r3, #26
 800342a:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800342c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800342e:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003430:	4927      	ldr	r1, [pc, #156]	; (80034d0 <HAL_SD_WriteBlocks_DMA+0xf4>)
    hsd->hdmatx->XferAbortCallback = NULL;
 8003432:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003434:	64d9      	str	r1, [r3, #76]	; 0x4c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003436:	f44f 7100 	mov.w	r1, #512	; 0x200
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800343a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800343c:	2b01      	cmp	r3, #1
      BlockAdd *= 512U;
 800343e:	bf18      	it	ne
 8003440:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003442:	f001 fb6c 	bl	8004b1e <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003446:	b150      	cbz	r0, 800345e <HAL_SD_WriteBlocks_DMA+0x82>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800344e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003450:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003452:	4318      	orrs	r0, r3
 8003454:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003456:	2001      	movs	r0, #1
 8003458:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 800345c:	e7ca      	b.n	80033f4 <HAL_SD_WriteBlocks_DMA+0x18>
    if(NumberOfBlocks > 1U)
 800345e:	2e01      	cmp	r6, #1
 8003460:	d90f      	bls.n	8003482 <HAL_SD_WriteBlocks_DMA+0xa6>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003462:	23a0      	movs	r3, #160	; 0xa0
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8003464:	4629      	mov	r1, r5
 8003466:	6820      	ldr	r0, [r4, #0]
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003468:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 800346a:	f001 fbb8 	bl	8004bde <SDMMC_CmdWriteMultiBlock>
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800346e:	4605      	mov	r5, r0
 8003470:	6822      	ldr	r2, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003472:	b168      	cbz	r0, 8003490 <HAL_SD_WriteBlocks_DMA+0xb4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8003474:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8003478:	6393      	str	r3, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800347a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800347c:	4305      	orrs	r5, r0
 800347e:	63a5      	str	r5, [r4, #56]	; 0x38
 8003480:	e7e9      	b.n	8003456 <HAL_SD_WriteBlocks_DMA+0x7a>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003482:	2390      	movs	r3, #144	; 0x90
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8003484:	4629      	mov	r1, r5
 8003486:	6820      	ldr	r0, [r4, #0]
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003488:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800348a:	f001 fb90 	bl	8004bae <SDMMC_CmdWriteSingleBlock>
 800348e:	e7ee      	b.n	800346e <HAL_SD_WriteBlocks_DMA+0x92>
    __HAL_SD_DMA_ENABLE(hsd);
 8003490:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8003492:	0276      	lsls	r6, r6, #9
 8003494:	3280      	adds	r2, #128	; 0x80
 8003496:	4639      	mov	r1, r7
    __HAL_SD_DMA_ENABLE(hsd);
 8003498:	f043 0308 	orr.w	r3, r3, #8
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 800349c:	6c20      	ldr	r0, [r4, #64]	; 0x40
    __HAL_SD_DMA_ENABLE(hsd);
 800349e:	f842 3c54 	str.w	r3, [r2, #-84]
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 80034a2:	08b3      	lsrs	r3, r6, #2
 80034a4:	f7fd face 	bl	8000a44 <HAL_DMA_Start_IT>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295
    SDMMC_ConfigData(hsd->Instance, &config);
 80034ac:	4669      	mov	r1, sp
 80034ae:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80034b0:	9503      	str	r5, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80034b2:	9504      	str	r5, [sp, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80034b4:	e88d 0048 	stmia.w	sp, {r3, r6}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80034b8:	2390      	movs	r3, #144	; 0x90
 80034ba:	9302      	str	r3, [sp, #8]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80034bc:	2301      	movs	r3, #1
 80034be:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 80034c0:	f001 fb1a 	bl	8004af8 <SDMMC_ConfigData>
    return HAL_OK;
 80034c4:	4628      	mov	r0, r5
 80034c6:	e795      	b.n	80033f4 <HAL_SD_WriteBlocks_DMA+0x18>
    return HAL_BUSY;
 80034c8:	2002      	movs	r0, #2
 80034ca:	e793      	b.n	80033f4 <HAL_SD_WriteBlocks_DMA+0x18>
 80034cc:	08003201 	.word	0x08003201
 80034d0:	08003a41 	.word	0x08003a41

080034d4 <HAL_SD_RxCpltCallback>:
 80034d4:	4770      	bx	lr

080034d6 <HAL_SD_ErrorCallback>:
 80034d6:	4770      	bx	lr

080034d8 <SD_DMAReceiveCplt>:
{
 80034d8:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80034da:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80034dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034de:	2b82      	cmp	r3, #130	; 0x82
 80034e0:	d109      	bne.n	80034f6 <SD_DMAReceiveCplt+0x1e>
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80034e2:	6820      	ldr	r0, [r4, #0]
 80034e4:	f001 fb94 	bl	8004c10 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 80034e8:	b128      	cbz	r0, 80034f6 <SD_DMAReceiveCplt+0x1e>
      hsd->ErrorCode |= errorstate;
 80034ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80034ec:	4318      	orrs	r0, r3
 80034ee:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 80034f0:	4620      	mov	r0, r4
 80034f2:	f7ff fff0 	bl	80034d6 <HAL_SD_ErrorCallback>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80034f6:	6823      	ldr	r3, [r4, #0]
  HAL_SD_RxCpltCallback(hsd);
 80034f8:	4620      	mov	r0, r4
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80034fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fc:	f022 0208 	bic.w	r2, r2, #8
 8003500:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003502:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003506:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8003508:	2301      	movs	r3, #1
 800350a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_RxCpltCallback(hsd);
 800350e:	f7ff ffe1 	bl	80034d4 <HAL_SD_RxCpltCallback>
 8003512:	bd10      	pop	{r4, pc}

08003514 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8003514:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8003516:	0f9a      	lsrs	r2, r3, #30
 8003518:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800351a:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800351e:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8003520:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8003524:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8003526:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800352a:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 800352c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003530:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8003532:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003534:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8003536:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003538:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800353a:	0112      	lsls	r2, r2, #4
 800353c:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800353e:	88ca      	ldrh	r2, [r1, #6]
{
 8003540:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8003542:	b292      	uxth	r2, r2
 8003544:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8003548:	4322      	orrs	r2, r4
 800354a:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800354c:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8003550:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8003552:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8003556:	09d4      	lsrs	r4, r2, #7
 8003558:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800355a:	f3c2 1480 	ubfx	r4, r2, #6, #1
 800355e:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8003560:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8003564:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8003566:	f3c2 1400 	ubfx	r4, r2, #4, #1
 800356a:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 800356c:	2400      	movs	r4, #0
 800356e:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8003570:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003572:	2c00      	cmp	r4, #0
 8003574:	f040 8083 	bne.w	800367e <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8003578:	0292      	lsls	r2, r2, #10
    pCSD->DeviceSize |= (tmp) << 2;
 800357a:	009b      	lsls	r3, r3, #2
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800357c:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSize |= (tmp) << 2;
 8003580:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8003584:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8003586:	690a      	ldr	r2, [r1, #16]
 8003588:	4313      	orrs	r3, r2
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800358a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 800358c:	610b      	str	r3, [r1, #16]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 800358e:	690b      	ldr	r3, [r1, #16]
 8003590:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8003594:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8003596:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800359a:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 800359c:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80035a0:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80035a2:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80035a6:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80035a8:	f3c2 4382 	ubfx	r3, r2, #18, #3
 80035ac:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80035ae:	0bd3      	lsrs	r3, r2, #15
 80035b0:	f003 0306 	and.w	r3, r3, #6
 80035b4:	760b      	strb	r3, [r1, #24]
 80035b6:	f3c2 2307 	ubfx	r3, r2, #8, #8
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80035ba:	7e0c      	ldrb	r4, [r1, #24]
 80035bc:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80035c0:	4322      	orrs	r2, r4
 80035c2:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80035c4:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80035c6:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80035c8:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80035ca:	3402      	adds	r4, #2
 80035cc:	40a2      	lsls	r2, r4
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80035ce:	2401      	movs	r4, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80035d0:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80035d2:	7a0d      	ldrb	r5, [r1, #8]
 80035d4:	40ac      	lsls	r4, r5
 80035d6:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80035d8:	0a64      	lsrs	r4, r4, #9
 80035da:	4362      	muls	r2, r4
 80035dc:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 80035de:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80035e2:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80035e4:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80035e8:	005b      	lsls	r3, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80035ea:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80035ec:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80035f0:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80035f2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80035f4:	7e8a      	ldrb	r2, [r1, #26]
 80035f6:	f3c3 14c0 	ubfx	r4, r3, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 80035fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80035fe:	4322      	orrs	r2, r4
 8003600:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8003602:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8003604:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8003606:	0fda      	lsrs	r2, r3, #31
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8003608:	f3c3 5081 	ubfx	r0, r3, #22, #2
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800360c:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800360e:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8003612:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8003614:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8003618:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800361a:	0d9a      	lsrs	r2, r3, #22
 800361c:	f002 020c 	and.w	r2, r2, #12
 8003620:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8003622:	7fca      	ldrb	r2, [r1, #31]
 8003624:	4302      	orrs	r2, r0
  pCSD->Reserved3           = 0;
 8003626:	2000      	movs	r0, #0
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8003628:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800362a:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800362e:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8003632:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 8003636:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800363a:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 800363e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8003642:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8003646:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800364a:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800364e:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8003652:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8003656:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800365a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800365e:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8003662:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8003666:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800366a:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 800366e:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8003672:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8003676:	2301      	movs	r3, #1
 8003678:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 800367c:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800367e:	2c01      	cmp	r4, #1
 8003680:	d11a      	bne.n	80036b8 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003688:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800368a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8);
 800368c:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800368e:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 8003690:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8003694:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8003696:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800369a:	690c      	ldr	r4, [r1, #16]
 800369c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80036a0:	4322      	orrs	r2, r4
 80036a2:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80036a4:	690a      	ldr	r2, [r1, #16]
 80036a6:	0292      	lsls	r2, r2, #10
 80036a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036ac:	6542      	str	r2, [r0, #84]	; 0x54
 80036ae:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80036b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b4:	6582      	str	r2, [r0, #88]	; 0x58
 80036b6:	e794      	b.n	80035e2 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80036b8:	6803      	ldr	r3, [r0, #0]
 80036ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80036be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80036c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036c6:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd30      	pop	{r4, r5, pc}

080036d2 <HAL_SD_InitCard>:
{
 80036d2:	b570      	push	{r4, r5, r6, lr}
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80036d4:	2376      	movs	r3, #118	; 0x76
{
 80036d6:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80036d8:	2500      	movs	r5, #0
{
 80036da:	4604      	mov	r4, r0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80036dc:	930c      	str	r3, [sp, #48]	; 0x30
  SDMMC_Init(hsd->Instance, Init);
 80036de:	ab0a      	add	r3, sp, #40	; 0x28
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80036e0:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80036e2:	950b      	str	r5, [sp, #44]	; 0x2c
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80036e4:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80036e6:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80036e8:	9509      	str	r5, [sp, #36]	; 0x24
  SDMMC_Init(hsd->Instance, Init);
 80036ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036ee:	ab07      	add	r3, sp, #28
 80036f0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80036f4:	6820      	ldr	r0, [r4, #0]
 80036f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036f8:	f001 f92c 	bl	8004954 <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 80036fc:	6820      	ldr	r0, [r4, #0]
 80036fe:	6843      	ldr	r3, [r0, #4]
 8003700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003704:	6043      	str	r3, [r0, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8003706:	f001 f944 	bl	8004992 <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800370a:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 800370c:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 800370e:	6853      	ldr	r3, [r2, #4]
 8003710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003714:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8003716:	f7fc ff21 	bl	800055c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800371a:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 800371c:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800371e:	f001 faa9 	bl	8004c74 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003722:	4606      	mov	r6, r0
 8003724:	b968      	cbnz	r0, 8003742 <HAL_SD_InitCard+0x70>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003726:	6820      	ldr	r0, [r4, #0]
 8003728:	f001 facc 	bl	8004cc4 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800372c:	b380      	cbz	r0, 8003790 <HAL_SD_InitCard+0xbe>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800372e:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003732:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003734:	9b06      	ldr	r3, [sp, #24]
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	42ab      	cmp	r3, r5
 800373a:	9206      	str	r2, [sp, #24]
 800373c:	d108      	bne.n	8003750 <HAL_SD_InitCard+0x7e>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800373e:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8003742:	2001      	movs	r0, #1
 8003744:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003748:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800374a:	430e      	orrs	r6, r1
 800374c:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 800374e:	e083      	b.n	8003858 <HAL_SD_InitCard+0x186>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003750:	2100      	movs	r1, #0
 8003752:	6820      	ldr	r0, [r4, #0]
 8003754:	f001 faee 	bl	8004d34 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003758:	4601      	mov	r1, r0
 800375a:	b110      	cbz	r0, 8003762 <HAL_SD_InitCard+0x90>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800375c:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8003760:	e7ef      	b.n	8003742 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8003762:	6820      	ldr	r0, [r4, #0]
 8003764:	f001 fafe 	bl	8004d64 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003768:	4601      	mov	r1, r0
 800376a:	2800      	cmp	r0, #0
 800376c:	d1f6      	bne.n	800375c <HAL_SD_InitCard+0x8a>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800376e:	6820      	ldr	r0, [r4, #0]
 8003770:	f001 f92a 	bl	80049c8 <SDMMC_GetResponse>
    while(validvoltage == 0)
 8003774:	2800      	cmp	r0, #0
 8003776:	dadd      	bge.n	8003734 <HAL_SD_InitCard+0x62>
    hsd->SdCard.CardType = CARD_SDSC;
 8003778:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800377a:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 800377c:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800377e:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8003780:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8003784:	f001 f909 	bl	800499a <SDMMC_GetPowerState>
 8003788:	bb20      	cbnz	r0, 80037d4 <HAL_SD_InitCard+0x102>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800378a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800378e:	e06d      	b.n	800386c <HAL_SD_InitCard+0x19a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003790:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003792:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003796:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003798:	9b06      	ldr	r3, [sp, #24]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	42ab      	cmp	r3, r5
 800379e:	9206      	str	r2, [sp, #24]
 80037a0:	d0cd      	beq.n	800373e <HAL_SD_InitCard+0x6c>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80037a2:	2100      	movs	r1, #0
 80037a4:	6820      	ldr	r0, [r4, #0]
 80037a6:	f001 fac5 	bl	8004d34 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80037aa:	4606      	mov	r6, r0
 80037ac:	2800      	cmp	r0, #0
 80037ae:	d1c8      	bne.n	8003742 <HAL_SD_InitCard+0x70>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80037b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	f001 fad5 	bl	8004d64 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80037ba:	4606      	mov	r6, r0
 80037bc:	2800      	cmp	r0, #0
 80037be:	d1c0      	bne.n	8003742 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80037c0:	4601      	mov	r1, r0
 80037c2:	6820      	ldr	r0, [r4, #0]
 80037c4:	f001 f900 	bl	80049c8 <SDMMC_GetResponse>
    while(validvoltage == 0)
 80037c8:	2800      	cmp	r0, #0
 80037ca:	dae5      	bge.n	8003798 <HAL_SD_InitCard+0xc6>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80037cc:	0043      	lsls	r3, r0, #1
 80037ce:	d5d3      	bpl.n	8003778 <HAL_SD_InitCard+0xa6>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e7d2      	b.n	800377a <HAL_SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80037d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d01a      	beq.n	8003810 <HAL_SD_InitCard+0x13e>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80037da:	6820      	ldr	r0, [r4, #0]
 80037dc:	f001 faf3 	bl	8004dc6 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 80037e0:	4605      	mov	r5, r0
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d142      	bne.n	800386c <HAL_SD_InitCard+0x19a>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80037e6:	4601      	mov	r1, r0
 80037e8:	6820      	ldr	r0, [r4, #0]
 80037ea:	f001 f8ed 	bl	80049c8 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80037ee:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80037f0:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80037f2:	6820      	ldr	r0, [r4, #0]
 80037f4:	f001 f8e8 	bl	80049c8 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80037f8:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80037fa:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80037fc:	6820      	ldr	r0, [r4, #0]
 80037fe:	f001 f8e3 	bl	80049c8 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003802:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003804:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003806:	6820      	ldr	r0, [r4, #0]
 8003808:	f001 f8de 	bl	80049c8 <SDMMC_GetResponse>
 800380c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003810:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003812:	2b03      	cmp	r3, #3
 8003814:	d122      	bne.n	800385c <HAL_SD_InitCard+0x18a>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003816:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003818:	2b03      	cmp	r3, #3
 800381a:	d12e      	bne.n	800387a <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800381c:	2104      	movs	r1, #4
 800381e:	6820      	ldr	r0, [r4, #0]
 8003820:	f001 f8d2 	bl	80049c8 <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 8003824:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 8003826:	0d00      	lsrs	r0, r0, #20
 8003828:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff fe72 	bl	8003514 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 8003830:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8003832:	2300      	movs	r3, #0
 8003834:	6820      	ldr	r0, [r4, #0]
 8003836:	0412      	lsls	r2, r2, #16
 8003838:	f001 fa04 	bl	8004c44 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800383c:	4605      	mov	r5, r0
 800383e:	b9a8      	cbnz	r0, 800386c <HAL_SD_InitCard+0x19a>
  SDMMC_Init(hsd->Instance, hsd->Init);
 8003840:	f104 0310 	add.w	r3, r4, #16
 8003844:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003848:	1d23      	adds	r3, r4, #4
 800384a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800384e:	6820      	ldr	r0, [r4, #0]
 8003850:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003852:	f001 f87f 	bl	8004954 <SDMMC_Init>
  return HAL_OK;
 8003856:	4628      	mov	r0, r5
}
 8003858:	b018      	add	sp, #96	; 0x60
 800385a:	bd70      	pop	{r4, r5, r6, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800385c:	f10d 0116 	add.w	r1, sp, #22
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	f001 fadb 	bl	8004e1c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003866:	4605      	mov	r5, r0
 8003868:	2800      	cmp	r0, #0
 800386a:	d0d4      	beq.n	8003816 <HAL_SD_InitCard+0x144>
    hsd->State = HAL_SD_STATE_READY;
 800386c:	2001      	movs	r0, #1
 800386e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003872:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003874:	431d      	orrs	r5, r3
 8003876:	63a5      	str	r5, [r4, #56]	; 0x38
 8003878:	e7ee      	b.n	8003858 <HAL_SD_InitCard+0x186>
    hsd->SdCard.RelCardAdd = sd_rca;
 800387a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800387e:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8003880:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003882:	0409      	lsls	r1, r1, #16
 8003884:	f001 fab4 	bl	8004df0 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003888:	4605      	mov	r5, r0
 800388a:	2800      	cmp	r0, #0
 800388c:	d1ee      	bne.n	800386c <HAL_SD_InitCard+0x19a>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800388e:	4601      	mov	r1, r0
 8003890:	6820      	ldr	r0, [r4, #0]
 8003892:	f001 f899 	bl	80049c8 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003896:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003898:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800389a:	6820      	ldr	r0, [r4, #0]
 800389c:	f001 f894 	bl	80049c8 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80038a0:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80038a2:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	f001 f88f 	bl	80049c8 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80038aa:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80038ac:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80038ae:	6820      	ldr	r0, [r4, #0]
 80038b0:	f001 f88a 	bl	80049c8 <SDMMC_GetResponse>
 80038b4:	6720      	str	r0, [r4, #112]	; 0x70
 80038b6:	e7b1      	b.n	800381c <HAL_SD_InitCard+0x14a>

080038b8 <HAL_SD_Init>:
{
 80038b8:	b510      	push	{r4, lr}
  if(hsd == NULL)
 80038ba:	4604      	mov	r4, r0
 80038bc:	b1a0      	cbz	r0, 80038e8 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 80038be:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80038c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038c6:	b913      	cbnz	r3, 80038ce <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 80038c8:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80038ca:	f005 f98d 	bl	8008be8 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80038ce:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 80038d0:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 80038d2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 80038d6:	f7ff fefc 	bl	80036d2 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80038da:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 80038dc:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80038de:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80038e0:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80038e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80038e6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80038e8:	2001      	movs	r0, #1
}
 80038ea:	bd10      	pop	{r4, pc}

080038ec <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80038ec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80038ee:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80038f0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80038f2:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80038f4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80038f6:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80038f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80038fa:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80038fc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80038fe:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003900:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003902:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003904:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8003906:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003908:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 800390a:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800390c:	61cb      	str	r3, [r1, #28]
}
 800390e:	4770      	bx	lr

08003910 <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 8003910:	2303      	movs	r3, #3
{
 8003912:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8003914:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
{
 8003918:	b08a      	sub	sp, #40	; 0x28
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800391a:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 800391c:	4604      	mov	r4, r0
 800391e:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003920:	2b03      	cmp	r3, #3
 8003922:	d002      	beq.n	800392a <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003924:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003928:	d103      	bne.n	8003932 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800392a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800392c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003930:	e056      	b.n	80039e0 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003932:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003936:	d12d      	bne.n	8003994 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 8003938:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800393a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 800393c:	9104      	str	r1, [sp, #16]
 800393e:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003940:	f001 f842 	bl	80049c8 <SDMMC_GetResponse>
 8003944:	0180      	lsls	r0, r0, #6
 8003946:	d420      	bmi.n	800398a <HAL_SD_ConfigWideBusOperation+0x7a>
  errorstate = SD_FindSCR(hsd, scr);
 8003948:	a904      	add	r1, sp, #16
 800394a:	4620      	mov	r0, r4
 800394c:	f7ff fc5f 	bl	800320e <SD_FindSCR>
  if(errorstate != HAL_OK)
 8003950:	b960      	cbnz	r0, 800396c <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003952:	9b05      	ldr	r3, [sp, #20]
 8003954:	0359      	lsls	r1, r3, #13
 8003956:	d51a      	bpl.n	800398e <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8003958:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800395a:	6820      	ldr	r0, [r4, #0]
 800395c:	0409      	lsls	r1, r1, #16
 800395e:	f001 f9e9 	bl	8004d34 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8003962:	b918      	cbnz	r0, 800396c <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8003964:	2102      	movs	r1, #2
 8003966:	6820      	ldr	r0, [r4, #0]
 8003968:	f001 fadc 	bl	8004f24 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800396c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800396e:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8003970:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003972:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003974:	2d00      	cmp	r5, #0
 8003976:	d035      	beq.n	80039e4 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 800397e:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003980:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003982:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8003986:	b00a      	add	sp, #40	; 0x28
 8003988:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800398a:	4630      	mov	r0, r6
 800398c:	e7ee      	b.n	800396c <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800398e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003992:	e7eb      	b.n	800396c <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003994:	bb09      	cbnz	r1, 80039da <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003996:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8003998:	9104      	str	r1, [sp, #16]
 800399a:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800399c:	f001 f814 	bl	80049c8 <SDMMC_GetResponse>
 80039a0:	0182      	lsls	r2, r0, #6
 80039a2:	d414      	bmi.n	80039ce <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 80039a4:	a904      	add	r1, sp, #16
 80039a6:	4620      	mov	r0, r4
 80039a8:	f7ff fc31 	bl	800320e <SD_FindSCR>
  if(errorstate != HAL_OK)
 80039ac:	b960      	cbnz	r0, 80039c8 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80039ae:	9b05      	ldr	r3, [sp, #20]
 80039b0:	03db      	lsls	r3, r3, #15
 80039b2:	d50f      	bpl.n	80039d4 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80039b4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80039b6:	6820      	ldr	r0, [r4, #0]
 80039b8:	0409      	lsls	r1, r1, #16
 80039ba:	f001 f9bb 	bl	8004d34 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80039be:	b918      	cbnz	r0, 80039c8 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80039c0:	4601      	mov	r1, r0
 80039c2:	6820      	ldr	r0, [r4, #0]
 80039c4:	f001 faae 	bl	8004f24 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80039c8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80039ca:	4308      	orrs	r0, r1
 80039cc:	e7d0      	b.n	8003970 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80039ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039d2:	e7f9      	b.n	80039c8 <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80039d4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80039d8:	e7f6      	b.n	80039c8 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80039da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80039dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80039e2:	e7c6      	b.n	8003972 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80039e4:	6863      	ldr	r3, [r4, #4]
    Init.BusWide             = WideMode;
 80039e6:	9607      	str	r6, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80039e8:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80039ea:	68a3      	ldr	r3, [r4, #8]
 80039ec:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80039ee:	68e3      	ldr	r3, [r4, #12]
 80039f0:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80039f2:	6963      	ldr	r3, [r4, #20]
 80039f4:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80039f6:	69a3      	ldr	r3, [r4, #24]
 80039f8:	9309      	str	r3, [sp, #36]	; 0x24
    SDMMC_Init(hsd->Instance, Init);
 80039fa:	ab0a      	add	r3, sp, #40	; 0x28
 80039fc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8003a00:	ab04      	add	r3, sp, #16
 8003a02:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003a06:	6820      	ldr	r0, [r4, #0]
 8003a08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a0a:	f000 ffa3 	bl	8004954 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 8003a0e:	2301      	movs	r3, #1
  return HAL_OK;
 8003a10:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8003a12:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8003a16:	e7b6      	b.n	8003986 <HAL_SD_ConfigWideBusOperation+0x76>

08003a18 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8003a18:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8003a1a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8003a1c:	0409      	lsls	r1, r1, #16
{
 8003a1e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8003a20:	6800      	ldr	r0, [r0, #0]
 8003a22:	f001 fa4f 	bl	8004ec4 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8003a26:	4601      	mov	r1, r0
 8003a28:	b928      	cbnz	r0, 8003a36 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003a2a:	6820      	ldr	r0, [r4, #0]
 8003a2c:	f000 ffcc 	bl	80049c8 <SDMMC_GetResponse>
  return cardstate;
 8003a30:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8003a34:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8003a36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8003a38:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 8003a3a:	4319      	orrs	r1, r3
 8003a3c:	63a1      	str	r1, [r4, #56]	; 0x38
 8003a3e:	e7f7      	b.n	8003a30 <HAL_SD_GetCardState+0x18>

08003a40 <SD_DMAError>:
{
 8003a40:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a42:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003a44:	f7fd f83b 	bl	8000abe <HAL_DMA_GetError>
 8003a48:	2802      	cmp	r0, #2
 8003a4a:	d026      	beq.n	8003a9a <SD_DMAError+0x5a>
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8003a4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d003      	beq.n	8003a5c <SD_DMAError+0x1c>
 8003a54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d11b      	bne.n	8003a94 <SD_DMAError+0x54>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	f240 52ff 	movw	r2, #1535	; 0x5ff
      CardState = HAL_SD_GetCardState(hsd);
 8003a62:	4620      	mov	r0, r4
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003a64:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a68:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003a6c:	63da      	str	r2, [r3, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003a6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a74:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003a76:	f7ff ffcf 	bl	8003a18 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a7a:	3805      	subs	r0, #5
 8003a7c:	b2c0      	uxtb	r0, r0
 8003a7e:	2801      	cmp	r0, #1
 8003a80:	d805      	bhi.n	8003a8e <SD_DMAError+0x4e>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a82:	6820      	ldr	r0, [r4, #0]
 8003a84:	f001 f8c4 	bl	8004c10 <SDMMC_CmdStopTransfer>
 8003a88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a8a:	4318      	orrs	r0, r3
 8003a8c:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    HAL_SD_ErrorCallback(hsd);
 8003a94:	4620      	mov	r0, r4
 8003a96:	f7ff fd1e 	bl	80034d6 <HAL_SD_ErrorCallback>
 8003a9a:	bd10      	pop	{r4, pc}

08003a9c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003a9c:	b538      	push	{r3, r4, r5, lr}
 8003a9e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	b1c8      	cbz	r0, 8003ad8 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003aa4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003aa8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003aac:	b91b      	cbnz	r3, 8003ab6 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003aae:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003ab2:	f005 f9ff 	bl	8008eb4 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003ab6:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003ab8:	1d21      	adds	r1, r4, #4
 8003aba:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003abc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003ac0:	f000 fe79 	bl	80047b6 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003ac4:	6862      	ldr	r2, [r4, #4]
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	6820      	ldr	r0, [r4, #0]
 8003aca:	f000 feb3 	bl	8004834 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ace:	2301      	movs	r3, #1
  
  return HAL_OK;
 8003ad0:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003ad2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8003ad6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003ad8:	2001      	movs	r0, #1
}
 8003ada:	bd38      	pop	{r3, r4, r5, pc}

08003adc <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8003adc:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0;
  
  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8003ade:	4604      	mov	r4, r0
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d030      	beq.n	8003b46 <HAL_SPDIFRX_Init+0x6a>
  assert_param(IS_PREAMBLE_TYPE_MASK(hspdif->Init.PreambleTypeMask));
  assert_param(IS_CHANNEL_STATUS_MASK(hspdif->Init.ChannelStatusMask));
  assert_param(IS_VALIDITY_MASK(hspdif->Init.ValidityBitMask));
  assert_param(IS_PARITY_ERROR_MASK(hspdif->Init.ParityErrorMask));
  
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8003ae4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003ae8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003aec:	b91b      	cbnz	r3, 8003af6 <HAL_SPDIFRX_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8003aee:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8003af2:	f005 f8ad 	bl	8008c50 <HAL_SPDIFRX_MspInit>
  
  /* SPDIFRX peripheral state is BUSY*/
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;  
  
  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8003af6:	6821      	ldr	r1, [r4, #0]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;  
 8003af8:	2302      	movs	r3, #2
             hspdif->Init.WaitForActivity |
             hspdif->Init.ChannelSelection |
             hspdif->Init.DataFormat |
             hspdif->Init.PreambleTypeMask |
             hspdif->Init.ChannelStatusMask |
             hspdif->Init.ValidityBitMask |
 8003afa:	68a0      	ldr	r0, [r4, #8]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;  
 8003afc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_SPDIFRX_IDLE(hspdif);
 8003b00:	680b      	ldr	r3, [r1, #0]
 8003b02:	f023 0303 	bic.w	r3, r3, #3
 8003b06:	600b      	str	r3, [r1, #0]
             hspdif->Init.ValidityBitMask |
 8003b08:	6863      	ldr	r3, [r4, #4]
  tmpreg = hspdif->Instance->CR;
 8003b0a:	680a      	ldr	r2, [r1, #0]
             hspdif->Init.ValidityBitMask |
 8003b0c:	4303      	orrs	r3, r0
 8003b0e:	68e0      	ldr	r0, [r4, #12]
  tmpreg &= ~((uint16_t) SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8003b10:	f422 22ef 	bic.w	r2, r2, #489472	; 0x77800
             hspdif->Init.ValidityBitMask |
 8003b14:	4303      	orrs	r3, r0
 8003b16:	6920      	ldr	r0, [r4, #16]
  tmpreg &= ~((uint16_t) SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8003b18:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
             hspdif->Init.ValidityBitMask |
 8003b1c:	4303      	orrs	r3, r0
 8003b1e:	6960      	ldr	r0, [r4, #20]
 8003b20:	4303      	orrs	r3, r0
 8003b22:	69e0      	ldr	r0, [r4, #28]
 8003b24:	4303      	orrs	r3, r0
 8003b26:	6a20      	ldr	r0, [r4, #32]
 8003b28:	4303      	orrs	r3, r0
 8003b2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003b2c:	4303      	orrs	r3, r0
 8003b2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003b30:	4303      	orrs	r3, r0
 8003b32:	8b20      	ldrh	r0, [r4, #24]
 8003b34:	4303      	orrs	r3, r0
             hspdif->Init.ParityErrorMask);
  
  hspdif->Instance->CR = tmpreg;  
  
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8003b36:	2000      	movs	r0, #0
  tmpreg |= ((uint16_t) hspdif->Init.StereoMode |
 8003b38:	4313      	orrs	r3, r2
  hspdif->Instance->CR = tmpreg;  
 8003b3a:	600b      	str	r3, [r1, #0]
  
  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003b3c:	2301      	movs	r3, #1
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8003b3e:	64a0      	str	r0, [r4, #72]	; 0x48
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003b40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  
  return HAL_OK;
 8003b44:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003b46:	2001      	movs	r0, #1
}
 8003b48:	bd10      	pop	{r4, pc}

08003b4a <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b4a:	6a03      	ldr	r3, [r0, #32]
{
 8003b4c:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b4e:	6a04      	ldr	r4, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b50:	f023 030a 	bic.w	r3, r3, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b54:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 8003b58:	430b      	orrs	r3, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b5a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003b5c:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b5e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8003b62:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b66:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b68:	6203      	str	r3, [r0, #32]
 8003b6a:	bd10      	pop	{r4, pc}

08003b6c <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6c:	6a03      	ldr	r3, [r0, #32]
 8003b6e:	f023 0310 	bic.w	r3, r3, #16
{
 8003b72:	b510      	push	{r4, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b74:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b76:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003b78:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b7a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8003b82:	ea44 3202 	orr.w	r2, r4, r2, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 8003b86:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b8a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003b8c:	6203      	str	r3, [r0, #32]
 8003b8e:	bd10      	pop	{r4, pc}

08003b90 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b90:	6803      	ldr	r3, [r0, #0]
}
 8003b92:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
}
 8003ba4:	4770      	bx	lr

08003ba6 <HAL_TIM_OC_DelayElapsedCallback>:
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIM_IC_CaptureCallback>:
 8003ba8:	4770      	bx	lr

08003baa <HAL_TIM_PWM_PulseFinishedCallback>:
 8003baa:	4770      	bx	lr

08003bac <HAL_TIM_TriggerCallback>:
 8003bac:	4770      	bx	lr

08003bae <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bae:	6803      	ldr	r3, [r0, #0]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	0791      	lsls	r1, r2, #30
{
 8003bb4:	b510      	push	{r4, lr}
 8003bb6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bb8:	d50f      	bpl.n	8003bda <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	0792      	lsls	r2, r2, #30
 8003bbe:	d50c      	bpl.n	8003bda <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bc0:	f06f 0202 	mvn.w	r2, #2
 8003bc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bc6:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003bc8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bca:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003bcc:	0799      	lsls	r1, r3, #30
 8003bce:	f000 8085 	beq.w	8003cdc <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003bd2:	f7ff ffe9 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	0752      	lsls	r2, r2, #29
 8003be0:	d510      	bpl.n	8003c04 <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	0750      	lsls	r0, r2, #29
 8003be6:	d50d      	bpl.n	8003c04 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003be8:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8003bec:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bf0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003bf2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bf4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003bf6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003bfa:	d075      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfc:	f7ff ffd4 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c00:	2300      	movs	r3, #0
 8003c02:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	691a      	ldr	r2, [r3, #16]
 8003c08:	0711      	lsls	r1, r2, #28
 8003c0a:	d50f      	bpl.n	8003c2c <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	0712      	lsls	r2, r2, #28
 8003c10:	d50c      	bpl.n	8003c2c <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c12:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8003c16:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c1a:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003c1c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c1e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003c20:	079b      	lsls	r3, r3, #30
 8003c22:	d067      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c24:	f7ff ffc0 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	06d0      	lsls	r0, r2, #27
 8003c32:	d510      	bpl.n	8003c56 <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	06d1      	lsls	r1, r2, #27
 8003c38:	d50d      	bpl.n	8003c56 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c3a:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c42:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003c44:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c46:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003c48:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003c4c:	d058      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	f7ff ffab 	bl	8003ba8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	2300      	movs	r3, #0
 8003c54:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	07d2      	lsls	r2, r2, #31
 8003c5c:	d508      	bpl.n	8003c70 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003c5e:	68da      	ldr	r2, [r3, #12]
 8003c60:	07d0      	lsls	r0, r2, #31
 8003c62:	d505      	bpl.n	8003c70 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c64:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c68:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c6a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c6c:	f004 fcbe 	bl	80085ec <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	691a      	ldr	r2, [r3, #16]
 8003c74:	0611      	lsls	r1, r2, #24
 8003c76:	d508      	bpl.n	8003c8a <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	0612      	lsls	r2, r2, #24
 8003c7c:	d505      	bpl.n	8003c8a <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003c82:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c84:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003c86:	f000 faec 	bl	8004262 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003c8a:	6823      	ldr	r3, [r4, #0]
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	05d0      	lsls	r0, r2, #23
 8003c90:	d508      	bpl.n	8003ca4 <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	0611      	lsls	r1, r2, #24
 8003c96:	d505      	bpl.n	8003ca4 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8003c9c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c9e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003ca0:	f000 fadf 	bl	8004262 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	691a      	ldr	r2, [r3, #16]
 8003ca8:	0652      	lsls	r2, r2, #25
 8003caa:	d508      	bpl.n	8003cbe <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	0650      	lsls	r0, r2, #25
 8003cb0:	d505      	bpl.n	8003cbe <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8003cb6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cb8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003cba:	f7ff ff77 	bl	8003bac <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	0691      	lsls	r1, r2, #26
 8003cc4:	d522      	bpl.n	8003d0c <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	0692      	lsls	r2, r2, #26
 8003cca:	d51f      	bpl.n	8003d0c <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ccc:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8003cd0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd2:	611a      	str	r2, [r3, #16]
}
 8003cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8003cd8:	f000 bac2 	b.w	8004260 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cdc:	f7ff ff63 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	f7ff ff62 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
 8003ce6:	e776      	b.n	8003bd6 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce8:	f7ff ff5d 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cec:	4620      	mov	r0, r4
 8003cee:	f7ff ff5c 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
 8003cf2:	e785      	b.n	8003c00 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf4:	f7ff ff57 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	f7ff ff56 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
 8003cfe:	e793      	b.n	8003c28 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d00:	f7ff ff51 	bl	8003ba6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	4620      	mov	r0, r4
 8003d06:	f7ff ff50 	bl	8003baa <HAL_TIM_PWM_PulseFinishedCallback>
 8003d0a:	e7a2      	b.n	8003c52 <HAL_TIM_IRQHandler+0xa4>
 8003d0c:	bd10      	pop	{r4, pc}
	...

08003d10 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003d10:	4a30      	ldr	r2, [pc, #192]	; (8003dd4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003d12:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003d14:	4290      	cmp	r0, r2
 8003d16:	d012      	beq.n	8003d3e <TIM_Base_SetConfig+0x2e>
 8003d18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d1c:	d00f      	beq.n	8003d3e <TIM_Base_SetConfig+0x2e>
 8003d1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003d22:	4290      	cmp	r0, r2
 8003d24:	d00b      	beq.n	8003d3e <TIM_Base_SetConfig+0x2e>
 8003d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d2a:	4290      	cmp	r0, r2
 8003d2c:	d007      	beq.n	8003d3e <TIM_Base_SetConfig+0x2e>
 8003d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d32:	4290      	cmp	r0, r2
 8003d34:	d003      	beq.n	8003d3e <TIM_Base_SetConfig+0x2e>
 8003d36:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003d3a:	4290      	cmp	r0, r2
 8003d3c:	d11d      	bne.n	8003d7a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8003d3e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d44:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003d46:	4a23      	ldr	r2, [pc, #140]	; (8003dd4 <TIM_Base_SetConfig+0xc4>)
 8003d48:	4290      	cmp	r0, r2
 8003d4a:	d104      	bne.n	8003d56 <TIM_Base_SetConfig+0x46>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d50:	68ca      	ldr	r2, [r1, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	e028      	b.n	8003da8 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8003d56:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003d5a:	d0f7      	beq.n	8003d4c <TIM_Base_SetConfig+0x3c>
 8003d5c:	4a1e      	ldr	r2, [pc, #120]	; (8003dd8 <TIM_Base_SetConfig+0xc8>)
 8003d5e:	4290      	cmp	r0, r2
 8003d60:	d0f4      	beq.n	8003d4c <TIM_Base_SetConfig+0x3c>
 8003d62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d66:	4290      	cmp	r0, r2
 8003d68:	d0f0      	beq.n	8003d4c <TIM_Base_SetConfig+0x3c>
 8003d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d6e:	4290      	cmp	r0, r2
 8003d70:	d0ec      	beq.n	8003d4c <TIM_Base_SetConfig+0x3c>
 8003d72:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003d76:	4290      	cmp	r0, r2
 8003d78:	d0e8      	beq.n	8003d4c <TIM_Base_SetConfig+0x3c>
 8003d7a:	4a18      	ldr	r2, [pc, #96]	; (8003ddc <TIM_Base_SetConfig+0xcc>)
 8003d7c:	4290      	cmp	r0, r2
 8003d7e:	d0e5      	beq.n	8003d4c <TIM_Base_SetConfig+0x3c>
 8003d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d84:	4290      	cmp	r0, r2
 8003d86:	d0e1      	beq.n	8003d4c <TIM_Base_SetConfig+0x3c>
 8003d88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d8c:	4290      	cmp	r0, r2
 8003d8e:	d0dd      	beq.n	8003d4c <TIM_Base_SetConfig+0x3c>
 8003d90:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003d94:	4290      	cmp	r0, r2
 8003d96:	d0d9      	beq.n	8003d4c <TIM_Base_SetConfig+0x3c>
 8003d98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003d9c:	4290      	cmp	r0, r2
 8003d9e:	d0d5      	beq.n	8003d4c <TIM_Base_SetConfig+0x3c>
 8003da0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003da4:	4290      	cmp	r0, r2
 8003da6:	d0d1      	beq.n	8003d4c <TIM_Base_SetConfig+0x3c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da8:	694a      	ldr	r2, [r1, #20]
 8003daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dae:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003db0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db2:	688b      	ldr	r3, [r1, #8]
 8003db4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8003db6:	680b      	ldr	r3, [r1, #0]
 8003db8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <TIM_Base_SetConfig+0xc4>)
 8003dbc:	4298      	cmp	r0, r3
 8003dbe:	d006      	beq.n	8003dce <TIM_Base_SetConfig+0xbe>
 8003dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003dc4:	4298      	cmp	r0, r3
 8003dc6:	d002      	beq.n	8003dce <TIM_Base_SetConfig+0xbe>
  TIMx->EGR = TIM_EGR_UG;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	6143      	str	r3, [r0, #20]
}
 8003dcc:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8003dce:	690b      	ldr	r3, [r1, #16]
 8003dd0:	6303      	str	r3, [r0, #48]	; 0x30
 8003dd2:	e7f9      	b.n	8003dc8 <TIM_Base_SetConfig+0xb8>
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40000400 	.word	0x40000400
 8003ddc:	40014000 	.word	0x40014000

08003de0 <HAL_TIM_Base_Init>:
{ 
 8003de0:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003de2:	4604      	mov	r4, r0
 8003de4:	b1a0      	cbz	r0, 8003e10 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003de6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003dea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003dee:	b91b      	cbnz	r3, 8003df8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003df0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003df4:	f004 ff4e 	bl	8008c94 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003df8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003dfa:	6820      	ldr	r0, [r4, #0]
 8003dfc:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8003dfe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003e02:	f7ff ff85 	bl	8003d10 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003e06:	2301      	movs	r3, #1
  return HAL_OK;
 8003e08:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003e0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e10:	2001      	movs	r0, #1
}
 8003e12:	bd10      	pop	{r4, pc}

08003e14 <HAL_TIM_PWM_Init>:
{
 8003e14:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003e16:	4604      	mov	r4, r0
 8003e18:	b1a0      	cbz	r0, 8003e44 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e1e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003e22:	b91b      	cbnz	r3, 8003e2c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003e24:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003e28:	f004 ff88 	bl	8008d3c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 8003e2c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003e2e:	6820      	ldr	r0, [r4, #0]
 8003e30:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;  
 8003e32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003e36:	f7ff ff6b 	bl	8003d10 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8003e3a:	2301      	movs	r3, #1
  return HAL_OK;
 8003e3c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003e3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003e42:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003e44:	2001      	movs	r0, #1
}  
 8003e46:	bd10      	pop	{r4, pc}

08003e48 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e48:	6a03      	ldr	r3, [r0, #32]
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
{
 8003e4e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e50:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003e52:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003e54:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003e56:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8003e58:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx |= OC_Config->OCMode;
 8003e5c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e5e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003e62:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003e66:	432c      	orrs	r4, r5
  tmpccer |= OC_Config->OCPolarity;
 8003e68:	688d      	ldr	r5, [r1, #8]
 8003e6a:	432b      	orrs	r3, r5
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003e6c:	4d0c      	ldr	r5, [pc, #48]	; (8003ea0 <TIM_OC1_SetConfig+0x58>)
 8003e6e:	42a8      	cmp	r0, r5
 8003e70:	d009      	beq.n	8003e86 <TIM_OC1_SetConfig+0x3e>
 8003e72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003e76:	42a8      	cmp	r0, r5
 8003e78:	d005      	beq.n	8003e86 <TIM_OC1_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8003e7a:	6042      	str	r2, [r0, #4]
  TIMx->CCR1 = OC_Config->Pulse;
 8003e7c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003e7e:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003e80:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8003e82:	6203      	str	r3, [r0, #32]
} 
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8003e86:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e88:	f023 0308 	bic.w	r3, r3, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e8c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8003e92:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e94:	694d      	ldr	r5, [r1, #20]
 8003e96:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e98:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e9c:	432a      	orrs	r2, r5
 8003e9e:	e7ec      	b.n	8003e7a <TIM_OC1_SetConfig+0x32>
 8003ea0:	40010000 	.word	0x40010000

08003ea4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ea4:	6a03      	ldr	r3, [r0, #32]
 8003ea6:	f023 0310 	bic.w	r3, r3, #16
{
 8003eaa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eac:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003eae:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003eb0:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003eb2:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8003eb4:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003eb8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003eba:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8003ebe:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003ec2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4);
 8003ec6:	688d      	ldr	r5, [r1, #8]
 8003ec8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003ecc:	4d0d      	ldr	r5, [pc, #52]	; (8003f04 <TIM_OC2_SetConfig+0x60>)
 8003ece:	42a8      	cmp	r0, r5
 8003ed0:	d009      	beq.n	8003ee6 <TIM_OC2_SetConfig+0x42>
 8003ed2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ed6:	42a8      	cmp	r0, r5
 8003ed8:	d005      	beq.n	8003ee6 <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8003eda:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8003edc:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003ede:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003ee0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8003ee2:	6203      	str	r3, [r0, #32]
}
 8003ee4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8003ee6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003eec:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8003ef2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8003ef6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003ef8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003efa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8003efe:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8003f02:	e7ea      	b.n	8003eda <TIM_OC2_SetConfig+0x36>
 8003f04:	40010000 	.word	0x40010000

08003f08 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f08:	6a03      	ldr	r3, [r0, #32]
 8003f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8003f0e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f10:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003f12:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003f14:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003f16:	69c4      	ldr	r4, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003f18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx |= OC_Config->OCMode;
 8003f1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003f1e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8003f22:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003f26:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8);
 8003f28:	688d      	ldr	r5, [r1, #8]
 8003f2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003f2e:	4d0e      	ldr	r5, [pc, #56]	; (8003f68 <TIM_OC3_SetConfig+0x60>)
 8003f30:	42a8      	cmp	r0, r5
 8003f32:	d009      	beq.n	8003f48 <TIM_OC3_SetConfig+0x40>
 8003f34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f38:	42a8      	cmp	r0, r5
 8003f3a:	d005      	beq.n	8003f48 <TIM_OC3_SetConfig+0x40>
  TIMx->CR2 = tmpcr2;
 8003f3c:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8003f3e:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003f40:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003f42:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003f44:	6203      	str	r3, [r0, #32]
}
 8003f46:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8003f48:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003f4e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f50:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8003f54:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8003f58:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003f5a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8003f60:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8003f64:	e7ea      	b.n	8003f3c <TIM_OC3_SetConfig+0x34>
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000

08003f6c <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f6c:	6a03      	ldr	r3, [r0, #32]
 8003f6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8003f72:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f74:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003f76:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8003f78:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8003f7a:	69c3      	ldr	r3, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8003f7c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003f80:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f86:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8);
 8003f8a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12);
 8003f8e:	688d      	ldr	r5, [r1, #8]
 8003f90:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8003f94:	4d09      	ldr	r5, [pc, #36]	; (8003fbc <TIM_OC4_SetConfig+0x50>)
 8003f96:	42a8      	cmp	r0, r5
 8003f98:	d009      	beq.n	8003fae <TIM_OC4_SetConfig+0x42>
 8003f9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003f9e:	42a8      	cmp	r0, r5
 8003fa0:	d005      	beq.n	8003fae <TIM_OC4_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 8003fa2:	6042      	str	r2, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003fa4:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa6:	684b      	ldr	r3, [r1, #4]
 8003fa8:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003faa:	6204      	str	r4, [r0, #32]
}
 8003fac:	bd30      	pop	{r4, r5, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8003fb2:	694d      	ldr	r5, [r1, #20]
 8003fb4:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8003fb8:	e7f3      	b.n	8003fa2 <TIM_OC4_SetConfig+0x36>
 8003fba:	bf00      	nop
 8003fbc:	40010000 	.word	0x40010000

08003fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003fc0:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003fc2:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 8003fc4:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003fc6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fca:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8003fce:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fd0:	6083      	str	r3, [r0, #8]
 8003fd2:	bd10      	pop	{r4, pc}

08003fd4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003fd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003fd8:	2b01      	cmp	r3, #1
{
 8003fda:	b510      	push	{r4, lr}
 8003fdc:	4604      	mov	r4, r0
 8003fde:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8003fe2:	d018      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003fe8:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8003fea:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8003fec:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ff2:	4b3e      	ldr	r3, [pc, #248]	; (80040ec <HAL_TIM_ConfigClockSource+0x118>)
 8003ff4:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8003ff6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003ff8:	680b      	ldr	r3, [r1, #0]
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d059      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0xde>
 8003ffe:	d815      	bhi.n	800402c <HAL_TIM_ConfigClockSource+0x58>
 8004000:	2b10      	cmp	r3, #16
 8004002:	d067      	beq.n	80040d4 <HAL_TIM_ConfigClockSource+0x100>
 8004004:	d808      	bhi.n	8004018 <HAL_TIM_ConfigClockSource+0x44>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d05e      	beq.n	80040c8 <HAL_TIM_ConfigClockSource+0xf4>
  htim->State = HAL_TIM_STATE_READY;
 800400a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800400c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800400e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004012:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004016:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8004018:	2b20      	cmp	r3, #32
 800401a:	d061      	beq.n	80040e0 <HAL_TIM_ConfigClockSource+0x10c>
 800401c:	2b30      	cmp	r3, #48	; 0x30
 800401e:	d1f4      	bne.n	800400a <HAL_TIM_ConfigClockSource+0x36>
   tmpsmcr = TIMx->SMCR;
 8004020:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8004026:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 800402a:	e026      	b.n	800407a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 800402c:	2b70      	cmp	r3, #112	; 0x70
 800402e:	d026      	beq.n	800407e <HAL_TIM_ConfigClockSource+0xaa>
 8004030:	d80e      	bhi.n	8004050 <HAL_TIM_ConfigClockSource+0x7c>
 8004032:	2b50      	cmp	r3, #80	; 0x50
 8004034:	d032      	beq.n	800409c <HAL_TIM_ConfigClockSource+0xc8>
 8004036:	2b60      	cmp	r3, #96	; 0x60
 8004038:	d1e7      	bne.n	800400a <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800403a:	68ca      	ldr	r2, [r1, #12]
 800403c:	6849      	ldr	r1, [r1, #4]
 800403e:	f7ff fd95 	bl	8003b6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004042:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 8004044:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8004046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800404a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800404e:	e023      	b.n	8004098 <HAL_TIM_ConfigClockSource+0xc4>
  switch (sClockSourceConfig->ClockSource)
 8004050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004054:	d00c      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0x9c>
 8004056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800405a:	d1d6      	bne.n	800400a <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 800405c:	68cb      	ldr	r3, [r1, #12]
 800405e:	684a      	ldr	r2, [r1, #4]
 8004060:	6889      	ldr	r1, [r1, #8]
 8004062:	f7ff ffad 	bl	8003fc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004066:	6822      	ldr	r2, [r4, #0]
 8004068:	6893      	ldr	r3, [r2, #8]
 800406a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800406e:	e013      	b.n	8004098 <HAL_TIM_ConfigClockSource+0xc4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004070:	6883      	ldr	r3, [r0, #8]
 8004072:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004076:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 800407a:	6083      	str	r3, [r0, #8]
 800407c:	e7c5      	b.n	800400a <HAL_TIM_ConfigClockSource+0x36>
      TIM_ETR_SetConfig(htim->Instance, 
 800407e:	68cb      	ldr	r3, [r1, #12]
 8004080:	684a      	ldr	r2, [r1, #4]
 8004082:	6889      	ldr	r1, [r1, #8]
 8004084:	f7ff ff9c 	bl	8003fc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004088:	6822      	ldr	r2, [r4, #0]
 800408a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800408c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004090:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004098:	6093      	str	r3, [r2, #8]
    break;
 800409a:	e7b6      	b.n	800400a <HAL_TIM_ConfigClockSource+0x36>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800409c:	68ca      	ldr	r2, [r1, #12]
 800409e:	6849      	ldr	r1, [r1, #4]
 80040a0:	f7ff fd53 	bl	8003b4a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040a4:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80040a6:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80040a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80040ac:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80040b0:	e7f2      	b.n	8004098 <HAL_TIM_ConfigClockSource+0xc4>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80040b2:	68ca      	ldr	r2, [r1, #12]
 80040b4:	6849      	ldr	r1, [r1, #4]
 80040b6:	f7ff fd48 	bl	8003b4a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ba:	6822      	ldr	r2, [r4, #0]
   tmpsmcr = TIMx->SMCR;
 80040bc:	6893      	ldr	r3, [r2, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80040be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80040c2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80040c6:	e7e7      	b.n	8004098 <HAL_TIM_ConfigClockSource+0xc4>
   tmpsmcr = TIMx->SMCR;
 80040c8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80040ce:	f043 0307 	orr.w	r3, r3, #7
 80040d2:	e7d2      	b.n	800407a <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80040d4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80040da:	f043 0317 	orr.w	r3, r3, #23
 80040de:	e7cc      	b.n	800407a <HAL_TIM_ConfigClockSource+0xa6>
   tmpsmcr = TIMx->SMCR;
 80040e0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80040e6:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 80040ea:	e7c6      	b.n	800407a <HAL_TIM_ConfigClockSource+0xa6>
 80040ec:	fffe0088 	.word	0xfffe0088

080040f0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040f0:	6a03      	ldr	r3, [r0, #32]
 80040f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 80040f6:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040f8:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80040fc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040fe:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004100:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccmrx |= OC_Config->OCMode;
 8004104:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800410e:	432b      	orrs	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8004110:	688d      	ldr	r5, [r1, #8]
 8004112:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004116:	4d09      	ldr	r5, [pc, #36]	; (800413c <TIM_OC5_SetConfig+0x4c>)
 8004118:	42a8      	cmp	r0, r5
 800411a:	d003      	beq.n	8004124 <TIM_OC5_SetConfig+0x34>
 800411c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004120:	42a8      	cmp	r0, r5
 8004122:	d104      	bne.n	800412e <TIM_OC5_SetConfig+0x3e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004124:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8004128:	694d      	ldr	r5, [r1, #20]
 800412a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004130:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004132:	684b      	ldr	r3, [r1, #4]
 8004134:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004136:	6202      	str	r2, [r0, #32]
 8004138:	bd30      	pop	{r4, r5, pc}
 800413a:	bf00      	nop
 800413c:	40010000 	.word	0x40010000

08004140 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004140:	6a03      	ldr	r3, [r0, #32]
 8004142:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 8004146:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004148:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800414a:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800414c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800414e:	6d43      	ldr	r3, [r0, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004150:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccmrx |= (OC_Config->OCMode << 8);
 8004154:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004156:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800415a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8);
 800415e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8004162:	688d      	ldr	r5, [r1, #8]
 8004164:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8004168:	4d08      	ldr	r5, [pc, #32]	; (800418c <TIM_OC6_SetConfig+0x4c>)
 800416a:	42a8      	cmp	r0, r5
 800416c:	d003      	beq.n	8004176 <TIM_OC6_SetConfig+0x36>
 800416e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004172:	42a8      	cmp	r0, r5
 8004174:	d104      	bne.n	8004180 <TIM_OC6_SetConfig+0x40>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004176:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800417a:	694d      	ldr	r5, [r1, #20]
 800417c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004180:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004182:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004184:	684b      	ldr	r3, [r1, #4]
 8004186:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004188:	6202      	str	r2, [r0, #32]
 800418a:	bd30      	pop	{r4, r5, pc}
 800418c:	40010000 	.word	0x40010000

08004190 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8004190:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004194:	2b01      	cmp	r3, #1
{
 8004196:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8004198:	d01c      	beq.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  tmpcr2 = htim->Instance->CR2;
 800419a:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800419c:	4d0e      	ldr	r5, [pc, #56]	; (80041d8 <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  tmpcr2 = htim->Instance->CR2;
 800419e:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041a0:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80041a2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041a4:	d003      	beq.n	80041ae <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80041a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80041aa:	42aa      	cmp	r2, r5
 80041ac:	d103      	bne.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80041ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041b2:	684d      	ldr	r5, [r1, #4]
 80041b4:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b6:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041bc:	6889      	ldr	r1, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_MSM;
 80041be:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041c2:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041c4:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
 80041c6:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(htim);
 80041c8:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80041ca:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80041cc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80041d0:	4618      	mov	r0, r3
 80041d2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80041d4:	2002      	movs	r0, #2
} 
 80041d6:	bd30      	pop	{r4, r5, pc}
 80041d8:	40010000 	.word	0x40010000

080041dc <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 80041dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80041e0:	2b01      	cmp	r3, #1
{
 80041e2:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80041e4:	d038      	beq.n	8004258 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041e6:	68cb      	ldr	r3, [r1, #12]
 80041e8:	688a      	ldr	r2, [r1, #8]
 80041ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80041ee:	4c1b      	ldr	r4, [pc, #108]	; (800425c <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80041f0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80041f2:	684a      	ldr	r2, [r1, #4]
 80041f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041f8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041fa:	680a      	ldr	r2, [r1, #0]
 80041fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004200:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004202:	690a      	ldr	r2, [r1, #16]
 8004204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004208:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800420a:	694a      	ldr	r2, [r1, #20]
 800420c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004210:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004212:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004214:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004218:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800421a:	698a      	ldr	r2, [r1, #24]
 800421c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004220:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004224:	6802      	ldr	r2, [r0, #0]
 8004226:	42a2      	cmp	r2, r4
 8004228:	d003      	beq.n	8004232 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800422a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800422e:	42a2      	cmp	r2, r4
 8004230:	d10c      	bne.n	800424c <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8004232:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004234:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004238:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800423c:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800423e:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004244:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004246:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800424a:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 800424c:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800424e:	2300      	movs	r3, #0
 8004250:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8004254:	4618      	mov	r0, r3
 8004256:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8004258:	2002      	movs	r0, #2
}
 800425a:	bd10      	pop	{r4, pc}
 800425c:	40010000 	.word	0x40010000

08004260 <HAL_TIMEx_CommutationCallback>:
 8004260:	4770      	bx	lr

08004262 <HAL_TIMEx_BreakCallback>:
{
 8004262:	4770      	bx	lr

08004264 <HAL_TIM_PWM_ConfigChannel>:
{
 8004264:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004266:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800426a:	4604      	mov	r4, r0
 800426c:	460d      	mov	r5, r1
 800426e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8004270:	2b01      	cmp	r3, #1
 8004272:	d010      	beq.n	8004296 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004274:	2301      	movs	r3, #1
  switch (Channel)
 8004276:	2a08      	cmp	r2, #8
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800427c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8004280:	d043      	beq.n	800430a <HAL_TIM_PWM_ConfigChannel+0xa6>
 8004282:	d809      	bhi.n	8004298 <HAL_TIM_PWM_ConfigChannel+0x34>
 8004284:	b1fa      	cbz	r2, 80042c6 <HAL_TIM_PWM_ConfigChannel+0x62>
 8004286:	2a04      	cmp	r2, #4
 8004288:	d02e      	beq.n	80042e8 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 800428a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800428c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800428e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004292:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004296:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8004298:	2a10      	cmp	r2, #16
 800429a:	d047      	beq.n	800432c <HAL_TIM_PWM_ConfigChannel+0xc8>
 800429c:	2a14      	cmp	r2, #20
 800429e:	d056      	beq.n	800434e <HAL_TIM_PWM_ConfigChannel+0xea>
 80042a0:	2a0c      	cmp	r2, #12
 80042a2:	d1f2      	bne.n	800428a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042a4:	6820      	ldr	r0, [r4, #0]
 80042a6:	f7ff fe61 	bl	8003f6c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042aa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80042ac:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ae:	69da      	ldr	r2, [r3, #28]
 80042b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80042c4:	e030      	b.n	8004328 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042c6:	6820      	ldr	r0, [r4, #0]
 80042c8:	f7ff fdbe 	bl	8003e48 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042cc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042ce:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	f042 0208 	orr.w	r2, r2, #8
 80042d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	f022 0204 	bic.w	r2, r2, #4
 80042de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042e0:	699a      	ldr	r2, [r3, #24]
 80042e2:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80042e4:	619a      	str	r2, [r3, #24]
    break;
 80042e6:	e7d0      	b.n	800428a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042e8:	6820      	ldr	r0, [r4, #0]
 80042ea:	f7ff fddb 	bl	8003ea4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042ee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80042f0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042fa:	699a      	ldr	r2, [r3, #24]
 80042fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004300:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004308:	e7ec      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800430a:	6820      	ldr	r0, [r4, #0]
 800430c:	f7ff fdfc 	bl	8003f08 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004310:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8004312:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	f042 0208 	orr.w	r2, r2, #8
 800431a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800431c:	69da      	ldr	r2, [r3, #28]
 800431e:	f022 0204 	bic.w	r2, r2, #4
 8004322:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8004328:	61da      	str	r2, [r3, #28]
    break;
 800432a:	e7ae      	b.n	800428a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800432c:	6820      	ldr	r0, [r4, #0]
 800432e:	f7ff fedf 	bl	80040f0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004332:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004334:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004336:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004338:	f042 0208 	orr.w	r2, r2, #8
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800433e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004340:	f022 0204 	bic.w	r2, r2, #4
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8004346:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004348:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800434c:	e79d      	b.n	800428a <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800434e:	6820      	ldr	r0, [r4, #0]
 8004350:	f7ff fef6 	bl	8004140 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004354:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004356:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800435a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800435e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004360:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004366:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8004368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800436a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800436e:	e7ec      	b.n	800434a <HAL_TIM_PWM_ConfigChannel+0xe6>

08004370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004374:	9d06      	ldr	r5, [sp, #24]
 8004376:	4604      	mov	r4, r0
 8004378:	460f      	mov	r7, r1
 800437a:	4616      	mov	r6, r2
 800437c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437e:	6821      	ldr	r1, [r4, #0]
 8004380:	69ca      	ldr	r2, [r1, #28]
 8004382:	ea37 0302 	bics.w	r3, r7, r2
 8004386:	bf0c      	ite	eq
 8004388:	2201      	moveq	r2, #1
 800438a:	2200      	movne	r2, #0
 800438c:	42b2      	cmp	r2, r6
 800438e:	d002      	beq.n	8004396 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004390:	2000      	movs	r0, #0
}
 8004392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8004396:	1c6b      	adds	r3, r5, #1
 8004398:	d0f2      	beq.n	8004380 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800439a:	b99d      	cbnz	r5, 80043c4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800439c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800439e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	f022 0201 	bic.w	r2, r2, #1
 80043ae:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80043b0:	2320      	movs	r3, #32
 80043b2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80043b6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80043ba:	2300      	movs	r3, #0
 80043bc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80043c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80043c4:	f7fc f8c4 	bl	8000550 <HAL_GetTick>
 80043c8:	eba0 0008 	sub.w	r0, r0, r8
 80043cc:	4285      	cmp	r5, r0
 80043ce:	d8d6      	bhi.n	800437e <UART_WaitOnFlagUntilTimeout+0xe>
 80043d0:	e7e4      	b.n	800439c <UART_WaitOnFlagUntilTimeout+0x2c>
	...

080043d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043d8:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043da:	69c3      	ldr	r3, [r0, #28]
 80043dc:	6921      	ldr	r1, [r4, #16]
 80043de:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043e0:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043e2:	430a      	orrs	r2, r1
 80043e4:	6961      	ldr	r1, [r4, #20]
 80043e6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043e8:	4993      	ldr	r1, [pc, #588]	; (8004638 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043ea:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043ec:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80043ee:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043f0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80043f4:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043f6:	686a      	ldr	r2, [r5, #4]
 80043f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80043fc:	430a      	orrs	r2, r1
 80043fe:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004400:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004402:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8004404:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8004406:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800440a:	430a      	orrs	r2, r1
 800440c:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800440e:	4a8b      	ldr	r2, [pc, #556]	; (800463c <UART_SetConfig+0x268>)
 8004410:	4295      	cmp	r5, r2
 8004412:	d119      	bne.n	8004448 <UART_SetConfig+0x74>
 8004414:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004418:	4989      	ldr	r1, [pc, #548]	; (8004640 <UART_SetConfig+0x26c>)
 800441a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800441e:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004426:	5c8a      	ldrb	r2, [r1, r2]
 8004428:	f040 80b3 	bne.w	8004592 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 800442c:	2a08      	cmp	r2, #8
 800442e:	f200 80ad 	bhi.w	800458c <UART_SetConfig+0x1b8>
 8004432:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004436:	0026      	.short	0x0026
 8004438:	00e9007b 	.word	0x00e9007b
 800443c:	00f500ab 	.word	0x00f500ab
 8004440:	00ab00ab 	.word	0x00ab00ab
 8004444:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004448:	4a7e      	ldr	r2, [pc, #504]	; (8004644 <UART_SetConfig+0x270>)
 800444a:	4295      	cmp	r5, r2
 800444c:	d107      	bne.n	800445e <UART_SetConfig+0x8a>
 800444e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8004452:	497d      	ldr	r1, [pc, #500]	; (8004648 <UART_SetConfig+0x274>)
 8004454:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004458:	f002 020c 	and.w	r2, r2, #12
 800445c:	e7e1      	b.n	8004422 <UART_SetConfig+0x4e>
 800445e:	4a7b      	ldr	r2, [pc, #492]	; (800464c <UART_SetConfig+0x278>)
 8004460:	4295      	cmp	r5, r2
 8004462:	d12b      	bne.n	80044bc <UART_SetConfig+0xe8>
 8004464:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8004468:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800446c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8004470:	2a10      	cmp	r2, #16
 8004472:	f000 80d2 	beq.w	800461a <UART_SetConfig+0x246>
 8004476:	d816      	bhi.n	80044a6 <UART_SetConfig+0xd2>
 8004478:	b9da      	cbnz	r2, 80044b2 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800447a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800447e:	f040 809f 	bne.w	80045c0 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004482:	f7fe f87d 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004486:	6861      	ldr	r1, [r4, #4]
 8004488:	084a      	lsrs	r2, r1, #1
 800448a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800448e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004492:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8004494:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8004496:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800449a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800449e:	6821      	ldr	r1, [r4, #0]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60cb      	str	r3, [r1, #12]
 80044a4:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a6:	2a20      	cmp	r2, #32
 80044a8:	f000 80ab 	beq.w	8004602 <UART_SetConfig+0x22e>
 80044ac:	2a30      	cmp	r2, #48	; 0x30
 80044ae:	f000 80ba 	beq.w	8004626 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b6:	d069      	beq.n	800458c <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80044b8:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 80044ba:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044bc:	4a64      	ldr	r2, [pc, #400]	; (8004650 <UART_SetConfig+0x27c>)
 80044be:	4295      	cmp	r5, r2
 80044c0:	d10e      	bne.n	80044e0 <UART_SetConfig+0x10c>
 80044c2:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 80044c6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80044ca:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80044ce:	2a40      	cmp	r2, #64	; 0x40
 80044d0:	f000 80a3 	beq.w	800461a <UART_SetConfig+0x246>
 80044d4:	d9d0      	bls.n	8004478 <UART_SetConfig+0xa4>
 80044d6:	2a80      	cmp	r2, #128	; 0x80
 80044d8:	f000 8093 	beq.w	8004602 <UART_SetConfig+0x22e>
 80044dc:	2ac0      	cmp	r2, #192	; 0xc0
 80044de:	e7e6      	b.n	80044ae <UART_SetConfig+0xda>
 80044e0:	4a5c      	ldr	r2, [pc, #368]	; (8004654 <UART_SetConfig+0x280>)
 80044e2:	4295      	cmp	r5, r2
 80044e4:	d110      	bne.n	8004508 <UART_SetConfig+0x134>
 80044e6:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 80044ea:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80044ee:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80044f2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80044f6:	f000 8090 	beq.w	800461a <UART_SetConfig+0x246>
 80044fa:	d9bd      	bls.n	8004478 <UART_SetConfig+0xa4>
 80044fc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004500:	d07f      	beq.n	8004602 <UART_SetConfig+0x22e>
 8004502:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8004506:	e7d2      	b.n	80044ae <UART_SetConfig+0xda>
 8004508:	4a53      	ldr	r2, [pc, #332]	; (8004658 <UART_SetConfig+0x284>)
 800450a:	4295      	cmp	r5, r2
 800450c:	d117      	bne.n	800453e <UART_SetConfig+0x16a>
 800450e:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8004512:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004516:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800451a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800451e:	d07c      	beq.n	800461a <UART_SetConfig+0x246>
 8004520:	d807      	bhi.n	8004532 <UART_SetConfig+0x15e>
 8004522:	2a00      	cmp	r2, #0
 8004524:	d1c5      	bne.n	80044b2 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452a:	d154      	bne.n	80045d6 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800452c:	f7fe f838 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8004530:	e7a9      	b.n	8004486 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004532:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8004536:	d064      	beq.n	8004602 <UART_SetConfig+0x22e>
 8004538:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800453c:	e7b7      	b.n	80044ae <UART_SetConfig+0xda>
 800453e:	4a47      	ldr	r2, [pc, #284]	; (800465c <UART_SetConfig+0x288>)
 8004540:	4295      	cmp	r5, r2
 8004542:	d10f      	bne.n	8004564 <UART_SetConfig+0x190>
 8004544:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8004548:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800454c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8004550:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004554:	d061      	beq.n	800461a <UART_SetConfig+0x246>
 8004556:	d98f      	bls.n	8004478 <UART_SetConfig+0xa4>
 8004558:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800455c:	d051      	beq.n	8004602 <UART_SetConfig+0x22e>
 800455e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8004562:	e7a4      	b.n	80044ae <UART_SetConfig+0xda>
 8004564:	4a3e      	ldr	r2, [pc, #248]	; (8004660 <UART_SetConfig+0x28c>)
 8004566:	4295      	cmp	r5, r2
 8004568:	d1a3      	bne.n	80044b2 <UART_SetConfig+0xde>
 800456a:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800456e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004572:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8004576:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800457a:	d04e      	beq.n	800461a <UART_SetConfig+0x246>
 800457c:	f67f af7c 	bls.w	8004478 <UART_SetConfig+0xa4>
 8004580:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004584:	d03d      	beq.n	8004602 <UART_SetConfig+0x22e>
 8004586:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 800458a:	e790      	b.n	80044ae <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 800458c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800458e:	2300      	movs	r3, #0
 8004590:	e781      	b.n	8004496 <UART_SetConfig+0xc2>
    switch (clocksource)
 8004592:	2a08      	cmp	r2, #8
 8004594:	d890      	bhi.n	80044b8 <UART_SetConfig+0xe4>
 8004596:	a301      	add	r3, pc, #4	; (adr r3, 800459c <UART_SetConfig+0x1c8>)
 8004598:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045d7 	.word	0x080045d7
 80045a4:	080045dd 	.word	0x080045dd
 80045a8:	080044b9 	.word	0x080044b9
 80045ac:	080045f3 	.word	0x080045f3
 80045b0:	080044b9 	.word	0x080044b9
 80045b4:	080044b9 	.word	0x080044b9
 80045b8:	080044b9 	.word	0x080044b9
 80045bc:	080045f9 	.word	0x080045f9
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80045c0:	f7fd ffde 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80045c4:	6863      	ldr	r3, [r4, #4]
 80045c6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80045ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80045ce:	b280      	uxth	r0, r0
 80045d0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80045d2:	2000      	movs	r0, #0
      break;
 80045d4:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80045d6:	f7fd ffe3 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 80045da:	e7f3      	b.n	80045c4 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80045dc:	6862      	ldr	r2, [r4, #4]
 80045de:	0853      	lsrs	r3, r2, #1
 80045e0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80045e4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	60eb      	str	r3, [r5, #12]
 80045f0:	e7ef      	b.n	80045d2 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80045f2:	f7fd fef3 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 80045f6:	e7e5      	b.n	80045c4 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80045f8:	6862      	ldr	r2, [r4, #4]
 80045fa:	0853      	lsrs	r3, r2, #1
 80045fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004600:	e7f2      	b.n	80045e8 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004606:	d1e9      	bne.n	80045dc <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004608:	6860      	ldr	r0, [r4, #4]
 800460a:	0843      	lsrs	r3, r0, #1
 800460c:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004610:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004614:	fbb3 f3f0 	udiv	r3, r3, r0
 8004618:	e73b      	b.n	8004492 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461e:	d1e8      	bne.n	80045f2 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004620:	f7fd fedc 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8004624:	e72f      	b.n	8004486 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800462a:	d1e5      	bne.n	80045f8 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800462c:	6860      	ldr	r0, [r4, #4]
 800462e:	0843      	lsrs	r3, r0, #1
 8004630:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8004634:	e7ee      	b.n	8004614 <UART_SetConfig+0x240>
 8004636:	bf00      	nop
 8004638:	efff69f3 	.word	0xefff69f3
 800463c:	40011000 	.word	0x40011000
 8004640:	08009728 	.word	0x08009728
 8004644:	40004400 	.word	0x40004400
 8004648:	0800972c 	.word	0x0800972c
 800464c:	40004800 	.word	0x40004800
 8004650:	40004c00 	.word	0x40004c00
 8004654:	40005000 	.word	0x40005000
 8004658:	40011400 	.word	0x40011400
 800465c:	40007800 	.word	0x40007800
 8004660:	40007c00 	.word	0x40007c00

08004664 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004664:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004666:	07da      	lsls	r2, r3, #31
{
 8004668:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800466a:	d506      	bpl.n	800467a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800466c:	6801      	ldr	r1, [r0, #0]
 800466e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004670:	684a      	ldr	r2, [r1, #4]
 8004672:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004676:	4322      	orrs	r2, r4
 8004678:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800467a:	079c      	lsls	r4, r3, #30
 800467c:	d506      	bpl.n	800468c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800467e:	6801      	ldr	r1, [r0, #0]
 8004680:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8004682:	684a      	ldr	r2, [r1, #4]
 8004684:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004688:	4322      	orrs	r2, r4
 800468a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800468c:	0759      	lsls	r1, r3, #29
 800468e:	d506      	bpl.n	800469e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004690:	6801      	ldr	r1, [r0, #0]
 8004692:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004694:	684a      	ldr	r2, [r1, #4]
 8004696:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800469a:	4322      	orrs	r2, r4
 800469c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800469e:	071a      	lsls	r2, r3, #28
 80046a0:	d506      	bpl.n	80046b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046a2:	6801      	ldr	r1, [r0, #0]
 80046a4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80046a6:	684a      	ldr	r2, [r1, #4]
 80046a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046ac:	4322      	orrs	r2, r4
 80046ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046b0:	06dc      	lsls	r4, r3, #27
 80046b2:	d506      	bpl.n	80046c2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046b4:	6801      	ldr	r1, [r0, #0]
 80046b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80046b8:	688a      	ldr	r2, [r1, #8]
 80046ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046be:	4322      	orrs	r2, r4
 80046c0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046c2:	0699      	lsls	r1, r3, #26
 80046c4:	d506      	bpl.n	80046d4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046c6:	6801      	ldr	r1, [r0, #0]
 80046c8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80046ca:	688a      	ldr	r2, [r1, #8]
 80046cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046d0:	4322      	orrs	r2, r4
 80046d2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046d4:	065a      	lsls	r2, r3, #25
 80046d6:	d510      	bpl.n	80046fa <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d8:	6801      	ldr	r1, [r0, #0]
 80046da:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80046dc:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046de:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046e2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80046e6:	ea42 0204 	orr.w	r2, r2, r4
 80046ea:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ec:	d105      	bne.n	80046fa <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046ee:	684a      	ldr	r2, [r1, #4]
 80046f0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80046f2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80046f6:	4322      	orrs	r2, r4
 80046f8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046fa:	061b      	lsls	r3, r3, #24
 80046fc:	d506      	bpl.n	800470c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046fe:	6802      	ldr	r2, [r0, #0]
 8004700:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004702:	6853      	ldr	r3, [r2, #4]
 8004704:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004708:	430b      	orrs	r3, r1
 800470a:	6053      	str	r3, [r2, #4]
 800470c:	bd10      	pop	{r4, pc}

0800470e <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800470e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004710:	2500      	movs	r5, #0
{
 8004712:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004714:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004716:	f7fb ff1b 	bl	8000550 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800471a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800471c:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	0712      	lsls	r2, r2, #28
 8004722:	d409      	bmi.n	8004738 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8004724:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004726:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8004728:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800472c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8004730:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8004734:	b003      	add	sp, #12
 8004736:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004738:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800473c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004740:	4620      	mov	r0, r4
 8004742:	9200      	str	r2, [sp, #0]
 8004744:	462a      	mov	r2, r5
 8004746:	f7ff fe13 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 800474a:	2800      	cmp	r0, #0
 800474c:	d0ea      	beq.n	8004724 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800474e:	2003      	movs	r0, #3
 8004750:	e7f0      	b.n	8004734 <UART_CheckIdleState+0x26>

08004752 <HAL_UART_Init>:
{
 8004752:	b510      	push	{r4, lr}
  if(huart == NULL)
 8004754:	4604      	mov	r4, r0
 8004756:	b360      	cbz	r0, 80047b2 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8004758:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800475c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004760:	b91b      	cbnz	r3, 800476a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8004762:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8004766:	f004 fb55 	bl	8008e14 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800476a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800476c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800476e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8004770:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8004774:	6813      	ldr	r3, [r2, #0]
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800477c:	f7ff fe2a 	bl	80043d4 <UART_SetConfig>
 8004780:	2801      	cmp	r0, #1
 8004782:	d016      	beq.n	80047b2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004786:	b113      	cbz	r3, 800478e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8004788:	4620      	mov	r0, r4
 800478a:	f7ff ff6b 	bl	8004664 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800478e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8004790:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004798:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047a0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	f042 0201 	orr.w	r2, r2, #1
}
 80047a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80047ac:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80047ae:	f7ff bfae 	b.w	800470e <UART_CheckIdleState>
}
 80047b2:	2001      	movs	r0, #1
 80047b4:	bd10      	pop	{r4, pc}

080047b6 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80047b6:	680b      	ldr	r3, [r1, #0]
 80047b8:	684a      	ldr	r2, [r1, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	f8d1 c010 	ldr.w	ip, [r1, #16]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80047c0:	6803      	ldr	r3, [r0, #0]
{
 80047c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047c6:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80047ca:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80047ce:	694d      	ldr	r5, [r1, #20]
 80047d0:	698c      	ldr	r4, [r1, #24]
 80047d2:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 80047d6:	6a0f      	ldr	r7, [r1, #32]
 80047d8:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80047da:	d014      	beq.n	8004806 <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80047dc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80047e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047e4:	431a      	orrs	r2, r3
 80047e6:	ea42 0209 	orr.w	r2, r2, r9
 80047ea:	ea42 0208 	orr.w	r2, r2, r8
 80047ee:	ea42 030c 	orr.w	r3, r2, ip
 80047f2:	432b      	orrs	r3, r5
 80047f4:	4323      	orrs	r3, r4
 80047f6:	ea43 030e 	orr.w	r3, r3, lr
 80047fa:	433b      	orrs	r3, r7
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80047fc:	4333      	orrs	r3, r6
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80047fe:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 8004800:	2000      	movs	r0, #0
 8004802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8004806:	6841      	ldr	r1, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004808:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800480c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8004810:	ea43 030e 	orr.w	r3, r3, lr
 8004814:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004818:	433b      	orrs	r3, r7
 800481a:	430a      	orrs	r2, r1
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800481c:	431e      	orrs	r6, r3
 800481e:	ea42 0209 	orr.w	r2, r2, r9
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004822:	6006      	str	r6, [r0, #0]
 8004824:	ea42 0208 	orr.w	r2, r2, r8
 8004828:	ea42 030c 	orr.w	r3, r2, ip
 800482c:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800482e:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8004830:	6043      	str	r3, [r0, #4]
 8004832:	e7e5      	b.n	8004800 <FMC_SDRAM_Init+0x4a>

08004834 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004834:	2a01      	cmp	r2, #1
 8004836:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
 800483a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800483c:	e891 4008 	ldmia.w	r1, {r3, lr}
 8004840:	688f      	ldr	r7, [r1, #8]
 8004842:	690d      	ldr	r5, [r1, #16]
 8004844:	694e      	ldr	r6, [r1, #20]
 8004846:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 8004848:	d01b      	beq.n	8004882 <FMC_SDRAM_Timing_Init+0x4e>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800484a:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800484c:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004850:	3b01      	subs	r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8004852:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004856:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800485a:	3d01      	subs	r5, #1
                       (((Timing->RPDelay)-1) << 20)             |\
 800485c:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));
 800485e:	3901      	subs	r1, #1
 8004860:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8004864:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004866:	1e7b      	subs	r3, r7, #1
 8004868:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800486c:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 8004870:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004874:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004878:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800487c:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800487e:	2000      	movs	r0, #0
 8004880:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004882:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8004884:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004888:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800488a:	3b01      	subs	r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800488c:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8004890:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004894:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                        (((Timing->RPDelay)-1) << 20)); 
 8004898:	3e01      	subs	r6, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800489a:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->RCDDelay)-1) << 24));   
 800489e:	3901      	subs	r1, #1
 80048a0:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 80048a4:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
 80048a8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80048aa:	1e7b      	subs	r3, r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80048ac:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
 80048b0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80048b4:	1e6b      	subs	r3, r5, #1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80048b6:	6086      	str	r6, [r0, #8]
 80048b8:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80048bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80048c0:	60c3      	str	r3, [r0, #12]
 80048c2:	e7dc      	b.n	800487e <FMC_SDRAM_Timing_Init+0x4a>

080048c4 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80048c4:	4b11      	ldr	r3, [pc, #68]	; (800490c <SDMMC_GetCmdResp2+0x48>)
 80048c6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80048d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80048d4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 80048d6:	f113 33ff 	adds.w	r3, r3, #4294967295
 80048da:	d314      	bcc.n	8004906 <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80048dc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80048de:	f012 0f45 	tst.w	r2, #69	; 0x45
 80048e2:	d0f8      	beq.n	80048d6 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80048e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80048e6:	075b      	lsls	r3, r3, #29
 80048e8:	d503      	bpl.n	80048f2 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80048ea:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80048ec:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80048f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80048f4:	f013 0301 	ands.w	r3, r3, #1
 80048f8:	d001      	beq.n	80048fe <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80048fa:	2301      	movs	r3, #1
 80048fc:	e7f6      	b.n	80048ec <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80048fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004902:	6382      	str	r2, [r0, #56]	; 0x38
 8004904:	e7f3      	b.n	80048ee <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8004906:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800490a:	e7f0      	b.n	80048ee <SDMMC_GetCmdResp2+0x2a>
 800490c:	2000002c 	.word	0x2000002c

08004910 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8004910:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <SDMMC_GetCmdResp3+0x40>)
 8004912:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	fbb3 f2f2 	udiv	r2, r3, r2
 800491c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004920:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8004922:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004926:	d30f      	bcc.n	8004948 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004928:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800492a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800492e:	d0f8      	beq.n	8004922 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004930:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004932:	f013 0304 	ands.w	r3, r3, #4
 8004936:	d003      	beq.n	8004940 <SDMMC_GetCmdResp3+0x30>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004938:	2304      	movs	r3, #4
 800493a:	6383      	str	r3, [r0, #56]	; 0x38
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
  }
  
  return SDMMC_ERROR_NONE;
 800493c:	4618      	mov	r0, r3
 800493e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004940:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004944:	6382      	str	r2, [r0, #56]	; 0x38
 8004946:	e7f9      	b.n	800493c <SDMMC_GetCmdResp3+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8004948:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	2000002c 	.word	0x2000002c

08004954 <SDMMC_Init>:
{
 8004954:	b084      	sub	sp, #16
 8004956:	b510      	push	{r4, lr}
 8004958:	ac03      	add	r4, sp, #12
 800495a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 800495e:	9904      	ldr	r1, [sp, #16]
 8004960:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004962:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8004964:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8004966:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004968:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 800496c:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 800496e:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004970:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8004974:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8004976:	9907      	ldr	r1, [sp, #28]
 8004978:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800497a:	9908      	ldr	r1, [sp, #32]
 800497c:	430b      	orrs	r3, r1
}
 800497e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004982:	4313      	orrs	r3, r2
}
 8004984:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004986:	6043      	str	r3, [r0, #4]
}
 8004988:	2000      	movs	r0, #0
 800498a:	4770      	bx	lr

0800498c <SDMMC_ReadFIFO>:
 800498c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8004990:	4770      	bx	lr

08004992 <SDMMC_PowerState_ON>:
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004992:	2303      	movs	r3, #3
 8004994:	6003      	str	r3, [r0, #0]
}
 8004996:	2000      	movs	r0, #0
 8004998:	4770      	bx	lr

0800499a <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800499a:	6800      	ldr	r0, [r0, #0]
}
 800499c:	f000 0003 	and.w	r0, r0, #3
 80049a0:	4770      	bx	lr

080049a2 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 80049a2:	680b      	ldr	r3, [r1, #0]
{
 80049a4:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 80049a6:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80049a8:	688c      	ldr	r4, [r1, #8]
 80049aa:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80049ac:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80049ae:	4323      	orrs	r3, r4
                       Command->Response         |\
 80049b0:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80049b2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 80049b6:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 80049b8:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80049ba:	f022 020f 	bic.w	r2, r2, #15
                       Command->WaitForInterrupt |\
 80049be:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60c3      	str	r3, [r0, #12]
}
 80049c4:	2000      	movs	r0, #0
 80049c6:	bd10      	pop	{r4, pc}

080049c8 <SDMMC_GetResponse>:
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80049c8:	3014      	adds	r0, #20
{
 80049ca:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80049cc:	2300      	movs	r3, #0
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80049ce:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 80049d0:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80049d2:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80049d4:	9b01      	ldr	r3, [sp, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
}  
 80049d8:	b002      	add	sp, #8
 80049da:	4770      	bx	lr

080049dc <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80049dc:	4b44      	ldr	r3, [pc, #272]	; (8004af0 <SDMMC_GetCmdResp1+0x114>)
{
 80049de:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 80049e6:	fbb3 f3f4 	udiv	r3, r3, r4
 80049ea:	435a      	muls	r2, r3
    if (count-- == 0)
 80049ec:	2a00      	cmp	r2, #0
 80049ee:	d049      	beq.n	8004a84 <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80049f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80049f2:	3a01      	subs	r2, #1
 80049f4:	f013 0f45 	tst.w	r3, #69	; 0x45
 80049f8:	d0f8      	beq.n	80049ec <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80049fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80049fc:	075c      	lsls	r4, r3, #29
 80049fe:	d503      	bpl.n	8004a08 <SDMMC_GetCmdResp1+0x2c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004a00:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004a02:	6383      	str	r3, [r0, #56]	; 0x38
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004a08:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a0a:	f013 0301 	ands.w	r3, r3, #1
 8004a0e:	d001      	beq.n	8004a14 <SDMMC_GetCmdResp1+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004a10:	2301      	movs	r3, #1
 8004a12:	e7f6      	b.n	8004a02 <SDMMC_GetCmdResp1+0x26>
  return (uint8_t)(SDMMCx->RESPCMD);
 8004a14:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	4291      	cmp	r1, r2
 8004a1a:	d136      	bne.n	8004a8a <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004a1c:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004a20:	4619      	mov	r1, r3
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004a22:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004a24:	f7ff ffd0 	bl	80049c8 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004a28:	4b32      	ldr	r3, [pc, #200]	; (8004af4 <SDMMC_GetCmdResp1+0x118>)
 8004a2a:	4003      	ands	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0e9      	beq.n	8004a04 <SDMMC_GetCmdResp1+0x28>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004a30:	2800      	cmp	r0, #0
 8004a32:	db2c      	blt.n	8004a8e <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004a34:	0042      	lsls	r2, r0, #1
 8004a36:	d42d      	bmi.n	8004a94 <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004a38:	0084      	lsls	r4, r0, #2
 8004a3a:	d42d      	bmi.n	8004a98 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004a3c:	00c1      	lsls	r1, r0, #3
 8004a3e:	d42d      	bmi.n	8004a9c <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004a40:	0102      	lsls	r2, r0, #4
 8004a42:	d42e      	bmi.n	8004aa2 <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004a44:	0144      	lsls	r4, r0, #5
 8004a46:	d42f      	bmi.n	8004aa8 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004a48:	01c1      	lsls	r1, r0, #7
 8004a4a:	d430      	bmi.n	8004aae <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004a4c:	0202      	lsls	r2, r0, #8
 8004a4e:	d431      	bmi.n	8004ab4 <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004a50:	0244      	lsls	r4, r0, #9
 8004a52:	d432      	bmi.n	8004aba <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004a54:	0281      	lsls	r1, r0, #10
 8004a56:	d433      	bmi.n	8004ac0 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004a58:	02c2      	lsls	r2, r0, #11
 8004a5a:	d434      	bmi.n	8004ac6 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004a5c:	0344      	lsls	r4, r0, #13
 8004a5e:	d435      	bmi.n	8004acc <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004a60:	0381      	lsls	r1, r0, #14
 8004a62:	d436      	bmi.n	8004ad2 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004a64:	03c2      	lsls	r2, r0, #15
 8004a66:	d437      	bmi.n	8004ad8 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004a68:	0404      	lsls	r4, r0, #16
 8004a6a:	d438      	bmi.n	8004ade <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004a6c:	0441      	lsls	r1, r0, #17
 8004a6e:	d439      	bmi.n	8004ae4 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004a70:	0482      	lsls	r2, r0, #18
 8004a72:	d43a      	bmi.n	8004aea <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004a74:	f010 0f08 	tst.w	r0, #8
 8004a78:	bf14      	ite	ne
 8004a7a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8004a7e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8004a82:	e7bf      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
      return SDMMC_ERROR_TIMEOUT;
 8004a84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a88:	e7bc      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e7ba      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a92:	e7b7      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004a94:	2340      	movs	r3, #64	; 0x40
 8004a96:	e7b5      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004a98:	2380      	movs	r3, #128	; 0x80
 8004a9a:	e7b3      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aa0:	e7b0      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aa6:	e7ad      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aac:	e7aa      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004aae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ab2:	e7a7      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab8:	e7a4      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004abe:	e7a1      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ac4:	e79e      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CC_ERR;
 8004ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aca:	e79b      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ad0:	e798      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004ad2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004ad6:	e795      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004ad8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004adc:	e792      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004ade:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ae2:	e78f      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004ae4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ae8:	e78c      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
    return SDMMC_ERROR_ERASE_RESET;
 8004aea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004aee:	e789      	b.n	8004a04 <SDMMC_GetCmdResp1+0x28>
 8004af0:	2000002c 	.word	0x2000002c
 8004af4:	fdffe008 	.word	0xfdffe008

08004af8 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004af8:	680b      	ldr	r3, [r1, #0]
{
 8004afa:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004afc:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8004afe:	684b      	ldr	r3, [r1, #4]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b00:	68cc      	ldr	r4, [r1, #12]
  SDMMCx->DLEN = Data->DataLength;
 8004b02:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b04:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004b06:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004b08:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8004b0a:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8004b0c:	6949      	ldr	r1, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004b0e:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
                       Data->TransferDir   |\
 8004b12:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8004b14:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004b16:	4313      	orrs	r3, r2
 8004b18:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	bd10      	pop	{r4, pc}

08004b1e <SDMMC_CmdBlockLength>:
{
 8004b1e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b20:	2340      	movs	r3, #64	; 0x40
{
 8004b22:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004b24:	2410      	movs	r4, #16
{
 8004b26:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b28:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b2a:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004b2c:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b2e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b30:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b32:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004b36:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b38:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b3a:	f7ff ff32 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b42:	4621      	mov	r1, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	f7ff ff49 	bl	80049dc <SDMMC_GetCmdResp1>
}
 8004b4a:	b007      	add	sp, #28
 8004b4c:	bd30      	pop	{r4, r5, pc}

08004b4e <SDMMC_CmdReadSingleBlock>:
{
 8004b4e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b50:	2340      	movs	r3, #64	; 0x40
{
 8004b52:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004b54:	2411      	movs	r4, #17
{
 8004b56:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b58:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b5a:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004b5c:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b5e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b60:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004b66:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b68:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b6a:	f7ff ff1a 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b72:	4621      	mov	r1, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	f7ff ff31 	bl	80049dc <SDMMC_GetCmdResp1>
}
 8004b7a:	b007      	add	sp, #28
 8004b7c:	bd30      	pop	{r4, r5, pc}

08004b7e <SDMMC_CmdReadMultiBlock>:
{
 8004b7e:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b80:	2340      	movs	r3, #64	; 0x40
{
 8004b82:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004b84:	2412      	movs	r4, #18
{
 8004b86:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b88:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b8a:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004b8c:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b8e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b90:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004b96:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b98:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b9a:	f7ff ff02 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f7ff ff19 	bl	80049dc <SDMMC_GetCmdResp1>
}
 8004baa:	b007      	add	sp, #28
 8004bac:	bd30      	pop	{r4, r5, pc}

08004bae <SDMMC_CmdWriteSingleBlock>:
{
 8004bae:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004bb0:	2340      	movs	r3, #64	; 0x40
{
 8004bb2:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004bb4:	2418      	movs	r4, #24
{
 8004bb6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004bb8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bba:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004bbc:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bbe:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bc0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004bc6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bc8:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bca:	f7ff feea 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f7ff ff01 	bl	80049dc <SDMMC_GetCmdResp1>
}
 8004bda:	b007      	add	sp, #28
 8004bdc:	bd30      	pop	{r4, r5, pc}

08004bde <SDMMC_CmdWriteMultiBlock>:
{
 8004bde:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004be0:	2340      	movs	r3, #64	; 0x40
{
 8004be2:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004be4:	2419      	movs	r4, #25
{
 8004be6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004be8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bea:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004bec:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bee:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004bf0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004bf6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004bf8:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bfa:	f7ff fed2 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c02:	4621      	mov	r1, r4
 8004c04:	4628      	mov	r0, r5
 8004c06:	f7ff fee9 	bl	80049dc <SDMMC_GetCmdResp1>
}
 8004c0a:	b007      	add	sp, #28
 8004c0c:	bd30      	pop	{r4, r5, pc}
	...

08004c10 <SDMMC_CmdStopTransfer>:
{
 8004c10:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 8004c12:	2300      	movs	r3, #0
{
 8004c14:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004c16:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c18:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 8004c1a:	9301      	str	r3, [sp, #4]
{
 8004c1c:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c1e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c24:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c26:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c28:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004c2a:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c2c:	f7ff feb9 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 8004c30:	4a03      	ldr	r2, [pc, #12]	; (8004c40 <SDMMC_CmdStopTransfer+0x30>)
 8004c32:	4621      	mov	r1, r4
 8004c34:	4628      	mov	r0, r5
 8004c36:	f7ff fed1 	bl	80049dc <SDMMC_GetCmdResp1>
}
 8004c3a:	b007      	add	sp, #28
 8004c3c:	bd30      	pop	{r4, r5, pc}
 8004c3e:	bf00      	nop
 8004c40:	05f5e100 	.word	0x05f5e100

08004c44 <SDMMC_CmdSelDesel>:
{
 8004c44:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c46:	2340      	movs	r3, #64	; 0x40
{
 8004c48:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004c4a:	2407      	movs	r4, #7
{
 8004c4c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c4e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c50:	2300      	movs	r3, #0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c52:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004c54:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c56:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004c5c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c5e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c60:	f7ff fe9f 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c68:	4621      	mov	r1, r4
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f7ff feb6 	bl	80049dc <SDMMC_GetCmdResp1>
}
 8004c70:	b007      	add	sp, #28
 8004c72:	bd30      	pop	{r4, r5, pc}

08004c74 <SDMMC_CmdGoIdleState>:
{
 8004c74:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 8004c76:	2300      	movs	r3, #0
{
 8004c78:	b086      	sub	sp, #24
 8004c7a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8004c7c:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c7e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004c80:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004c82:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c84:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c8a:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c8c:	f7ff fe89 	bl	80049a2 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <SDMMC_CmdGoIdleState+0x4c>)
 8004c92:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c9c:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ca0:	4353      	muls	r3, r2
    if (count-- == 0)
 8004ca2:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004ca6:	d308      	bcc.n	8004cba <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8004ca8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004caa:	0612      	lsls	r2, r2, #24
 8004cac:	d5f9      	bpl.n	8004ca2 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004cae:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 8004cb2:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004cb4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004cb6:	b006      	add	sp, #24
 8004cb8:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8004cba:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8004cbe:	e7fa      	b.n	8004cb6 <SDMMC_CmdGoIdleState+0x42>
 8004cc0:	2000002c 	.word	0x2000002c

08004cc4 <SDMMC_CmdOperCond>:
{
 8004cc4:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004cc6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 8004cca:	b086      	sub	sp, #24
 8004ccc:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004cce:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004cd0:	2308      	movs	r3, #8
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cd2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004cd4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004cd6:	2340      	movs	r3, #64	; 0x40
 8004cd8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce2:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ce4:	f7ff fe5d 	bl	80049a2 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8004ce8:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <SDMMC_CmdOperCond+0x6c>)
 8004cea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cf4:	f241 3388 	movw	r3, #5000	; 0x1388
 8004cf8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8004cfa:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004cfe:	d314      	bcc.n	8004d2a <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004d00:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004d02:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004d06:	d0f8      	beq.n	8004cfa <SDMMC_CmdOperCond+0x36>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004d08:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004d0a:	f012 0204 	ands.w	r2, r2, #4
 8004d0e:	d004      	beq.n	8004d1a <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004d10:	2340      	movs	r3, #64	; 0x40
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d12:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004d14:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004d16:	b006      	add	sp, #24
 8004d18:	bd10      	pop	{r4, pc}
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8004d1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004d1c:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8004d20:	d0f9      	beq.n	8004d16 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004d22:	2340      	movs	r3, #64	; 0x40
  }
  
  return SDMMC_ERROR_NONE;
 8004d24:	4610      	mov	r0, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8004d26:	63a3      	str	r3, [r4, #56]	; 0x38
 8004d28:	e7f5      	b.n	8004d16 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8004d2a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004d2e:	e7f2      	b.n	8004d16 <SDMMC_CmdOperCond+0x52>
 8004d30:	2000002c 	.word	0x2000002c

08004d34 <SDMMC_CmdAppCommand>:
{
 8004d34:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d36:	2340      	movs	r3, #64	; 0x40
{
 8004d38:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004d3a:	2437      	movs	r4, #55	; 0x37
{
 8004d3c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d3e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d40:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004d42:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d44:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d46:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004d4c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d4e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d50:	f7ff fe27 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f7ff fe3e 	bl	80049dc <SDMMC_GetCmdResp1>
}
 8004d60:	b007      	add	sp, #28
 8004d62:	bd30      	pop	{r4, r5, pc}

08004d64 <SDMMC_CmdAppOperCommand>:
{
 8004d64:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004d66:	2329      	movs	r3, #41	; 0x29
{
 8004d68:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8004d6a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
{
 8004d6e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004d70:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d72:	2340      	movs	r3, #64	; 0x40
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8004d74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d78:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d7a:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8004d7c:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d7e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d80:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d86:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d88:	f7ff fe0b 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	f7ff fdbf 	bl	8004910 <SDMMC_GetCmdResp3>
}
 8004d92:	b006      	add	sp, #24
 8004d94:	bd10      	pop	{r4, pc}

08004d96 <SDMMC_CmdSendSCR>:
{
 8004d96:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 8004d98:	2300      	movs	r3, #0
{
 8004d9a:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004d9c:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004d9e:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.Argument         = 0;
 8004da0:	9301      	str	r3, [sp, #4]
{
 8004da2:	4605      	mov	r5, r0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004da4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004da6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004daa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004dac:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004dae:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004db0:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004db2:	f7ff fdf6 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	4621      	mov	r1, r4
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	f7ff fe0d 	bl	80049dc <SDMMC_GetCmdResp1>
}
 8004dc2:	b007      	add	sp, #28
 8004dc4:	bd30      	pop	{r4, r5, pc}

08004dc6 <SDMMC_CmdSendCID>:
{
 8004dc6:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Argument         = 0;
 8004dc8:	2300      	movs	r3, #0
{
 8004dca:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004dcc:	2202      	movs	r2, #2
{
 8004dce:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8004dd0:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004dd2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004dd4:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004dd6:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dd8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004dde:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004de0:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004de2:	f7ff fdde 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004de6:	4620      	mov	r0, r4
 8004de8:	f7ff fd6c 	bl	80048c4 <SDMMC_GetCmdResp2>
}
 8004dec:	b006      	add	sp, #24
 8004dee:	bd10      	pop	{r4, pc}

08004df0 <SDMMC_CmdSendCSD>:
{
 8004df0:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004df2:	2309      	movs	r3, #9
{
 8004df4:	b086      	sub	sp, #24
 8004df6:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004df8:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004dfa:	23c0      	movs	r3, #192	; 0xc0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004dfc:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004dfe:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004e00:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e02:	2300      	movs	r3, #0
 8004e04:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e0a:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e0c:	f7ff fdc9 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004e10:	4620      	mov	r0, r4
 8004e12:	f7ff fd57 	bl	80048c4 <SDMMC_GetCmdResp2>
}
 8004e16:	b006      	add	sp, #24
 8004e18:	bd10      	pop	{r4, pc}
	...

08004e1c <SDMMC_CmdSetRelAdd>:
{
 8004e1c:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Argument         = 0;
 8004e1e:	2300      	movs	r3, #0
{
 8004e20:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004e22:	2203      	movs	r2, #3
{
 8004e24:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0;
 8004e26:	9301      	str	r3, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e28:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004e2a:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e2c:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004e2e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004e34:	9203      	str	r2, [sp, #12]
{
 8004e36:	4604      	mov	r4, r0
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004e38:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004e3a:	f7ff fdb2 	bl	80049a2 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8004e3e:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <SDMMC_CmdSetRelAdd+0xa4>)
 8004e40:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8004e4e:	4353      	muls	r3, r2
    if (count-- == 0)
 8004e50:	f113 33ff 	adds.w	r3, r3, #4294967295
 8004e54:	d32b      	bcc.n	8004eae <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8004e56:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004e58:	f012 0f45 	tst.w	r2, #69	; 0x45
 8004e5c:	d0f8      	beq.n	8004e50 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e60:	075a      	lsls	r2, r3, #29
 8004e62:	d503      	bpl.n	8004e6c <SDMMC_CmdSetRelAdd+0x50>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004e64:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004e66:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8004e68:	b007      	add	sp, #28
 8004e6a:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e6e:	f011 0101 	ands.w	r1, r1, #1
 8004e72:	d001      	beq.n	8004e78 <SDMMC_CmdSetRelAdd+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004e74:	2001      	movs	r0, #1
 8004e76:	e7f6      	b.n	8004e66 <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8004e78:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d119      	bne.n	8004eb4 <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004e80:	f240 53ff 	movw	r3, #1535	; 0x5ff
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004e84:	4620      	mov	r0, r4
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8004e86:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004e88:	f7ff fd9e 	bl	80049c8 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004e8c:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8004e90:	d103      	bne.n	8004e9a <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004e92:	0c00      	lsrs	r0, r0, #16
 8004e94:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8004e96:	4618      	mov	r0, r3
 8004e98:	e7e6      	b.n	8004e68 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004e9a:	0443      	lsls	r3, r0, #17
 8004e9c:	d40c      	bmi.n	8004eb8 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004e9e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8004ea2:	bf14      	ite	ne
 8004ea4:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8004ea8:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8004eac:	e7dc      	b.n	8004e68 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 8004eae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004eb2:	e7d9      	b.n	8004e68 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004eb4:	2001      	movs	r0, #1
 8004eb6:	e7d7      	b.n	8004e68 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004eb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004ebc:	e7d4      	b.n	8004e68 <SDMMC_CmdSetRelAdd+0x4c>
 8004ebe:	bf00      	nop
 8004ec0:	2000002c 	.word	0x2000002c

08004ec4 <SDMMC_CmdSendStatus>:
{
 8004ec4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ec6:	2340      	movs	r3, #64	; 0x40
{
 8004ec8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004eca:	240d      	movs	r4, #13
{
 8004ecc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ece:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ed0:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004ed2:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ed4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ed6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ed8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004edc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ede:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ee0:	f7ff fd5f 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4628      	mov	r0, r5
 8004eec:	f7ff fd76 	bl	80049dc <SDMMC_GetCmdResp1>
}
 8004ef0:	b007      	add	sp, #28
 8004ef2:	bd30      	pop	{r4, r5, pc}

08004ef4 <SDMMC_CmdSwitch>:
{
 8004ef4:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ef6:	2340      	movs	r3, #64	; 0x40
{
 8004ef8:	b087      	sub	sp, #28
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8004efa:	2406      	movs	r4, #6
{
 8004efc:	4605      	mov	r5, r0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004efe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f00:	2300      	movs	r3, #0
  sdmmc_cmdinit.Argument         = Argument;
 8004f02:	9101      	str	r1, [sp, #4]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f04:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004f06:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8004f0c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004f0e:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004f10:	f7ff fd47 	bl	80049a2 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8004f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f18:	4621      	mov	r1, r4
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f7ff fd5e 	bl	80049dc <SDMMC_GetCmdResp1>
}
 8004f20:	b007      	add	sp, #28
 8004f22:	bd30      	pop	{r4, r5, pc}

08004f24 <SDMMC_CmdBusWidth>:
 8004f24:	f7ff bfe6 	b.w	8004ef4 <SDMMC_CmdSwitch>

08004f28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <USB_CoreReset+0x2c>)
  uint32_t count = 0;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000)
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8004f2e:	2003      	movs	r0, #3
 8004f30:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0);
 8004f32:	6902      	ldr	r2, [r0, #16]
 8004f34:	2a00      	cmp	r2, #0
 8004f36:	daf8      	bge.n	8004f2a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f38:	6903      	ldr	r3, [r0, #16]
 8004f3a:	4a06      	ldr	r2, [pc, #24]	; (8004f54 <USB_CoreReset+0x2c>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000)
 8004f42:	3a01      	subs	r2, #1
 8004f44:	d0f3      	beq.n	8004f2e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f46:	6903      	ldr	r3, [r0, #16]
 8004f48:	f013 0301 	ands.w	r3, r3, #1
 8004f4c:	d1f9      	bne.n	8004f42 <USB_CoreReset+0x1a>

  return HAL_OK;
 8004f4e:	4618      	mov	r0, r3
}
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	00030d41 	.word	0x00030d41

08004f58 <USB_CoreInit>:
{
 8004f58:	b084      	sub	sp, #16
 8004f5a:	b538      	push	{r3, r4, r5, lr}
 8004f5c:	ad05      	add	r5, sp, #20
 8004f5e:	4604      	mov	r4, r0
 8004f60:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d127      	bne.n	8004fba <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f6a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f70:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f72:	68c3      	ldr	r3, [r0, #12]
 8004f74:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f7c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f7e:	68c3      	ldr	r3, [r0, #12]
 8004f80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f84:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1)
 8004f86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d103      	bne.n	8004f94 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f8c:	68c3      	ldr	r3, [r0, #12]
 8004f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f92:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff ffc7 	bl	8004f28 <USB_CoreReset>
  if(cfg.dma_enable == ENABLE)
 8004f9a:	9b08      	ldr	r3, [sp, #32]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d107      	bne.n	8004fb0 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fa0:	68a3      	ldr	r3, [r4, #8]
 8004fa2:	f043 0306 	orr.w	r3, r3, #6
 8004fa6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fa8:	68a3      	ldr	r3, [r4, #8]
 8004faa:	f043 0320 	orr.w	r3, r3, #32
 8004fae:	60a3      	str	r3, [r4, #8]
}
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fb6:	b004      	add	sp, #16
 8004fb8:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fba:	68c3      	ldr	r3, [r0, #12]
 8004fbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fc0:	60c3      	str	r3, [r0, #12]
    USB_CoreReset(USBx);
 8004fc2:	f7ff ffb1 	bl	8004f28 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8004fc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fca:	63a3      	str	r3, [r4, #56]	; 0x38
 8004fcc:	e7e5      	b.n	8004f9a <USB_CoreInit+0x42>

08004fce <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fce:	6883      	ldr	r3, [r0, #8]
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	6083      	str	r3, [r0, #8]
}
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	4770      	bx	lr

08004fda <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fda:	6883      	ldr	r3, [r0, #8]
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	6083      	str	r3, [r0, #8]
}
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	4770      	bx	lr

08004fe6 <USB_SetCurrentMode>:
{
 8004fe6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fe8:	68c3      	ldr	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8004fea:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ff0:	60c3      	str	r3, [r0, #12]
  if ( mode == USB_OTG_HOST_MODE)
 8004ff2:	d108      	bne.n	8005006 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ff4:	68c3      	ldr	r3, [r0, #12]
 8004ff6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ffa:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50);
 8004ffc:	2032      	movs	r0, #50	; 0x32
 8004ffe:	f7fb faad 	bl	800055c <HAL_Delay>
}
 8005002:	2000      	movs	r0, #0
 8005004:	bd08      	pop	{r3, pc}
  else if ( mode == USB_OTG_DEVICE_MODE)
 8005006:	2900      	cmp	r1, #0
 8005008:	d1f8      	bne.n	8004ffc <USB_SetCurrentMode+0x16>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800500a:	68c3      	ldr	r3, [r0, #12]
 800500c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005010:	e7f3      	b.n	8004ffa <USB_SetCurrentMode+0x14>
	...

08005014 <USB_FlushTxFifo>:
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6));
 8005014:	0189      	lsls	r1, r1, #6
 8005016:	4a07      	ldr	r2, [pc, #28]	; (8005034 <USB_FlushTxFifo+0x20>)
 8005018:	f041 0120 	orr.w	r1, r1, #32
 800501c:	6101      	str	r1, [r0, #16]
    if (++count > 200000)
 800501e:	3a01      	subs	r2, #1
 8005020:	d005      	beq.n	800502e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005022:	6903      	ldr	r3, [r0, #16]
 8005024:	f013 0320 	ands.w	r3, r3, #32
 8005028:	d1f9      	bne.n	800501e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800502a:	4618      	mov	r0, r3
 800502c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800502e:	2003      	movs	r0, #3
}
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	00030d41 	.word	0x00030d41

08005038 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005038:	2310      	movs	r3, #16
 800503a:	4a06      	ldr	r2, [pc, #24]	; (8005054 <USB_FlushRxFifo+0x1c>)
 800503c:	6103      	str	r3, [r0, #16]
    if (++count > 200000)
 800503e:	3a01      	subs	r2, #1
 8005040:	d005      	beq.n	800504e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005042:	6903      	ldr	r3, [r0, #16]
 8005044:	f013 0310 	ands.w	r3, r3, #16
 8005048:	d1f9      	bne.n	800503e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800504a:	4618      	mov	r0, r3
 800504c:	4770      	bx	lr
      return HAL_TIMEOUT;
 800504e:	2003      	movs	r0, #3
}
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	00030d41 	.word	0x00030d41

08005058 <USB_ReadPacket>:
  uint32_t count32b = (len + 3) / 4;
 8005058:	3203      	adds	r2, #3
  for ( i = 0; i < count32b; i++, dest += 4 )
 800505a:	2300      	movs	r3, #0
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800505c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = (len + 3) / 4;
 8005060:	1092      	asrs	r2, r2, #2
{
 8005062:	b510      	push	{r4, lr}
  for ( i = 0; i < count32b; i++, dest += 4 )
 8005064:	4293      	cmp	r3, r2
 8005066:	d102      	bne.n	800506e <USB_ReadPacket+0x16>
}
 8005068:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800506c:	bd10      	pop	{r4, pc}
    *(__packed uint32_t *)dest = USBx_DFIFO(0);
 800506e:	6804      	ldr	r4, [r0, #0]
 8005070:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
  for ( i = 0; i < count32b; i++, dest += 4 )
 8005074:	3301      	adds	r3, #1
 8005076:	e7f5      	b.n	8005064 <USB_ReadPacket+0xc>

08005078 <USB_ReadInterrupts>:
  v = USBx->GINTSTS;
 8005078:	6942      	ldr	r2, [r0, #20]
  v &= USBx->GINTMSK;
 800507a:	6980      	ldr	r0, [r0, #24]
}
 800507c:	4010      	ands	r0, r2
 800507e:	4770      	bx	lr

08005080 <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1);
 8005080:	6940      	ldr	r0, [r0, #20]
}
 8005082:	f000 0001 	and.w	r0, r0, #1
 8005086:	4770      	bx	lr

08005088 <USB_InitFSLSPClkSel>:
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005088:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);

  if (freq ==  HCFG_48_MHZ)
 800508c:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800508e:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8005092:	f023 0303 	bic.w	r3, r3, #3
{
 8005096:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005098:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (freq & USB_OTG_HCFG_FSLSPCS);
 800509c:	f001 0303 	and.w	r3, r1, #3
 80050a0:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80050a4:	ea43 0304 	orr.w	r3, r3, r4
 80050a8:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq ==  HCFG_48_MHZ)
 80050ac:	d104      	bne.n	80050b8 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = (uint32_t)48000;
 80050ae:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq ==  HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = (uint32_t)6000;
 80050b2:	6053      	str	r3, [r2, #4]
  }
  return HAL_OK;
}
 80050b4:	2000      	movs	r0, #0
 80050b6:	bd10      	pop	{r4, pc}
  else if (freq ==  HCFG_6_MHZ)
 80050b8:	2902      	cmp	r1, #2
 80050ba:	d1fb      	bne.n	80050b4 <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = (uint32_t)6000;
 80050bc:	f241 7370 	movw	r3, #6000	; 0x1770
 80050c0:	e7f7      	b.n	80050b2 <USB_InitFSLSPClkSel+0x2a>

080050c2 <USB_ResetPort>:
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80050c2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
{
 80050c6:	b513      	push	{r0, r1, r4, lr}
  hprt0 = USBx_HPRT0;
 80050c8:	9301      	str	r3, [sp, #4]
{
 80050ca:	4604      	mov	r4, r0

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050cc:	9b01      	ldr	r3, [sp, #4]
 80050ce:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050d2:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80050d4:	9b01      	ldr	r3, [sp, #4]
 80050d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050da:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (100);                                /* See Note #1 */
 80050de:	2064      	movs	r0, #100	; 0x64
 80050e0:	f7fb fa3c 	bl	800055c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80050e4:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay (10);
 80050e6:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80050e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050ec:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay (10);
 80050f0:	f7fb fa34 	bl	800055c <HAL_Delay>

  return HAL_OK;
}
 80050f4:	2000      	movs	r0, #0
 80050f6:	b002      	add	sp, #8
 80050f8:	bd10      	pop	{r4, pc}

080050fa <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80050fa:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 80050fc:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8005100:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005102:	9b01      	ldr	r3, [sp, #4]
 8005104:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005108:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0 ) && (state == 1 ))
 800510a:	9b01      	ldr	r3, [sp, #4]
 800510c:	04da      	lsls	r2, r3, #19
 800510e:	d406      	bmi.n	800511e <USB_DriveVbus+0x24>
 8005110:	2901      	cmp	r1, #1
 8005112:	d104      	bne.n	800511e <USB_DriveVbus+0x24>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005114:	9b01      	ldr	r3, [sp, #4]
 8005116:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800511a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0 ))
 800511e:	9b01      	ldr	r3, [sp, #4]
 8005120:	04db      	lsls	r3, r3, #19
 8005122:	d505      	bpl.n	8005130 <USB_DriveVbus+0x36>
 8005124:	b921      	cbnz	r1, 8005130 <USB_DriveVbus+0x36>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005126:	9b01      	ldr	r3, [sp, #4]
 8005128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800512c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8005130:	2000      	movs	r0, #0
 8005132:	b002      	add	sp, #8
 8005134:	4770      	bx	lr
	...

08005138 <USB_HostInit>:
{
 8005138:	b084      	sub	sp, #16
 800513a:	b538      	push	{r3, r4, r5, lr}
 800513c:	4604      	mov	r4, r0
 800513e:	a805      	add	r0, sp, #20
 8005140:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800514a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800514c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005150:	63a3      	str	r3, [r4, #56]	; 0x38
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 8005152:	9b07      	ldr	r3, [sp, #28]
 8005154:	2b03      	cmp	r3, #3
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005156:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if((cfg.speed == USB_OTG_SPEED_FULL)&&
 800515a:	d13c      	bne.n	80051d6 <USB_HostInit+0x9e>
 800515c:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8005160:	d039      	beq.n	80051d6 <USB_HostInit+0x9e>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005162:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005166:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USB_FlushTxFifo(USBx, 0x10 ); /* all Tx FIFOs */
 800516a:	2110      	movs	r1, #16
 800516c:	4620      	mov	r0, r4
 800516e:	f7ff ff51 	bl	8005014 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8005172:	4620      	mov	r0, r4
 8005174:	f7ff ff60 	bl	8005038 <USB_FlushRxFifo>
  for (i = 0; i < cfg.Host_channels; i++)
 8005178:	2300      	movs	r3, #0
 800517a:	9906      	ldr	r1, [sp, #24]
 800517c:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFF;
 8005180:	f04f 30ff 	mov.w	r0, #4294967295
    USBx_HC(i)->HCINTMSK = 0;
 8005184:	461d      	mov	r5, r3
  for (i = 0; i < cfg.Host_channels; i++)
 8005186:	428b      	cmp	r3, r1
 8005188:	d128      	bne.n	80051dc <USB_HostInit+0xa4>
  USB_DriveVbus(USBx, 1);
 800518a:	2101      	movs	r1, #1
 800518c:	4620      	mov	r0, r4
 800518e:	f7ff ffb4 	bl	80050fa <USB_DriveVbus>
  HAL_Delay(200);
 8005192:	20c8      	movs	r0, #200	; 0xc8
 8005194:	f7fb f9e2 	bl	800055c <HAL_Delay>
  USBx->GINTMSK = 0;
 8005198:	2300      	movs	r3, #0
  if(USBx == USB_OTG_FS)
 800519a:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTMSK = 0;
 800519e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFF;
 80051a0:	f04f 33ff 	mov.w	r3, #4294967295
 80051a4:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 80051a6:	d11e      	bne.n	80051e6 <USB_HostInit+0xae>
    USBx->GRXFSIZ  = (uint32_t )0x80;
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60 << 16)& USB_OTG_NPTXFD) | 0x80);
 80051ac:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 80051b0:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0);
 80051b2:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <USB_HostInit+0xc0>)
    USBx->HPTXFSIZ = (uint32_t )(((0xE0 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300);
 80051b4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == DISABLE)
 80051b8:	9b08      	ldr	r3, [sp, #32]
 80051ba:	b91b      	cbnz	r3, 80051c4 <USB_HostInit+0x8c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051bc:	69a3      	ldr	r3, [r4, #24]
 80051be:	f043 0310 	orr.w	r3, r3, #16
 80051c2:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80051c4:	69a2      	ldr	r2, [r4, #24]
}
 80051c6:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 80051c8:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <USB_HostInit+0xc4>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	61a3      	str	r3, [r4, #24]
}
 80051ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051d2:	b004      	add	sp, #16
 80051d4:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80051d6:	f023 0304 	bic.w	r3, r3, #4
 80051da:	e7c4      	b.n	8005166 <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFF;
 80051dc:	6090      	str	r0, [r2, #8]
  for (i = 0; i < cfg.Host_channels; i++)
 80051de:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0;
 80051e0:	60d5      	str	r5, [r2, #12]
 80051e2:	3220      	adds	r2, #32
 80051e4:	e7cf      	b.n	8005186 <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = (uint32_t )0x200;
 80051e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051ea:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100 << 16)& USB_OTG_NPTXFD) | 0x200);
 80051ec:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80051f0:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0 << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0x300);
 80051f2:	4b03      	ldr	r3, [pc, #12]	; (8005200 <USB_HostInit+0xc8>)
 80051f4:	e7de      	b.n	80051b4 <USB_HostInit+0x7c>
 80051f6:	bf00      	nop
 80051f8:	004000e0 	.word	0x004000e0
 80051fc:	a3200008 	.word	0xa3200008
 8005200:	00e00300 	.word	0x00e00300

08005204 <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8005204:	b082      	sub	sp, #8
  __IO uint32_t hprt0;

  hprt0 = USBx_HPRT0;
 8005206:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800520a:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800520c:	9801      	ldr	r0, [sp, #4]
}
 800520e:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8005212:	b002      	add	sp, #8
 8005214:	4770      	bx	lr

08005216 <USB_GetCurrentFrame>:
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005216:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800521a:	6880      	ldr	r0, [r0, #8]
}
 800521c:	b280      	uxth	r0, r0
 800521e:	4770      	bx	lr

08005220 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005220:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFF;
 8005222:	f500 64a0 	add.w	r4, r0, #1280	; 0x500
 8005226:	f04f 36ff 	mov.w	r6, #4294967295
{
 800522a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 800522e:	b257      	sxtb	r7, r2
  USBx_HC(ch_num)->HCINT = 0xFFFFFFFF;
 8005230:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 8005234:	60a6      	str	r6, [r4, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005236:	2d03      	cmp	r5, #3
 8005238:	d819      	bhi.n	800526e <USB_HC_Init+0x4e>
 800523a:	e8df f005 	tbb	[pc, r5]
 800523e:	5502      	.short	0x5502
 8005240:	1302      	.short	0x1302
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:

    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8005242:	f240 469d 	movw	r6, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |\
                                USB_OTG_HCINTMSK_DTERRM |\
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_NAKM ;

    if (epnum & 0x80)
 8005246:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8005248:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80)
 800524a:	da03      	bge.n	8005254 <USB_HC_Init+0x34>
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;

    if (epnum & 0x80)
    {
      USBx_HC(ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800524c:	68e6      	ldr	r6, [r4, #12]
 800524e:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 8005252:	e005      	b.n	8005260 <USB_HC_Init+0x40>
      if(USBx != USB_OTG_FS)
 8005254:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8005258:	d009      	beq.n	800526e <USB_HC_Init+0x4e>
        USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800525a:	68e6      	ldr	r6, [r4, #12]
 800525c:	f046 0660 	orr.w	r6, r6, #96	; 0x60
                                USB_OTG_HCINTMSK_AHBERR |\
                                USB_OTG_HCINTMSK_FRMORM ;

    if (epnum & 0x80)
    {
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005260:	60e6      	str	r6, [r4, #12]
 8005262:	e004      	b.n	800526e <USB_HC_Init+0x4e>
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 8005264:	f240 669d 	movw	r6, #1693	; 0x69d
    if (epnum & 0x80)
 8005268:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 800526a:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80)
 800526c:	dbee      	blt.n	800524c <USB_HC_Init+0x2c>
    }
    break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 800526e:	2601      	movs	r6, #1
 8005270:	f8d0 c418 	ldr.w	ip, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;

  /* Program the HCCHAR register */
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 8005274:	059b      	lsls	r3, r3, #22
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
 8005276:	2f00      	cmp	r7, #0
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8005278:	fa06 f101 	lsl.w	r1, r6, r1
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
 800527c:	ea4f 22c2 	mov.w	r2, r2, lsl #11
                             ((((epnum & 0x80) == 0x80)<< 15) & USB_OTG_HCCHAR_EPDIR)|\
 8005280:	bfb4      	ite	lt
 8005282:	f44f 4600 	movlt.w	r6, #32768	; 0x8000
 8005286:	2600      	movge	r6, #0
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8005288:	ea41 010c 	orr.w	r1, r1, ip
                             (((epnum & 0x7F)<< 11) & USB_OTG_HCCHAR_EPNUM)|\
 800528c:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
  USBx_HOST->HAINTMSK |= (1 << ch_num);
 8005290:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8005294:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005298:	6981      	ldr	r1, [r0, #24]
 800529a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 800529e:	6181      	str	r1, [r0, #24]
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 80052a0:	f003 51fe 	and.w	r1, r3, #532676608	; 0x1fc00000
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
 80052a4:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80052a8:	2b02      	cmp	r3, #2
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
                             (mps & USB_OTG_HCCHAR_MPSIZ));
 80052aa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80052ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
                             (((speed == HPRT0_PRTSPD_LOW_SPEED)<< 17) & USB_OTG_HCCHAR_LSDEV)|\
 80052b2:	bf0c      	ite	eq
 80052b4:	f44f 3000 	moveq.w	r0, #131072	; 0x20000
 80052b8:	2000      	movne	r0, #0

  if (ep_type == EP_TYPE_INTR)
 80052ba:	2d03      	cmp	r5, #3
                             ((ep_type << 18) & USB_OTG_HCCHAR_EPTYP)|\
 80052bc:	ea43 0301 	orr.w	r3, r3, r1
 80052c0:	ea43 0302 	orr.w	r3, r3, r2
 80052c4:	ea4f 4285 	mov.w	r2, r5, lsl #18
 80052c8:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80052cc:	ea43 0302 	orr.w	r3, r3, r2
 80052d0:	ea43 0306 	orr.w	r3, r3, r6
 80052d4:	ea43 0300 	orr.w	r3, r3, r0
  USBx_HC(ch_num)->HCCHAR = (((dev_address << 22) & USB_OTG_HCCHAR_DAD)  |\
 80052d8:	6023      	str	r3, [r4, #0]
  if (ep_type == EP_TYPE_INTR)
 80052da:	d103      	bne.n	80052e4 <USB_HC_Init+0xc4>
  {
    USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052e2:	6023      	str	r3, [r4, #0]
  }

  return HAL_OK;
}
 80052e4:	2000      	movs	r0, #0
 80052e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80052e8:	f240 2625 	movw	r6, #549	; 0x225
    if (epnum & 0x80)
 80052ec:	2f00      	cmp	r7, #0
    USBx_HC(ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |\
 80052ee:	60e6      	str	r6, [r4, #12]
    if (epnum & 0x80)
 80052f0:	dabd      	bge.n	800526e <USB_HC_Init+0x4e>
      USBx_HC(ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80052f2:	68e6      	ldr	r6, [r4, #12]
 80052f4:	f446 76c0 	orr.w	r6, r6, #384	; 0x180
 80052f8:	e7b2      	b.n	8005260 <USB_HC_Init+0x40>

080052fa <USB_HC_ReadInterrupt>:
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx_HOST->HAINT) & 0xFFFF);
 80052fa:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80052fe:	6940      	ldr	r0, [r0, #20]
}
 8005300:	b280      	uxth	r0, r0
 8005302:	4770      	bx	lr

08005304 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
  uint32_t count = 0;

  /* Check for space in the request queue to issue the halt. */
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 8005304:	f500 63a0 	add.w	r3, r0, #1280	; 0x500
 8005308:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 800530c:	680b      	ldr	r3, [r1, #0]
 800530e:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
 8005312:	d004      	beq.n	800531e <USB_HC_Halt+0x1a>
     (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_BULK)))
 8005314:	680b      	ldr	r3, [r1, #0]
 8005316:	f3c3 4381 	ubfx	r3, r3, #18, #2
  if (((((USBx_HC(hc_num)->HCCHAR) & USB_OTG_HCCHAR_EPTYP) >> 18) == HCCHAR_CTRL) ||
 800531a:	2b02      	cmp	r3, #2
 800531c:	d11c      	bne.n	8005358 <USB_HC_Halt+0x54>
  {
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800531e:	680b      	ldr	r3, [r1, #0]
 8005320:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005324:	600b      	str	r3, [r1, #0]

    if ((USBx->HNPTXSTS & 0xFFFF) == 0)
 8005326:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d130      	bne.n	8005390 <USB_HC_Halt+0x8c>
    {
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800532e:	680b      	ldr	r3, [r1, #0]
 8005330:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005334:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005336:	680b      	ldr	r3, [r1, #0]
 8005338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800533c:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800533e:	680b      	ldr	r3, [r1, #0]
 8005340:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005344:	600b      	str	r3, [r1, #0]
 8005346:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000)
 800534a:	3b01      	subs	r3, #1
 800534c:	d002      	beq.n	8005354 <USB_HC_Halt+0x50>
        {
          break;
        }
      }
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800534e:	680a      	ldr	r2, [r1, #0]
 8005350:	2a00      	cmp	r2, #0
 8005352:	dbfa      	blt.n	800534a <USB_HC_Halt+0x46>
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8005354:	2000      	movs	r0, #0
 8005356:	4770      	bx	lr
    USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005358:	680b      	ldr	r3, [r1, #0]
 800535a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800535e:	600b      	str	r3, [r1, #0]
    if ((USBx_HOST->HPTXSTS & 0xFFFF) == 0)
 8005360:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8005364:	b29b      	uxth	r3, r3
 8005366:	b99b      	cbnz	r3, 8005390 <USB_HC_Halt+0x8c>
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005368:	680b      	ldr	r3, [r1, #0]
 800536a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800536e:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005370:	680b      	ldr	r3, [r1, #0]
 8005372:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005376:	600b      	str	r3, [r1, #0]
      USBx_HC(hc_num)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005378:	680b      	ldr	r3, [r1, #0]
 800537a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800537e:	600b      	str	r3, [r1, #0]
 8005380:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000)
 8005384:	3b01      	subs	r3, #1
 8005386:	d0e5      	beq.n	8005354 <USB_HC_Halt+0x50>
      while ((USBx_HC(hc_num)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005388:	680a      	ldr	r2, [r1, #0]
 800538a:	2a00      	cmp	r2, #0
 800538c:	dbfa      	blt.n	8005384 <USB_HC_Halt+0x80>
 800538e:	e7e1      	b.n	8005354 <USB_HC_Halt+0x50>
       USBx_HC(hc_num)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005390:	680b      	ldr	r3, [r1, #0]
 8005392:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005396:	600b      	str	r3, [r1, #0]
 8005398:	e7dc      	b.n	8005354 <USB_HC_Halt+0x50>
	...

0800539c <USB_DoPing>:
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx , uint8_t ch_num)
{
  uint8_t  num_packets = 1;
  uint32_t tmpreg = 0;

  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 800539c:	f500 60a0 	add.w	r0, r0, #1280	; 0x500
 80053a0:	4b05      	ldr	r3, [pc, #20]	; (80053b8 <USB_DoPing+0x1c>)
 80053a2:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
  tmpreg |= USB_OTG_HCCHAR_CHENA;
  USBx_HC(ch_num)->HCCHAR = tmpreg;

  return HAL_OK;
}
 80053a6:	2000      	movs	r0, #0
  USBx_HC(ch_num)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 80053a8:	610b      	str	r3, [r1, #16]
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053aa:	680b      	ldr	r3, [r1, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053b4:	600b      	str	r3, [r1, #0]
}
 80053b6:	4770      	bx	lr
 80053b8:	80080000 	.word	0x80080000

080053bc <USB_HC_StartXfer>:
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 80053bc:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
{
 80053c0:	460b      	mov	r3, r1
 80053c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c6:	4604      	mov	r4, r0
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 80053c8:	d016      	beq.n	80053f8 <USB_HC_StartXfer+0x3c>
 80053ca:	790d      	ldrb	r5, [r1, #4]
 80053cc:	b9a5      	cbnz	r5, 80053f8 <USB_HC_StartXfer+0x3c>
 80053ce:	7849      	ldrb	r1, [r1, #1]
    if((dma == 0) && (hc->do_ping == 1))
 80053d0:	b93a      	cbnz	r2, 80053e2 <USB_HC_StartXfer+0x26>
 80053d2:	795d      	ldrb	r5, [r3, #5]
 80053d4:	2d01      	cmp	r5, #1
 80053d6:	d10f      	bne.n	80053f8 <USB_HC_StartXfer+0x3c>
      USB_DoPing(USBx, hc->ch_num);
 80053d8:	f7ff ffe0 	bl	800539c <USB_DoPing>
}
 80053dc:	2000      	movs	r0, #0
 80053de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(dma == 1)
 80053e2:	2a01      	cmp	r2, #1
 80053e4:	d108      	bne.n	80053f8 <USB_HC_StartXfer+0x3c>
      USBx_HC(hc->ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80053e6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80053ea:	f8d1 050c 	ldr.w	r0, [r1, #1292]	; 0x50c
 80053ee:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80053f2:	f8c1 050c 	str.w	r0, [r1, #1292]	; 0x50c
      hc->do_ping = 0;
 80053f6:	715d      	strb	r5, [r3, #5]
  if (hc->xfer_len > 0)
 80053f8:	6919      	ldr	r1, [r3, #16]
 80053fa:	2900      	cmp	r1, #0
 80053fc:	d067      	beq.n	80054ce <USB_HC_StartXfer+0x112>
    num_packets = (hc->xfer_len + hc->max_packet - 1) / hc->max_packet;
 80053fe:	8918      	ldrh	r0, [r3, #8]
 8005400:	3901      	subs	r1, #1
 8005402:	4401      	add	r1, r0
 8005404:	fbb1 f1f0 	udiv	r1, r1, r0
 8005408:	b289      	uxth	r1, r1
    if (num_packets > max_hc_pkt_count)
 800540a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800540e:	d903      	bls.n	8005418 <USB_HC_StartXfer+0x5c>
      hc->xfer_len = num_packets * hc->max_packet;
 8005410:	0200      	lsls	r0, r0, #8
      num_packets = max_hc_pkt_count;
 8005412:	f44f 7180 	mov.w	r1, #256	; 0x100
      hc->xfer_len = num_packets * hc->max_packet;
 8005416:	6118      	str	r0, [r3, #16]
  if (hc->ep_is_in)
 8005418:	78df      	ldrb	r7, [r3, #3]
 800541a:	b117      	cbz	r7, 8005422 <USB_HC_StartXfer+0x66>
    hc->xfer_len = num_packets * hc->max_packet;
 800541c:	8918      	ldrh	r0, [r3, #8]
 800541e:	4348      	muls	r0, r1
 8005420:	6118      	str	r0, [r3, #16]
      (((hc->data_pid) << 29) & USB_OTG_HCTSIZ_DPID);
 8005422:	f893 e00a 	ldrb.w	lr, [r3, #10]
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8005426:	6918      	ldr	r0, [r3, #16]
      (((hc->data_pid) << 29) & USB_OTG_HCTSIZ_DPID);
 8005428:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800542c:	785e      	ldrb	r6, [r3, #1]
 800542e:	f3c0 0812 	ubfx	r8, r0, #0, #19
      (((hc->data_pid) << 29) & USB_OTG_HCTSIZ_DPID);
 8005432:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 8005436:	eb04 1546 	add.w	r5, r4, r6, lsl #5
    ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |\
 800543a:	ea4e 0e08 	orr.w	lr, lr, r8
 800543e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8005530 <USB_HC_StartXfer+0x174>
 8005442:	ea08 41c1 	and.w	r1, r8, r1, lsl #19
 8005446:	ea4e 0101 	orr.w	r1, lr, r1
  USBx_HC(hc->ch_num)->HCTSIZ = (((hc->xfer_len) & USB_OTG_HCTSIZ_XFRSIZ)) |\
 800544a:	f8c5 1510 	str.w	r1, [r5, #1296]	; 0x510
  if (dma)
 800544e:	b112      	cbz	r2, 8005456 <USB_HC_StartXfer+0x9a>
    USBx_HC(hc->ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005450:	68d9      	ldr	r1, [r3, #12]
 8005452:	f8c5 1514 	str.w	r1, [r5, #1300]	; 0x514
  is_oddframe = (USBx_HOST->HFNUM & 0x01) ? 0 : 1;
 8005456:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 800545a:	f8de 1008 	ldr.w	r1, [lr, #8]
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800545e:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8005462:	43c9      	mvns	r1, r1
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005464:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 8005468:	0749      	lsls	r1, r1, #29
  USBx_HC(hc->ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800546a:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(hc->ch_num)->HCCHAR |= (is_oddframe << 29);
 800546e:	f001 5100 	and.w	r1, r1, #536870912	; 0x20000000
 8005472:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8005476:	ea41 010c 	orr.w	r1, r1, ip
 800547a:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(hc->ch_num)->HCCHAR;
 800547e:	492b      	ldr	r1, [pc, #172]	; (800552c <USB_HC_StartXfer+0x170>)
 8005480:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8005484:	f8c1 c000 	str.w	ip, [r1]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005488:	f8d1 c000 	ldr.w	ip, [r1]
 800548c:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8005490:	f8c1 c000 	str.w	ip, [r1]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005494:	f8d1 c000 	ldr.w	ip, [r1]
  if (hc->ep_is_in)
 8005498:	b1df      	cbz	r7, 80054d2 <USB_HC_StartXfer+0x116>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800549a:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
     tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800549e:	f8c1 c000 	str.w	ip, [r1]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054a2:	f8d1 c000 	ldr.w	ip, [r1]
 80054a6:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 80054aa:	f8c1 c000 	str.w	ip, [r1]
  USBx_HC(hc->ch_num)->HCCHAR = tmpreg;
 80054ae:	6809      	ldr	r1, [r1, #0]
 80054b0:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
  if (dma == 0) /* Slave mode */
 80054b4:	2a00      	cmp	r2, #0
 80054b6:	d191      	bne.n	80053dc <USB_HC_StartXfer+0x20>
    if((hc->ep_is_in == 0) && (hc->xfer_len > 0))
 80054b8:	2f00      	cmp	r7, #0
 80054ba:	d18f      	bne.n	80053dc <USB_HC_StartXfer+0x20>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d08d      	beq.n	80053dc <USB_HC_StartXfer+0x20>
      switch(hc->ep_type)
 80054c0:	79da      	ldrb	r2, [r3, #7]
 80054c2:	2a03      	cmp	r2, #3
 80054c4:	d813      	bhi.n	80054ee <USB_HC_StartXfer+0x132>
 80054c6:	e8df f002 	tbb	[pc, r2]
 80054ca:	2507      	.short	0x2507
 80054cc:	2507      	.short	0x2507
    num_packets = 1;
 80054ce:	2101      	movs	r1, #1
 80054d0:	e7a2      	b.n	8005418 <USB_HC_StartXfer+0x5c>
     tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80054d2:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 80054d6:	e7e2      	b.n	800549e <USB_HC_StartXfer+0xe2>
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 80054d8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        len_words = (hc->xfer_len + 3) / 4;
 80054da:	1cc1      	adds	r1, r0, #3
        if(len_words > (USBx->HNPTXSTS & 0xFFFF))
 80054dc:	b292      	uxth	r2, r2
 80054de:	f3c1 018f 	ubfx	r1, r1, #2, #16
 80054e2:	4291      	cmp	r1, r2
 80054e4:	d903      	bls.n	80054ee <USB_HC_StartXfer+0x132>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80054e6:	69a2      	ldr	r2, [r4, #24]
 80054e8:	f042 0220 	orr.w	r2, r2, #32
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80054ec:	61a2      	str	r2, [r4, #24]
      USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, hc->xfer_len, 0);
 80054ee:	68da      	ldr	r2, [r3, #12]
    count32b =  (len + 3) / 4;
 80054f0:	b280      	uxth	r0, r0
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80054f2:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
    count32b =  (len + 3) / 4;
 80054f6:	3003      	adds	r0, #3
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 80054f8:	fb03 5506 	mla	r5, r3, r6, r5
    for (i = 0; i < count32b; i++, src += 4)
 80054fc:	2300      	movs	r3, #0
    count32b =  (len + 3) / 4;
 80054fe:	1080      	asrs	r0, r0, #2
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8005500:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
    for (i = 0; i < count32b; i++, src += 4)
 8005504:	4298      	cmp	r0, r3
 8005506:	f43f af69 	beq.w	80053dc <USB_HC_StartXfer+0x20>
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 800550a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    for (i = 0; i < count32b; i++, src += 4)
 800550e:	3301      	adds	r3, #1
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8005510:	6029      	str	r1, [r5, #0]
 8005512:	e7f7      	b.n	8005504 <USB_HC_StartXfer+0x148>
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 8005514:	f8de 2010 	ldr.w	r2, [lr, #16]
        len_words = (hc->xfer_len + 3) / 4;
 8005518:	1cc1      	adds	r1, r0, #3
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFF)) /* split the transfer */
 800551a:	b292      	uxth	r2, r2
 800551c:	f3c1 018f 	ubfx	r1, r1, #2, #16
 8005520:	4291      	cmp	r1, r2
 8005522:	d9e4      	bls.n	80054ee <USB_HC_StartXfer+0x132>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005524:	69a2      	ldr	r2, [r4, #24]
 8005526:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800552a:	e7df      	b.n	80054ec <USB_HC_StartXfer+0x130>
 800552c:	200000b0 	.word	0x200000b0
 8005530:	1ff80000 	.word	0x1ff80000

08005534 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005534:	6883      	ldr	r3, [r0, #8]
  uint32_t value;

  USB_DisableGlobalInt(USBx);

    /* Flush FIFO */
  USB_FlushTxFifo(USBx, 0x10);
 8005536:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005538:	f023 0301 	bic.w	r3, r3, #1
{
 800553c:	b510      	push	{r4, lr}
 800553e:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005540:	6083      	str	r3, [r0, #8]
  USB_FlushTxFifo(USBx, 0x10);
 8005542:	f7ff fd67 	bl	8005014 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8005546:	4620      	mov	r0, r4
 8005548:	f7ff fd76 	bl	8005038 <USB_FlushRxFifo>
 800554c:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8005550:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8005554:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0; i <= 15; i++)
  {

    value = USBx_HC(i)->HCCHAR ;
 8005556:	6811      	ldr	r1, [r2, #0]
 8005558:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800555c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8005560:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0; i <= 15; i++)
 8005564:	4290      	cmp	r0, r2
 8005566:	d1f6      	bne.n	8005556 <USB_StopHost+0x22>
 8005568:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0; i <= 15; i++)
  {
    value = USBx_HC(i)->HCCHAR ;
 800556a:	6819      	ldr	r1, [r3, #0]
 800556c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000

    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005570:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000

    USBx_HC(i)->HCCHAR = value;
 8005574:	6019      	str	r1, [r3, #0]
    do
    {
      if (++count > 1000)
 8005576:	3001      	adds	r0, #1
 8005578:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800557c:	d802      	bhi.n	8005584 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800557e:	6819      	ldr	r1, [r3, #0]
 8005580:	2900      	cmp	r1, #0
 8005582:	dbf8      	blt.n	8005576 <USB_StopHost+0x42>
 8005584:	3320      	adds	r3, #32
  for (i = 0; i <= 15; i++)
 8005586:	429a      	cmp	r2, r3
 8005588:	d1ef      	bne.n	800556a <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFF;
 800558a:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTSTS = 0xFFFFFFFF;
  USB_EnableGlobalInt(USBx);
  return HAL_OK;
}
 800558e:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFF;
 8005590:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFF;
 8005594:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005596:	68a3      	ldr	r3, [r4, #8]
 8005598:	f043 0301 	orr.w	r3, r3, #1
 800559c:	60a3      	str	r3, [r4, #8]
}
 800559e:	bd10      	pop	{r4, pc}

080055a0 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;  
}
 80055a0:	2000      	movs	r0, #0
 80055a2:	4770      	bx	lr

080055a4 <USBH_CDC_InterfaceDeInit>:
{
 80055a4:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80055a6:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 80055aa:	4605      	mov	r5, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80055ac:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 80055ae:	7821      	ldrb	r1, [r4, #0]
 80055b0:	b139      	cbz	r1, 80055c2 <USBH_CDC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80055b2:	f000 fe86 	bl	80062c2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80055b6:	7821      	ldrb	r1, [r4, #0]
 80055b8:	4628      	mov	r0, r5
 80055ba:	f000 fe9f 	bl	80062fc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0;     /* Reset the Channel as Free */
 80055be:	2300      	movs	r3, #0
 80055c0:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 80055c2:	7b21      	ldrb	r1, [r4, #12]
 80055c4:	b141      	cbz	r1, 80055d8 <USBH_CDC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80055c6:	4628      	mov	r0, r5
 80055c8:	f000 fe7b 	bl	80062c2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80055cc:	7b21      	ldrb	r1, [r4, #12]
 80055ce:	4628      	mov	r0, r5
 80055d0:	f000 fe94 	bl	80062fc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0;     /* Reset the Channel as Free */
 80055d4:	2300      	movs	r3, #0
 80055d6:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 80055d8:	7b61      	ldrb	r1, [r4, #13]
 80055da:	b141      	cbz	r1, 80055ee <USBH_CDC_InterfaceDeInit+0x4a>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80055dc:	4628      	mov	r0, r5
 80055de:	f000 fe70 	bl	80062c2 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80055e2:	7b61      	ldrb	r1, [r4, #13]
 80055e4:	4628      	mov	r0, r5
 80055e6:	f000 fe89 	bl	80062fc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0;     /* Reset the Channel as Free */
 80055ea:	2300      	movs	r3, #0
 80055ec:	7363      	strb	r3, [r4, #13]
  if(phost->pActiveClass->pData)
 80055ee:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 80055f2:	69d8      	ldr	r0, [r3, #28]
 80055f4:	b128      	cbz	r0, 8005602 <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free (phost->pActiveClass->pData);
 80055f6:	f003 ff87 	bl	8009508 <free>
    phost->pActiveClass->pData = 0;
 80055fa:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 80055fe:	2200      	movs	r2, #0
 8005600:	61da      	str	r2, [r3, #28]
}
 8005602:	2000      	movs	r0, #0
 8005604:	bd38      	pop	{r3, r4, r5, pc}

08005606 <USBH_CDC_InterfaceInit>:
  interface = USBH_FindInterface(phost, 
 8005606:	2202      	movs	r2, #2
 8005608:	2301      	movs	r3, #1
{	
 800560a:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, 
 800560c:	4611      	mov	r1, r2
{	
 800560e:	b085      	sub	sp, #20
 8005610:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, 
 8005612:	f000 f9e3 	bl	80059dc <USBH_FindInterface>
  if(interface == 0xFF) /* No Valid Interface */
 8005616:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, 
 8005618:	4606      	mov	r6, r0
  if(interface == 0xFF) /* No Valid Interface */
 800561a:	d102      	bne.n	8005622 <USBH_CDC_InterfaceInit+0x1c>
  USBH_StatusTypeDef status = USBH_FAIL ;
 800561c:	2002      	movs	r0, #2
}
 800561e:	b005      	add	sp, #20
 8005620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 8005622:	4601      	mov	r1, r0
 8005624:	4628      	mov	r0, r5
 8005626:	f000 f9d0 	bl	80059ca <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800562a:	2050      	movs	r0, #80	; 0x50
 800562c:	f8d5 7374 	ldr.w	r7, [r5, #884]	; 0x374
 8005630:	f003 ff62 	bl	80094f8 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8005634:	231a      	movs	r3, #26
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005636:	4604      	mov	r4, r0
 8005638:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 800563a:	fb03 5606 	mla	r6, r3, r6, r5
 800563e:	f896 3348 	ldrb.w	r3, [r6, #840]	; 0x348
 8005642:	061a      	lsls	r2, r3, #24
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005644:	bf44      	itt	mi
 8005646:	7043      	strbmi	r3, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005648:	f8b6 334a 	ldrhmi.w	r3, [r6, #842]	; 0x34a
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800564c:	7841      	ldrb	r1, [r0, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800564e:	bf48      	it	mi
 8005650:	8143      	strhmi	r3, [r0, #10]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005652:	4628      	mov	r0, r5
 8005654:	f000 fe3a 	bl	80062cc <USBH_AllocPipe>
 8005658:	4601      	mov	r1, r0
 800565a:	7020      	strb	r0, [r4, #0]
    USBH_OpenPipe  (phost,
 800565c:	8960      	ldrh	r0, [r4, #10]
 800565e:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8005662:	9002      	str	r0, [sp, #8]
 8005664:	2003      	movs	r0, #3
 8005666:	7862      	ldrb	r2, [r4, #1]
 8005668:	9001      	str	r0, [sp, #4]
 800566a:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800566e:	9000      	str	r0, [sp, #0]
 8005670:	4628      	mov	r0, r5
 8005672:	f000 fe17 	bl	80062a4 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0);    
 8005676:	2200      	movs	r2, #0
 8005678:	7821      	ldrb	r1, [r4, #0]
 800567a:	4628      	mov	r0, r5
 800567c:	f003 fed3 	bl	8009426 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost, 
 8005680:	2300      	movs	r3, #0
 8005682:	210a      	movs	r1, #10
 8005684:	4628      	mov	r0, r5
 8005686:	461a      	mov	r2, r3
 8005688:	f000 f9a8 	bl	80059dc <USBH_FindInterface>
    if(interface == 0xFF) /* No Valid Interface */
 800568c:	28ff      	cmp	r0, #255	; 0xff
 800568e:	d0c5      	beq.n	800561c <USBH_CDC_InterfaceInit+0x16>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8005690:	231a      	movs	r3, #26
      USBH_OpenPipe  (phost,
 8005692:	2602      	movs	r6, #2
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 8005694:	fb03 5100 	mla	r1, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 8005698:	fb03 5000 	mla	r0, r3, r0, r5
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 800569c:	f891 2348 	ldrb.w	r2, [r1, #840]	; 0x348
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 80056a0:	f890 3350 	ldrb.w	r3, [r0, #848]	; 0x350
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80)
 80056a4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80056a8:	f8b1 134a 	ldrh.w	r1, [r1, #842]	; 0x34a
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056ac:	bf0d      	iteet	eq
 80056ae:	73a2      	strbeq	r2, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056b0:	73e2      	strbne	r2, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056b2:	8361      	strhne	r1, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056b4:	8321      	strheq	r1, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80)
 80056b6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80056ba:	f8b0 2352 	ldrh.w	r2, [r0, #850]	; 0x352
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80056be:	4628      	mov	r0, r5
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056c0:	bf08      	it	eq
 80056c2:	73a3      	strbeq	r3, [r4, #14]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80056c4:	7ba1      	ldrb	r1, [r4, #14]
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80056c6:	bf1a      	itte	ne
 80056c8:	73e3      	strbne	r3, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056ca:	8362      	strhne	r2, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80056cc:	8322      	strheq	r2, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80056ce:	f000 fdfd 	bl	80062cc <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 80056d2:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80056d4:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);  
 80056d6:	4628      	mov	r0, r5
 80056d8:	f000 fdf8 	bl	80062cc <USBH_AllocPipe>
 80056dc:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 80056de:	8b20      	ldrh	r0, [r4, #24]
 80056e0:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80056e4:	9002      	str	r0, [sp, #8]
 80056e6:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80056ea:	7ba2      	ldrb	r2, [r4, #14]
 80056ec:	7b61      	ldrb	r1, [r4, #13]
 80056ee:	9601      	str	r6, [sp, #4]
 80056f0:	9000      	str	r0, [sp, #0]
 80056f2:	4628      	mov	r0, r5
 80056f4:	f000 fdd6 	bl	80062a4 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 80056f8:	8b60      	ldrh	r0, [r4, #26]
 80056fa:	9601      	str	r6, [sp, #4]
      CDC_Handle->state = CDC_IDLE_STATE;
 80056fc:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 80056fe:	9002      	str	r0, [sp, #8]
 8005700:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8005704:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8005708:	7be2      	ldrb	r2, [r4, #15]
 800570a:	7b21      	ldrb	r1, [r4, #12]
 800570c:	9000      	str	r0, [sp, #0]
 800570e:	4628      	mov	r0, r5
 8005710:	f000 fdc8 	bl	80062a4 <USBH_OpenPipe>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 8005714:	4632      	mov	r2, r6
 8005716:	7b61      	ldrb	r1, [r4, #13]
 8005718:	4628      	mov	r0, r5
      CDC_Handle->state = CDC_IDLE_STATE;
 800571a:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.OutPipe,0);
 800571e:	f003 fe82 	bl	8009426 <USBH_LL_SetToggle>
      USBH_LL_SetToggle  (phost, CDC_Handle->DataItf.InPipe,0);
 8005722:	4632      	mov	r2, r6
 8005724:	7b21      	ldrb	r1, [r4, #12]
 8005726:	4628      	mov	r0, r5
 8005728:	f003 fe7d 	bl	8009426 <USBH_LL_SetToggle>
      status = USBH_OK; 
 800572c:	4630      	mov	r0, r6
 800572e:	e776      	b.n	800561e <USBH_CDC_InterfaceInit+0x18>

08005730 <USBH_CDC_ClassRequest>:
{   
 8005730:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;  
 8005732:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
                              USB_REQ_RECIPIENT_INTERFACE;
  
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0;
  phost->Control.setup.b.wIndex.w = 0;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8005736:	2207      	movs	r2, #7
{   
 8005738:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;  
 800573a:	69d9      	ldr	r1, [r3, #28]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800573c:	23a1      	movs	r3, #161	; 0xa1
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 800573e:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005740:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005742:	2321      	movs	r3, #33	; 0x21
 
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005744:	3140      	adds	r1, #64	; 0x40
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005746:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 800574c:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800574e:	f000 fb1f 	bl	8005d90 <USBH_CtlReq>
  if(status == USBH_OK)
 8005752:	4605      	mov	r5, r0
 8005754:	b920      	cbnz	r0, 8005760 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 8005756:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800575a:	2102      	movs	r1, #2
 800575c:	4620      	mov	r0, r4
 800575e:	4798      	blx	r3
}
 8005760:	4628      	mov	r0, r5
 8005762:	bd38      	pop	{r3, r4, r5, pc}

08005764 <USBH_CDC_TransmitCallback>:
 8005764:	4770      	bx	lr

08005766 <USBH_CDC_ReceiveCallback>:
 8005766:	4770      	bx	lr

08005768 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005768:	4770      	bx	lr

0800576a <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 800576a:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
{
 800576e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData; 
 8005770:	69dc      	ldr	r4, [r3, #28]
{
 8005772:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8005774:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8005778:	2b04      	cmp	r3, #4
 800577a:	d817      	bhi.n	80057ac <USBH_CDC_Process+0x42>
 800577c:	e8df f003 	tbb	[pc, r3]
 8005780:	42180603 	.word	0x42180603
 8005784:	b8          	.byte	0xb8
 8005785:	00          	.byte	0x00
    status = USBH_OK;
 8005786:	2000      	movs	r0, #0
}
 8005788:	b003      	add	sp, #12
 800578a:	bd30      	pop	{r4, r5, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 800578c:	2321      	movs	r3, #33	; 0x21
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800578e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8005790:	2207      	movs	r2, #7
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | \
 8005792:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005794:	2320      	movs	r3, #32
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 8005796:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005798:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 800579e:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecodin->Array , LINE_CODING_STRUCTURE_SIZE );  
 80057a0:	f000 faf6 	bl	8005d90 <USBH_CtlReq>
    if(req_status == USBH_OK)
 80057a4:	bb50      	cbnz	r0, 80057fc <USBH_CDC_Process+0x92>
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE; 
 80057a6:	2302      	movs	r3, #2
      CDC_Handle->state = CDC_ERROR_STATE; 
 80057a8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 80057ac:	2001      	movs	r0, #1
 80057ae:	e7eb      	b.n	8005788 <USBH_CDC_Process+0x1e>
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80057b0:	23a1      	movs	r3, #161	; 0xa1
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 80057b2:	2207      	movs	r2, #7
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80057b4:	f104 0140 	add.w	r1, r4, #64	; 0x40
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80057b8:	7403      	strb	r3, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80057ba:	2321      	movs	r3, #33	; 0x21
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;           
 80057bc:	82c2      	strh	r2, [r0, #22]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80057be:	7443      	strb	r3, [r0, #17]
  phost->Control.setup.b.wValue.w = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0;
 80057c4:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80057c6:	f000 fae3 	bl	8005d90 <USBH_CtlReq>
    if(req_status == USBH_OK)
 80057ca:	b9b8      	cbnz	r0, 80057fc <USBH_CDC_Process+0x92>
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 80057cc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80057ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80057d0:	f002 11ff 	and.w	r1, r2, #16711935	; 0xff00ff
      CDC_Handle->state = CDC_IDLE_STATE; 
 80057d4:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) && 
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80057de:	4291      	cmp	r1, r2
 80057e0:	d1e4      	bne.n	80057ac <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80057e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057e6:	795a      	ldrb	r2, [r3, #5]
 80057e8:	4291      	cmp	r1, r2
 80057ea:	d1df      	bne.n	80057ac <USBH_CDC_Process+0x42>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80057ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d1db      	bne.n	80057ac <USBH_CDC_Process+0x42>
        USBH_CDC_LineCodingChanged(phost);
 80057f4:	4628      	mov	r0, r5
 80057f6:	f7ff ffb7 	bl	8005768 <USBH_CDC_LineCodingChanged>
 80057fa:	e7d7      	b.n	80057ac <USBH_CDC_Process+0x42>
    else if(req_status != USBH_BUSY)
 80057fc:	2801      	cmp	r0, #1
 80057fe:	d0d5      	beq.n	80057ac <USBH_CDC_Process+0x42>
      CDC_Handle->state = CDC_ERROR_STATE; 
 8005800:	2304      	movs	r3, #4
 8005802:	e7d1      	b.n	80057a8 <USBH_CDC_Process+0x3e>
  switch(CDC_Handle->data_tx_state)
 8005804:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
 8005808:	2901      	cmp	r1, #1
 800580a:	d02b      	beq.n	8005864 <USBH_CDC_Process+0xfa>
 800580c:	2902      	cmp	r1, #2
 800580e:	d038      	beq.n	8005882 <USBH_CDC_Process+0x118>
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005810:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 8005814:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->data_rx_state)
 8005816:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 800581a:	2b03      	cmp	r3, #3
 800581c:	d057      	beq.n	80058ce <USBH_CDC_Process+0x164>
 800581e:	2b04      	cmp	r3, #4
 8005820:	d1c4      	bne.n	80057ac <USBH_CDC_Process+0x42>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe); 
 8005822:	7b21      	ldrb	r1, [r4, #12]
 8005824:	4628      	mov	r0, r5
 8005826:	f003 fded 	bl	8009404 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 800582a:	2801      	cmp	r0, #1
 800582c:	d1be      	bne.n	80057ac <USBH_CDC_Process+0x42>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800582e:	7b21      	ldrb	r1, [r4, #12]
 8005830:	4628      	mov	r0, r5
 8005832:	f003 fda3 	bl	800937c <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 8005836:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005838:	b282      	uxth	r2, r0
      if(((CDC_Handle->RxDataLength - length) > 0) && (length > CDC_Handle->DataItf.InEpSize))
 800583a:	4293      	cmp	r3, r2
 800583c:	4610      	mov	r0, r2
 800583e:	d050      	beq.n	80058e2 <USBH_CDC_Process+0x178>
 8005840:	8b61      	ldrh	r1, [r4, #26]
 8005842:	4291      	cmp	r1, r2
 8005844:	d24d      	bcs.n	80058e2 <USBH_CDC_Process+0x178>
        CDC_Handle->RxDataLength -= length ;
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	62a3      	str	r3, [r4, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800584a:	6a23      	ldr	r3, [r4, #32]
 800584c:	4418      	add	r0, r3
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 800584e:	2303      	movs	r3, #3
        CDC_Handle->pRxData += length;
 8005850:	6220      	str	r0, [r4, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA; 
 8005852:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
      osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 8005856:	2200      	movs	r2, #0
 8005858:	2104      	movs	r1, #4
 800585a:	f8d5 03c8 	ldr.w	r0, [r5, #968]	; 0x3c8
 800585e:	f000 fdb7 	bl	80063d0 <osMessagePut>
 8005862:	e7a3      	b.n	80057ac <USBH_CDC_Process+0x42>
    if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005864:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005866:	8b22      	ldrh	r2, [r4, #24]
 8005868:	7b63      	ldrb	r3, [r4, #13]
 800586a:	4290      	cmp	r0, r2
      USBH_BulkSendData (phost,
 800586c:	9100      	str	r1, [sp, #0]
      USBH_BulkSendData (phost,
 800586e:	69e1      	ldr	r1, [r4, #28]
 8005870:	bf98      	it	ls
 8005872:	b282      	uxthls	r2, r0
 8005874:	4628      	mov	r0, r5
 8005876:	f000 fced 	bl	8006254 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800587a:	2302      	movs	r3, #2
 800587c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8005880:	e7c6      	b.n	8005810 <USBH_CDC_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe); 
 8005882:	7b61      	ldrb	r1, [r4, #13]
 8005884:	f003 fdbe 	bl	8009404 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE )
 8005888:	2801      	cmp	r0, #1
 800588a:	d11d      	bne.n	80058c8 <USBH_CDC_Process+0x15e>
      if(CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800588c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800588e:	8b22      	ldrh	r2, [r4, #24]
 8005890:	4293      	cmp	r3, r2
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize ;
 8005892:	bf89      	itett	hi
 8005894:	1a9b      	subhi	r3, r3, r2
        CDC_Handle->TxDataLength = 0;
 8005896:	2300      	movls	r3, #0
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize ;
 8005898:	6263      	strhi	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800589a:	69e3      	ldrhi	r3, [r4, #28]
        CDC_Handle->TxDataLength = 0;
 800589c:	bf92      	itee	ls
 800589e:	6263      	strls	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80058a0:	189b      	addhi	r3, r3, r2
 80058a2:	61e3      	strhi	r3, [r4, #28]
      if( CDC_Handle->TxDataLength > 0)
 80058a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058a6:	b11b      	cbz	r3, 80058b0 <USBH_CDC_Process+0x146>
      CDC_Handle->data_tx_state = CDC_SEND_DATA; 
 80058a8:	2301      	movs	r3, #1
 80058aa:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 80058ae:	e004      	b.n	80058ba <USBH_CDC_Process+0x150>
        CDC_Handle->data_tx_state = CDC_IDLE;    
 80058b0:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80058b4:	4628      	mov	r0, r5
 80058b6:	f7ff ff55 	bl	8005764 <USBH_CDC_TransmitCallback>
      osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 80058ba:	2200      	movs	r2, #0
 80058bc:	2104      	movs	r1, #4
 80058be:	f8d5 03c8 	ldr.w	r0, [r5, #968]	; 0x3c8
 80058c2:	f000 fd85 	bl	80063d0 <osMessagePut>
 80058c6:	e7a3      	b.n	8005810 <USBH_CDC_Process+0xa6>
    else if( URB_Status == USBH_URB_NOTREADY )
 80058c8:	2802      	cmp	r0, #2
 80058ca:	d1a1      	bne.n	8005810 <USBH_CDC_Process+0xa6>
 80058cc:	e7ec      	b.n	80058a8 <USBH_CDC_Process+0x13e>
    USBH_BulkReceiveData (phost,
 80058ce:	7b23      	ldrb	r3, [r4, #12]
 80058d0:	4628      	mov	r0, r5
 80058d2:	8b62      	ldrh	r2, [r4, #26]
 80058d4:	6a21      	ldr	r1, [r4, #32]
 80058d6:	f000 fcd5 	bl	8006284 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80058da:	2304      	movs	r3, #4
 80058dc:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
 80058e0:	e764      	b.n	80057ac <USBH_CDC_Process+0x42>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80058e2:	2300      	movs	r3, #0
        USBH_CDC_ReceiveCallback(phost);
 80058e4:	4628      	mov	r0, r5
        CDC_Handle->data_rx_state = CDC_IDLE;
 80058e6:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80058ea:	f7ff ff3c 	bl	8005766 <USBH_CDC_ReceiveCallback>
 80058ee:	e7b2      	b.n	8005856 <USBH_CDC_Process+0xec>
    req_status = USBH_ClrFeature(phost, 0x00); 
 80058f0:	2100      	movs	r1, #0
 80058f2:	f000 fc69 	bl	80061c8 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 80058f6:	2800      	cmp	r0, #0
 80058f8:	f47f af58 	bne.w	80057ac <USBH_CDC_Process+0x42>
      CDC_Handle->state = CDC_IDLE_STATE ;
 80058fc:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
 8005900:	e754      	b.n	80057ac <USBH_CDC_Process+0x42>

08005902 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005902:	f500 735f 	add.w	r3, r0, #892	; 0x37c
 8005906:	f500 726e 	add.w	r2, r0, #952	; 0x3b8
  uint32_t i = 0;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0;
 800590a:	2100      	movs	r1, #0
 800590c:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005910:	4293      	cmp	r3, r2
 8005912:	d1fb      	bne.n	800590c <DeInitStateMachine+0xa>
 8005914:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8005918:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }
  
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0; i< USBH_MAX_DATA_BUFFER; i++)
 8005922:	4291      	cmp	r1, r2
 8005924:	d1fb      	bne.n	800591e <DeInitStateMachine+0x1c>
  }
  
  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8005926:	2201      	movs	r2, #1
  phost->Timer = 0;  
  
  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8005928:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 800592a:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 800592c:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 800592e:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0;  
 8005930:	f8c0 33b8 	str.w	r3, [r0, #952]	; 0x3b8
  phost->Control.state = CTRL_SETUP;
 8005934:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;  
 8005936:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0;
 8005938:	7643      	strb	r3, [r0, #25]
  
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800593a:	f880 331c 	strb.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800593e:	f880 231d 	strb.w	r2, [r0, #797]	; 0x31d
  
  return USBH_OK;
}
 8005942:	2000      	movs	r0, #0
 8005944:	4770      	bx	lr
	...

08005948 <USBH_Init>:
{
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	460c      	mov	r4, r1
 800594c:	b088      	sub	sp, #32
  if(phost == NULL)
 800594e:	4605      	mov	r5, r0
 8005950:	b348      	cbz	r0, 80059a6 <USBH_Init+0x5e>
  phost->pActiveClass = NULL;
 8005952:	2300      	movs	r3, #0
  phost->id = id;
 8005954:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  phost->pActiveClass = NULL;
 8005958:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
  phost->ClassNumber = 0;
 800595c:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  DeInitStateMachine(phost);
 8005960:	f7ff ffcf 	bl	8005902 <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8005964:	b10c      	cbz	r4, 800596a <USBH_Init+0x22>
    phost->pUser = pUsrFunc;
 8005966:	f8c5 43c4 	str.w	r4, [r5, #964]	; 0x3c4
  osMessageQDef(USBH_Queue, 10, uint16_t);
 800596a:	4c10      	ldr	r4, [pc, #64]	; (80059ac <USBH_Init+0x64>)
 800596c:	ab01      	add	r3, sp, #4
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 800596e:	ae03      	add	r6, sp, #12
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8005970:	e894 0003 	ldmia.w	r4, {r0, r1}
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8005974:	3408      	adds	r4, #8
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8005976:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL); 
 800597a:	2100      	movs	r1, #0
 800597c:	4618      	mov	r0, r3
 800597e:	f000 fd22 	bl	80063c6 <osMessageCreate>
 8005982:	f8c5 03c8 	str.w	r0, [r5, #968]	; 0x3c8
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8005986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005988:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800598a:	6823      	ldr	r3, [r4, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800598c:	4629      	mov	r1, r5
 800598e:	a803      	add	r0, sp, #12
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8005990:	6033      	str	r3, [r6, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8005992:	f000 fcf8 	bl	8006386 <osThreadCreate>
 8005996:	f8c5 03cc 	str.w	r0, [r5, #972]	; 0x3cc
  USBH_LL_Init(phost);
 800599a:	4628      	mov	r0, r5
 800599c:	f003 fc8a 	bl	80092b4 <USBH_LL_Init>
  return USBH_OK;
 80059a0:	2000      	movs	r0, #0
}
 80059a2:	b008      	add	sp, #32
 80059a4:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL; 
 80059a6:	2002      	movs	r0, #2
 80059a8:	e7fb      	b.n	80059a2 <USBH_Init+0x5a>
 80059aa:	bf00      	nop
 80059ac:	080096f0 	.word	0x080096f0

080059b0 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(pclass != 0)
 80059b0:	b149      	cbz	r1, 80059c6 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80059b2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80059b6:	b933      	cbnz	r3, 80059c6 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80059b8:	2201      	movs	r2, #1
 80059ba:	f8c0 1370 	str.w	r1, [r0, #880]	; 0x370
 80059be:	f8c0 2378 	str.w	r2, [r0, #888]	; 0x378
      status = USBH_OK;
 80059c2:	4618      	mov	r0, r3
 80059c4:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL; 
 80059c6:	2002      	movs	r0, #2
  }
  
  return status;
}
 80059c8:	4770      	bx	lr

080059ca <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;
  
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80059ca:	f890 3336 	ldrb.w	r3, [r0, #822]	; 0x336
 80059ce:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 80059d0:	bf86      	itte	hi
 80059d2:	f880 131f 	strbhi.w	r1, [r0, #799]	; 0x31f
  USBH_StatusTypeDef   status = USBH_OK;
 80059d6:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );                 
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL; 
 80059d8:	2002      	movls	r0, #2
  }
  return status;  
}
 80059da:	4770      	bx	lr

080059dc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80059dc:	b530      	push	{r4, r5, lr}
 80059de:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;  
  
  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFF))&&
 80059e0:	f890 5341 	ldrb.w	r5, [r0, #833]	; 0x341
 80059e4:	428d      	cmp	r5, r1
 80059e6:	d001      	beq.n	80059ec <USBH_FindInterface+0x10>
 80059e8:	29ff      	cmp	r1, #255	; 0xff
 80059ea:	d10d      	bne.n	8005a08 <USBH_FindInterface+0x2c>
 80059ec:	f890 5342 	ldrb.w	r5, [r0, #834]	; 0x342
 80059f0:	4295      	cmp	r5, r2
 80059f2:	d001      	beq.n	80059f8 <USBH_FindInterface+0x1c>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFF))&&
 80059f4:	2aff      	cmp	r2, #255	; 0xff
 80059f6:	d107      	bne.n	8005a08 <USBH_FindInterface+0x2c>
 80059f8:	f890 5343 	ldrb.w	r5, [r0, #835]	; 0x343
 80059fc:	429d      	cmp	r5, r3
 80059fe:	d101      	bne.n	8005a04 <USBH_FindInterface+0x28>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
    {
      return  if_ix;
 8005a00:	b2e0      	uxtb	r0, r4
 8005a02:	bd30      	pop	{r4, r5, pc}
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFF)))
 8005a04:	2bff      	cmp	r3, #255	; 0xff
 8005a06:	d0fb      	beq.n	8005a00 <USBH_FindInterface+0x24>
 8005a08:	3401      	adds	r4, #1
 8005a0a:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005a0c:	2c02      	cmp	r4, #2
 8005a0e:	d1e7      	bne.n	80059e0 <USBH_FindInterface+0x4>
    }
    if_ix++;
  }
  return 0xFF;
 8005a10:	20ff      	movs	r0, #255	; 0xff
}
 8005a12:	bd30      	pop	{r4, r5, pc}

08005a14 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005a14:	b510      	push	{r4, lr}
 8005a16:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005a18:	f003 fc78 	bl	800930c <USBH_LL_Start>
  
  /* Activate VBUS on the port */ 
  USBH_LL_DriverVBUS (phost, TRUE);
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f003 fcf4 	bl	800940c <USBH_LL_DriverVBUS>
  
  return USBH_OK;  
}
 8005a24:	2000      	movs	r0, #0
 8005a26:	bd10      	pop	{r4, pc}

08005a28 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005a28:	b530      	push	{r4, r5, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005a2a:	2302      	movs	r3, #2
{
 8005a2c:	b087      	sub	sp, #28
 8005a2e:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005a30:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0;
  
  switch (phost->gState)
 8005a34:	7803      	ldrb	r3, [r0, #0]
 8005a36:	2b0a      	cmp	r3, #10
 8005a38:	d81d      	bhi.n	8005a76 <USBH_Process+0x4e>
 8005a3a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005a3e:	000b      	.short	0x000b
 8005a40:	001f001c 	.word	0x001f001c
 8005a44:	001c0135 	.word	0x001c0135
 8005a48:	011c0050 	.word	0x011c0050
 8005a4c:	00f300e9 	.word	0x00f300e9
 8005a50:	012d00fc 	.word	0x012d00fc
  {
  case HOST_IDLE :
    
    if (phost->device.is_connected)  
 8005a54:	f890 331e 	ldrb.w	r3, [r0, #798]	; 0x31e
 8005a58:	b16b      	cbz	r3, 8005a76 <USBH_Process+0x4e>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT; 
 8005a5a:	2501      	movs	r5, #1
 8005a5c:	7005      	strb	r5, [r0, #0]
      USBH_Delay(200); 
 8005a5e:	20c8      	movs	r0, #200	; 0xc8
 8005a60:	f003 fcf0 	bl	8009444 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005a64:	4620      	mov	r0, r4
 8005a66:	f003 fc7b 	bl	8009360 <USBH_LL_ResetPort>
#if (USBH_USE_OS == 1)
      osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8005a6a:	2200      	movs	r2, #0
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   phost->Control.pipe_size);
    
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8005a72:	f000 fcad 	bl	80063d0 <osMessagePut>
  case HOST_ABORT_STATE:
  default :
    break;
  }
 return USBH_OK;  
}
 8005a76:	2000      	movs	r0, #0
 8005a78:	b007      	add	sp, #28
 8005a7a:	bd30      	pop	{r4, r5, pc}
    USBH_Delay(100); 
 8005a7c:	2064      	movs	r0, #100	; 0x64
    USBH_OpenPipe (phost,
 8005a7e:	2500      	movs	r5, #0
    USBH_Delay(100); 
 8005a80:	f003 fce0 	bl	8009444 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005a84:	4620      	mov	r0, r4
 8005a86:	f003 fc5d 	bl	8009344 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8005a8a:	2305      	movs	r3, #5
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005a8c:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8005a90:	2100      	movs	r1, #0
    phost->gState = HOST_ENUMERATION;
 8005a92:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8005a94:	4620      	mov	r0, r4
 8005a96:	f000 fc19 	bl	80062cc <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8005a9a:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00);
 8005a9c:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	f000 fc14 	bl	80062cc <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8005aa4:	79a2      	ldrb	r2, [r4, #6]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80);    
 8005aa6:	4601      	mov	r1, r0
 8005aa8:	7120      	strb	r0, [r4, #4]
    USBH_OpenPipe (phost,
 8005aaa:	9202      	str	r2, [sp, #8]
 8005aac:	4620      	mov	r0, r4
 8005aae:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8005ab2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8005ab6:	9200      	str	r2, [sp, #0]
 8005ab8:	2280      	movs	r2, #128	; 0x80
 8005aba:	9501      	str	r5, [sp, #4]
 8005abc:	f000 fbf2 	bl	80062a4 <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 8005ac0:	79a2      	ldrb	r2, [r4, #6]
 8005ac2:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	9202      	str	r2, [sp, #8]
 8005aca:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8005ace:	7961      	ldrb	r1, [r4, #5]
 8005ad0:	9200      	str	r2, [sp, #0]
 8005ad2:	462a      	mov	r2, r5
 8005ad4:	9501      	str	r5, [sp, #4]
 8005ad6:	f000 fbe5 	bl	80062a4 <USBH_OpenPipe>
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8005ada:	462a      	mov	r2, r5
 8005adc:	e7c6      	b.n	8005a6c <USBH_Process+0x44>
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;  
  
  switch (phost->EnumState)
 8005ade:	7843      	ldrb	r3, [r0, #1]
 8005ae0:	2b07      	cmp	r3, #7
 8005ae2:	d8c8      	bhi.n	8005a76 <USBH_Process+0x4e>
 8005ae4:	e8df f003 	tbb	[pc, r3]
 8005ae8:	42312904 	.word	0x42312904
 8005aec:	7667534a 	.word	0x7667534a
  {
  case ENUM_IDLE:  
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8) == USBH_OK)
 8005af0:	2108      	movs	r1, #8
 8005af2:	f000 fa36 	bl	8005f62 <USBH_Get_DevDesc>
 8005af6:	4605      	mov	r5, r0
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d1bc      	bne.n	8005a76 <USBH_Process+0x4e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005afc:	2301      	movs	r3, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005afe:	f894 2327 	ldrb.w	r2, [r4, #807]	; 0x327
      
      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8005b02:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005b04:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8005b06:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005b0a:	71a2      	strb	r2, [r4, #6]
      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
      
      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 8005b0c:	9202      	str	r2, [sp, #8]
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8005b14:	9501      	str	r5, [sp, #4]
 8005b16:	9200      	str	r2, [sp, #0]
 8005b18:	2280      	movs	r2, #128	; 0x80
 8005b1a:	f000 fbc3 	bl	80062a4 <USBH_OpenPipe>
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           phost->Control.pipe_size); 
      
      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8005b1e:	79a2      	ldrb	r2, [r4, #6]
 8005b20:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8005b24:	4620      	mov	r0, r4
 8005b26:	9202      	str	r2, [sp, #8]
 8005b28:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 8005b2c:	7961      	ldrb	r1, [r4, #5]
 8005b2e:	9200      	str	r2, [sp, #0]
 8005b30:	462a      	mov	r2, r5
 8005b32:	9501      	str	r5, [sp, #4]
 8005b34:	f000 fbb6 	bl	80062a4 <USBH_OpenPipe>
 8005b38:	e79d      	b.n	8005a76 <USBH_Process+0x4e>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8005b3a:	2112      	movs	r1, #18
 8005b3c:	f000 fa11 	bl	8005f62 <USBH_Get_DevDesc>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	d198      	bne.n	8005a76 <USBH_Process+0x4e>
      phost->EnumState = ENUM_SET_ADDR;
 8005b44:	2302      	movs	r3, #2
  case ENUM_GET_CFG_DESC:  
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost, 
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8005b46:	7063      	strb	r3, [r4, #1]
 8005b48:	e795      	b.n	8005a76 <USBH_Process+0x4e>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	f000 fb20 	bl	8006190 <USBH_SetAddress>
 8005b50:	4605      	mov	r5, r0
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d18f      	bne.n	8005a76 <USBH_Process+0x4e>
      USBH_Delay(2);
 8005b56:	2002      	movs	r0, #2
 8005b58:	f003 fc74 	bl	8009444 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8005b5c:	2203      	movs	r2, #3
      phost->device.address = USBH_DEVICE_ADDRESS;
 8005b5e:	2301      	movs	r3, #1
      USBH_OpenPipe (phost,
 8005b60:	7921      	ldrb	r1, [r4, #4]
      phost->EnumState = ENUM_GET_CFG_DESC;
 8005b62:	7062      	strb	r2, [r4, #1]
      phost->device.address = USBH_DEVICE_ADDRESS;
 8005b64:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      USBH_OpenPipe (phost,
 8005b68:	79a2      	ldrb	r2, [r4, #6]
 8005b6a:	e7cf      	b.n	8005b0c <USBH_Process+0xe4>
    if ( USBH_Get_CfgDesc(phost, 
 8005b6c:	2109      	movs	r1, #9
 8005b6e:	f000 fa51 	bl	8006014 <USBH_Get_CfgDesc>
 8005b72:	2800      	cmp	r0, #0
 8005b74:	f47f af7f 	bne.w	8005a76 <USBH_Process+0x4e>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;        
 8005b78:	2304      	movs	r3, #4
 8005b7a:	e7e4      	b.n	8005b46 <USBH_Process+0x11e>
    }
    break;
    
  case ENUM_GET_FULL_CFG_DESC:  
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost, 
 8005b7c:	f8b0 1334 	ldrh.w	r1, [r0, #820]	; 0x334
 8005b80:	f000 fa48 	bl	8006014 <USBH_Get_CfgDesc>
 8005b84:	2800      	cmp	r0, #0
 8005b86:	f47f af76 	bne.w	8005a76 <USBH_Process+0x4e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;       
 8005b8a:	2305      	movs	r3, #5
 8005b8c:	e7db      	b.n	8005b46 <USBH_Process+0x11e>
    }
    break;
    
  case ENUM_GET_MFC_STRING_DESC:  
    if (phost->device.DevDesc.iManufacturer != 0)
 8005b8e:	f890 132e 	ldrb.w	r1, [r0, #814]	; 0x32e
 8005b92:	b161      	cbz	r1, 8005bae <USBH_Process+0x186>
    { /* Check that Manufacturer String is available */
      
      if ( USBH_Get_StringDesc(phost,
 8005b94:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8005b98:	23ff      	movs	r3, #255	; 0xff
 8005b9a:	f000 fad2 	bl	8006142 <USBH_Get_StringDesc>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	f47f af68 	bne.w	8005a76 <USBH_Process+0x4e>
                                phost->device.Data , 
                               0xff) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005ba6:	2306      	movs	r3, #6
 8005ba8:	7063      	strb	r3, [r4, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 8005baa:	2105      	movs	r1, #5
 8005bac:	e75f      	b.n	8005a6e <USBH_Process+0x46>
      }
    }
    else
    {
     USBH_UsrLog("Manufacturer : N/A");      
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC; 
 8005bae:	2306      	movs	r3, #6
      }
    }
    else
    {
      USBH_UsrLog("Product : N/A");
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 8005bb0:	7063      	strb	r3, [r4, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	e7f9      	b.n	8005baa <USBH_Process+0x182>
    if (phost->device.DevDesc.iProduct != 0)
 8005bb6:	f890 132f 	ldrb.w	r1, [r0, #815]	; 0x32f
 8005bba:	b149      	cbz	r1, 8005bd0 <USBH_Process+0x1a8>
      if ( USBH_Get_StringDesc(phost,
 8005bbc:	23ff      	movs	r3, #255	; 0xff
 8005bbe:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8005bc2:	f000 fabe 	bl	8006142 <USBH_Get_StringDesc>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	f47f af55 	bne.w	8005a76 <USBH_Process+0x4e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;        
 8005bcc:	2307      	movs	r3, #7
 8005bce:	e7ba      	b.n	8005b46 <USBH_Process+0x11e>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC; 
 8005bd0:	2307      	movs	r3, #7
 8005bd2:	e7ed      	b.n	8005bb0 <USBH_Process+0x188>
#endif        
    } 
    break;
    
  case ENUM_GET_SERIALNUM_STRING_DESC:   
    if (phost->device.DevDesc.iSerialNumber != 0)
 8005bd4:	f890 1330 	ldrb.w	r1, [r0, #816]	; 0x330
 8005bd8:	b189      	cbz	r1, 8005bfe <USBH_Process+0x1d6>
    { /* Check that Serial number string is available */    
      if ( USBH_Get_StringDesc(phost,
 8005bda:	23ff      	movs	r3, #255	; 0xff
 8005bdc:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8005be0:	f000 faaf 	bl	8006142 <USBH_Get_StringDesc>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	f47f af46 	bne.w	8005a76 <USBH_Process+0x4e>
      phost->device.current_interface = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
      if(phost->device.DevDesc.bNumConfigurations == 1)
 8005bf0:	f894 3331 	ldrb.w	r3, [r4, #817]	; 0x331
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d109      	bne.n	8005c0c <USBH_Process+0x1e4>
        phost->gState  = HOST_SET_CONFIGURATION;        
 8005bf8:	2308      	movs	r3, #8
        phost->gState  = HOST_CLASS;        
 8005bfa:	7023      	strb	r3, [r4, #0]
 8005bfc:	e73b      	b.n	8005a76 <USBH_Process+0x4e>
    else
    {
      USBH_UsrLog("Serial Number : N/A"); 
      Status = USBH_OK;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 8005bfe:	460a      	mov	r2, r1
 8005c00:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8005c04:	2105      	movs	r1, #5
 8005c06:	f000 fbe3 	bl	80063d0 <osMessagePut>
 8005c0a:	e7ee      	b.n	8005bea <USBH_Process+0x1c2>
        phost->gState  = HOST_INPUT; 
 8005c0c:	2307      	movs	r3, #7
 8005c0e:	e7f4      	b.n	8005bfa <USBH_Process+0x1d2>
      if(phost->pUser != NULL)
 8005c10:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f43f af2e 	beq.w	8005a76 <USBH_Process+0x4e>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005c1e:	2308      	movs	r3, #8
        phost->gState  = HOST_ABORT_STATE;
 8005c20:	7023      	strb	r3, [r4, #0]
 8005c22:	e7c6      	b.n	8005bb2 <USBH_Process+0x18a>
    if (USBH_SetCfg(phost, phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005c24:	f890 1337 	ldrb.w	r1, [r0, #823]	; 0x337
 8005c28:	f000 fac0 	bl	80061ac <USBH_SetCfg>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	f47f af22 	bne.w	8005a76 <USBH_Process+0x4e>
      phost->gState  = HOST_CHECK_CLASS;
 8005c32:	2309      	movs	r3, #9
 8005c34:	e7e1      	b.n	8005bfa <USBH_Process+0x1d2>
    if(phost->ClassNumber == 0)
 8005c36:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d0b9      	beq.n	8005bb2 <USBH_Process+0x18a>
      phost->pActiveClass = NULL;
 8005c3e:	2300      	movs	r3, #0
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005c40:	f890 2341 	ldrb.w	r2, [r0, #833]	; 0x341
      phost->pActiveClass = NULL;
 8005c44:	f8c0 3374 	str.w	r3, [r0, #884]	; 0x374
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005c48:	f8d0 3370 	ldr.w	r3, [r0, #880]	; 0x370
 8005c4c:	7919      	ldrb	r1, [r3, #4]
 8005c4e:	4291      	cmp	r1, r2
          phost->pActiveClass = phost->pClass[idx];
 8005c50:	bf08      	it	eq
 8005c52:	f8c0 3374 	streq.w	r3, [r0, #884]	; 0x374
      if(phost->pActiveClass != NULL)
 8005c56:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8005c5a:	b153      	cbz	r3, 8005c72 <USBH_Process+0x24a>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	4798      	blx	r3
 8005c60:	b938      	cbnz	r0, 8005c72 <USBH_Process+0x24a>
          phost->gState  = HOST_CLASS_REQUEST; 
 8005c62:	2306      	movs	r3, #6
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 8005c64:	2103      	movs	r1, #3
 8005c66:	4620      	mov	r0, r4
          phost->gState  = HOST_CLASS_REQUEST; 
 8005c68:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);   
 8005c6a:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8005c6e:	4798      	blx	r3
 8005c70:	e79f      	b.n	8005bb2 <USBH_Process+0x18a>
        phost->gState  = HOST_ABORT_STATE;
 8005c72:	230c      	movs	r3, #12
 8005c74:	e7d4      	b.n	8005c20 <USBH_Process+0x1f8>
    if(phost->pActiveClass != NULL)
 8005c76:	f8d0 2374 	ldr.w	r2, [r0, #884]	; 0x374
 8005c7a:	b152      	cbz	r2, 8005c92 <USBH_Process+0x26a>
      status = phost->pActiveClass->Requests(phost);
 8005c7c:	6913      	ldr	r3, [r2, #16]
 8005c7e:	4798      	blx	r3
 8005c80:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8005c84:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f47f aef4 	bne.w	8005a76 <USBH_Process+0x4e>
        phost->gState  = HOST_CLASS;        
 8005c8e:	230a      	movs	r3, #10
 8005c90:	e7b3      	b.n	8005bfa <USBH_Process+0x1d2>
      phost->gState  = HOST_ABORT_STATE;
 8005c92:	230c      	movs	r3, #12
 8005c94:	7003      	strb	r3, [r0, #0]
 8005c96:	e788      	b.n	8005baa <USBH_Process+0x182>
    if(phost->pActiveClass != NULL)
 8005c98:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f43f aeea 	beq.w	8005a76 <USBH_Process+0x4e>
      phost->pActiveClass->BgndProcess(phost);
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	4798      	blx	r3
 8005ca6:	e6e6      	b.n	8005a76 <USBH_Process+0x4e>
    DeInitStateMachine(phost);  
 8005ca8:	f7ff fe2b 	bl	8005902 <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 8005cac:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f43f aee0 	beq.w	8005a76 <USBH_Process+0x4e>
      phost->pActiveClass->DeInit(phost); 
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	4620      	mov	r0, r4
 8005cba:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
 return USBH_OK;  
 8005cc2:	e6d8      	b.n	8005a76 <USBH_Process+0x4e>

08005cc4 <USBH_Process_OS>:
  * @brief  USB Host Thread task
  * @param  pvParameters not used
  * @retval None
  */
static void USBH_Process_OS(void const * argument)
{
 8005cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005cc6:	4604      	mov	r4, r0
  osEvent event;
  
  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
 8005cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ccc:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
 8005cd0:	a801      	add	r0, sp, #4
 8005cd2:	f000 fba5 	bl	8006420 <osMessageGet>
    
    if( event.status == osEventMessage )
 8005cd6:	9b01      	ldr	r3, [sp, #4]
 8005cd8:	2b10      	cmp	r3, #16
 8005cda:	d1f5      	bne.n	8005cc8 <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f7ff fea3 	bl	8005a28 <USBH_Process>
 8005ce2:	e7f1      	b.n	8005cc8 <USBH_Process_OS+0x4>

08005ce4 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8005ce4:	f8c0 13b8 	str.w	r1, [r0, #952]	; 0x3b8
 8005ce8:	4770      	bx	lr

08005cea <USBH_LL_IncTimer>:
  phost->Timer ++;
 8005cea:	f8d0 23b8 	ldr.w	r2, [r0, #952]	; 0x3b8
 8005cee:	3201      	adds	r2, #1
 8005cf0:	f8c0 23b8 	str.w	r2, [r0, #952]	; 0x3b8
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005cf4:	7802      	ldrb	r2, [r0, #0]
 8005cf6:	2a0a      	cmp	r2, #10
 8005cf8:	d104      	bne.n	8005d04 <USBH_LL_IncTimer+0x1a>
 8005cfa:	f8d0 3374 	ldr.w	r3, [r0, #884]	; 0x374
 8005cfe:	b10b      	cbz	r3, 8005d04 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	4718      	bx	r3
 8005d04:	4770      	bx	lr

08005d06 <USBH_LL_Connect>:
  if(phost->gState == HOST_IDLE )
 8005d06:	7803      	ldrb	r3, [r0, #0]
{
 8005d08:	b510      	push	{r4, lr}
 8005d0a:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 8005d0c:	b97b      	cbnz	r3, 8005d2e <USBH_LL_Connect+0x28>
    phost->device.is_connected = 1;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8005d14:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8005d18:	b10b      	cbz	r3, 8005d1e <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005d1a:	2104      	movs	r1, #4
 8005d1c:	4798      	blx	r3
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8005d1e:	2200      	movs	r2, #0
 8005d20:	2101      	movs	r1, #1
 8005d22:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8005d26:	f000 fb53 	bl	80063d0 <osMessagePut>
}
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	bd10      	pop	{r4, pc}
  else if(phost->gState == HOST_DEV_WAIT_FOR_ATTACHMENT )
 8005d2e:	7803      	ldrb	r3, [r0, #0]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d1f4      	bne.n	8005d1e <USBH_LL_Connect+0x18>
    phost->gState = HOST_DEV_ATTACHED ;
 8005d34:	2302      	movs	r3, #2
 8005d36:	7003      	strb	r3, [r0, #0]
 8005d38:	e7f1      	b.n	8005d1e <USBH_LL_Connect+0x18>

08005d3a <USBH_LL_Disconnect>:
{
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);  
 8005d3e:	f003 faf3 	bl	8009328 <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005d42:	7921      	ldrb	r1, [r4, #4]
 8005d44:	4620      	mov	r0, r4
 8005d46:	f000 fad9 	bl	80062fc <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);  
 8005d4a:	7961      	ldrb	r1, [r4, #5]
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f000 fad5 	bl	80062fc <USBH_FreePipe>
  phost->device.is_connected = 0; 
 8005d52:	2300      	movs	r3, #0
 8005d54:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 8005d58:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8005d5c:	b113      	cbz	r3, 8005d64 <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005d5e:	2105      	movs	r1, #5
 8005d60:	4620      	mov	r0, r4
 8005d62:	4798      	blx	r3
  USBH_LL_Start(phost);
 8005d64:	4620      	mov	r0, r4
 8005d66:	f003 fad1 	bl	800930c <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 8005d6a:	2303      	movs	r3, #3
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2101      	movs	r1, #1
  phost->gState = HOST_DEV_DISCONNECTED;
 8005d70:	7023      	strb	r3, [r4, #0]
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8005d72:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8005d76:	f000 fb2b 	bl	80063d0 <osMessagePut>
}
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	bd10      	pop	{r4, pc}

08005d7e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8005d7e:	b508      	push	{r3, lr}
  osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8005d80:	2200      	movs	r2, #0
 8005d82:	2102      	movs	r1, #2
 8005d84:	f8d0 03c8 	ldr.w	r0, [r0, #968]	; 0x3c8
 8005d88:	f000 fb22 	bl	80063d0 <osMessagePut>
  return USBH_OK;
}
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	bd08      	pop	{r3, pc}

08005d90 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost, 
                             uint8_t             *buff,
                             uint16_t            length)
{
 8005d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  
  switch (phost->RequestState)
 8005d92:	7885      	ldrb	r5, [r0, #2]
{
 8005d94:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8005d96:	2d01      	cmp	r5, #1
 8005d98:	d003      	beq.n	8005da2 <USBH_CtlReq+0x12>
 8005d9a:	2d02      	cmp	r5, #2
 8005d9c:	d00d      	beq.n	8005dba <USBH_CtlReq+0x2a>
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
  uint8_t direction;  
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d9e:	2001      	movs	r0, #1
  return status;
 8005da0:	e04a      	b.n	8005e38 <USBH_CtlReq+0xa8>
    phost->RequestState = CMD_WAIT;
 8005da2:	2302      	movs	r3, #2
    phost->Control.buff = buff; 
 8005da4:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 8005da6:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;  
 8005da8:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 8005daa:	7083      	strb	r3, [r0, #2]
    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
    { 
      phost->Control.state = CTRL_STATUS_OUT;
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8005dac:	2200      	movs	r2, #0
 8005dae:	2103      	movs	r1, #3
 8005db0:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8005db4:	f000 fb0c 	bl	80063d0 <osMessagePut>
 8005db8:	e7f1      	b.n	8005d9e <USBH_CtlReq+0xe>
  switch (phost->Control.state)
 8005dba:	7e03      	ldrb	r3, [r0, #24]
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	2b0a      	cmp	r3, #10
 8005dc0:	d8ed      	bhi.n	8005d9e <USBH_CtlReq+0xe>
 8005dc2:	e8df f003 	tbb	[pc, r3]
 8005dc6:	0e06      	.short	0x0e06
 8005dc8:	473b2b21 	.word	0x473b2b21
 8005dcc:	95896f65 	.word	0x95896f65
 8005dd0:	a0          	.byte	0xa0
 8005dd1:	00          	.byte	0x00
    USBH_CtlSendSetup     (phost, 
 8005dd2:	7942      	ldrb	r2, [r0, #5]
 8005dd4:	f100 0110 	add.w	r1, r0, #16
 8005dd8:	f000 fa04 	bl	80061e4 <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT; 
 8005ddc:	2302      	movs	r3, #2
                      0,
                      0,
                      phost->Control.pipe_out,
                      1);
     phost->Control.timer = phost->Timer;
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005dde:	7623      	strb	r3, [r4, #24]
 8005de0:	e7dd      	b.n	8005d9e <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out); 
 8005de2:	7941      	ldrb	r1, [r0, #5]
 8005de4:	f003 fb0e 	bl	8009404 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8005de8:	2801      	cmp	r0, #1
 8005dea:	f040 8088 	bne.w	8005efe <USBH_CtlReq+0x16e>
      if (phost->Control.setup.b.wLength.w != 0 )
 8005dee:	8ae2      	ldrh	r2, [r4, #22]
 8005df0:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8005df4:	b122      	cbz	r2, 8005e00 <USBH_CtlReq+0x70>
        if (direction == USB_D2H)
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da3a      	bge.n	8005e70 <USBH_CtlReq+0xe0>
          phost->Control.state = CTRL_DATA_IN;
 8005dfa:	2303      	movs	r3, #3
      phost->Control.state = CTRL_STATUS_OUT;
 8005dfc:	7623      	strb	r3, [r4, #24]
 8005dfe:	e7d5      	b.n	8005dac <USBH_CtlReq+0x1c>
        if (direction == USB_D2H)
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	da2c      	bge.n	8005e5e <USBH_CtlReq+0xce>
      phost->Control.state = CTRL_STATUS_OUT;
 8005e04:	2309      	movs	r3, #9
 8005e06:	e7f9      	b.n	8005dfc <USBH_CtlReq+0x6c>
     phost->Control.timer = phost->Timer;
 8005e08:	f8d0 33b8 	ldr.w	r3, [r0, #952]	; 0x3b8
    USBH_CtlReceiveData(phost,
 8005e0c:	8982      	ldrh	r2, [r0, #12]
     phost->Control.timer = phost->Timer;
 8005e0e:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 8005e10:	6881      	ldr	r1, [r0, #8]
 8005e12:	7903      	ldrb	r3, [r0, #4]
 8005e14:	f000 fa0e 	bl	8006234 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8005e18:	2304      	movs	r3, #4
 8005e1a:	e7e0      	b.n	8005dde <USBH_CtlReq+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8005e1c:	7901      	ldrb	r1, [r0, #4]
 8005e1e:	f003 faf1 	bl	8009404 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8005e22:	2801      	cmp	r0, #1
 8005e24:	d0ee      	beq.n	8005e04 <USBH_CtlReq+0x74>
    if  (URB_Status == USBH_URB_STALL) 
 8005e26:	2805      	cmp	r0, #5
 8005e28:	d169      	bne.n	8005efe <USBH_CtlReq+0x16e>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2103      	movs	r1, #3
 8005e2e:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
 8005e32:	f000 facd 	bl	80063d0 <osMessagePut>
      status = USBH_NOT_SUPPORTED;
 8005e36:	2003      	movs	r0, #3
}
 8005e38:	b003      	add	sp, #12
 8005e3a:	bd30      	pop	{r4, r5, pc}
    USBH_CtlSendData (phost,
 8005e3c:	2501      	movs	r5, #1
 8005e3e:	7943      	ldrb	r3, [r0, #5]
 8005e40:	8982      	ldrh	r2, [r0, #12]
 8005e42:	9500      	str	r5, [sp, #0]
 8005e44:	6881      	ldr	r1, [r0, #8]
 8005e46:	f000 f9de 	bl	8006206 <USBH_CtlSendData>
     phost->Control.timer = phost->Timer;
 8005e4a:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8005e4e:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005e50:	2306      	movs	r3, #6
 8005e52:	e7c4      	b.n	8005dde <USBH_CtlReq+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);     
 8005e54:	7941      	ldrb	r1, [r0, #5]
 8005e56:	f003 fad5 	bl	8009404 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8005e5a:	2801      	cmp	r0, #1
 8005e5c:	d101      	bne.n	8005e62 <USBH_CtlReq+0xd2>
      phost->Control.state = CTRL_STATUS_IN;
 8005e5e:	2307      	movs	r3, #7
 8005e60:	e7cc      	b.n	8005dfc <USBH_CtlReq+0x6c>
    else if  (URB_Status == USBH_URB_STALL) 
 8005e62:	2805      	cmp	r0, #5
 8005e64:	d102      	bne.n	8005e6c <USBH_CtlReq+0xdc>
      phost->Control.state = CTRL_STALLED; 
 8005e66:	230c      	movs	r3, #12
 8005e68:	7623      	strb	r3, [r4, #24]
 8005e6a:	e7de      	b.n	8005e2a <USBH_CtlReq+0x9a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005e6c:	2802      	cmp	r0, #2
 8005e6e:	d101      	bne.n	8005e74 <USBH_CtlReq+0xe4>
      phost->Control.state = CTRL_DATA_OUT;
 8005e70:	2305      	movs	r3, #5
 8005e72:	e7c3      	b.n	8005dfc <USBH_CtlReq+0x6c>
    else if (URB_Status == USBH_URB_ERROR)
 8005e74:	2804      	cmp	r0, #4
 8005e76:	d192      	bne.n	8005d9e <USBH_CtlReq+0xe>
      phost->Control.state = CTRL_ERROR;  
 8005e78:	230b      	movs	r3, #11
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	2103      	movs	r1, #3
 8005e7e:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
      phost->Control.state = CTRL_ERROR;  
 8005e82:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8005e84:	f000 faa4 	bl	80063d0 <osMessagePut>
      phost->RequestState = CMD_SEND;
 8005e88:	2301      	movs	r3, #1
      status = USBH_FAIL;
 8005e8a:	2002      	movs	r0, #2
      phost->RequestState = CMD_SEND;
 8005e8c:	70a3      	strb	r3, [r4, #2]
 8005e8e:	e7d3      	b.n	8005e38 <USBH_CtlReq+0xa8>
    USBH_CtlReceiveData (phost,
 8005e90:	2200      	movs	r2, #0
 8005e92:	7903      	ldrb	r3, [r0, #4]
 8005e94:	4611      	mov	r1, r2
 8005e96:	f000 f9cd 	bl	8006234 <USBH_CtlReceiveData>
    phost->Control.timer = phost->Timer;
 8005e9a:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8005e9e:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005ea0:	2308      	movs	r3, #8
 8005ea2:	e79c      	b.n	8005dde <USBH_CtlReq+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in); 
 8005ea4:	7901      	ldrb	r1, [r0, #4]
 8005ea6:	f003 faad 	bl	8009404 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8005eaa:	2801      	cmp	r0, #1
 8005eac:	d10c      	bne.n	8005ec8 <USBH_CtlReq+0x138>
    
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
    if  (URB_Status == USBH_URB_DONE)
    { 
      status = USBH_OK;      
      phost->Control.state = CTRL_COMPLETE; 
 8005eae:	230d      	movs	r3, #13
      
#if (USBH_USE_OS == 1)
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	2103      	movs	r1, #3
 8005eb4:	f8d4 03c8 	ldr.w	r0, [r4, #968]	; 0x3c8
      phost->Control.state = CTRL_COMPLETE; 
 8005eb8:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8005eba:	f000 fa89 	bl	80063d0 <osMessagePut>
      phost->RequestState = CMD_SEND;
 8005ebe:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;  
 8005ec0:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8005ec2:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;  
 8005ec4:	7620      	strb	r0, [r4, #24]
 8005ec6:	e7b7      	b.n	8005e38 <USBH_CtlReq+0xa8>
    else if (URB_Status == USBH_URB_ERROR)
 8005ec8:	2804      	cmp	r0, #4
 8005eca:	d101      	bne.n	8005ed0 <USBH_CtlReq+0x140>
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif      
    }      
    else if (URB_Status == USBH_URB_ERROR)
    {
      phost->Control.state = CTRL_ERROR; 
 8005ecc:	230b      	movs	r3, #11
 8005ece:	e795      	b.n	8005dfc <USBH_CtlReq+0x6c>
     else if(URB_Status == USBH_URB_STALL)
 8005ed0:	2805      	cmp	r0, #5
 8005ed2:	f47f af64 	bne.w	8005d9e <USBH_CtlReq+0xe>
 8005ed6:	e7a8      	b.n	8005e2a <USBH_CtlReq+0x9a>
    USBH_CtlSendData (phost,
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2501      	movs	r5, #1
 8005edc:	7943      	ldrb	r3, [r0, #5]
 8005ede:	4611      	mov	r1, r2
 8005ee0:	9500      	str	r5, [sp, #0]
 8005ee2:	f000 f990 	bl	8006206 <USBH_CtlSendData>
     phost->Control.timer = phost->Timer;
 8005ee6:	f8d4 33b8 	ldr.w	r3, [r4, #952]	; 0x3b8
 8005eea:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005eec:	230a      	movs	r3, #10
 8005eee:	e776      	b.n	8005dde <USBH_CtlReq+0x4e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);  
 8005ef0:	7941      	ldrb	r1, [r0, #5]
 8005ef2:	f003 fa87 	bl	8009404 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8005ef6:	2801      	cmp	r0, #1
 8005ef8:	d0d9      	beq.n	8005eae <USBH_CtlReq+0x11e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005efa:	2802      	cmp	r0, #2
 8005efc:	d082      	beq.n	8005e04 <USBH_CtlReq+0x74>
    else if (URB_Status == USBH_URB_ERROR)
 8005efe:	2804      	cmp	r0, #4
 8005f00:	f47f af4d 	bne.w	8005d9e <USBH_CtlReq+0xe>
 8005f04:	e7e2      	b.n	8005ecc <USBH_CtlReq+0x13c>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be 
    required to clear the halt or error condition if the next Setup PID is not 
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005f06:	7e43      	ldrb	r3, [r0, #25]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	7643      	strb	r3, [r0, #25]
 8005f10:	d805      	bhi.n	8005f1e <USBH_CtlReq+0x18e>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8005f12:	f003 fa09 	bl	8009328 <USBH_LL_Stop>
         
      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP; 
 8005f16:	2001      	movs	r0, #1
 8005f18:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8005f1a:	70a0      	strb	r0, [r4, #2]
 8005f1c:	e78c      	b.n	8005e38 <USBH_CtlReq+0xa8>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005f1e:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8005f22:	2106      	movs	r1, #6
 8005f24:	4798      	blx	r3
      phost->Control.errorcount = 0;
 8005f26:	2300      	movs	r3, #0
 8005f28:	7663      	strb	r3, [r4, #25]
 8005f2a:	e7ad      	b.n	8005e88 <USBH_CtlReq+0xf8>

08005f2c <USBH_GetDescriptor>:
{ 
 8005f2c:	b430      	push	{r4, r5}
  if(phost->RequestState == CMD_SEND)
 8005f2e:	7884      	ldrb	r4, [r0, #2]
{ 
 8005f30:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 8005f34:	2c01      	cmp	r4, #1
 8005f36:	d10f      	bne.n	8005f58 <USBH_GetDescriptor+0x2c>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005f38:	f061 047f 	orn	r4, r1, #127	; 0x7f
    phost->Control.setup.b.wValue.w = value_idx;
 8005f3c:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005f3e:	2106      	movs	r1, #6
    phost->Control.setup.b.wLength.w = length; 
 8005f40:	82c5      	strh	r5, [r0, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005f42:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8005f44:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005f48:	7441      	strb	r1, [r0, #17]
    if ((value_idx & 0xff00) == USB_DESC_STRING)
 8005f4a:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
      phost->Control.setup.b.wIndex.w = 0x0409;
 8005f4e:	bf0c      	ite	eq
 8005f50:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0;
 8005f54:	2200      	movne	r2, #0
 8005f56:	8282      	strh	r2, [r0, #20]
  return USBH_CtlReq(phost, buff , length );     
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4619      	mov	r1, r3
}
 8005f5c:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff , length );     
 8005f5e:	f7ff bf17 	b.w	8005d90 <USBH_CtlReq>

08005f62 <USBH_Get_DevDesc>:
{
 8005f62:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8005f64:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8005f68:	460d      	mov	r5, r1
 8005f6a:	9100      	str	r1, [sp, #0]
 8005f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f70:	2100      	movs	r1, #0
{
 8005f72:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8005f74:	f7ff ffda 	bl	8005f2c <USBH_GetDescriptor>
 8005f78:	2800      	cmp	r0, #0
 8005f7a:	d149      	bne.n	8006010 <USBH_Get_DevDesc+0xae>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8005f7c:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  if (length > 8)
 8005f80:	2d08      	cmp	r5, #8
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8005f82:	f894 211f 	ldrb.w	r2, [r4, #287]	; 0x11f
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8005f86:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8005f8a:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8005f8e:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8005f92:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8005f96:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005f9a:	f8a4 3322 	strh.w	r3, [r4, #802]	; 0x322
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8005f9e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8005fa2:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8005fa6:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8005faa:	f884 3325 	strb.w	r3, [r4, #805]	; 0x325
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8005fae:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8005fb2:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8005fb6:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8005fba:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  if (length > 8)
 8005fbe:	d927      	bls.n	8006010 <USBH_Get_DevDesc+0xae>
    dev_desc->idVendor           = LE16 (buf +  8);
 8005fc0:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8005fc4:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8005fc8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    dev_desc->idProduct          = LE16 (buf + 10);
 8005fcc:	f894 2127 	ldrb.w	r2, [r4, #295]	; 0x127
    dev_desc->idVendor           = LE16 (buf +  8);
 8005fd0:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
    dev_desc->idProduct          = LE16 (buf + 10);
 8005fd4:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8005fd8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8005fdc:	f894 2129 	ldrb.w	r2, [r4, #297]	; 0x129
    dev_desc->idProduct          = LE16 (buf + 10);
 8005fe0:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8005fe4:	f894 3128 	ldrb.w	r3, [r4, #296]	; 0x128
 8005fe8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8005fec:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8005ff0:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8005ff4:	f884 332e 	strb.w	r3, [r4, #814]	; 0x32e
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8005ff8:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8005ffc:	f884 332f 	strb.w	r3, [r4, #815]	; 0x32f
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006000:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8006004:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006008:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800600c:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
}
 8006010:	b003      	add	sp, #12
 8006012:	bd30      	pop	{r4, r5, pc}

08006014 <USBH_Get_CfgDesc>:
{
 8006014:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  pData = phost->device.CfgDesc_Raw;
 8006018:	f100 051c 	add.w	r5, r0, #28
{
 800601c:	460f      	mov	r7, r1
  if((status = USBH_GetDescriptor(phost,
 800601e:	9100      	str	r1, [sp, #0]
 8006020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006024:	462b      	mov	r3, r5
 8006026:	2100      	movs	r1, #0
{
 8006028:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 800602a:	f7ff ff7f 	bl	8005f2c <USBH_GetDescriptor>
 800602e:	bb68      	cbnz	r0, 800608c <USBH_Get_CfgDesc+0x78>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006030:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006032:	2f09      	cmp	r7, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006034:	7fa6      	ldrb	r6, [r4, #30]
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006036:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800603a:	7f63      	ldrb	r3, [r4, #29]
 800603c:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006040:	7fe3      	ldrb	r3, [r4, #31]
 8006042:	eb06 2603 	add.w	r6, r6, r3, lsl #8
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006046:	f894 3020 	ldrb.w	r3, [r4, #32]
 800604a:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800604e:	b2b6      	uxth	r6, r6
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006050:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006054:	f8a4 6334 	strh.w	r6, [r4, #820]	; 0x334
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006058:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800605c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8006060:	f884 3338 	strb.w	r3, [r4, #824]	; 0x338
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006064:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8006068:	f884 3339 	strb.w	r3, [r4, #825]	; 0x339
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);    
 800606c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006070:	f884 333a 	strb.w	r3, [r4, #826]	; 0x33a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006074:	d90a      	bls.n	800608c <USBH_Get_CfgDesc+0x78>
 8006076:	4622      	mov	r2, r4
 8006078:	462b      	mov	r3, r5
 800607a:	4686      	mov	lr, r0
 800607c:	2109      	movs	r1, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800607e:	f04f 081a 	mov.w	r8, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES ) && (ptr < cfg_desc->wTotalLength))
 8006082:	f1be 0f02 	cmp.w	lr, #2
 8006086:	d001      	beq.n	800608c <USBH_Get_CfgDesc+0x78>
 8006088:	428e      	cmp	r6, r1
 800608a:	d802      	bhi.n	8006092 <USBH_Get_CfgDesc+0x7e>
}
 800608c:	b002      	add	sp, #8
 800608e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8006092:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 8006094:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 8006096:	4429      	add	r1, r5
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 8006098:	785d      	ldrb	r5, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 800609a:	b289      	uxth	r1, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE) 
 800609c:	2d04      	cmp	r5, #4
 800609e:	d1f0      	bne.n	8006082 <USBH_Get_CfgDesc+0x6e>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80060a0:	781d      	ldrb	r5, [r3, #0]
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80060a2:	fb08 f90e 	mul.w	r9, r8, lr
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80060a6:	f882 533c 	strb.w	r5, [r2, #828]	; 0x33c
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80060aa:	785d      	ldrb	r5, [r3, #1]
 80060ac:	f882 533d 	strb.w	r5, [r2, #829]	; 0x33d
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80060b0:	789d      	ldrb	r5, [r3, #2]
 80060b2:	f882 533e 	strb.w	r5, [r2, #830]	; 0x33e
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80060b6:	78dd      	ldrb	r5, [r3, #3]
 80060b8:	f882 533f 	strb.w	r5, [r2, #831]	; 0x33f
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80060bc:	791d      	ldrb	r5, [r3, #4]
 80060be:	f882 5340 	strb.w	r5, [r2, #832]	; 0x340
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80060c2:	795d      	ldrb	r5, [r3, #5]
 80060c4:	f882 5341 	strb.w	r5, [r2, #833]	; 0x341
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80060c8:	799d      	ldrb	r5, [r3, #6]
 80060ca:	f882 5342 	strb.w	r5, [r2, #834]	; 0x342
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80060ce:	79dd      	ldrb	r5, [r3, #7]
 80060d0:	f882 5343 	strb.w	r5, [r2, #835]	; 0x343
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80060d4:	7a1d      	ldrb	r5, [r3, #8]
 80060d6:	f882 5344 	strb.w	r5, [r2, #836]	; 0x344
        ep_ix = 0;
 80060da:	2500      	movs	r5, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80060dc:	f892 7340 	ldrb.w	r7, [r2, #832]	; 0x340
 80060e0:	42bd      	cmp	r5, r7
 80060e2:	db03      	blt.n	80060ec <USBH_Get_CfgDesc+0xd8>
 80060e4:	f10e 0e01 	add.w	lr, lr, #1
 80060e8:	321a      	adds	r2, #26
 80060ea:	e7ca      	b.n	8006082 <USBH_Get_CfgDesc+0x6e>
 80060ec:	428e      	cmp	r6, r1
 80060ee:	d9f9      	bls.n	80060e4 <USBH_Get_CfgDesc+0xd0>
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80060f0:	781f      	ldrb	r7, [r3, #0]
  pnext = (USBH_DescHeader_t *)((uint8_t *)pbuf + \
 80060f2:	443b      	add	r3, r7
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80060f4:	4439      	add	r1, r7
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 80060f6:	785f      	ldrb	r7, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)pbuf)->bLength;  
 80060f8:	b289      	uxth	r1, r1
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT) 
 80060fa:	2f05      	cmp	r7, #5
 80060fc:	d1ee      	bne.n	80060dc <USBH_Get_CfgDesc+0xc8>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80060fe:	1c6f      	adds	r7, r5, #1
 8006100:	f893 c000 	ldrb.w	ip, [r3]
 8006104:	eb09 05c7 	add.w	r5, r9, r7, lsl #3
 8006108:	4425      	add	r5, r4
 800610a:	f885 c33e 	strb.w	ip, [r5, #830]	; 0x33e
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800610e:	f893 c001 	ldrb.w	ip, [r3, #1]
 8006112:	f885 c33f 	strb.w	ip, [r5, #831]	; 0x33f
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006116:	f893 c002 	ldrb.w	ip, [r3, #2]
 800611a:	f885 c340 	strb.w	ip, [r5, #832]	; 0x340
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800611e:	f893 c003 	ldrb.w	ip, [r3, #3]
 8006122:	f885 c341 	strb.w	ip, [r5, #833]	; 0x341
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006126:	f893 a005 	ldrb.w	sl, [r3, #5]
 800612a:	f893 c004 	ldrb.w	ip, [r3, #4]
 800612e:	eb0c 2c0a 	add.w	ip, ip, sl, lsl #8
 8006132:	f8a5 c342 	strh.w	ip, [r5, #834]	; 0x342
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006136:	f893 c006 	ldrb.w	ip, [r3, #6]
 800613a:	f885 c344 	strb.w	ip, [r5, #836]	; 0x344
            ep_ix++;
 800613e:	b27d      	sxtb	r5, r7
 8006140:	e7cc      	b.n	80060dc <USBH_Get_CfgDesc+0xc8>

08006142 <USBH_Get_StringDesc>:
{
 8006142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 8006144:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8006148:	4614      	mov	r4, r2
 800614a:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8006152:	462b      	mov	r3, r5
 8006154:	2100      	movs	r1, #0
{
 8006156:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8006158:	f7ff fee8 	bl	8005f2c <USBH_GetDescriptor>
 800615c:	b978      	cbnz	r0, 800617e <USBH_Get_StringDesc+0x3c>
  if ( psrc[1] == USB_DESC_TYPE_STRING)
 800615e:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8006162:	2b03      	cmp	r3, #3
 8006164:	d10b      	bne.n	800617e <USBH_Get_StringDesc+0x3c>
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 8006166:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
    for (idx = 0; idx < strlength; idx+=2 )
 800616a:	4602      	mov	r2, r0
    strlength = ( ( (psrc[0]-2) <= length) ? (psrc[0]-2) :length); 
 800616c:	3b02      	subs	r3, #2
 800616e:	42bb      	cmp	r3, r7
 8006170:	bfa8      	it	ge
 8006172:	463b      	movge	r3, r7
 8006174:	b29b      	uxth	r3, r3
    for (idx = 0; idx < strlength; idx+=2 )
 8006176:	4293      	cmp	r3, r2
 8006178:	d803      	bhi.n	8006182 <USBH_Get_StringDesc+0x40>
    *pdest = 0; /* mark end of string */  
 800617a:	2300      	movs	r3, #0
 800617c:	7023      	strb	r3, [r4, #0]
}
 800617e:	b003      	add	sp, #12
 8006180:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8006182:	18a9      	adds	r1, r5, r2
    for (idx = 0; idx < strlength; idx+=2 )
 8006184:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 8006186:	7889      	ldrb	r1, [r1, #2]
    for (idx = 0; idx < strlength; idx+=2 )
 8006188:	b292      	uxth	r2, r2
      *pdest =  psrc[idx];
 800618a:	f804 1b01 	strb.w	r1, [r4], #1
 800618e:	e7f2      	b.n	8006176 <USBH_Get_StringDesc+0x34>

08006190 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8006190:	7883      	ldrb	r3, [r0, #2]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d106      	bne.n	80061a4 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006196:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006198:	2205      	movs	r2, #5
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800619a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800619c:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800619e:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0;
 80061a0:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0;
 80061a2:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );
 80061a4:	2200      	movs	r2, #0
 80061a6:	4611      	mov	r1, r2
 80061a8:	f7ff bdf2 	b.w	8005d90 <USBH_CtlReq>

080061ac <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 80061ac:	7883      	ldrb	r3, [r0, #2]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d106      	bne.n	80061c0 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80061b2:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80061b4:	2209      	movs	r2, #9
    phost->Control.setup.b.wValue.w = cfg_idx;
 80061b6:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE |\
 80061b8:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80061ba:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0;
 80061bc:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0; 
 80061be:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );      
 80061c0:	2200      	movs	r2, #0
 80061c2:	4611      	mov	r1, r2
 80061c4:	f7ff bde4 	b.w	8005d90 <USBH_CtlReq>

080061c8 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 80061c8:	7883      	ldrb	r3, [r0, #2]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d106      	bne.n	80061dc <USBH_ClrFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 80061ce:	2202      	movs	r2, #2
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80061d0:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80061d2:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 80061d4:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | 
 80061d6:	7402      	strb	r2, [r0, #16]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80061d8:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wLength.w = 0;           
 80061da:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0 , 0 );   
 80061dc:	2200      	movs	r2, #0
 80061de:	4611      	mov	r1, r2
 80061e0:	f7ff bdd6 	b.w	8005d90 <USBH_CtlReq>

080061e4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint8_t pipe_num)
{
 80061e4:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80061e6:	2308      	movs	r3, #8
{
 80061e8:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80061ea:	2400      	movs	r4, #0
{
 80061ec:	4615      	mov	r5, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80061ee:	9302      	str	r3, [sp, #8]
 80061f0:	9101      	str	r1, [sp, #4]
 80061f2:	4623      	mov	r3, r4
 80061f4:	9403      	str	r4, [sp, #12]
 80061f6:	4622      	mov	r2, r4
 80061f8:	9400      	str	r4, [sp, #0]
 80061fa:	4629      	mov	r1, r5
 80061fc:	f003 f8e8 	bl	80093d0 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */ 
                          0);
  return USBH_OK;  
}
 8006200:	4620      	mov	r0, r4
 8006202:	b005      	add	sp, #20
 8006204:	bd30      	pop	{r4, r5, pc}

08006206 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8006206:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006208:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800620c:	b085      	sub	sp, #20
 800620e:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006210:	2d00      	cmp	r5, #0
{
 8006212:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006216:	9202      	str	r2, [sp, #8]
    do_ping = 0;
 8006218:	bf18      	it	ne
 800621a:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800621c:	9101      	str	r1, [sp, #4]
 800621e:	4621      	mov	r1, r4
 8006220:	9303      	str	r3, [sp, #12]
 8006222:	2301      	movs	r3, #1
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	2300      	movs	r3, #0
 8006228:	461a      	mov	r2, r3
 800622a:	f003 f8d1 	bl	80093d0 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          do_ping);             /* do ping (HS Only)*/
  
  return USBH_OK;
}
 800622e:	2000      	movs	r0, #0
 8006230:	b005      	add	sp, #20
 8006232:	bd30      	pop	{r4, r5, pc}

08006234 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t* buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006234:	b530      	push	{r4, r5, lr}
 8006236:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006238:	2400      	movs	r4, #0
{
 800623a:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800623c:	9202      	str	r2, [sp, #8]
 800623e:	2201      	movs	r2, #1
 8006240:	9101      	str	r1, [sp, #4]
 8006242:	4623      	mov	r3, r4
 8006244:	9403      	str	r4, [sp, #12]
 8006246:	4629      	mov	r1, r5
 8006248:	9200      	str	r2, [sp, #0]
 800624a:	f003 f8c1 	bl	80093d0 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */ 
                          0);
  return USBH_OK;
  
}
 800624e:	4620      	mov	r0, r4
 8006250:	b005      	add	sp, #20
 8006252:	bd30      	pop	{r4, r5, pc}

08006254 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{ 
 8006254:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8006256:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{ 
 800625a:	b085      	sub	sp, #20
 800625c:	461c      	mov	r4, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 800625e:	2d00      	cmp	r5, #0
{ 
 8006260:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0;
  }
  
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006264:	9202      	str	r2, [sp, #8]
 8006266:	f04f 0200 	mov.w	r2, #0
    do_ping = 0;
 800626a:	bf18      	it	ne
 800626c:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800626e:	9101      	str	r1, [sp, #4]
 8006270:	4621      	mov	r1, r4
 8006272:	9303      	str	r3, [sp, #12]
 8006274:	2301      	movs	r3, #1
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	2302      	movs	r3, #2
 800627a:	f003 f8a9 	bl	80093d0 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800627e:	2000      	movs	r0, #0
 8006280:	b005      	add	sp, #20
 8006282:	bd30      	pop	{r4, r5, pc}

08006284 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost, 
                                uint8_t *buff, 
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006284:	b530      	push	{r4, r5, lr}
 8006286:	b085      	sub	sp, #20
 8006288:	461d      	mov	r5, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800628a:	2400      	movs	r4, #0
 800628c:	2302      	movs	r3, #2
 800628e:	9202      	str	r2, [sp, #8]
 8006290:	2201      	movs	r2, #1
 8006292:	9101      	str	r1, [sp, #4]
 8006294:	4629      	mov	r1, r5
 8006296:	9403      	str	r4, [sp, #12]
 8006298:	9200      	str	r2, [sp, #0]
 800629a:	f003 f899 	bl	80093d0 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */  
                          0);
  return USBH_OK;
}
 800629e:	4620      	mov	r0, r4
 80062a0:	b005      	add	sp, #20
 80062a2:	bd30      	pop	{r4, r5, pc}

080062a4 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80062a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 80062a6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80062aa:	9402      	str	r4, [sp, #8]
 80062ac:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80062b0:	9401      	str	r4, [sp, #4]
 80062b2:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80062b6:	9400      	str	r4, [sp, #0]
 80062b8:	f003 f864 	bl	8009384 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);
  
  return USBH_OK; 

}
 80062bc:	2000      	movs	r0, #0
 80062be:	b004      	add	sp, #16
 80062c0:	bd10      	pop	{r4, pc}

080062c2 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 80062c2:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 80062c4:	f003 f876 	bl	80093b4 <USBH_LL_ClosePipe>
  
  return USBH_OK; 

}
 80062c8:	2000      	movs	r0, #0
 80062ca:	bd08      	pop	{r3, pc}

080062cc <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80062cc:	b530      	push	{r4, r5, lr}
 80062ce:	2300      	movs	r3, #0
 80062d0:	f500 745f 	add.w	r4, r0, #892	; 0x37c
{
  uint8_t idx = 0;
  
  for (idx = 0 ; idx < 11 ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000) == 0)
 80062d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	042d      	lsls	r5, r5, #16
 80062dc:	d408      	bmi.n	80062f0 <USBH_AllocPipe+0x24>
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 80062de:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80062e2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return idx;
 80062e6:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000 | ep_addr;
 80062e8:	f8c0 137c 	str.w	r1, [r0, #892]	; 0x37c
}
 80062ec:	b2d0      	uxtb	r0, r2
 80062ee:	bd30      	pop	{r4, r5, pc}
 80062f0:	3301      	adds	r3, #1
  for (idx = 0 ; idx < 11 ; idx++)
 80062f2:	2b0b      	cmp	r3, #11
 80062f4:	d1ee      	bne.n	80062d4 <USBH_AllocPipe+0x8>
	} 
  }
  return 0xFFFF;
 80062f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062fa:	e7f7      	b.n	80062ec <USBH_AllocPipe+0x20>

080062fc <USBH_FreePipe>:
   if(idx < 11)
 80062fc:	290a      	cmp	r1, #10
 80062fe:	bf9f      	itttt	ls
 8006300:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFF;
 8006304:	f8d0 337c 	ldrls.w	r3, [r0, #892]	; 0x37c
 8006308:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 800630c:	f8c0 337c 	strls.w	r3, [r0, #892]	; 0x37c
}
 8006310:	2000      	movs	r0, #0
 8006312:	4770      	bx	lr

08006314 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006314:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <FATFS_LinkDriverEx+0x40>)
{
 8006316:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8006318:	7a5d      	ldrb	r5, [r3, #9]
 800631a:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800631e:	b9b5      	cbnz	r5, 800634e <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006320:	7a5d      	ldrb	r5, [r3, #9]
 8006322:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8006324:	7a5d      	ldrb	r5, [r3, #9]
 8006326:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800632a:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800632c:	7a58      	ldrb	r0, [r3, #9]
 800632e:	4418      	add	r0, r3
 8006330:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8006332:	7a5a      	ldrb	r2, [r3, #9]
 8006334:	b2d2      	uxtb	r2, r2
 8006336:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8006338:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800633a:	b2c0      	uxtb	r0, r0
 800633c:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800633e:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8006340:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 8006342:	4620      	mov	r0, r4
    path[1] = ':';
 8006344:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006346:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8006348:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 800634a:	708b      	strb	r3, [r1, #2]
 800634c:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800634e:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8006350:	bd30      	pop	{r4, r5, pc}
 8006352:	bf00      	nop
 8006354:	200000b4 	.word	0x200000b4

08006358 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8006358:	2200      	movs	r2, #0
 800635a:	f7ff bfdb 	b.w	8006314 <FATFS_LinkDriverEx>

0800635e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800635e:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8006360:	f000 ffc0 	bl	80072e4 <vTaskStartScheduler>
  
  return osOK;
}
 8006364:	2000      	movs	r0, #0
 8006366:	bd08      	pop	{r3, pc}

08006368 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8006368:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800636a:	f001 fa89 	bl	8007880 <xTaskGetSchedulerState>
  else
    return 1;
#else
	return (-1);
#endif	
}
 800636e:	f110 30ff 	adds.w	r0, r0, #4294967295
 8006372:	bf18      	it	ne
 8006374:	2001      	movne	r0, #1
 8006376:	bd08      	pop	{r3, pc}

08006378 <osKernelSysTick>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006378:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800637c:	b10b      	cbz	r3, 8006382 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 800637e:	f000 bfff 	b.w	8007380 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8006382:	f000 bff7 	b.w	8007374 <xTaskGetTickCount>

08006386 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006386:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006388:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 800638c:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800638e:	8a02      	ldrh	r2, [r0, #16]
{
 8006390:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8006392:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006394:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 8006398:	bf14      	ite	ne
 800639a:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800639c:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800639e:	a803      	add	r0, sp, #12
 80063a0:	9400      	str	r4, [sp, #0]
 80063a2:	9001      	str	r0, [sp, #4]
 80063a4:	4628      	mov	r0, r5
 80063a6:	f000 fec5 	bl	8007134 <xTaskCreate>
 80063aa:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80063ac:	bf0c      	ite	eq
 80063ae:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80063b0:	2000      	movne	r0, #0
}
 80063b2:	b005      	add	sp, #20
 80063b4:	bd30      	pop	{r4, r5, pc}

080063b6 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80063b6:	2800      	cmp	r0, #0
 80063b8:	bf08      	it	eq
 80063ba:	2001      	moveq	r0, #1
{
 80063bc:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80063be:	f001 f8f5 	bl	80075ac <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80063c2:	2000      	movs	r0, #0
 80063c4:	bd08      	pop	{r3, pc}

080063c6 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80063c6:	2200      	movs	r2, #0
 80063c8:	c803      	ldmia	r0, {r0, r1}
 80063ca:	f000 bbe3 	b.w	8006b94 <xQueueGenericCreate>
	...

080063d0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80063d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 80063d2:	2400      	movs	r4, #0
{
 80063d4:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80063d6:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 80063d8:	42a2      	cmp	r2, r4
 80063da:	bf08      	it	eq
 80063dc:	2201      	moveq	r2, #1
 80063de:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 80063e2:	b1ab      	cbz	r3, 8006410 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80063e4:	4623      	mov	r3, r4
 80063e6:	aa03      	add	r2, sp, #12
 80063e8:	a901      	add	r1, sp, #4
 80063ea:	f000 fcb5 	bl	8006d58 <xQueueGenericSendFromISR>
 80063ee:	2801      	cmp	r0, #1
 80063f0:	d002      	beq.n	80063f8 <osMessagePut+0x28>
      return osErrorOS;
 80063f2:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 80063f4:	b004      	add	sp, #16
 80063f6:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 80063f8:	9b03      	ldr	r3, [sp, #12]
 80063fa:	b13b      	cbz	r3, 800640c <osMessagePut+0x3c>
 80063fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006400:	4b06      	ldr	r3, [pc, #24]	; (800641c <osMessagePut+0x4c>)
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	f3bf 8f6f 	isb	sy
  return osOK;
 800640c:	2000      	movs	r0, #0
 800640e:	e7f1      	b.n	80063f4 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006410:	a901      	add	r1, sp, #4
 8006412:	f000 fbe3 	bl	8006bdc <xQueueGenericSend>
 8006416:	2801      	cmp	r0, #1
 8006418:	d1eb      	bne.n	80063f2 <osMessagePut+0x22>
 800641a:	e7f7      	b.n	800640c <osMessagePut+0x3c>
 800641c:	e000ed04 	.word	0xe000ed04

08006420 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006420:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8006422:	2600      	movs	r6, #0
{
 8006424:	b085      	sub	sp, #20
 8006426:	4604      	mov	r4, r0
 8006428:	4617      	mov	r7, r2
 800642a:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 800642c:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800642e:	9602      	str	r6, [sp, #8]
 8006430:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8006432:	b911      	cbnz	r1, 800643a <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8006434:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	e016      	b.n	8006468 <osMessageGet+0x48>
  taskWoken = pdFALSE;
 800643a:	9600      	str	r6, [sp, #0]
 800643c:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8006440:	b1cb      	cbz	r3, 8006476 <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006442:	466a      	mov	r2, sp
 8006444:	a902      	add	r1, sp, #8
 8006446:	f000 fdbb 	bl	8006fc0 <xQueueReceiveFromISR>
 800644a:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 800644c:	bf0a      	itet	eq
 800644e:	2310      	moveq	r3, #16
      event.status = osOK;
 8006450:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 8006452:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8006454:	9b00      	ldr	r3, [sp, #0]
 8006456:	b13b      	cbz	r3, 8006468 <osMessageGet+0x48>
 8006458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800645c:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <osMessageGet+0x70>)
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8006468:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800646c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006470:	4620      	mov	r0, r4
 8006472:	b005      	add	sp, #20
 8006474:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006476:	a902      	add	r1, sp, #8
 8006478:	f000 fcd8 	bl	8006e2c <xQueueGenericReceive>
 800647c:	2801      	cmp	r0, #1
 800647e:	d101      	bne.n	8006484 <osMessageGet+0x64>
      event.status = osEventMessage;
 8006480:	2310      	movs	r3, #16
 8006482:	e7d8      	b.n	8006436 <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006484:	2f00      	cmp	r7, #0
 8006486:	bf0c      	ite	eq
 8006488:	2300      	moveq	r3, #0
 800648a:	2340      	movne	r3, #64	; 0x40
 800648c:	e7d3      	b.n	8006436 <osMessageGet+0x16>
 800648e:	bf00      	nop
 8006490:	e000ed04 	.word	0xe000ed04

08006494 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8006494:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006496:	f001 f9f3 	bl	8007880 <xTaskGetSchedulerState>
 800649a:	2801      	cmp	r0, #1
 800649c:	d003      	beq.n	80064a6 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800649e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80064a2:	f000 b90f 	b.w	80066c4 <xPortSysTickHandler>
 80064a6:	bd08      	pop	{r3, pc}

080064a8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064a8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064ac:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064b0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064b2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064b4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064b6:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064b8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064ba:	6003      	str	r3, [r0, #0]
 80064bc:	4770      	bx	lr

080064be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	6103      	str	r3, [r0, #16]
 80064c2:	4770      	bx	lr

080064c4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80064c4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064c6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80064c8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064ca:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064d0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80064d2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80064d4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80064d6:	3301      	adds	r3, #1
 80064d8:	6003      	str	r3, [r0, #0]
 80064da:	4770      	bx	lr

080064dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80064dc:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80064de:	1c53      	adds	r3, r2, #1
{
 80064e0:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 80064e2:	d10a      	bne.n	80064fa <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80064e4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80064ea:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80064ec:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80064ee:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80064f0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80064f2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80064f4:	3301      	adds	r3, #1
 80064f6:	6003      	str	r3, [r0, #0]
 80064f8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064fa:	f100 0308 	add.w	r3, r0, #8
 80064fe:	685c      	ldr	r4, [r3, #4]
 8006500:	6825      	ldr	r5, [r4, #0]
 8006502:	42aa      	cmp	r2, r5
 8006504:	d3ef      	bcc.n	80064e6 <vListInsert+0xa>
 8006506:	4623      	mov	r3, r4
 8006508:	e7f9      	b.n	80064fe <vListInsert+0x22>

0800650a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800650a:	6841      	ldr	r1, [r0, #4]
 800650c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800650e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006510:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006512:	6882      	ldr	r2, [r0, #8]
 8006514:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006516:	6859      	ldr	r1, [r3, #4]
 8006518:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800651a:	bf08      	it	eq
 800651c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800651e:	2200      	movs	r2, #0
 8006520:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8006522:	6818      	ldr	r0, [r3, #0]
 8006524:	3801      	subs	r0, #1
 8006526:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8006528:	4770      	bx	lr
	...

0800652c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800652c:	4b0c      	ldr	r3, [pc, #48]	; (8006560 <prvTaskExitError+0x34>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	d00a      	beq.n	800654a <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006538:	b672      	cpsid	i
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	b662      	cpsie	i
 8006548:	e7fe      	b.n	8006548 <prvTaskExitError+0x1c>
 800654a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654e:	b672      	cpsid	i
 8006550:	f383 8811 	msr	BASEPRI, r3
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	b662      	cpsie	i
 800655e:	e7fe      	b.n	800655e <prvTaskExitError+0x32>
 8006560:	20000024 	.word	0x20000024

08006564 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006564:	4806      	ldr	r0, [pc, #24]	; (8006580 <prvPortStartFirstTask+0x1c>)
 8006566:	6800      	ldr	r0, [r0, #0]
 8006568:	6800      	ldr	r0, [r0, #0]
 800656a:	f380 8808 	msr	MSP, r0
 800656e:	b662      	cpsie	i
 8006570:	b661      	cpsie	f
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	df00      	svc	0
 800657c:	bf00      	nop
 800657e:	0000      	.short	0x0000
 8006580:	e000ed08 	.word	0xe000ed08

08006584 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006584:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006594 <vPortEnableVFP+0x10>
 8006588:	6801      	ldr	r1, [r0, #0]
 800658a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800658e:	6001      	str	r1, [r0, #0]
 8006590:	4770      	bx	lr
 8006592:	0000      	.short	0x0000
 8006594:	e000ed88 	.word	0xe000ed88

08006598 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800659c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065a0:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80065a4:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065a6:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065aa:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065ac:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80065ae:	f06f 0302 	mvn.w	r3, #2
 80065b2:	6203      	str	r3, [r0, #32]
}
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	0800652d 	.word	0x0800652d
 80065bc:	00000000 	.word	0x00000000

080065c0 <SVC_Handler>:
	__asm volatile (
 80065c0:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <pxCurrentTCBConst2>)
 80065c2:	6819      	ldr	r1, [r3, #0]
 80065c4:	6808      	ldr	r0, [r1, #0]
 80065c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ca:	f380 8809 	msr	PSP, r0
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f04f 0000 	mov.w	r0, #0
 80065d6:	f380 8811 	msr	BASEPRI, r0
 80065da:	4770      	bx	lr
 80065dc:	f3af 8000 	nop.w

080065e0 <pxCurrentTCBConst2>:
 80065e0:	200080e0 	.word	0x200080e0

080065e4 <vPortEnterCritical>:
 80065e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e8:	b672      	cpsid	i
 80065ea:	f383 8811 	msr	BASEPRI, r3
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	f3bf 8f4f 	dsb	sy
 80065f6:	b662      	cpsie	i
	uxCriticalNesting++;
 80065f8:	4a0b      	ldr	r2, [pc, #44]	; (8006628 <vPortEnterCritical+0x44>)
 80065fa:	6813      	ldr	r3, [r2, #0]
 80065fc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80065fe:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8006600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006602:	d10f      	bne.n	8006624 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006604:	4b09      	ldr	r3, [pc, #36]	; (800662c <vPortEnterCritical+0x48>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f013 0fff 	tst.w	r3, #255	; 0xff
 800660c:	d00a      	beq.n	8006624 <vPortEnterCritical+0x40>
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	b672      	cpsid	i
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	b662      	cpsie	i
 8006622:	e7fe      	b.n	8006622 <vPortEnterCritical+0x3e>
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000024 	.word	0x20000024
 800662c:	e000ed04 	.word	0xe000ed04

08006630 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006630:	4a09      	ldr	r2, [pc, #36]	; (8006658 <vPortExitCritical+0x28>)
 8006632:	6813      	ldr	r3, [r2, #0]
 8006634:	b953      	cbnz	r3, 800664c <vPortExitCritical+0x1c>
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	b672      	cpsid	i
 800663c:	f383 8811 	msr	BASEPRI, r3
 8006640:	f3bf 8f6f 	isb	sy
 8006644:	f3bf 8f4f 	dsb	sy
 8006648:	b662      	cpsie	i
 800664a:	e7fe      	b.n	800664a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800664c:	3b01      	subs	r3, #1
 800664e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006650:	b90b      	cbnz	r3, 8006656 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006652:	f383 8811 	msr	BASEPRI, r3
 8006656:	4770      	bx	lr
 8006658:	20000024 	.word	0x20000024
 800665c:	00000000 	.word	0x00000000

08006660 <PendSV_Handler>:
	__asm volatile
 8006660:	f3ef 8009 	mrs	r0, PSP
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <pxCurrentTCBConst>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	f01e 0f10 	tst.w	lr, #16
 8006670:	bf08      	it	eq
 8006672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	6010      	str	r0, [r2, #0]
 800667c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8006680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006684:	b672      	cpsid	i
 8006686:	f380 8811 	msr	BASEPRI, r0
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	b662      	cpsie	i
 8006694:	f000 ffec 	bl	8007670 <vTaskSwitchContext>
 8006698:	f04f 0000 	mov.w	r0, #0
 800669c:	f380 8811 	msr	BASEPRI, r0
 80066a0:	bc08      	pop	{r3}
 80066a2:	6819      	ldr	r1, [r3, #0]
 80066a4:	6808      	ldr	r0, [r1, #0]
 80066a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066aa:	f01e 0f10 	tst.w	lr, #16
 80066ae:	bf08      	it	eq
 80066b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066b4:	f380 8809 	msr	PSP, r0
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop

080066c0 <pxCurrentTCBConst>:
 80066c0:	200080e0 	.word	0x200080e0

080066c4 <xPortSysTickHandler>:
{
 80066c4:	b508      	push	{r3, lr}
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	b672      	cpsid	i
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80066da:	f000 fe59 	bl	8007390 <xTaskIncrementTick>
 80066de:	b118      	cbz	r0, 80066e8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e4:	4b02      	ldr	r3, [pc, #8]	; (80066f0 <xPortSysTickHandler+0x2c>)
 80066e6:	601a      	str	r2, [r3, #0]
	__asm volatile
 80066e8:	2300      	movs	r3, #0
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	bd08      	pop	{r3, pc}
 80066f0:	e000ed04 	.word	0xe000ed04

080066f4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80066f4:	4b06      	ldr	r3, [pc, #24]	; (8006710 <vPortSetupTimerInterrupt+0x1c>)
 80066f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006700:	4a04      	ldr	r2, [pc, #16]	; (8006714 <vPortSetupTimerInterrupt+0x20>)
 8006702:	3b01      	subs	r3, #1
 8006704:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006706:	2207      	movs	r2, #7
 8006708:	4b03      	ldr	r3, [pc, #12]	; (8006718 <vPortSetupTimerInterrupt+0x24>)
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	2000002c 	.word	0x2000002c
 8006714:	e000e014 	.word	0xe000e014
 8006718:	e000e010 	.word	0xe000e010

0800671c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800671c:	4b23      	ldr	r3, [pc, #140]	; (80067ac <xPortStartScheduler+0x90>)
{
 800671e:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006720:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006722:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006724:	b2d2      	uxtb	r2, r2
 8006726:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006728:	22ff      	movs	r2, #255	; 0xff
 800672a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800672c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800672e:	4a20      	ldr	r2, [pc, #128]	; (80067b0 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006730:	b2db      	uxtb	r3, r3
 8006732:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006736:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800673a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800673e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006740:	2207      	movs	r2, #7
 8006742:	4b1c      	ldr	r3, [pc, #112]	; (80067b4 <xPortStartScheduler+0x98>)
 8006744:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006746:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800674a:	1e54      	subs	r4, r2, #1
 800674c:	0600      	lsls	r0, r0, #24
 800674e:	d423      	bmi.n	8006798 <xPortStartScheduler+0x7c>
 8006750:	b101      	cbz	r1, 8006754 <xPortStartScheduler+0x38>
 8006752:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006758:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800675c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800675e:	9b01      	ldr	r3, [sp, #4]
 8006760:	4a12      	ldr	r2, [pc, #72]	; (80067ac <xPortStartScheduler+0x90>)
 8006762:	b2db      	uxtb	r3, r3
 8006764:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006766:	4b14      	ldr	r3, [pc, #80]	; (80067b8 <xPortStartScheduler+0x9c>)
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800676e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8006776:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8006778:	f7ff ffbc 	bl	80066f4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800677c:	2200      	movs	r2, #0
 800677e:	4b0f      	ldr	r3, [pc, #60]	; (80067bc <xPortStartScheduler+0xa0>)
 8006780:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8006782:	f7ff feff 	bl	8006584 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006786:	4a0e      	ldr	r2, [pc, #56]	; (80067c0 <xPortStartScheduler+0xa4>)
 8006788:	6813      	ldr	r3, [r2, #0]
 800678a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800678e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8006790:	f7ff fee8 	bl	8006564 <prvPortStartFirstTask>
	prvTaskExitError();
 8006794:	f7ff feca 	bl	800652c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006798:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800679c:	2101      	movs	r1, #1
 800679e:	0052      	lsls	r2, r2, #1
 80067a0:	b2d2      	uxtb	r2, r2
 80067a2:	f88d 2003 	strb.w	r2, [sp, #3]
 80067a6:	4622      	mov	r2, r4
 80067a8:	e7cd      	b.n	8006746 <xPortStartScheduler+0x2a>
 80067aa:	bf00      	nop
 80067ac:	e000e400 	.word	0xe000e400
 80067b0:	200000c0 	.word	0x200000c0
 80067b4:	200000c4 	.word	0x200000c4
 80067b8:	e000ed20 	.word	0xe000ed20
 80067bc:	20000024 	.word	0x20000024
 80067c0:	e000ef34 	.word	0xe000ef34

080067c4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80067c4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067c8:	2b0f      	cmp	r3, #15
 80067ca:	d910      	bls.n	80067ee <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067cc:	4a12      	ldr	r2, [pc, #72]	; (8006818 <vPortValidateInterruptPriority+0x54>)
 80067ce:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067d0:	4a12      	ldr	r2, [pc, #72]	; (800681c <vPortValidateInterruptPriority+0x58>)
 80067d2:	7812      	ldrb	r2, [r2, #0]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d90a      	bls.n	80067ee <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	b672      	cpsid	i
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	b662      	cpsie	i
 80067ec:	e7fe      	b.n	80067ec <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067ee:	4b0c      	ldr	r3, [pc, #48]	; (8006820 <vPortValidateInterruptPriority+0x5c>)
 80067f0:	4a0c      	ldr	r2, [pc, #48]	; (8006824 <vPortValidateInterruptPriority+0x60>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d90a      	bls.n	8006814 <vPortValidateInterruptPriority+0x50>
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	b672      	cpsid	i
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	b662      	cpsie	i
 8006812:	e7fe      	b.n	8006812 <vPortValidateInterruptPriority+0x4e>
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	e000e3f0 	.word	0xe000e3f0
 800681c:	200000c0 	.word	0x200000c0
 8006820:	e000ed0c 	.word	0xe000ed0c
 8006824:	200000c4 	.word	0x200000c4

08006828 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006828:	4b0f      	ldr	r3, [pc, #60]	; (8006868 <prvInsertBlockIntoFreeList+0x40>)
{
 800682a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	4282      	cmp	r2, r0
 8006830:	d318      	bcc.n	8006864 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006832:	685c      	ldr	r4, [r3, #4]
 8006834:	1919      	adds	r1, r3, r4
 8006836:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006838:	bf01      	itttt	eq
 800683a:	6841      	ldreq	r1, [r0, #4]
 800683c:	4618      	moveq	r0, r3
 800683e:	1909      	addeq	r1, r1, r4
 8006840:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006842:	6844      	ldr	r4, [r0, #4]
 8006844:	1901      	adds	r1, r0, r4
 8006846:	428a      	cmp	r2, r1
 8006848:	d107      	bne.n	800685a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800684a:	4908      	ldr	r1, [pc, #32]	; (800686c <prvInsertBlockIntoFreeList+0x44>)
 800684c:	6809      	ldr	r1, [r1, #0]
 800684e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006850:	bf1f      	itttt	ne
 8006852:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006854:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006856:	1909      	addne	r1, r1, r4
 8006858:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800685a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800685c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800685e:	bf18      	it	ne
 8006860:	6018      	strne	r0, [r3, #0]
 8006862:	bd10      	pop	{r4, pc}
 8006864:	4613      	mov	r3, r2
 8006866:	e7e1      	b.n	800682c <prvInsertBlockIntoFreeList+0x4>
 8006868:	200080d8 	.word	0x200080d8
 800686c:	200000c8 	.word	0x200000c8

08006870 <pvPortMalloc>:
{
 8006870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006874:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006876:	f000 fd75 	bl	8007364 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800687a:	4941      	ldr	r1, [pc, #260]	; (8006980 <pvPortMalloc+0x110>)
 800687c:	4d41      	ldr	r5, [pc, #260]	; (8006984 <pvPortMalloc+0x114>)
 800687e:	680b      	ldr	r3, [r1, #0]
 8006880:	bb0b      	cbnz	r3, 80068c6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8006882:	4a41      	ldr	r2, [pc, #260]	; (8006988 <pvPortMalloc+0x118>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006884:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006886:	4e41      	ldr	r6, [pc, #260]	; (800698c <pvPortMalloc+0x11c>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006888:	bf1b      	ittet	ne
 800688a:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800688c:	f502 4300 	addne.w	r3, r2, #32768	; 0x8000
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006890:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006894:	f020 0007 	bicne.w	r0, r0, #7
 8006898:	bf1c      	itt	ne
 800689a:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800689c:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800689e:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068a0:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068a2:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068a4:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 80068a6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068a8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 80068ac:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 80068ae:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068b0:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 80068b2:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80068b4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068b6:	4b36      	ldr	r3, [pc, #216]	; (8006990 <pvPortMalloc+0x120>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80068b8:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068ba:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80068bc:	4b35      	ldr	r3, [pc, #212]	; (8006994 <pvPortMalloc+0x124>)
 80068be:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80068c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068c4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80068c6:	682f      	ldr	r7, [r5, #0]
 80068c8:	4227      	tst	r7, r4
 80068ca:	d116      	bne.n	80068fa <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80068cc:	2c00      	cmp	r4, #0
 80068ce:	d042      	beq.n	8006956 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 80068d0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068d4:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068d6:	bf1c      	itt	ne
 80068d8:	f023 0307 	bicne.w	r3, r3, #7
 80068dc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068de:	b163      	cbz	r3, 80068fa <pvPortMalloc+0x8a>
 80068e0:	4a2c      	ldr	r2, [pc, #176]	; (8006994 <pvPortMalloc+0x124>)
 80068e2:	6816      	ldr	r6, [r2, #0]
 80068e4:	4690      	mov	r8, r2
 80068e6:	42b3      	cmp	r3, r6
 80068e8:	d807      	bhi.n	80068fa <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80068ea:	4a28      	ldr	r2, [pc, #160]	; (800698c <pvPortMalloc+0x11c>)
 80068ec:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ee:	6868      	ldr	r0, [r5, #4]
 80068f0:	4283      	cmp	r3, r0
 80068f2:	d804      	bhi.n	80068fe <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80068f4:	6809      	ldr	r1, [r1, #0]
 80068f6:	428d      	cmp	r5, r1
 80068f8:	d107      	bne.n	800690a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80068fa:	2400      	movs	r4, #0
 80068fc:	e02b      	b.n	8006956 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068fe:	682c      	ldr	r4, [r5, #0]
 8006900:	2c00      	cmp	r4, #0
 8006902:	d0f7      	beq.n	80068f4 <pvPortMalloc+0x84>
 8006904:	462a      	mov	r2, r5
 8006906:	4625      	mov	r5, r4
 8006908:	e7f1      	b.n	80068ee <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800690a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800690c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800690e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006910:	1ac2      	subs	r2, r0, r3
 8006912:	2a10      	cmp	r2, #16
 8006914:	d911      	bls.n	800693a <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006916:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006918:	0741      	lsls	r1, r0, #29
 800691a:	d00a      	beq.n	8006932 <pvPortMalloc+0xc2>
 800691c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006920:	b672      	cpsid	i
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	b662      	cpsie	i
 8006930:	e7fe      	b.n	8006930 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006932:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006934:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006936:	f7ff ff77 	bl	8006828 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800693a:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800693c:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800693e:	4914      	ldr	r1, [pc, #80]	; (8006990 <pvPortMalloc+0x120>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006940:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006942:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006944:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8006946:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006948:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800694c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800694e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006950:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006952:	bf38      	it	cc
 8006954:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8006956:	f000 fdaf 	bl	80074b8 <xTaskResumeAll>
		if( pvReturn == NULL )
 800695a:	b90c      	cbnz	r4, 8006960 <pvPortMalloc+0xf0>
			vApplicationMallocFailedHook();
 800695c:	f001 f8b2 	bl	8007ac4 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006960:	0763      	lsls	r3, r4, #29
 8006962:	d00a      	beq.n	800697a <pvPortMalloc+0x10a>
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	b672      	cpsid	i
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	b662      	cpsie	i
 8006978:	e7fe      	b.n	8006978 <pvPortMalloc+0x108>
}
 800697a:	4620      	mov	r0, r4
 800697c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006980:	200000c8 	.word	0x200000c8
 8006984:	200080cc 	.word	0x200080cc
 8006988:	200000cc 	.word	0x200000cc
 800698c:	200080d8 	.word	0x200080d8
 8006990:	200080d4 	.word	0x200080d4
 8006994:	200080d0 	.word	0x200080d0

08006998 <vPortFree>:
{
 8006998:	b510      	push	{r4, lr}
	if( pv != NULL )
 800699a:	4604      	mov	r4, r0
 800699c:	2800      	cmp	r0, #0
 800699e:	d032      	beq.n	8006a06 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069a0:	4a19      	ldr	r2, [pc, #100]	; (8006a08 <vPortFree+0x70>)
 80069a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80069a6:	6812      	ldr	r2, [r2, #0]
 80069a8:	4213      	tst	r3, r2
 80069aa:	d10a      	bne.n	80069c2 <vPortFree+0x2a>
 80069ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b0:	b672      	cpsid	i
 80069b2:	f383 8811 	msr	BASEPRI, r3
 80069b6:	f3bf 8f6f 	isb	sy
 80069ba:	f3bf 8f4f 	dsb	sy
 80069be:	b662      	cpsie	i
 80069c0:	e7fe      	b.n	80069c0 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069c2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80069c6:	b151      	cbz	r1, 80069de <vPortFree+0x46>
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	b672      	cpsid	i
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	b662      	cpsie	i
 80069dc:	e7fe      	b.n	80069dc <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80069de:	ea23 0302 	bic.w	r3, r3, r2
 80069e2:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80069e6:	f000 fcbd 	bl	8007364 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069ea:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <vPortFree+0x74>)
 80069ec:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069f0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80069f4:	6811      	ldr	r1, [r2, #0]
 80069f6:	440b      	add	r3, r1
 80069f8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80069fa:	f7ff ff15 	bl	8006828 <prvInsertBlockIntoFreeList>
}
 80069fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8006a02:	f000 bd59 	b.w	80074b8 <xTaskResumeAll>
 8006a06:	bd10      	pop	{r4, pc}
 8006a08:	200080cc 	.word	0x200080cc
 8006a0c:	200080d0 	.word	0x200080d0

08006a10 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a10:	b570      	push	{r4, r5, r6, lr}
 8006a12:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a14:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8006a16:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a18:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a1a:	b942      	cbnz	r2, 8006a2e <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a1c:	6805      	ldr	r5, [r0, #0]
 8006a1e:	b99d      	cbnz	r5, 8006a48 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006a20:	6840      	ldr	r0, [r0, #4]
 8006a22:	f000 ff83 	bl	800792c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8006a26:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8006a28:	3601      	adds	r6, #1
 8006a2a:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8006a2c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8006a2e:	b96d      	cbnz	r5, 8006a4c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006a30:	6880      	ldr	r0, [r0, #8]
 8006a32:	f002 fd71 	bl	8009518 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006a36:	68a3      	ldr	r3, [r4, #8]
 8006a38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006a3a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a3c:	6862      	ldr	r2, [r4, #4]
 8006a3e:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006a40:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a42:	d301      	bcc.n	8006a48 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8006a48:	2000      	movs	r0, #0
 8006a4a:	e7ed      	b.n	8006a28 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4c:	68c0      	ldr	r0, [r0, #12]
 8006a4e:	f002 fd63 	bl	8009518 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006a52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006a54:	68e2      	ldr	r2, [r4, #12]
 8006a56:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a58:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006a5a:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a5c:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006a5e:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006a60:	bf3e      	ittt	cc
 8006a62:	6862      	ldrcc	r2, [r4, #4]
 8006a64:	189b      	addcc	r3, r3, r2
 8006a66:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8006a68:	2d02      	cmp	r5, #2
 8006a6a:	d1ed      	bne.n	8006a48 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a6c:	b10e      	cbz	r6, 8006a72 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8006a6e:	3e01      	subs	r6, #1
 8006a70:	e7ea      	b.n	8006a48 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8006a72:	4630      	mov	r0, r6
 8006a74:	e7d8      	b.n	8006a28 <prvCopyDataToQueue+0x18>

08006a76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a76:	4603      	mov	r3, r0
 8006a78:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8006a7c:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a7e:	b162      	cbz	r2, 8006a9a <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006a80:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a82:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006a84:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a86:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006a88:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8006a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006a8e:	bf24      	itt	cs
 8006a90:	6819      	ldrcs	r1, [r3, #0]
 8006a92:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006a94:	68d9      	ldr	r1, [r3, #12]
 8006a96:	f002 bd3f 	b.w	8009518 <memcpy>
}
 8006a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006aa4:	f7ff fd9e 	bl	80065e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006aa8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006aac:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8006ab0:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ab2:	2d00      	cmp	r5, #0
 8006ab4:	dc14      	bgt.n	8006ae0 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ab6:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ab8:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8006abc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8006ac0:	f7ff fdb6 	bl	8006630 <vPortExitCritical>
	taskENTER_CRITICAL();
 8006ac4:	f7ff fd8e 	bl	80065e4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006ac8:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8006acc:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ace:	2d00      	cmp	r5, #0
 8006ad0:	dc12      	bgt.n	8006af8 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ad2:	23ff      	movs	r3, #255	; 0xff
 8006ad4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8006ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006adc:	f7ff bda8 	b.w	8006630 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d0e7      	beq.n	8006ab6 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f000 fe32 	bl	8007750 <xTaskRemoveFromEventList>
 8006aec:	b108      	cbz	r0, 8006af2 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8006aee:	f000 fec1 	bl	8007874 <vTaskMissedYield>
 8006af2:	3d01      	subs	r5, #1
 8006af4:	b26d      	sxtb	r5, r5
 8006af6:	e7dc      	b.n	8006ab2 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006af8:	6923      	ldr	r3, [r4, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0e9      	beq.n	8006ad2 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006afe:	4630      	mov	r0, r6
 8006b00:	f000 fe26 	bl	8007750 <xTaskRemoveFromEventList>
 8006b04:	b108      	cbz	r0, 8006b0a <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8006b06:	f000 feb5 	bl	8007874 <vTaskMissedYield>
 8006b0a:	3d01      	subs	r5, #1
 8006b0c:	b26d      	sxtb	r5, r5
 8006b0e:	e7de      	b.n	8006ace <prvUnlockQueue+0x2e>

08006b10 <xQueueGenericReset>:
{
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006b14:	4604      	mov	r4, r0
 8006b16:	b950      	cbnz	r0, 8006b2e <xQueueGenericReset+0x1e>
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	b672      	cpsid	i
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	b662      	cpsie	i
 8006b2c:	e7fe      	b.n	8006b2c <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8006b2e:	f7ff fd59 	bl	80065e4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006b32:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006b34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b36:	6822      	ldr	r2, [r4, #0]
 8006b38:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b3a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006b3c:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006b3e:	1a1b      	subs	r3, r3, r0
 8006b40:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006b42:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b44:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006b46:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b48:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b4a:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8006b4c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8006b54:	b995      	cbnz	r5, 8006b7c <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	b163      	cbz	r3, 8006b74 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b5a:	f104 0010 	add.w	r0, r4, #16
 8006b5e:	f000 fdf7 	bl	8007750 <xTaskRemoveFromEventList>
 8006b62:	b138      	cbz	r0, 8006b74 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8006b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b68:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <xQueueGenericReset+0x80>)
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8006b74:	f7ff fd5c 	bl	8006630 <vPortExitCritical>
}
 8006b78:	2001      	movs	r0, #1
 8006b7a:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b7c:	f104 0010 	add.w	r0, r4, #16
 8006b80:	f7ff fc92 	bl	80064a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006b88:	f7ff fc8e 	bl	80064a8 <vListInitialise>
 8006b8c:	e7f2      	b.n	8006b74 <xQueueGenericReset+0x64>
 8006b8e:	bf00      	nop
 8006b90:	e000ed04 	.word	0xe000ed04

08006b94 <xQueueGenericCreate>:
	{
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b98:	4606      	mov	r6, r0
 8006b9a:	b950      	cbnz	r0, 8006bb2 <xQueueGenericCreate+0x1e>
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	b672      	cpsid	i
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	b662      	cpsie	i
 8006bb0:	e7fe      	b.n	8006bb0 <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bb2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006bb4:	3048      	adds	r0, #72	; 0x48
 8006bb6:	f7ff fe5b 	bl	8006870 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006bba:	4604      	mov	r4, r0
 8006bbc:	b138      	cbz	r0, 8006bce <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8006bbe:	b945      	cbnz	r5, 8006bd2 <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006bc0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8006bc2:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bc4:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8006bc6:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f7ff ffa1 	bl	8006b10 <xQueueGenericReset>
	}
 8006bce:	4620      	mov	r0, r4
 8006bd0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006bd2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bd6:	6003      	str	r3, [r0, #0]
 8006bd8:	e7f3      	b.n	8006bc2 <xQueueGenericCreate+0x2e>
	...

08006bdc <xQueueGenericSend>:
{
 8006bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006be0:	4689      	mov	r9, r1
 8006be2:	9201      	str	r2, [sp, #4]
 8006be4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006be6:	4604      	mov	r4, r0
 8006be8:	b950      	cbnz	r0, 8006c00 <xQueueGenericSend+0x24>
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	b672      	cpsid	i
 8006bf0:	f383 8811 	msr	BASEPRI, r3
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	b662      	cpsie	i
 8006bfe:	e7fe      	b.n	8006bfe <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c00:	2900      	cmp	r1, #0
 8006c02:	f040 808c 	bne.w	8006d1e <xQueueGenericSend+0x142>
 8006c06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 8088 	beq.w	8006d1e <xQueueGenericSend+0x142>
 8006c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c12:	b672      	cpsid	i
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	b662      	cpsie	i
 8006c22:	e7fe      	b.n	8006c22 <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c24:	9e01      	ldr	r6, [sp, #4]
 8006c26:	2e00      	cmp	r6, #0
 8006c28:	f000 8084 	beq.w	8006d34 <xQueueGenericSend+0x158>
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	b672      	cpsid	i
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	b662      	cpsie	i
 8006c40:	e7fe      	b.n	8006c40 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c42:	9d01      	ldr	r5, [sp, #4]
 8006c44:	b91d      	cbnz	r5, 8006c4e <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 8006c46:	f7ff fcf3 	bl	8006630 <vPortExitCritical>
			return errQUEUE_FULL;
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	e058      	b.n	8006d00 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 8006c4e:	b916      	cbnz	r6, 8006c56 <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 8006c50:	a802      	add	r0, sp, #8
 8006c52:	f000 fdc1 	bl	80077d8 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8006c56:	f7ff fceb 	bl	8006630 <vPortExitCritical>
		vTaskSuspendAll();
 8006c5a:	f000 fb83 	bl	8007364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c5e:	f7ff fcc1 	bl	80065e4 <vPortEnterCritical>
 8006c62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006c66:	2bff      	cmp	r3, #255	; 0xff
 8006c68:	d101      	bne.n	8006c6e <xQueueGenericSend+0x92>
 8006c6a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8006c6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006c72:	2bff      	cmp	r3, #255	; 0xff
 8006c74:	d101      	bne.n	8006c7a <xQueueGenericSend+0x9e>
 8006c76:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8006c7a:	f7ff fcd9 	bl	8006630 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c7e:	a901      	add	r1, sp, #4
 8006c80:	a802      	add	r0, sp, #8
 8006c82:	f000 fdb9 	bl	80077f8 <xTaskCheckForTimeOut>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d143      	bne.n	8006d12 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c8a:	f7ff fcab 	bl	80065e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c8e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006c90:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8006c92:	f7ff fccd 	bl	8006630 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c96:	42ae      	cmp	r6, r5
 8006c98:	d135      	bne.n	8006d06 <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c9a:	9901      	ldr	r1, [sp, #4]
 8006c9c:	f104 0010 	add.w	r0, r4, #16
 8006ca0:	f000 fd3a 	bl	8007718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f7ff fefb 	bl	8006aa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006caa:	f000 fc05 	bl	80074b8 <xTaskResumeAll>
 8006cae:	b938      	cbnz	r0, 8006cc0 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8006cb0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006cb4:	f8ca 3000 	str.w	r3, [sl]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006cc2:	f7ff fc8f 	bl	80065e4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cc6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006cc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d301      	bcc.n	8006cd2 <xQueueGenericSend+0xf6>
 8006cce:	2f02      	cmp	r7, #2
 8006cd0:	d1b7      	bne.n	8006c42 <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cd2:	463a      	mov	r2, r7
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f7ff fe9a 	bl	8006a10 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cde:	b11b      	cbz	r3, 8006ce8 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ce0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006ce4:	f000 fd34 	bl	8007750 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8006ce8:	b138      	cbz	r0, 8006cfa <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8006cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cee:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <xQueueGenericSend+0x178>)
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006cfa:	f7ff fc99 	bl	8006630 <vPortExitCritical>
				return pdPASS;
 8006cfe:	2001      	movs	r0, #1
}
 8006d00:	b004      	add	sp, #16
 8006d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8006d06:	4620      	mov	r0, r4
 8006d08:	f7ff feca 	bl	8006aa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d0c:	f000 fbd4 	bl	80074b8 <xTaskResumeAll>
 8006d10:	e7d6      	b.n	8006cc0 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8006d12:	4620      	mov	r0, r4
 8006d14:	f7ff fec4 	bl	8006aa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d18:	f000 fbce 	bl	80074b8 <xTaskResumeAll>
 8006d1c:	e795      	b.n	8006c4a <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d1e:	2f02      	cmp	r7, #2
 8006d20:	d102      	bne.n	8006d28 <xQueueGenericSend+0x14c>
 8006d22:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d10a      	bne.n	8006d3e <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d28:	f000 fdaa 	bl	8007880 <xTaskGetSchedulerState>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f43f af79 	beq.w	8006c24 <xQueueGenericSend+0x48>
 8006d32:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006d34:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8006d38:	f8df a018 	ldr.w	sl, [pc, #24]	; 8006d54 <xQueueGenericSend+0x178>
 8006d3c:	e7c1      	b.n	8006cc2 <xQueueGenericSend+0xe6>
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	b672      	cpsid	i
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	b662      	cpsie	i
 8006d52:	e7fe      	b.n	8006d52 <xQueueGenericSend+0x176>
 8006d54:	e000ed04 	.word	0xe000ed04

08006d58 <xQueueGenericSendFromISR>:
{
 8006d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d5c:	4688      	mov	r8, r1
 8006d5e:	4691      	mov	r9, r2
 8006d60:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006d62:	4604      	mov	r4, r0
 8006d64:	b950      	cbnz	r0, 8006d7c <xQueueGenericSendFromISR+0x24>
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	b672      	cpsid	i
 8006d6c:	f383 8811 	msr	BASEPRI, r3
 8006d70:	f3bf 8f6f 	isb	sy
 8006d74:	f3bf 8f4f 	dsb	sy
 8006d78:	b662      	cpsie	i
 8006d7a:	e7fe      	b.n	8006d7a <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d7c:	bb19      	cbnz	r1, 8006dc6 <xQueueGenericSendFromISR+0x6e>
 8006d7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006d80:	b30b      	cbz	r3, 8006dc6 <xQueueGenericSendFromISR+0x6e>
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	b672      	cpsid	i
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	b662      	cpsie	i
 8006d96:	e7fe      	b.n	8006d96 <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006d9c:	f000 fcd8 	bl	8007750 <xTaskRemoveFromEventList>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d036      	beq.n	8006e12 <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 8006da4:	f1b9 0f00 	cmp.w	r9, #0
 8006da8:	d033      	beq.n	8006e12 <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006daa:	2001      	movs	r0, #1
 8006dac:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8006db0:	f386 8811 	msr	BASEPRI, r6
}
 8006db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006db8:	3501      	adds	r5, #1
 8006dba:	b26d      	sxtb	r5, r5
 8006dbc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006dc0:	e027      	b.n	8006e12 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	e7f4      	b.n	8006db0 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dc6:	2f02      	cmp	r7, #2
 8006dc8:	d102      	bne.n	8006dd0 <xQueueGenericSendFromISR+0x78>
 8006dca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d122      	bne.n	8006e16 <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dd0:	f7ff fcf8 	bl	80067c4 <vPortValidateInterruptPriority>
	__asm volatile
 8006dd4:	f3ef 8611 	mrs	r6, BASEPRI
 8006dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ddc:	b672      	cpsid	i
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006dee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d301      	bcc.n	8006df8 <xQueueGenericSendFromISR+0xa0>
 8006df4:	2f02      	cmp	r7, #2
 8006df6:	d1e4      	bne.n	8006dc2 <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006df8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dfc:	463a      	mov	r2, r7
 8006dfe:	4641      	mov	r1, r8
 8006e00:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8006e02:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e04:	f7ff fe04 	bl	8006a10 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006e08:	1c6b      	adds	r3, r5, #1
 8006e0a:	d1d5      	bne.n	8006db8 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1c2      	bne.n	8006d98 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8006e12:	2001      	movs	r0, #1
 8006e14:	e7cc      	b.n	8006db0 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1a:	b672      	cpsid	i
 8006e1c:	f383 8811 	msr	BASEPRI, r3
 8006e20:	f3bf 8f6f 	isb	sy
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	b662      	cpsie	i
 8006e2a:	e7fe      	b.n	8006e2a <xQueueGenericSendFromISR+0xd2>

08006e2c <xQueueGenericReceive>:
{
 8006e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e30:	4688      	mov	r8, r1
 8006e32:	9201      	str	r2, [sp, #4]
 8006e34:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8006e36:	4604      	mov	r4, r0
 8006e38:	b950      	cbnz	r0, 8006e50 <xQueueGenericReceive+0x24>
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	b672      	cpsid	i
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	b662      	cpsie	i
 8006e4e:	e7fe      	b.n	8006e4e <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e50:	2900      	cmp	r1, #0
 8006e52:	f040 80a9 	bne.w	8006fa8 <xQueueGenericReceive+0x17c>
 8006e56:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 80a5 	beq.w	8006fa8 <xQueueGenericReceive+0x17c>
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	b672      	cpsid	i
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	b662      	cpsie	i
 8006e72:	e7fe      	b.n	8006e72 <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e74:	9e01      	ldr	r6, [sp, #4]
 8006e76:	2e00      	cmp	r6, #0
 8006e78:	f000 809c 	beq.w	8006fb4 <xQueueGenericReceive+0x188>
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	b672      	cpsid	i
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	b662      	cpsie	i
 8006e90:	e7fe      	b.n	8006e90 <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8006e94:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d06d      	beq.n	8006f76 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e9a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006e9e:	e05f      	b.n	8006f60 <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ea0:	9d01      	ldr	r5, [sp, #4]
 8006ea2:	b91d      	cbnz	r5, 8006eac <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 8006ea4:	f7ff fbc4 	bl	8006630 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	e067      	b.n	8006f7c <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 8006eac:	b916      	cbnz	r6, 8006eb4 <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 8006eae:	a802      	add	r0, sp, #8
 8006eb0:	f000 fc92 	bl	80077d8 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8006eb4:	f7ff fbbc 	bl	8006630 <vPortExitCritical>
		vTaskSuspendAll();
 8006eb8:	f000 fa54 	bl	8007364 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ebc:	f7ff fb92 	bl	80065e4 <vPortEnterCritical>
 8006ec0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006ec4:	2bff      	cmp	r3, #255	; 0xff
 8006ec6:	d101      	bne.n	8006ecc <xQueueGenericReceive+0xa0>
 8006ec8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8006ecc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006ed0:	2bff      	cmp	r3, #255	; 0xff
 8006ed2:	d101      	bne.n	8006ed8 <xQueueGenericReceive+0xac>
 8006ed4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ed8:	f7ff fbaa 	bl	8006630 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006edc:	a901      	add	r1, sp, #4
 8006ede:	a802      	add	r0, sp, #8
 8006ee0:	f000 fc8a 	bl	80077f8 <xTaskCheckForTimeOut>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d152      	bne.n	8006f8e <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 8006ee8:	f7ff fb7c 	bl	80065e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006eec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8006eee:	f7ff fb9f 	bl	8006630 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef2:	2d00      	cmp	r5, #0
 8006ef4:	d145      	bne.n	8006f82 <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	b933      	cbnz	r3, 8006f08 <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 8006efa:	f7ff fb73 	bl	80065e4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006efe:	6860      	ldr	r0, [r4, #4]
 8006f00:	f000 fcce 	bl	80078a0 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8006f04:	f7ff fb94 	bl	8006630 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f08:	9901      	ldr	r1, [sp, #4]
 8006f0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006f0e:	f000 fc03 	bl	8007718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f12:	4620      	mov	r0, r4
 8006f14:	f7ff fdc4 	bl	8006aa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f18:	f000 face 	bl	80074b8 <xTaskResumeAll>
 8006f1c:	b938      	cbnz	r0, 8006f2e <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 8006f1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f22:	f8ca 3000 	str.w	r3, [sl]
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	f3bf 8f6f 	isb	sy
 8006f2e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006f30:	f7ff fb58 	bl	80065e4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f34:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f36:	2d00      	cmp	r5, #0
 8006f38:	d0b2      	beq.n	8006ea0 <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f3a:	4641      	mov	r1, r8
 8006f3c:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8006f3e:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f40:	f7ff fd99 	bl	8006a76 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8006f44:	f1b9 0f00 	cmp.w	r9, #0
 8006f48:	d1a3      	bne.n	8006e92 <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006f4a:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f4c:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006f4e:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f50:	b913      	cbnz	r3, 8006f58 <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006f52:	f000 fd3f 	bl	80079d4 <pvTaskIncrementMutexHeldCount>
 8006f56:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f58:	6923      	ldr	r3, [r4, #16]
 8006f5a:	b163      	cbz	r3, 8006f76 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f5c:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f60:	f000 fbf6 	bl	8007750 <xTaskRemoveFromEventList>
 8006f64:	b138      	cbz	r0, 8006f76 <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 8006f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f6a:	4b14      	ldr	r3, [pc, #80]	; (8006fbc <xQueueGenericReceive+0x190>)
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006f76:	f7ff fb5b 	bl	8006630 <vPortExitCritical>
				return pdPASS;
 8006f7a:	2001      	movs	r0, #1
}
 8006f7c:	b004      	add	sp, #16
 8006f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8006f82:	4620      	mov	r0, r4
 8006f84:	f7ff fd8c 	bl	8006aa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f88:	f000 fa96 	bl	80074b8 <xTaskResumeAll>
 8006f8c:	e7cf      	b.n	8006f2e <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 8006f8e:	4620      	mov	r0, r4
 8006f90:	f7ff fd86 	bl	8006aa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f94:	f000 fa90 	bl	80074b8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8006f98:	f7ff fb24 	bl	80065e4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f9c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8006f9e:	f7ff fb47 	bl	8006630 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fa2:	2d00      	cmp	r5, #0
 8006fa4:	d1c3      	bne.n	8006f2e <xQueueGenericReceive+0x102>
 8006fa6:	e77f      	b.n	8006ea8 <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fa8:	f000 fc6a 	bl	8007880 <xTaskGetSchedulerState>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	f43f af61 	beq.w	8006e74 <xQueueGenericReceive+0x48>
 8006fb2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8006fb4:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8006fb6:	f8df a004 	ldr.w	sl, [pc, #4]	; 8006fbc <xQueueGenericReceive+0x190>
 8006fba:	e7b9      	b.n	8006f30 <xQueueGenericReceive+0x104>
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <xQueueReceiveFromISR>:
{
 8006fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fc4:	4689      	mov	r9, r1
 8006fc6:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8006fc8:	4605      	mov	r5, r0
 8006fca:	b950      	cbnz	r0, 8006fe2 <xQueueReceiveFromISR+0x22>
 8006fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd0:	b672      	cpsid	i
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	b662      	cpsie	i
 8006fe0:	e7fe      	b.n	8006fe0 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fe2:	bb81      	cbnz	r1, 8007046 <xQueueReceiveFromISR+0x86>
 8006fe4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006fe6:	b373      	cbz	r3, 8007046 <xQueueReceiveFromISR+0x86>
 8006fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fec:	b672      	cpsid	i
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	b662      	cpsie	i
 8006ffc:	e7fe      	b.n	8006ffc <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ffe:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007002:	4649      	mov	r1, r9
 8007004:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8007006:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8007008:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800700a:	f7ff fd34 	bl	8006a76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800700e:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8007010:	1c73      	adds	r3, r6, #1
 8007012:	d113      	bne.n	800703c <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007014:	692b      	ldr	r3, [r5, #16]
 8007016:	b90b      	cbnz	r3, 800701c <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 8007018:	2001      	movs	r0, #1
 800701a:	e00b      	b.n	8007034 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800701c:	f105 0010 	add.w	r0, r5, #16
 8007020:	f000 fb96 	bl	8007750 <xTaskRemoveFromEventList>
 8007024:	2800      	cmp	r0, #0
 8007026:	d0f7      	beq.n	8007018 <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 8007028:	f1b8 0f00 	cmp.w	r8, #0
 800702c:	d0f4      	beq.n	8007018 <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800702e:	2001      	movs	r0, #1
 8007030:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8007034:	f387 8811 	msr	BASEPRI, r7
}
 8007038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800703c:	3601      	adds	r6, #1
 800703e:	b276      	sxtb	r6, r6
 8007040:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8007044:	e7e8      	b.n	8007018 <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007046:	f7ff fbbd 	bl	80067c4 <vPortValidateInterruptPriority>
	__asm volatile
 800704a:	f3ef 8711 	mrs	r7, BASEPRI
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	b672      	cpsid	i
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007062:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007064:	2c00      	cmp	r4, #0
 8007066:	d1ca      	bne.n	8006ffe <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 8007068:	4620      	mov	r0, r4
 800706a:	e7e3      	b.n	8007034 <xQueueReceiveFromISR+0x74>

0800706c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800706c:	4a06      	ldr	r2, [pc, #24]	; (8007088 <prvResetNextTaskUnblockTime+0x1c>)
 800706e:	6813      	ldr	r3, [r2, #0]
 8007070:	6819      	ldr	r1, [r3, #0]
 8007072:	4b06      	ldr	r3, [pc, #24]	; (800708c <prvResetNextTaskUnblockTime+0x20>)
 8007074:	b919      	cbnz	r1, 800707e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007076:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007082:	68d2      	ldr	r2, [r2, #12]
 8007084:	6852      	ldr	r2, [r2, #4]
 8007086:	e7f8      	b.n	800707a <prvResetNextTaskUnblockTime+0xe>
 8007088:	200080e4 	.word	0x200080e4
 800708c:	200081bc 	.word	0x200081bc

08007090 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007092:	4b1b      	ldr	r3, [pc, #108]	; (8007100 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8007094:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007096:	4e1b      	ldr	r6, [pc, #108]	; (8007104 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8007098:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800709a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800709c:	6830      	ldr	r0, [r6, #0]
 800709e:	3004      	adds	r0, #4
 80070a0:	f7ff fa33 	bl	800650a <uxListRemove>
 80070a4:	4633      	mov	r3, r6
 80070a6:	b940      	cbnz	r0, 80070ba <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80070a8:	6831      	ldr	r1, [r6, #0]
 80070aa:	2001      	movs	r0, #1
 80070ac:	4e16      	ldr	r6, [pc, #88]	; (8007108 <prvAddCurrentTaskToDelayedList+0x78>)
 80070ae:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80070b0:	6832      	ldr	r2, [r6, #0]
 80070b2:	4088      	lsls	r0, r1
 80070b4:	ea22 0200 	bic.w	r2, r2, r0
 80070b8:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80070ba:	1c62      	adds	r2, r4, #1
 80070bc:	d107      	bne.n	80070ce <prvAddCurrentTaskToDelayedList+0x3e>
 80070be:	b137      	cbz	r7, 80070ce <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070c0:	6819      	ldr	r1, [r3, #0]
 80070c2:	4812      	ldr	r0, [pc, #72]	; (800710c <prvAddCurrentTaskToDelayedList+0x7c>)
 80070c4:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80070c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ca:	f7ff b9fb 	b.w	80064c4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80070ce:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070d0:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80070d2:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070d4:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80070d6:	d907      	bls.n	80070e8 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070d8:	4a0d      	ldr	r2, [pc, #52]	; (8007110 <prvAddCurrentTaskToDelayedList+0x80>)
 80070da:	6810      	ldr	r0, [r2, #0]
 80070dc:	6819      	ldr	r1, [r3, #0]
}
 80070de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070e2:	3104      	adds	r1, #4
 80070e4:	f7ff b9fa 	b.w	80064dc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070e8:	4a0a      	ldr	r2, [pc, #40]	; (8007114 <prvAddCurrentTaskToDelayedList+0x84>)
 80070ea:	6810      	ldr	r0, [r2, #0]
 80070ec:	6819      	ldr	r1, [r3, #0]
 80070ee:	3104      	adds	r1, #4
 80070f0:	f7ff f9f4 	bl	80064dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070f4:	4b08      	ldr	r3, [pc, #32]	; (8007118 <prvAddCurrentTaskToDelayedList+0x88>)
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	4294      	cmp	r4, r2
 80070fa:	d200      	bcs.n	80070fe <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 80070fc:	601c      	str	r4, [r3, #0]
 80070fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007100:	20008204 	.word	0x20008204
 8007104:	200080e0 	.word	0x200080e0
 8007108:	2000818c 	.word	0x2000818c
 800710c:	200081dc 	.word	0x200081dc
 8007110:	200080e8 	.word	0x200080e8
 8007114:	200080e4 	.word	0x200080e4
 8007118:	200081bc 	.word	0x200081bc

0800711c <prvTaskIsTaskSuspended.part.0>:
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007120:	b672      	cpsid	i
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	b662      	cpsie	i
 8007130:	e7fe      	b.n	8007130 <prvTaskIsTaskSuspended.part.0+0x14>
	...

08007134 <xTaskCreate>:
	{
 8007134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007138:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 800713c:	4680      	mov	r8, r0
 800713e:	460d      	mov	r5, r1
 8007140:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007142:	4650      	mov	r0, sl
	{
 8007144:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007146:	f7ff fb93 	bl	8006870 <pvPortMalloc>
			if( pxStack != NULL )
 800714a:	4607      	mov	r7, r0
 800714c:	2800      	cmp	r0, #0
 800714e:	f000 809e 	beq.w	800728e <xTaskCreate+0x15a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007152:	2058      	movs	r0, #88	; 0x58
 8007154:	f7ff fb8c 	bl	8006870 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8007158:	4604      	mov	r4, r0
 800715a:	2800      	cmp	r0, #0
 800715c:	f000 8094 	beq.w	8007288 <xTaskCreate+0x154>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007160:	4652      	mov	r2, sl
					pxNewTCB->pxStack = pxStack;
 8007162:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007164:	21a5      	movs	r1, #165	; 0xa5
 8007166:	4638      	mov	r0, r7
 8007168:	f002 f9e1 	bl	800952e <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800716c:	f1aa 0a04 	sub.w	sl, sl, #4
 8007170:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007172:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8007176:	449a      	add	sl, r3
 8007178:	1e6b      	subs	r3, r5, #1
 800717a:	350f      	adds	r5, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800717c:	f02a 0a07 	bic.w	sl, sl, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007180:	7859      	ldrb	r1, [r3, #1]
 8007182:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8007186:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800718a:	b109      	cbz	r1, 8007190 <xTaskCreate+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800718c:	42ab      	cmp	r3, r5
 800718e:	d1f7      	bne.n	8007180 <xTaskCreate+0x4c>
 8007190:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007192:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007196:	1d27      	adds	r7, r4, #4
 8007198:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800719a:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800719e:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 80071a0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 80071a4:	bf28      	it	cs
 80071a6:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80071a8:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80071aa:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071ac:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071b0:	f7ff f985 	bl	80064be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071b4:	f104 0018 	add.w	r0, r4, #24
 80071b8:	f7ff f981 	bl	80064be <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80071bc:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071c0:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071c2:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c4:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071c6:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071c8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071ca:	4650      	mov	r0, sl
		pxNewTCB->pxTaskTag = NULL;
 80071cc:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071d0:	f884 b054 	strb.w	fp, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071d4:	f7ff f9e0 	bl	8006598 <pxPortInitialiseStack>
 80071d8:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80071da:	b106      	cbz	r6, 80071de <xTaskCreate+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071dc:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80071de:	f7ff fa01 	bl	80065e4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80071e2:	4b32      	ldr	r3, [pc, #200]	; (80072ac <xTaskCreate+0x178>)
		if( pxCurrentTCB == NULL )
 80071e4:	4e32      	ldr	r6, [pc, #200]	; (80072b0 <xTaskCreate+0x17c>)
		uxCurrentNumberOfTasks++;
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80072dc <xTaskCreate+0x1a8>
 80071ec:	3201      	adds	r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80071f0:	6835      	ldr	r5, [r6, #0]
 80071f2:	2d00      	cmp	r5, #0
 80071f4:	d14e      	bne.n	8007294 <xTaskCreate+0x160>
			pxCurrentTCB = pxNewTCB;
 80071f6:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d11d      	bne.n	800723a <xTaskCreate+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071fe:	eb08 0005 	add.w	r0, r8, r5
 8007202:	3514      	adds	r5, #20
 8007204:	f7ff f950 	bl	80064a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007208:	2d8c      	cmp	r5, #140	; 0x8c
 800720a:	d1f8      	bne.n	80071fe <xTaskCreate+0xca>
	vListInitialise( &xDelayedTaskList1 );
 800720c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80072e0 <xTaskCreate+0x1ac>
	vListInitialise( &xDelayedTaskList2 );
 8007210:	4d28      	ldr	r5, [pc, #160]	; (80072b4 <xTaskCreate+0x180>)
	vListInitialise( &xDelayedTaskList1 );
 8007212:	4648      	mov	r0, r9
 8007214:	f7ff f948 	bl	80064a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007218:	4628      	mov	r0, r5
 800721a:	f7ff f945 	bl	80064a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800721e:	4826      	ldr	r0, [pc, #152]	; (80072b8 <xTaskCreate+0x184>)
 8007220:	f7ff f942 	bl	80064a8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007224:	4825      	ldr	r0, [pc, #148]	; (80072bc <xTaskCreate+0x188>)
 8007226:	f7ff f93f 	bl	80064a8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800722a:	4825      	ldr	r0, [pc, #148]	; (80072c0 <xTaskCreate+0x18c>)
 800722c:	f7ff f93c 	bl	80064a8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007230:	4b24      	ldr	r3, [pc, #144]	; (80072c4 <xTaskCreate+0x190>)
 8007232:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007236:	4b24      	ldr	r3, [pc, #144]	; (80072c8 <xTaskCreate+0x194>)
 8007238:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800723a:	4a24      	ldr	r2, [pc, #144]	; (80072cc <xTaskCreate+0x198>)
		prvAddTaskToReadyList( pxNewTCB );
 800723c:	2501      	movs	r5, #1
 800723e:	4924      	ldr	r1, [pc, #144]	; (80072d0 <xTaskCreate+0x19c>)
		uxTaskNumber++;
 8007240:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007242:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8007244:	3301      	adds	r3, #1
 8007246:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007248:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800724a:	fa05 f302 	lsl.w	r3, r5, r2
 800724e:	4303      	orrs	r3, r0
 8007250:	2014      	movs	r0, #20
 8007252:	600b      	str	r3, [r1, #0]
 8007254:	4639      	mov	r1, r7
 8007256:	fb00 8002 	mla	r0, r0, r2, r8
 800725a:	f7ff f933 	bl	80064c4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800725e:	f7ff f9e7 	bl	8006630 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007262:	4b1c      	ldr	r3, [pc, #112]	; (80072d4 <xTaskCreate+0x1a0>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	b163      	cbz	r3, 8007282 <xTaskCreate+0x14e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007268:	6833      	ldr	r3, [r6, #0]
 800726a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800726e:	429a      	cmp	r2, r3
 8007270:	d207      	bcs.n	8007282 <xTaskCreate+0x14e>
			taskYIELD_IF_USING_PREEMPTION();
 8007272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007276:	4b18      	ldr	r3, [pc, #96]	; (80072d8 <xTaskCreate+0x1a4>)
 8007278:	601a      	str	r2, [r3, #0]
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	f3bf 8f6f 	isb	sy
	}
 8007282:	4628      	mov	r0, r5
 8007284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8007288:	4638      	mov	r0, r7
 800728a:	f7ff fb85 	bl	8006998 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800728e:	f04f 35ff 	mov.w	r5, #4294967295
 8007292:	e7f6      	b.n	8007282 <xTaskCreate+0x14e>
			if( xSchedulerRunning == pdFALSE )
 8007294:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <xTaskCreate+0x1a0>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1ce      	bne.n	800723a <xTaskCreate+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800729c:	6833      	ldr	r3, [r6, #0]
 800729e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d8c9      	bhi.n	800723a <xTaskCreate+0x106>
					pxCurrentTCB = pxNewTCB;
 80072a6:	6034      	str	r4, [r6, #0]
 80072a8:	e7c7      	b.n	800723a <xTaskCreate+0x106>
 80072aa:	bf00      	nop
 80072ac:	20008178 	.word	0x20008178
 80072b0:	200080e0 	.word	0x200080e0
 80072b4:	200081a4 	.word	0x200081a4
 80072b8:	200081c4 	.word	0x200081c4
 80072bc:	200081f0 	.word	0x200081f0
 80072c0:	200081dc 	.word	0x200081dc
 80072c4:	200080e4 	.word	0x200080e4
 80072c8:	200080e8 	.word	0x200080e8
 80072cc:	20008188 	.word	0x20008188
 80072d0:	2000818c 	.word	0x2000818c
 80072d4:	200081d8 	.word	0x200081d8
 80072d8:	e000ed04 	.word	0xe000ed04
 80072dc:	200080ec 	.word	0x200080ec
 80072e0:	20008190 	.word	0x20008190

080072e4 <vTaskStartScheduler>:
{
 80072e4:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80072e6:	4b19      	ldr	r3, [pc, #100]	; (800734c <vTaskStartScheduler+0x68>)
 80072e8:	2400      	movs	r4, #0
 80072ea:	2280      	movs	r2, #128	; 0x80
 80072ec:	4918      	ldr	r1, [pc, #96]	; (8007350 <vTaskStartScheduler+0x6c>)
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	4623      	mov	r3, r4
 80072f2:	9400      	str	r4, [sp, #0]
 80072f4:	4817      	ldr	r0, [pc, #92]	; (8007354 <vTaskStartScheduler+0x70>)
 80072f6:	f7ff ff1d 	bl	8007134 <xTaskCreate>
	if( xReturn == pdPASS )
 80072fa:	2801      	cmp	r0, #1
 80072fc:	d116      	bne.n	800732c <vTaskStartScheduler+0x48>
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	b672      	cpsid	i
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8007312:	f04f 32ff 	mov.w	r2, #4294967295
 8007316:	4b10      	ldr	r3, [pc, #64]	; (8007358 <vTaskStartScheduler+0x74>)
 8007318:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800731a:	4b10      	ldr	r3, [pc, #64]	; (800735c <vTaskStartScheduler+0x78>)
 800731c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800731e:	4b10      	ldr	r3, [pc, #64]	; (8007360 <vTaskStartScheduler+0x7c>)
 8007320:	601c      	str	r4, [r3, #0]
}
 8007322:	b002      	add	sp, #8
 8007324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8007328:	f7ff b9f8 	b.w	800671c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800732c:	3001      	adds	r0, #1
 800732e:	d10a      	bne.n	8007346 <vTaskStartScheduler+0x62>
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	b672      	cpsid	i
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	b662      	cpsie	i
 8007344:	e7fe      	b.n	8007344 <vTaskStartScheduler+0x60>
}
 8007346:	b002      	add	sp, #8
 8007348:	bd10      	pop	{r4, pc}
 800734a:	bf00      	nop
 800734c:	200081b8 	.word	0x200081b8
 8007350:	08009749 	.word	0x08009749
 8007354:	080075f9 	.word	0x080075f9
 8007358:	200081bc 	.word	0x200081bc
 800735c:	200081d8 	.word	0x200081d8
 8007360:	20008204 	.word	0x20008204

08007364 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007364:	4a02      	ldr	r2, [pc, #8]	; (8007370 <vTaskSuspendAll+0xc>)
 8007366:	6813      	ldr	r3, [r2, #0]
 8007368:	3301      	adds	r3, #1
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	20008184 	.word	0x20008184

08007374 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007374:	4b01      	ldr	r3, [pc, #4]	; (800737c <xTaskGetTickCount+0x8>)
 8007376:	6818      	ldr	r0, [r3, #0]
}
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20008204 	.word	0x20008204

08007380 <xTaskGetTickCountFromISR>:
{
 8007380:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007382:	f7ff fa1f 	bl	80067c4 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8007386:	4b01      	ldr	r3, [pc, #4]	; (800738c <xTaskGetTickCountFromISR+0xc>)
 8007388:	6818      	ldr	r0, [r3, #0]
}
 800738a:	bd08      	pop	{r3, pc}
 800738c:	20008204 	.word	0x20008204

08007390 <xTaskIncrementTick>:
{
 8007390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007394:	4b3d      	ldr	r3, [pc, #244]	; (800748c <xTaskIncrementTick+0xfc>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d155      	bne.n	8007448 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 800739c:	4b3c      	ldr	r3, [pc, #240]	; (8007490 <xTaskIncrementTick+0x100>)
 800739e:	681c      	ldr	r4, [r3, #0]
 80073a0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80073a2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80073a4:	b9cc      	cbnz	r4, 80073da <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80073a6:	4b3b      	ldr	r3, [pc, #236]	; (8007494 <xTaskIncrementTick+0x104>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	6812      	ldr	r2, [r2, #0]
 80073ac:	b152      	cbz	r2, 80073c4 <xTaskIncrementTick+0x34>
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	b672      	cpsid	i
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	b662      	cpsie	i
 80073c2:	e7fe      	b.n	80073c2 <xTaskIncrementTick+0x32>
 80073c4:	4a34      	ldr	r2, [pc, #208]	; (8007498 <xTaskIncrementTick+0x108>)
 80073c6:	6819      	ldr	r1, [r3, #0]
 80073c8:	6810      	ldr	r0, [r2, #0]
 80073ca:	6018      	str	r0, [r3, #0]
 80073cc:	6011      	str	r1, [r2, #0]
 80073ce:	4a33      	ldr	r2, [pc, #204]	; (800749c <xTaskIncrementTick+0x10c>)
 80073d0:	6813      	ldr	r3, [r2, #0]
 80073d2:	3301      	adds	r3, #1
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	f7ff fe49 	bl	800706c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073da:	4d31      	ldr	r5, [pc, #196]	; (80074a0 <xTaskIncrementTick+0x110>)
 80073dc:	f04f 0b00 	mov.w	fp, #0
 80073e0:	4f30      	ldr	r7, [pc, #192]	; (80074a4 <xTaskIncrementTick+0x114>)
 80073e2:	682b      	ldr	r3, [r5, #0]
 80073e4:	429c      	cmp	r4, r3
 80073e6:	d33e      	bcc.n	8007466 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073e8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8007494 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 80073ec:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80074b4 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073f0:	f8d8 2000 	ldr.w	r2, [r8]
 80073f4:	6812      	ldr	r2, [r2, #0]
 80073f6:	bb72      	cbnz	r2, 8007456 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073f8:	f04f 32ff 	mov.w	r2, #4294967295
 80073fc:	602a      	str	r2, [r5, #0]
					break;
 80073fe:	e032      	b.n	8007466 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007400:	f106 0a04 	add.w	sl, r6, #4
 8007404:	4650      	mov	r0, sl
 8007406:	f7ff f880 	bl	800650a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800740a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800740c:	b119      	cbz	r1, 8007416 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800740e:	f106 0018 	add.w	r0, r6, #24
 8007412:	f7ff f87a 	bl	800650a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007416:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8007418:	2201      	movs	r2, #1
 800741a:	f8d9 3000 	ldr.w	r3, [r9]
 800741e:	f04f 0e14 	mov.w	lr, #20
 8007422:	fa02 f100 	lsl.w	r1, r2, r0
 8007426:	4319      	orrs	r1, r3
 8007428:	4b1f      	ldr	r3, [pc, #124]	; (80074a8 <xTaskIncrementTick+0x118>)
 800742a:	f8c9 1000 	str.w	r1, [r9]
 800742e:	4651      	mov	r1, sl
 8007430:	fb0e 3000 	mla	r0, lr, r0, r3
 8007434:	f7ff f846 	bl	80064c4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007438:	6838      	ldr	r0, [r7, #0]
 800743a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800743c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800743e:	4291      	cmp	r1, r2
 8007440:	bf28      	it	cs
 8007442:	f04f 0b01 	movcs.w	fp, #1
 8007446:	e7d3      	b.n	80073f0 <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8007448:	4a18      	ldr	r2, [pc, #96]	; (80074ac <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800744a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800744e:	6813      	ldr	r3, [r2, #0]
 8007450:	3301      	adds	r3, #1
 8007452:	6013      	str	r3, [r2, #0]
 8007454:	e011      	b.n	800747a <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007456:	f8d8 2000 	ldr.w	r2, [r8]
 800745a:	68d2      	ldr	r2, [r2, #12]
 800745c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800745e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8007460:	428c      	cmp	r4, r1
 8007462:	d2cd      	bcs.n	8007400 <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 8007464:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	4b0f      	ldr	r3, [pc, #60]	; (80074a8 <xTaskIncrementTick+0x118>)
 800746a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800746c:	2214      	movs	r2, #20
 800746e:	434a      	muls	r2, r1
 8007470:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8007472:	2a02      	cmp	r2, #2
 8007474:	bf28      	it	cs
 8007476:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800747a:	4a0d      	ldr	r2, [pc, #52]	; (80074b0 <xTaskIncrementTick+0x120>)
 800747c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800747e:	2a00      	cmp	r2, #0
 8007480:	bf18      	it	ne
 8007482:	f04f 0b01 	movne.w	fp, #1
}
 8007486:	4658      	mov	r0, fp
 8007488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748c:	20008184 	.word	0x20008184
 8007490:	20008204 	.word	0x20008204
 8007494:	200080e4 	.word	0x200080e4
 8007498:	200080e8 	.word	0x200080e8
 800749c:	200081c0 	.word	0x200081c0
 80074a0:	200081bc 	.word	0x200081bc
 80074a4:	200080e0 	.word	0x200080e0
 80074a8:	200080ec 	.word	0x200080ec
 80074ac:	20008180 	.word	0x20008180
 80074b0:	20008208 	.word	0x20008208
 80074b4:	2000818c 	.word	0x2000818c

080074b8 <xTaskResumeAll>:
{
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80074bc:	4c32      	ldr	r4, [pc, #200]	; (8007588 <xTaskResumeAll+0xd0>)
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	b953      	cbnz	r3, 80074d8 <xTaskResumeAll+0x20>
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	b672      	cpsid	i
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	b662      	cpsie	i
 80074d6:	e7fe      	b.n	80074d6 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80074d8:	f7ff f884 	bl	80065e4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	3b01      	subs	r3, #1
 80074e0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074e2:	6824      	ldr	r4, [r4, #0]
 80074e4:	b12c      	cbz	r4, 80074f2 <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 80074e6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80074e8:	f7ff f8a2 	bl	8006630 <vPortExitCritical>
}
 80074ec:	4620      	mov	r0, r4
 80074ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074f2:	4b26      	ldr	r3, [pc, #152]	; (800758c <xTaskResumeAll+0xd4>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0f5      	beq.n	80074e6 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074fa:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80075a4 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 80074fe:	4f24      	ldr	r7, [pc, #144]	; (8007590 <xTaskResumeAll+0xd8>)
 8007500:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80075a8 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007504:	f8d9 3000 	ldr.w	r3, [r9]
 8007508:	b9e3      	cbnz	r3, 8007544 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 800750a:	b10c      	cbz	r4, 8007510 <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 800750c:	f7ff fdae 	bl	800706c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007510:	4d20      	ldr	r5, [pc, #128]	; (8007594 <xTaskResumeAll+0xdc>)
 8007512:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007514:	b144      	cbz	r4, 8007528 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8007516:	4e20      	ldr	r6, [pc, #128]	; (8007598 <xTaskResumeAll+0xe0>)
 8007518:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800751a:	f7ff ff39 	bl	8007390 <xTaskIncrementTick>
 800751e:	b100      	cbz	r0, 8007522 <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8007520:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007522:	3c01      	subs	r4, #1
 8007524:	d1f9      	bne.n	800751a <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8007526:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007528:	4b1b      	ldr	r3, [pc, #108]	; (8007598 <xTaskResumeAll+0xe0>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d0da      	beq.n	80074e6 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8007530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007534:	4b19      	ldr	r3, [pc, #100]	; (800759c <xTaskResumeAll+0xe4>)
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8007540:	2401      	movs	r4, #1
 8007542:	e7d1      	b.n	80074e8 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007544:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8007548:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800754a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800754c:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800754e:	f104 0018 	add.w	r0, r4, #24
 8007552:	f7fe ffda 	bl	800650a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007556:	4630      	mov	r0, r6
 8007558:	f7fe ffd7 	bl	800650a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800755c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	2014      	movs	r0, #20
 8007562:	fa05 f302 	lsl.w	r3, r5, r2
 8007566:	fb00 8002 	mla	r0, r0, r2, r8
 800756a:	430b      	orrs	r3, r1
 800756c:	4631      	mov	r1, r6
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	f7fe ffa8 	bl	80064c4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007574:	4b0a      	ldr	r3, [pc, #40]	; (80075a0 <xTaskResumeAll+0xe8>)
 8007576:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757c:	429a      	cmp	r2, r3
 800757e:	d3c1      	bcc.n	8007504 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <xTaskResumeAll+0xe0>)
 8007582:	601d      	str	r5, [r3, #0]
 8007584:	e7be      	b.n	8007504 <xTaskResumeAll+0x4c>
 8007586:	bf00      	nop
 8007588:	20008184 	.word	0x20008184
 800758c:	20008178 	.word	0x20008178
 8007590:	2000818c 	.word	0x2000818c
 8007594:	20008180 	.word	0x20008180
 8007598:	20008208 	.word	0x20008208
 800759c:	e000ed04 	.word	0xe000ed04
 80075a0:	200080e0 	.word	0x200080e0
 80075a4:	200081c4 	.word	0x200081c4
 80075a8:	200080ec 	.word	0x200080ec

080075ac <vTaskDelay>:
	{
 80075ac:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075ae:	b940      	cbnz	r0, 80075c2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80075b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b4:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <vTaskDelay+0x44>)
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80075c2:	4b0c      	ldr	r3, [pc, #48]	; (80075f4 <vTaskDelay+0x48>)
 80075c4:	6819      	ldr	r1, [r3, #0]
 80075c6:	b151      	cbz	r1, 80075de <vTaskDelay+0x32>
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	b672      	cpsid	i
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	b662      	cpsie	i
 80075dc:	e7fe      	b.n	80075dc <vTaskDelay+0x30>
			vTaskSuspendAll();
 80075de:	f7ff fec1 	bl	8007364 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075e2:	f7ff fd55 	bl	8007090 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80075e6:	f7ff ff67 	bl	80074b8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80075ea:	2800      	cmp	r0, #0
 80075ec:	d0e0      	beq.n	80075b0 <vTaskDelay+0x4>
 80075ee:	bd08      	pop	{r3, pc}
 80075f0:	e000ed04 	.word	0xe000ed04
 80075f4:	20008184 	.word	0x20008184

080075f8 <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80075f8:	4e18      	ldr	r6, [pc, #96]	; (800765c <prvIdleTask+0x64>)
{
 80075fa:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075fc:	4c18      	ldr	r4, [pc, #96]	; (8007660 <prvIdleTask+0x68>)
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	b973      	cbnz	r3, 8007620 <prvIdleTask+0x28>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007602:	4b18      	ldr	r3, [pc, #96]	; (8007664 <prvIdleTask+0x6c>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d907      	bls.n	800761a <prvIdleTask+0x22>
				taskYIELD();
 800760a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760e:	4b16      	ldr	r3, [pc, #88]	; (8007668 <prvIdleTask+0x70>)
 8007610:	601a      	str	r2, [r3, #0]
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800761a:	f000 fa51 	bl	8007ac0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800761e:	e7ed      	b.n	80075fc <prvIdleTask+0x4>
			vTaskSuspendAll();
 8007620:	f7ff fea0 	bl	8007364 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8007624:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8007626:	f7ff ff47 	bl	80074b8 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800762a:	2d00      	cmp	r5, #0
 800762c:	d0e7      	beq.n	80075fe <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800762e:	f7fe ffd9 	bl	80065e4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007632:	68f3      	ldr	r3, [r6, #12]
 8007634:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007636:	1d28      	adds	r0, r5, #4
 8007638:	f7fe ff67 	bl	800650a <uxListRemove>
					--uxCurrentNumberOfTasks;
 800763c:	4a0b      	ldr	r2, [pc, #44]	; (800766c <prvIdleTask+0x74>)
 800763e:	6813      	ldr	r3, [r2, #0]
 8007640:	3b01      	subs	r3, #1
 8007642:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	3b01      	subs	r3, #1
 8007648:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800764a:	f7fe fff1 	bl	8006630 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800764e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8007650:	f7ff f9a2 	bl	8006998 <vPortFree>
			vPortFree( pxTCB );
 8007654:	4628      	mov	r0, r5
 8007656:	f7ff f99f 	bl	8006998 <vPortFree>
 800765a:	e7d0      	b.n	80075fe <prvIdleTask+0x6>
 800765c:	200081f0 	.word	0x200081f0
 8007660:	2000817c 	.word	0x2000817c
 8007664:	200080ec 	.word	0x200080ec
 8007668:	e000ed04 	.word	0xe000ed04
 800766c:	20008178 	.word	0x20008178

08007670 <vTaskSwitchContext>:
{
 8007670:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007672:	4b24      	ldr	r3, [pc, #144]	; (8007704 <vTaskSwitchContext+0x94>)
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4b24      	ldr	r3, [pc, #144]	; (8007708 <vTaskSwitchContext+0x98>)
 8007678:	b112      	cbz	r2, 8007680 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800767a:	2201      	movs	r2, #1
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	bd38      	pop	{r3, r4, r5, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8007680:	4c22      	ldr	r4, [pc, #136]	; (800770c <vTaskSwitchContext+0x9c>)
		xYieldPending = pdFALSE;
 8007682:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007684:	6823      	ldr	r3, [r4, #0]
 8007686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800768e:	d10b      	bne.n	80076a8 <vTaskSwitchContext+0x38>
 8007690:	685a      	ldr	r2, [r3, #4]
 8007692:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8007696:	d107      	bne.n	80076a8 <vTaskSwitchContext+0x38>
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800769e:	d103      	bne.n	80076a8 <vTaskSwitchContext+0x38>
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 80076a6:	d004      	beq.n	80076b2 <vTaskSwitchContext+0x42>
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	6821      	ldr	r1, [r4, #0]
 80076ac:	3134      	adds	r1, #52	; 0x34
 80076ae:	f000 fa08 	bl	8007ac2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80076b2:	4b17      	ldr	r3, [pc, #92]	; (8007710 <vTaskSwitchContext+0xa0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80076b6:	fab3 f383 	clz	r3, r3
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2214      	movs	r2, #20
 80076be:	4915      	ldr	r1, [pc, #84]	; (8007714 <vTaskSwitchContext+0xa4>)
 80076c0:	f1c3 031f 	rsb	r3, r3, #31
 80076c4:	435a      	muls	r2, r3
 80076c6:	588d      	ldr	r5, [r1, r2]
 80076c8:	1888      	adds	r0, r1, r2
 80076ca:	b955      	cbnz	r5, 80076e2 <vTaskSwitchContext+0x72>
	__asm volatile
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	b672      	cpsid	i
 80076d2:	f383 8811 	msr	BASEPRI, r3
 80076d6:	f3bf 8f6f 	isb	sy
 80076da:	f3bf 8f4f 	dsb	sy
 80076de:	b662      	cpsie	i
 80076e0:	e7fe      	b.n	80076e0 <vTaskSwitchContext+0x70>
 80076e2:	6845      	ldr	r5, [r0, #4]
 80076e4:	3208      	adds	r2, #8
 80076e6:	686d      	ldr	r5, [r5, #4]
 80076e8:	440a      	add	r2, r1
 80076ea:	4295      	cmp	r5, r2
 80076ec:	6045      	str	r5, [r0, #4]
 80076ee:	bf04      	itt	eq
 80076f0:	686a      	ldreq	r2, [r5, #4]
 80076f2:	6042      	streq	r2, [r0, #4]
 80076f4:	2214      	movs	r2, #20
 80076f6:	fb02 1303 	mla	r3, r2, r3, r1
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	6023      	str	r3, [r4, #0]
 8007700:	bd38      	pop	{r3, r4, r5, pc}
 8007702:	bf00      	nop
 8007704:	20008184 	.word	0x20008184
 8007708:	20008208 	.word	0x20008208
 800770c:	200080e0 	.word	0x200080e0
 8007710:	2000818c 	.word	0x2000818c
 8007714:	200080ec 	.word	0x200080ec

08007718 <vTaskPlaceOnEventList>:
{
 8007718:	b510      	push	{r4, lr}
 800771a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800771c:	b950      	cbnz	r0, 8007734 <vTaskPlaceOnEventList+0x1c>
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	b672      	cpsid	i
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	b662      	cpsie	i
 8007732:	e7fe      	b.n	8007732 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007734:	4b05      	ldr	r3, [pc, #20]	; (800774c <vTaskPlaceOnEventList+0x34>)
 8007736:	6819      	ldr	r1, [r3, #0]
 8007738:	3118      	adds	r1, #24
 800773a:	f7fe fecf 	bl	80064dc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800773e:	4620      	mov	r0, r4
 8007740:	2101      	movs	r1, #1
}
 8007742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007746:	f7ff bca3 	b.w	8007090 <prvAddCurrentTaskToDelayedList>
 800774a:	bf00      	nop
 800774c:	200080e0 	.word	0x200080e0

08007750 <xTaskRemoveFromEventList>:
{
 8007750:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007752:	68c3      	ldr	r3, [r0, #12]
 8007754:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8007756:	b954      	cbnz	r4, 800776e <xTaskRemoveFromEventList+0x1e>
 8007758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775c:	b672      	cpsid	i
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	b662      	cpsie	i
 800776c:	e7fe      	b.n	800776c <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800776e:	f104 0518 	add.w	r5, r4, #24
 8007772:	4628      	mov	r0, r5
 8007774:	f7fe fec9 	bl	800650a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007778:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <xTaskRemoveFromEventList+0x70>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	b9db      	cbnz	r3, 80077b6 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800777e:	1d25      	adds	r5, r4, #4
 8007780:	4628      	mov	r0, r5
 8007782:	f7fe fec2 	bl	800650a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007786:	490f      	ldr	r1, [pc, #60]	; (80077c4 <xTaskRemoveFromEventList+0x74>)
 8007788:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800778a:	2301      	movs	r3, #1
 800778c:	6808      	ldr	r0, [r1, #0]
 800778e:	4093      	lsls	r3, r2
 8007790:	4303      	orrs	r3, r0
 8007792:	2014      	movs	r0, #20
 8007794:	600b      	str	r3, [r1, #0]
 8007796:	4629      	mov	r1, r5
 8007798:	4b0b      	ldr	r3, [pc, #44]	; (80077c8 <xTaskRemoveFromEventList+0x78>)
 800779a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800779e:	f7fe fe91 	bl	80064c4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80077a2:	4b0a      	ldr	r3, [pc, #40]	; (80077cc <xTaskRemoveFromEventList+0x7c>)
 80077a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d906      	bls.n	80077bc <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 80077ae:	2001      	movs	r0, #1
 80077b0:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <xTaskRemoveFromEventList+0x80>)
 80077b2:	6018      	str	r0, [r3, #0]
 80077b4:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80077b6:	4629      	mov	r1, r5
 80077b8:	4806      	ldr	r0, [pc, #24]	; (80077d4 <xTaskRemoveFromEventList+0x84>)
 80077ba:	e7f0      	b.n	800779e <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 80077bc:	2000      	movs	r0, #0
}
 80077be:	bd38      	pop	{r3, r4, r5, pc}
 80077c0:	20008184 	.word	0x20008184
 80077c4:	2000818c 	.word	0x2000818c
 80077c8:	200080ec 	.word	0x200080ec
 80077cc:	200080e0 	.word	0x200080e0
 80077d0:	20008208 	.word	0x20008208
 80077d4:	200081c4 	.word	0x200081c4

080077d8 <vTaskSetTimeOutState>:
{
 80077d8:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 80077da:	b908      	cbnz	r0, 80077e0 <vTaskSetTimeOutState+0x8>
 80077dc:	f7ff fc9e 	bl	800711c <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80077e0:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <vTaskSetTimeOutState+0x18>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80077e6:	4b03      	ldr	r3, [pc, #12]	; (80077f4 <vTaskSetTimeOutState+0x1c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6043      	str	r3, [r0, #4]
 80077ec:	bd08      	pop	{r3, pc}
 80077ee:	bf00      	nop
 80077f0:	200081c0 	.word	0x200081c0
 80077f4:	20008204 	.word	0x20008204

080077f8 <xTaskCheckForTimeOut>:
{
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80077fc:	4604      	mov	r4, r0
 80077fe:	b950      	cbnz	r0, 8007816 <xTaskCheckForTimeOut+0x1e>
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	b672      	cpsid	i
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	b662      	cpsie	i
 8007814:	e7fe      	b.n	8007814 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8007816:	b951      	cbnz	r1, 800782e <xTaskCheckForTimeOut+0x36>
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	b672      	cpsid	i
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	b662      	cpsie	i
 800782c:	e7fe      	b.n	800782c <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800782e:	f7fe fed9 	bl	80065e4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007832:	4b0e      	ldr	r3, [pc, #56]	; (800786c <xTaskCheckForTimeOut+0x74>)
 8007834:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007836:	682b      	ldr	r3, [r5, #0]
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	d010      	beq.n	800785e <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800783c:	4a0c      	ldr	r2, [pc, #48]	; (8007870 <xTaskCheckForTimeOut+0x78>)
 800783e:	6820      	ldr	r0, [r4, #0]
 8007840:	6812      	ldr	r2, [r2, #0]
 8007842:	4290      	cmp	r0, r2
 8007844:	6862      	ldr	r2, [r4, #4]
 8007846:	d001      	beq.n	800784c <xTaskCheckForTimeOut+0x54>
 8007848:	4291      	cmp	r1, r2
 800784a:	d20d      	bcs.n	8007868 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800784c:	1a88      	subs	r0, r1, r2
 800784e:	4283      	cmp	r3, r0
 8007850:	d90a      	bls.n	8007868 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007852:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 8007854:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007856:	4413      	add	r3, r2
 8007858:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800785a:	f7ff ffbd 	bl	80077d8 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800785e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007860:	f7fe fee6 	bl	8006630 <vPortExitCritical>
}
 8007864:	4620      	mov	r0, r4
 8007866:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8007868:	2401      	movs	r4, #1
 800786a:	e7f9      	b.n	8007860 <xTaskCheckForTimeOut+0x68>
 800786c:	20008204 	.word	0x20008204
 8007870:	200081c0 	.word	0x200081c0

08007874 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007874:	2201      	movs	r2, #1
 8007876:	4b01      	ldr	r3, [pc, #4]	; (800787c <vTaskMissedYield+0x8>)
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	4770      	bx	lr
 800787c:	20008208 	.word	0x20008208

08007880 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007880:	4b05      	ldr	r3, [pc, #20]	; (8007898 <xTaskGetSchedulerState+0x18>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	b133      	cbz	r3, 8007894 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007886:	4b05      	ldr	r3, [pc, #20]	; (800789c <xTaskGetSchedulerState+0x1c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800788c:	bf0c      	ite	eq
 800788e:	2002      	moveq	r0, #2
 8007890:	2000      	movne	r0, #0
 8007892:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007894:	2001      	movs	r0, #1
	}
 8007896:	4770      	bx	lr
 8007898:	200081d8 	.word	0x200081d8
 800789c:	20008184 	.word	0x20008184

080078a0 <vTaskPriorityInherit>:
	{
 80078a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80078a4:	4604      	mov	r4, r0
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d038      	beq.n	800791c <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80078aa:	4d1d      	ldr	r5, [pc, #116]	; (8007920 <vTaskPriorityInherit+0x80>)
 80078ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80078ae:	682a      	ldr	r2, [r5, #0]
 80078b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d232      	bcs.n	800791c <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078b6:	6982      	ldr	r2, [r0, #24]
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	db04      	blt.n	80078c6 <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078bc:	682a      	ldr	r2, [r5, #0]
 80078be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80078c0:	f1c2 0207 	rsb	r2, r2, #7
 80078c4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80078c6:	4e17      	ldr	r6, [pc, #92]	; (8007924 <vTaskPriorityInherit+0x84>)
 80078c8:	2714      	movs	r7, #20
 80078ca:	6962      	ldr	r2, [r4, #20]
 80078cc:	fb07 6303 	mla	r3, r7, r3, r6
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d120      	bne.n	8007916 <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078d4:	f104 0804 	add.w	r8, r4, #4
 80078d8:	4640      	mov	r0, r8
 80078da:	f7fe fe16 	bl	800650a <uxListRemove>
 80078de:	4a12      	ldr	r2, [pc, #72]	; (8007928 <vTaskPriorityInherit+0x88>)
 80078e0:	b948      	cbnz	r0, 80078f6 <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80078e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80078e4:	4347      	muls	r7, r0
 80078e6:	59f3      	ldr	r3, [r6, r7]
 80078e8:	b92b      	cbnz	r3, 80078f6 <vTaskPriorityInherit+0x56>
 80078ea:	2101      	movs	r1, #1
 80078ec:	6813      	ldr	r3, [r2, #0]
 80078ee:	4081      	lsls	r1, r0
 80078f0:	ea23 0301 	bic.w	r3, r3, r1
 80078f4:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078f6:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80078f8:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078fa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80078fc:	2301      	movs	r3, #1
 80078fe:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007900:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8007902:	430b      	orrs	r3, r1
 8007904:	4641      	mov	r1, r8
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	2314      	movs	r3, #20
 800790a:	fb03 6000 	mla	r0, r3, r0, r6
	}
 800790e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8007912:	f7fe bdd7 	b.w	80064c4 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007916:	682b      	ldr	r3, [r5, #0]
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007920:	200080e0 	.word	0x200080e0
 8007924:	200080ec 	.word	0x200080ec
 8007928:	2000818c 	.word	0x2000818c

0800792c <xTaskPriorityDisinherit>:
	{
 800792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800792e:	4604      	mov	r4, r0
 8007930:	b908      	cbnz	r0, 8007936 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8007932:	2000      	movs	r0, #0
 8007934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8007936:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <xTaskPriorityDisinherit+0x9c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4298      	cmp	r0, r3
 800793c:	d00a      	beq.n	8007954 <xTaskPriorityDisinherit+0x28>
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	b672      	cpsid	i
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	b662      	cpsie	i
 8007952:	e7fe      	b.n	8007952 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8007954:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8007956:	b953      	cbnz	r3, 800796e <xTaskPriorityDisinherit+0x42>
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	b672      	cpsid	i
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	b662      	cpsie	i
 800796c:	e7fe      	b.n	800796c <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800796e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8007970:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007972:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8007974:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007976:	4291      	cmp	r1, r2
 8007978:	d0db      	beq.n	8007932 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1d9      	bne.n	8007932 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800797e:	1d05      	adds	r5, r0, #4
 8007980:	4e12      	ldr	r6, [pc, #72]	; (80079cc <xTaskPriorityDisinherit+0xa0>)
 8007982:	4628      	mov	r0, r5
 8007984:	f7fe fdc1 	bl	800650a <uxListRemove>
 8007988:	4a11      	ldr	r2, [pc, #68]	; (80079d0 <xTaskPriorityDisinherit+0xa4>)
 800798a:	b950      	cbnz	r0, 80079a2 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800798c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800798e:	2114      	movs	r1, #20
 8007990:	4379      	muls	r1, r7
 8007992:	5873      	ldr	r3, [r6, r1]
 8007994:	b92b      	cbnz	r3, 80079a2 <xTaskPriorityDisinherit+0x76>
 8007996:	2001      	movs	r0, #1
 8007998:	6813      	ldr	r3, [r2, #0]
 800799a:	40b8      	lsls	r0, r7
 800799c:	ea23 0300 	bic.w	r3, r3, r0
 80079a0:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079a4:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079a8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079aa:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80079ac:	2401      	movs	r4, #1
 80079ae:	6811      	ldr	r1, [r2, #0]
 80079b0:	fa04 f003 	lsl.w	r0, r4, r3
 80079b4:	4308      	orrs	r0, r1
 80079b6:	4629      	mov	r1, r5
 80079b8:	6010      	str	r0, [r2, #0]
 80079ba:	2014      	movs	r0, #20
 80079bc:	fb00 6003 	mla	r0, r0, r3, r6
 80079c0:	f7fe fd80 	bl	80064c4 <vListInsertEnd>
					xReturn = pdTRUE;
 80079c4:	4620      	mov	r0, r4
	}
 80079c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c8:	200080e0 	.word	0x200080e0
 80079cc:	200080ec 	.word	0x200080ec
 80079d0:	2000818c 	.word	0x2000818c

080079d4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80079d4:	4b04      	ldr	r3, [pc, #16]	; (80079e8 <pvTaskIncrementMutexHeldCount+0x14>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	b11a      	cbz	r2, 80079e2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80079da:	6819      	ldr	r1, [r3, #0]
 80079dc:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80079de:	3201      	adds	r2, #1
 80079e0:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80079e2:	6818      	ldr	r0, [r3, #0]
	}
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	200080e0 	.word	0x200080e0

080079ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80079ec:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80079ee:	4613      	mov	r3, r2
 80079f0:	460a      	mov	r2, r1
 80079f2:	4601      	mov	r1, r0
 80079f4:	4803      	ldr	r0, [pc, #12]	; (8007a04 <BSP_SD_ReadBlocks_DMA+0x18>)
 80079f6:	f7fb fc6f 	bl	80032d8 <HAL_SD_ReadBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 80079fa:	3000      	adds	r0, #0
 80079fc:	bf18      	it	ne
 80079fe:	2001      	movne	r0, #1
 8007a00:	bd08      	pop	{r3, pc}
 8007a02:	bf00      	nop
 8007a04:	200088ec 	.word	0x200088ec

08007a08 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007a08:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	460a      	mov	r2, r1
 8007a0e:	4601      	mov	r1, r0
 8007a10:	4803      	ldr	r0, [pc, #12]	; (8007a20 <BSP_SD_WriteBlocks_DMA+0x18>)
 8007a12:	f7fb fce3 	bl	80033dc <HAL_SD_WriteBlocks_DMA>
  {
    sd_state = MSD_ERROR;
  }
  
  return sd_state; 
}
 8007a16:	3000      	adds	r0, #0
 8007a18:	bf18      	it	ne
 8007a1a:	2001      	movne	r0, #1
 8007a1c:	bd08      	pop	{r3, pc}
 8007a1e:	bf00      	nop
 8007a20:	200088ec 	.word	0x200088ec

08007a24 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8007a24:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007a26:	4803      	ldr	r0, [pc, #12]	; (8007a34 <BSP_SD_GetCardState+0x10>)
 8007a28:	f7fb fff6 	bl	8003a18 <HAL_SD_GetCardState>
}
 8007a2c:	3804      	subs	r0, #4
 8007a2e:	bf18      	it	ne
 8007a30:	2001      	movne	r0, #1
 8007a32:	bd08      	pop	{r3, pc}
 8007a34:	200088ec 	.word	0x200088ec

08007a38 <BSP_SD_GetCardInfo>:
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007a38:	4601      	mov	r1, r0
 8007a3a:	4801      	ldr	r0, [pc, #4]	; (8007a40 <BSP_SD_GetCardInfo+0x8>)
 8007a3c:	f7fb bf56 	b.w	80038ec <HAL_SD_GetCardInfo>
 8007a40:	200088ec 	.word	0x200088ec

08007a44 <BSP_SD_IsDetected>:
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8007a44:	2301      	movs	r3, #1
{
 8007a46:	b507      	push	{r0, r1, r2, lr}
  __IO uint8_t status = SD_PRESENT;
 8007a48:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007a4c:	f000 f82c 	bl	8007aa8 <BSP_PlatformIsDetected>
 8007a50:	b908      	cbnz	r0, 8007a56 <BSP_SD_IsDetected+0x12>
  {
    status = SD_NOT_PRESENT;
 8007a52:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8007a56:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8007a5a:	b003      	add	sp, #12
 8007a5c:	f85d fb04 	ldr.w	pc, [sp], #4

08007a60 <BSP_SD_Init>:
{
 8007a60:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007a62:	f7ff ffef 	bl	8007a44 <BSP_SD_IsDetected>
 8007a66:	2801      	cmp	r0, #1
 8007a68:	d10c      	bne.n	8007a84 <BSP_SD_Init+0x24>
  sd_state = HAL_SD_Init(&hsd1);
 8007a6a:	4807      	ldr	r0, [pc, #28]	; (8007a88 <BSP_SD_Init+0x28>)
 8007a6c:	f7fb ff24 	bl	80038b8 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8007a70:	b948      	cbnz	r0, 8007a86 <BSP_SD_Init+0x26>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007a72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a76:	4804      	ldr	r0, [pc, #16]	; (8007a88 <BSP_SD_Init+0x28>)
 8007a78:	f7fb ff4a 	bl	8003910 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8007a7c:	3000      	adds	r0, #0
 8007a7e:	bf18      	it	ne
 8007a80:	2001      	movne	r0, #1
 8007a82:	bd08      	pop	{r3, pc}
 8007a84:	2002      	movs	r0, #2
}
 8007a86:	bd08      	pop	{r3, pc}
 8007a88:	200088ec 	.word	0x200088ec

08007a8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007a8c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007a8e:	4903      	ldr	r1, [pc, #12]	; (8007a9c <MX_FATFS_Init+0x10>)
 8007a90:	4803      	ldr	r0, [pc, #12]	; (8007aa0 <MX_FATFS_Init+0x14>)
 8007a92:	f7fe fc61 	bl	8006358 <FATFS_LinkDriver>
 8007a96:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <MX_FATFS_Init+0x18>)
 8007a98:	7018      	strb	r0, [r3, #0]
 8007a9a:	bd08      	pop	{r3, pc}
 8007a9c:	2000822d 	.word	0x2000822d
 8007aa0:	0800975c 	.word	0x0800975c
 8007aa4:	2000822c 	.word	0x2000822c

08007aa8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007aa8:	b508      	push	{r3, lr}
  uint8_t status = (uint8_t)0x01;
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_PORT,SD_PIN) == GPIO_PIN_RESET) {
 8007aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007aae:	4803      	ldr	r0, [pc, #12]	; (8007abc <BSP_PlatformIsDetected+0x14>)
 8007ab0:	f7f9 fbdc 	bl	800126c <HAL_GPIO_ReadPin>
  }
  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */ 
  return status;
}  
 8007ab4:	3000      	adds	r0, #0
 8007ab6:	bf18      	it	ne
 8007ab8:	2001      	movne	r0, #1
 8007aba:	bd08      	pop	{r3, pc}
 8007abc:	40020800 	.word	0x40020800

08007ac0 <vApplicationIdleHook>:
 8007ac0:	4770      	bx	lr

08007ac2 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8007ac2:	4770      	bx	lr

08007ac4 <vApplicationMallocFailedHook>:
}
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8007ac4:	4770      	bx	lr

08007ac6 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8007ac6:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 8007ac8:	f7ff ffe0 	bl	8007a8c <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8007acc:	f001 fb40 	bl	8009150 <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007ad0:	2001      	movs	r0, #1
 8007ad2:	f7fe fc70 	bl	80063b6 <osDelay>
 8007ad6:	e7fb      	b.n	8007ad0 <StartDefaultTask+0xa>

08007ad8 <SystemClock_Config>:
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ad8:	4b39      	ldr	r3, [pc, #228]	; (8007bc0 <SystemClock_Config+0xe8>)
 8007ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007adc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8007ae0:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ae2:	641a      	str	r2, [r3, #64]	; 0x40
{
 8007ae4:	b0b4      	sub	sp, #208	; 0xd0
  __HAL_RCC_PWR_CLK_ENABLE();
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ae8:	2402      	movs	r4, #2
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007aea:	2501      	movs	r5, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007aec:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8007aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007af6:	4b33      	ldr	r3, [pc, #204]	; (8007bc4 <SystemClock_Config+0xec>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007afe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007b00:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b04:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007b06:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8007b10:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b12:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8007b14:	2219      	movs	r2, #25
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007b1a:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLM = 25;
 8007b1c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8007b1e:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8007b22:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b24:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 432;
 8007b26:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007b28:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8007b2a:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b2c:	f7fa fac2 	bl	80020b4 <HAL_RCC_OscConfig>
 8007b30:	b100      	cbz	r0, 8007b34 <SystemClock_Config+0x5c>
 8007b32:	e7fe      	b.n	8007b32 <SystemClock_Config+0x5a>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007b34:	f7fa fa04 	bl	8001f40 <HAL_PWREx_EnableOverDrive>
 8007b38:	b100      	cbz	r0, 8007b3c <SystemClock_Config+0x64>
 8007b3a:	e7fe      	b.n	8007b3a <SystemClock_Config+0x62>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007b3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b40:	260f      	movs	r6, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b42:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8007b44:	2107      	movs	r1, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007b46:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8007b4c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b4e:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007b50:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007b52:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8007b54:	f7fa fc70 	bl	8002438 <HAL_RCC_ClockConfig>
 8007b58:	b100      	cbz	r0, 8007b5c <SystemClock_Config+0x84>
 8007b5a:	e7fe      	b.n	8007b5a <SystemClock_Config+0x82>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8007b5c:	4b1a      	ldr	r3, [pc, #104]	; (8007bc8 <SystemClock_Config+0xf0>)
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8007b5e:	901b      	str	r0, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8007b60:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8007b62:	2364      	movs	r3, #100	; 0x64
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8007b64:	901e      	str	r0, [sp, #120]	; 0x78
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8007b66:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8007b68:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007b6a:	f44f 7300 	mov.w	r3, #512	; 0x200
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8007b6e:	9023      	str	r0, [sp, #140]	; 0x8c
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007b70:	9024      	str	r0, [sp, #144]	; 0x90
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8007b72:	9029      	str	r0, [sp, #164]	; 0xa4
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007b74:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8007b76:	902e      	str	r0, [sp, #184]	; 0xb8
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8007b78:	9032      	str	r0, [sp, #200]	; 0xc8
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8007b7a:	9033      	str	r0, [sp, #204]	; 0xcc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b7c:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8007b7e:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8007b80:	9415      	str	r4, [sp, #84]	; 0x54
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8007b82:	9416      	str	r4, [sp, #88]	; 0x58
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8007b84:	941a      	str	r4, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8007b86:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8007b88:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8007b8a:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8007b8c:	931f      	str	r3, [sp, #124]	; 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007b8e:	f7fa fd35 	bl	80025fc <HAL_RCCEx_PeriphCLKConfig>
 8007b92:	4604      	mov	r4, r0
 8007b94:	b100      	cbz	r0, 8007b98 <SystemClock_Config+0xc0>
 8007b96:	e7fe      	b.n	8007b96 <SystemClock_Config+0xbe>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8007b98:	f7fa fcec 	bl	8002574 <HAL_RCC_GetHCLKFreq>
 8007b9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ba0:	fbb0 f0f3 	udiv	r0, r0, r3
 8007ba4:	f7f8 fe86 	bl	80008b4 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8007ba8:	2004      	movs	r0, #4
 8007baa:	f7f8 fe99 	bl	80008e0 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8007bae:	4622      	mov	r2, r4
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb6:	f7f8 fe39 	bl	800082c <HAL_NVIC_SetPriority>
}
 8007bba:	b034      	add	sp, #208	; 0xd0
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
 8007bbe:	bf00      	nop
 8007bc0:	40023800 	.word	0x40023800
 8007bc4:	40007000 	.word	0x40007000
 8007bc8:	01b14868 	.word	0x01b14868

08007bcc <main>:
{
 8007bcc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8007bd0:	b0a9      	sub	sp, #164	; 0xa4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bd2:	2400      	movs	r4, #0
  HAL_Init();
 8007bd4:	f7f8 fca4 	bl	8000520 <HAL_Init>
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8007bd8:	2708      	movs	r7, #8
  SystemClock_Config();
 8007bda:	f7ff ff7d 	bl	8007ad8 <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bde:	4ba2      	ldr	r3, [pc, #648]	; (8007e68 <main+0x29c>)
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007be0:	2120      	movs	r1, #32
 8007be2:	48a2      	ldr	r0, [pc, #648]	; (8007e6c <main+0x2a0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007be6:	ad1b      	add	r5, sp, #108	; 0x6c
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8007be8:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8007bec:	f04f 0a40 	mov.w	sl, #64	; 0x40
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bf0:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007bf4:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8007bf6:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8007bfa:	f04f 0b10 	mov.w	fp, #16
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8007c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c02:	f002 0210 	and.w	r2, r2, #16
 8007c06:	9202      	str	r2, [sp, #8]
 8007c08:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c10:	631a      	str	r2, [r3, #48]	; 0x30
 8007c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c14:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8007c18:	9203      	str	r2, [sp, #12]
 8007c1a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c1e:	f042 0202 	orr.w	r2, r2, #2
 8007c22:	631a      	str	r2, [r3, #48]	; 0x30
 8007c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c26:	f002 0202 	and.w	r2, r2, #2
 8007c2a:	9204      	str	r2, [sp, #16]
 8007c2c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c30:	f042 0208 	orr.w	r2, r2, #8
 8007c34:	631a      	str	r2, [r3, #48]	; 0x30
 8007c36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c38:	f002 0208 	and.w	r2, r2, #8
 8007c3c:	9205      	str	r2, [sp, #20]
 8007c3e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c42:	f042 0204 	orr.w	r2, r2, #4
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30
 8007c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c4a:	f002 0204 	and.w	r2, r2, #4
 8007c4e:	9206      	str	r2, [sp, #24]
 8007c50:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c54:	f042 0201 	orr.w	r2, r2, #1
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30
 8007c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c5c:	f002 0201 	and.w	r2, r2, #1
 8007c60:	9207      	str	r2, [sp, #28]
 8007c62:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8007c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8007c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c6e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8007c72:	9208      	str	r2, [sp, #32]
 8007c74:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8007c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c7c:	631a      	str	r2, [r3, #48]	; 0x30
 8007c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c80:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8007c84:	9209      	str	r2, [sp, #36]	; 0x24
 8007c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8007c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c8e:	631a      	str	r2, [r3, #48]	; 0x30
 8007c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c92:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8007c96:	920a      	str	r2, [sp, #40]	; 0x28
 8007c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c9c:	f042 0220 	orr.w	r2, r2, #32
 8007ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8007ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ca4:	f002 0220 	and.w	r2, r2, #32
 8007ca8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007caa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007cb2:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007cb4:	2201      	movs	r2, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cbc:	930c      	str	r3, [sp, #48]	; 0x30
 8007cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8007cc0:	f7f9 fada 	bl	8001278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	210c      	movs	r1, #12
 8007cc8:	4869      	ldr	r0, [pc, #420]	; (8007e70 <main+0x2a4>)
 8007cca:	f7f9 fad5 	bl	8001278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8007cce:	2201      	movs	r2, #1
 8007cd0:	2108      	movs	r1, #8
 8007cd2:	4868      	ldr	r0, [pc, #416]	; (8007e74 <main+0x2a8>)
 8007cd4:	f7f9 fad0 	bl	8001278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, LD1_Pin|LCD_DISP_Pin, GPIO_PIN_SET);
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f241 0102 	movw	r1, #4098	; 0x1002
 8007cde:	4864      	ldr	r0, [pc, #400]	; (8007e70 <main+0x2a4>)
 8007ce0:	f7f9 faca 	bl	8001278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007cea:	4863      	ldr	r0, [pc, #396]	; (8007e78 <main+0x2ac>)
 8007cec:	f7f9 fac4 	bl	8001278 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	21c8      	movs	r1, #200	; 0xc8
 8007cf4:	4861      	ldr	r0, [pc, #388]	; (8007e7c <main+0x2b0>)
 8007cf6:	f7f9 fabf 	bl	8001278 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	4860      	ldr	r0, [pc, #384]	; (8007e80 <main+0x2b4>)
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8007cfe:	971b      	str	r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d00:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d02:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007d04:	f7f9 f9c8 	bl	8001098 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007d08:	4629      	mov	r1, r5
 8007d0a:	485e      	ldr	r0, [pc, #376]	; (8007e84 <main+0x2b8>)
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8007d0c:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d10:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d12:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8007d14:	f7f9 f9c0 	bl	8001098 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007d18:	4b5b      	ldr	r3, [pc, #364]	; (8007e88 <main+0x2bc>)
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8007d1a:	4629      	mov	r1, r5
 8007d1c:	4853      	ldr	r0, [pc, #332]	; (8007e6c <main+0x2a0>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007d1e:	931c      	str	r3, [sp, #112]	; 0x70
 8007d20:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8007d22:	f8cd a06c 	str.w	sl, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d26:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8007d28:	f7f9 f9b6 	bl	8001098 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8007d2c:	2220      	movs	r2, #32
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007d2e:	4629      	mov	r1, r5
 8007d30:	484e      	ldr	r0, [pc, #312]	; (8007e6c <main+0x2a0>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8007d32:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d34:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d36:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d38:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8007d3a:	f7f9 f9ad 	bl	8001098 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8007d3e:	f241 020c 	movw	r2, #4108	; 0x100c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007d42:	4629      	mov	r1, r5
 8007d44:	484a      	ldr	r0, [pc, #296]	; (8007e70 <main+0x2a4>)
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8007d46:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d48:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d4a:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d4c:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8007d4e:	f7f9 f9a3 	bl	8001098 <HAL_GPIO_Init>
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8007d52:	4629      	mov	r1, r5
 8007d54:	484d      	ldr	r0, [pc, #308]	; (8007e8c <main+0x2c0>)
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8007d56:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d5a:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d5c:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8007d5e:	f7f9 f99b 	bl	8001098 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8007d62:	4629      	mov	r1, r5
 8007d64:	4843      	ldr	r0, [pc, #268]	; (8007e74 <main+0x2a8>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8007d66:	971b      	str	r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pin = LD1_Pin;
 8007d68:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d6a:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d6c:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d6e:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8007d70:	f7f9 f992 	bl	8001098 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007d74:	4629      	mov	r1, r5
 8007d76:	483d      	ldr	r0, [pc, #244]	; (8007e6c <main+0x2a0>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8007d78:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d7c:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d7e:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8007d80:	f7f9 f98a 	bl	8001098 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8007d84:	f248 0204 	movw	r2, #32772	; 0x8004
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007d88:	4629      	mov	r1, r5
 8007d8a:	483b      	ldr	r0, [pc, #236]	; (8007e78 <main+0x2ac>)
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8007d8c:	921b      	str	r2, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d8e:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d90:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8007d92:	f7f9 f981 	bl	8001098 <HAL_GPIO_Init>
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8007d96:	4629      	mov	r1, r5
 8007d98:	4835      	ldr	r0, [pc, #212]	; (8007e70 <main+0x2a4>)
  GPIO_InitStruct.Pin = LD1_Pin;
 8007d9a:	971b      	str	r7, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d9c:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d9e:	961d      	str	r6, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007da0:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8007da2:	f7f9 f979 	bl	8001098 <HAL_GPIO_Init>
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8007da6:	4629      	mov	r1, r5
 8007da8:	4833      	ldr	r0, [pc, #204]	; (8007e78 <main+0x2ac>)
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8007daa:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007dae:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007db0:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007db2:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8007db4:	f7f9 f970 	bl	8001098 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007db8:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8007dba:	4629      	mov	r1, r5
 8007dbc:	482c      	ldr	r0, [pc, #176]	; (8007e70 <main+0x2a4>)
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8007dbe:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8007dc2:	f04f 0804 	mov.w	r8, #4
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007dc6:	931c      	str	r3, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dc8:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8007dca:	f7f9 f965 	bl	8001098 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8007dce:	23c8      	movs	r3, #200	; 0xc8
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	482a      	ldr	r0, [pc, #168]	; (8007e7c <main+0x2b0>)
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8007dd4:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007dd6:	961c      	str	r6, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd8:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dda:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007ddc:	f7f9 f95c 	bl	8001098 <HAL_GPIO_Init>
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8007de0:	4629      	mov	r1, r5
 8007de2:	4826      	ldr	r0, [pc, #152]	; (8007e7c <main+0x2b0>)
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8007de4:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007de8:	941c      	str	r4, [sp, #112]	; 0x70
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dea:	941d      	str	r4, [sp, #116]	; 0x74
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8007dec:	f7f9 f954 	bl	8001098 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8007df0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007df4:	4629      	mov	r1, r5
 8007df6:	4826      	ldr	r0, [pc, #152]	; (8007e90 <main+0x2c4>)
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8007df8:	931b      	str	r3, [sp, #108]	; 0x6c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007dfa:	2305      	movs	r3, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dfc:	971c      	str	r7, [sp, #112]	; 0x70
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007dfe:	931f      	str	r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e00:	941d      	str	r4, [sp, #116]	; 0x74
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e02:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007e04:	f7f9 f948 	bl	8001098 <HAL_GPIO_Init>
  hadc3.Instance = ADC3;
 8007e08:	4b22      	ldr	r3, [pc, #136]	; (8007e94 <main+0x2c8>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007e0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007e0e:	4922      	ldr	r1, [pc, #136]	; (8007e98 <main+0x2cc>)
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8007e10:	4618      	mov	r0, r3
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8007e12:	609c      	str	r4, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8007e14:	611c      	str	r4, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8007e16:	619c      	str	r4, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8007e18:	621c      	str	r4, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007e1a:	62dc      	str	r4, [r3, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007e1c:	60dc      	str	r4, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8007e1e:	61de      	str	r6, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8007e20:	631c      	str	r4, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007e22:	615e      	str	r6, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8007e24:	9301      	str	r3, [sp, #4]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007e26:	e883 0006 	stmia.w	r3, {r1, r2}
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007e2a:	4a1c      	ldr	r2, [pc, #112]	; (8007e9c <main+0x2d0>)
 8007e2c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8007e2e:	f7f8 fba7 	bl	8000580 <HAL_ADC_Init>
 8007e32:	9b01      	ldr	r3, [sp, #4]
 8007e34:	b100      	cbz	r0, 8007e38 <main+0x26c>
 8007e36:	e7fe      	b.n	8007e36 <main+0x26a>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007e38:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	4618      	mov	r0, r3
  sConfig.Channel = ADC_CHANNEL_4;
 8007e3e:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007e42:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007e44:	f7f8 fc40 	bl	80006c8 <HAL_ADC_ConfigChannel>
 8007e48:	b100      	cbz	r0, 8007e4c <main+0x280>
 8007e4a:	e7fe      	b.n	8007e4a <main+0x27e>
  hcrc.Instance = CRC;
 8007e4c:	4b14      	ldr	r3, [pc, #80]	; (8007ea0 <main+0x2d4>)
 8007e4e:	4a15      	ldr	r2, [pc, #84]	; (8007ea4 <main+0x2d8>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007e50:	7118      	strb	r0, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007e52:	7158      	strb	r0, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007e54:	6158      	str	r0, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007e56:	6198      	str	r0, [r3, #24]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007e58:	4618      	mov	r0, r3
  hcrc.Instance = CRC;
 8007e5a:	601a      	str	r2, [r3, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007e5c:	621e      	str	r6, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007e5e:	f7f8 fd4b 	bl	80008f8 <HAL_CRC_Init>
 8007e62:	b308      	cbz	r0, 8007ea8 <main+0x2dc>
 8007e64:	e7fe      	b.n	8007e64 <main+0x298>
 8007e66:	bf00      	nop
 8007e68:	40023800 	.word	0x40023800
 8007e6c:	40020c00 	.word	0x40020c00
 8007e70:	40022000 	.word	0x40022000
 8007e74:	40022800 	.word	0x40022800
 8007e78:	40021c00 	.word	0x40021c00
 8007e7c:	40021800 	.word	0x40021800
 8007e80:	40021000 	.word	0x40021000
 8007e84:	40022400 	.word	0x40022400
 8007e88:	10120000 	.word	0x10120000
 8007e8c:	40020800 	.word	0x40020800
 8007e90:	40020400 	.word	0x40020400
 8007e94:	20008a98 	.word	0x20008a98
 8007e98:	40012200 	.word	0x40012200
 8007e9c:	0f000001 	.word	0x0f000001
 8007ea0:	200088c8 	.word	0x200088c8
 8007ea4:	40023000 	.word	0x40023000
  hdcmi.Instance = DCMI;
 8007ea8:	4b9c      	ldr	r3, [pc, #624]	; (800811c <main+0x550>)
 8007eaa:	4a9d      	ldr	r2, [pc, #628]	; (8008120 <main+0x554>)
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8007eac:	6058      	str	r0, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8007eae:	6098      	str	r0, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8007eb0:	60d8      	str	r0, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8007eb2:	6118      	str	r0, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8007eb4:	6158      	str	r0, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8007eb6:	6198      	str	r0, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8007eb8:	6218      	str	r0, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8007eba:	6258      	str	r0, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8007ebc:	6298      	str	r0, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8007ebe:	62d8      	str	r0, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8007ec0:	6318      	str	r0, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8007ec2:	4618      	mov	r0, r3
  hdcmi.Instance = DCMI;
 8007ec4:	601a      	str	r2, [r3, #0]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8007ec6:	f7f8 fd77 	bl	80009b8 <HAL_DCMI_Init>
 8007eca:	b100      	cbz	r0, 8007ece <main+0x302>
 8007ecc:	e7fe      	b.n	8007ecc <main+0x300>
  heth.Instance = ETH;
 8007ece:	4b95      	ldr	r3, [pc, #596]	; (8008124 <main+0x558>)
 8007ed0:	4a95      	ldr	r2, [pc, #596]	; (8008128 <main+0x55c>)
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007ed2:	8218      	strh	r0, [r3, #16]
  MACAddr[0] = 0x00;
 8007ed4:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
  MACAddr[3] = 0x00;
 8007ed8:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
  MACAddr[4] = 0x00;
 8007edc:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
  MACAddr[5] = 0x00;
 8007ee0:	f88d 0071 	strb.w	r0, [sp, #113]	; 0x71
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8007ee4:	6198      	str	r0, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007ee6:	61d8      	str	r0, [r3, #28]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 8007ee8:	4618      	mov	r0, r3
  heth.Init.MACAddr = &MACAddr[0];
 8007eea:	615d      	str	r5, [r3, #20]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007eec:	e883 0044 	stmia.w	r3, {r2, r6}
  MACAddr[1] = 0x80;
 8007ef0:	2280      	movs	r2, #128	; 0x80
 8007ef2:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
  MACAddr[2] = 0xE1;
 8007ef6:	22e1      	movs	r2, #225	; 0xe1
 8007ef8:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007efc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007f00:	621a      	str	r2, [r3, #32]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 8007f02:	f7f8 ffcf 	bl	8000ea4 <HAL_ETH_Init>
 8007f06:	b100      	cbz	r0, 8007f0a <main+0x33e>
 8007f08:	e7fe      	b.n	8007f08 <main+0x33c>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007f0a:	4b88      	ldr	r3, [pc, #544]	; (800812c <main+0x560>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8007f0c:	4629      	mov	r1, r5
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007f0e:	4a88      	ldr	r2, [pc, #544]	; (8008130 <main+0x564>)
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8007f10:	6058      	str	r0, [r3, #4]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8007f12:	601a      	str	r2, [r3, #0]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8007f14:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8007f18:	6098      	str	r0, [r3, #8]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8007f1a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8007f1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007f20:	61d8      	str	r0, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8007f22:	621a      	str	r2, [r3, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8007f24:	2207      	movs	r2, #7
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8007f26:	6298      	str	r0, [r3, #40]	; 0x28
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8007f28:	4618      	mov	r0, r3
  SdramTiming.ExitSelfRefreshDelay = 7;
 8007f2a:	921c      	str	r2, [sp, #112]	; 0x70
  SdramTiming.RowCycleDelay = 7;
 8007f2c:	921e      	str	r2, [sp, #120]	; 0x78
  SdramTiming.WriteRecoveryTime = 3;
 8007f2e:	2203      	movs	r2, #3
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8007f30:	f8c3 800c 	str.w	r8, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8007f34:	f8c3 b010 	str.w	fp, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007f38:	f8c3 a014 	str.w	sl, [r3, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8007f3c:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  SdramTiming.LoadToActiveDelay = 2;
 8007f40:	971b      	str	r7, [sp, #108]	; 0x6c
  SdramTiming.SelfRefreshTime = 4;
 8007f42:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  SdramTiming.WriteRecoveryTime = 3;
 8007f46:	921f      	str	r2, [sp, #124]	; 0x7c
  SdramTiming.RPDelay = 2;
 8007f48:	9720      	str	r7, [sp, #128]	; 0x80
  SdramTiming.RCDDelay = 2;
 8007f4a:	9721      	str	r7, [sp, #132]	; 0x84
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8007f4c:	f7fb fda6 	bl	8003a9c <HAL_SDRAM_Init>
 8007f50:	b100      	cbz	r0, 8007f54 <main+0x388>
 8007f52:	e7fe      	b.n	8007f52 <main+0x386>
  hi2c1.Instance = I2C1;
 8007f54:	4c77      	ldr	r4, [pc, #476]	; (8008134 <main+0x568>)
  hi2c1.Init.Timing = 0x20404768;
 8007f56:	4b78      	ldr	r3, [pc, #480]	; (8008138 <main+0x56c>)
 8007f58:	4f78      	ldr	r7, [pc, #480]	; (800813c <main+0x570>)
  hi2c1.Init.OwnAddress1 = 0;
 8007f5a:	60a0      	str	r0, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f5c:	6120      	str	r0, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8007f5e:	6160      	str	r0, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007f60:	61a0      	str	r0, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f62:	61e0      	str	r0, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f64:	6220      	str	r0, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007f66:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007f68:	60e6      	str	r6, [r4, #12]
  hi2c1.Init.Timing = 0x20404768;
 8007f6a:	e884 0088 	stmia.w	r4, {r3, r7}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007f6e:	f7f9 fdc5 	bl	8001afc <HAL_I2C_Init>
 8007f72:	4601      	mov	r1, r0
 8007f74:	b100      	cbz	r0, 8007f78 <main+0x3ac>
 8007f76:	e7fe      	b.n	8007f76 <main+0x3aa>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007f78:	4620      	mov	r0, r4
 8007f7a:	f7f9 fe10 	bl	8001b9e <HAL_I2CEx_ConfigAnalogFilter>
 8007f7e:	4601      	mov	r1, r0
 8007f80:	b100      	cbz	r0, 8007f84 <main+0x3b8>
 8007f82:	e7fe      	b.n	8007f82 <main+0x3b6>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8007f84:	4620      	mov	r0, r4
 8007f86:	f7f9 fe30 	bl	8001bea <HAL_I2CEx_ConfigDigitalFilter>
 8007f8a:	b100      	cbz	r0, 8007f8e <main+0x3c2>
 8007f8c:	e7fe      	b.n	8007f8c <main+0x3c0>
  hi2c3.Instance = I2C3;
 8007f8e:	4b6c      	ldr	r3, [pc, #432]	; (8008140 <main+0x574>)
 8007f90:	4a6c      	ldr	r2, [pc, #432]	; (8008144 <main+0x578>)
  hi2c3.Init.OwnAddress1 = 0;
 8007f92:	6098      	str	r0, [r3, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007f94:	6118      	str	r0, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8007f96:	6158      	str	r0, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007f98:	6198      	str	r0, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007f9a:	61d8      	str	r0, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007f9c:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007f9e:	4618      	mov	r0, r3
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007fa0:	60de      	str	r6, [r3, #12]
  hi2c3.Init.Timing = 0x20404768;
 8007fa2:	e883 0084 	stmia.w	r3, {r2, r7}
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007fa6:	f7f9 fda9 	bl	8001afc <HAL_I2C_Init>
 8007faa:	b100      	cbz	r0, 8007fae <main+0x3e2>
 8007fac:	e7fe      	b.n	8007fac <main+0x3e0>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4863      	ldr	r0, [pc, #396]	; (8008140 <main+0x574>)
 8007fb2:	f7f9 fdf4 	bl	8001b9e <HAL_I2CEx_ConfigAnalogFilter>
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	b100      	cbz	r0, 8007fbc <main+0x3f0>
 8007fba:	e7fe      	b.n	8007fba <main+0x3ee>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8007fbc:	4860      	ldr	r0, [pc, #384]	; (8008140 <main+0x574>)
 8007fbe:	f7f9 fe14 	bl	8001bea <HAL_I2CEx_ConfigDigitalFilter>
 8007fc2:	b100      	cbz	r0, 8007fc6 <main+0x3fa>
 8007fc4:	e7fe      	b.n	8007fc4 <main+0x3f8>
  hltdc.Instance = LTDC;
 8007fc6:	4c60      	ldr	r4, [pc, #384]	; (8008148 <main+0x57c>)
 8007fc8:	4b60      	ldr	r3, [pc, #384]	; (800814c <main+0x580>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007fca:	6060      	str	r0, [r4, #4]
  hltdc.Instance = LTDC;
 8007fcc:	6023      	str	r3, [r4, #0]
  hltdc.Init.HorizontalSync = 40;
 8007fce:	2328      	movs	r3, #40	; 0x28
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8007fd0:	60a0      	str	r0, [r4, #8]
  hltdc.Init.HorizontalSync = 40;
 8007fd2:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 9;
 8007fd4:	2309      	movs	r3, #9
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007fd6:	60e0      	str	r0, [r4, #12]
  hltdc.Init.VerticalSync = 9;
 8007fd8:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8007fda:	2335      	movs	r3, #53	; 0x35
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007fdc:	6120      	str	r0, [r4, #16]
  hltdc.Init.AccumulatedHBP = 53;
 8007fde:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8007fe0:	230b      	movs	r3, #11
  hltdc.Init.Backcolor.Blue = 0;
 8007fe2:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  hltdc.Init.AccumulatedVBP = 11;
 8007fe6:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8007fe8:	f240 2315 	movw	r3, #533	; 0x215
  hltdc.Init.Backcolor.Green = 0;
 8007fec:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  hltdc.Init.AccumulatedActiveW = 533;
 8007ff0:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8007ff2:	f240 131b 	movw	r3, #283	; 0x11b
  hltdc.Init.Backcolor.Red = 0;
 8007ff6:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8007ffa:	4620      	mov	r0, r4
  hltdc.Init.AccumulatedActiveH = 283;
 8007ffc:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8007ffe:	f240 2335 	movw	r3, #565	; 0x235
 8008002:	62e3      	str	r3, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8008004:	f240 131d 	movw	r3, #285	; 0x11d
 8008008:	6323      	str	r3, [r4, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800800a:	f7f9 fe99 	bl	8001d40 <HAL_LTDC_Init>
 800800e:	4602      	mov	r2, r0
 8008010:	b100      	cbz	r0, 8008014 <main+0x448>
 8008012:	e7fe      	b.n	8008012 <main+0x446>
  pLayerCfg.WindowX0 = 0;
 8008014:	901b      	str	r0, [sp, #108]	; 0x6c
  pLayerCfg.WindowX1 = 480;
 8008016:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
  pLayerCfg.WindowY0 = 0;
 800801a:	901d      	str	r0, [sp, #116]	; 0x74
  pLayerCfg.WindowY1 = 272;
 800801c:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8008020:	901f      	str	r0, [sp, #124]	; 0x7c
  pLayerCfg.Alpha = 255;
 8008022:	f04f 08ff 	mov.w	r8, #255	; 0xff
  pLayerCfg.Alpha0 = 0;
 8008026:	9021      	str	r0, [sp, #132]	; 0x84
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8008028:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  pLayerCfg.WindowX1 = 480;
 800802c:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800802e:	9022      	str	r0, [sp, #136]	; 0x88
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008030:	2007      	movs	r0, #7
  pLayerCfg.ImageWidth = 480;
 8008032:	9125      	str	r1, [sp, #148]	; 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8008034:	4629      	mov	r1, r5
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008036:	9023      	str	r0, [sp, #140]	; 0x8c
  pLayerCfg.FBStartAdress = 0xC0000000;
 8008038:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
  pLayerCfg.WindowY1 = 272;
 800803c:	931e      	str	r3, [sp, #120]	; 0x78
  pLayerCfg.FBStartAdress = 0xC0000000;
 800803e:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8008040:	4620      	mov	r0, r4
  pLayerCfg.Alpha = 255;
 8008042:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
  pLayerCfg.ImageHeight = 272;
 8008046:	9326      	str	r3, [sp, #152]	; 0x98
  pLayerCfg.Backcolor.Blue = 0;
 8008048:	f88d 209c 	strb.w	r2, [sp, #156]	; 0x9c
  pLayerCfg.Backcolor.Green = 0;
 800804c:	f88d 209d 	strb.w	r2, [sp, #157]	; 0x9d
  pLayerCfg.Backcolor.Red = 0;
 8008050:	f88d 209e 	strb.w	r2, [sp, #158]	; 0x9e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8008054:	f7f9 ff4a 	bl	8001eec <HAL_LTDC_ConfigLayer>
 8008058:	b100      	cbz	r0, 800805c <main+0x490>
 800805a:	e7fe      	b.n	800805a <main+0x48e>
  hqspi.Instance = QUADSPI;
 800805c:	4b3c      	ldr	r3, [pc, #240]	; (8008150 <main+0x584>)
  hqspi.Init.FifoThreshold = 1;
 800805e:	2601      	movs	r6, #1
  hqspi.Instance = QUADSPI;
 8008060:	4a3c      	ldr	r2, [pc, #240]	; (8008154 <main+0x588>)
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8008062:	60d8      	str	r0, [r3, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8008064:	6158      	str	r0, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8008066:	6198      	str	r0, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8008068:	61d8      	str	r0, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 800806a:	6218      	str	r0, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800806c:	4618      	mov	r0, r3
  hqspi.Init.FifoThreshold = 1;
 800806e:	609e      	str	r6, [r3, #8]
  hqspi.Init.FlashSize = 1;
 8008070:	611e      	str	r6, [r3, #16]
  hqspi.Init.ClockPrescaler = 255;
 8008072:	e883 0104 	stmia.w	r3, {r2, r8}
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8008076:	f7f9 ffc1 	bl	8001ffc <HAL_QSPI_Init>
 800807a:	4607      	mov	r7, r0
 800807c:	b100      	cbz	r0, 8008080 <main+0x4b4>
 800807e:	e7fe      	b.n	800807e <main+0x4b2>
  hrtc.Instance = RTC;
 8008080:	4c35      	ldr	r4, [pc, #212]	; (8008158 <main+0x58c>)
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8008082:	4601      	mov	r1, r0
  hrtc.Instance = RTC;
 8008084:	4b35      	ldr	r3, [pc, #212]	; (800815c <main+0x590>)
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 8008086:	4620      	mov	r0, r4
  hrtc.Instance = RTC;
 8008088:	6023      	str	r3, [r4, #0]
if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2){
 800808a:	f7fa ffba 	bl	8003002 <HAL_RTCEx_BKUPRead>
 800808e:	f243 23f2 	movw	r3, #13042	; 0x32f2
 8008092:	4298      	cmp	r0, r3
 8008094:	d07d      	beq.n	8008192 <main+0x5c6>
  hrtc.Init.AsynchPrediv = 127;
 8008096:	237f      	movs	r3, #127	; 0x7f
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008098:	4620      	mov	r0, r4
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800809a:	6067      	str	r7, [r4, #4]
  hrtc.Init.AsynchPrediv = 127;
 800809c:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 800809e:	f8c4 800c 	str.w	r8, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80080a2:	6127      	str	r7, [r4, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80080a4:	6167      	str	r7, [r4, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80080a6:	61a7      	str	r7, [r4, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80080a8:	f7fa fdc8 	bl	8002c3c <HAL_RTC_Init>
 80080ac:	b100      	cbz	r0, 80080b0 <main+0x4e4>
 80080ae:	e7fe      	b.n	80080ae <main+0x4e2>
  sTime.Hours = 0x0;
 80080b0:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80080b4:	4632      	mov	r2, r6
  sTime.Minutes = 0x0;
 80080b6:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80080ba:	a914      	add	r1, sp, #80	; 0x50
  sTime.Seconds = 0x0;
 80080bc:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80080c0:	9018      	str	r0, [sp, #96]	; 0x60
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80080c2:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80080c4:	4620      	mov	r0, r4
 80080c6:	f7fa fe65 	bl	8002d94 <HAL_RTC_SetTime>
 80080ca:	b100      	cbz	r0, 80080ce <main+0x502>
 80080cc:	e7fe      	b.n	80080cc <main+0x500>
  sDate.Year = 0x0;
 80080ce:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80080d2:	4632      	mov	r2, r6
 80080d4:	a910      	add	r1, sp, #64	; 0x40
 80080d6:	4620      	mov	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80080d8:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
  sDate.Month = RTC_MONTH_JANUARY;
 80080dc:	f88d 6041 	strb.w	r6, [sp, #65]	; 0x41
  sDate.Date = 0x1;
 80080e0:	f88d 6042 	strb.w	r6, [sp, #66]	; 0x42
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80080e4:	f7fa fdf7 	bl	8002cd6 <HAL_RTC_SetDate>
 80080e8:	b100      	cbz	r0, 80080ec <main+0x520>
 80080ea:	e7fe      	b.n	80080ea <main+0x51e>
  sAlarm.Alarm = RTC_ALARM_A;
 80080ec:	f44f 7380 	mov.w	r3, #256	; 0x100
  sAlarm.AlarmTime.Hours = 0x0;
 80080f0:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
  sAlarm.AlarmTime.Minutes = 0x0;
 80080f4:	f88d 006d 	strb.w	r0, [sp, #109]	; 0x6d
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80080f8:	4632      	mov	r2, r6
  sAlarm.AlarmTime.Seconds = 0x0;
 80080fa:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80080fe:	4629      	mov	r1, r5
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8008100:	901c      	str	r0, [sp, #112]	; 0x70
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008102:	901f      	str	r0, [sp, #124]	; 0x7c
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008104:	9020      	str	r0, [sp, #128]	; 0x80
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8008106:	9021      	str	r0, [sp, #132]	; 0x84
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8008108:	9022      	str	r0, [sp, #136]	; 0x88
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800810a:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800810c:	4620      	mov	r0, r4
  sAlarm.AlarmDateWeekDay = 0x1;
 800810e:	f88d 6090 	strb.w	r6, [sp, #144]	; 0x90
  sAlarm.Alarm = RTC_ALARM_A;
 8008112:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8008114:	f7fa feac 	bl	8002e70 <HAL_RTC_SetAlarm>
 8008118:	b310      	cbz	r0, 8008160 <main+0x594>
 800811a:	e7fe      	b.n	800811a <main+0x54e>
 800811c:	20008ae0 	.word	0x20008ae0
 8008120:	50050000 	.word	0x50050000
 8008124:	20008ffc 	.word	0x20008ffc
 8008128:	40028000 	.word	0x40028000
 800812c:	20008fc8 	.word	0x20008fc8
 8008130:	a0000140 	.word	0xa0000140
 8008134:	2000887c 	.word	0x2000887c
 8008138:	40005400 	.word	0x40005400
 800813c:	20404768 	.word	0x20404768
 8008140:	20008720 	.word	0x20008720
 8008144:	40005c00 	.word	0x40005c00
 8008148:	200089f0 	.word	0x200089f0
 800814c:	40016800 	.word	0x40016800
 8008150:	20009044 	.word	0x20009044
 8008154:	a0001000 	.word	0xa0001000
 8008158:	20008e38 	.word	0x20008e38
 800815c:	40002800 	.word	0x40002800
  sAlarm.AlarmDateWeekDay = 0x1;
 8008160:	2201      	movs	r2, #1
  sAlarm.Alarm = RTC_ALARM_B;
 8008162:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8008166:	4629      	mov	r1, r5
 8008168:	488c      	ldr	r0, [pc, #560]	; (800839c <main+0x7d0>)
  sAlarm.AlarmDateWeekDay = 0x1;
 800816a:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
  sAlarm.Alarm = RTC_ALARM_B;
 800816e:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8008170:	f7fa fe7e 	bl	8002e70 <HAL_RTC_SetAlarm>
 8008174:	4601      	mov	r1, r0
 8008176:	b100      	cbz	r0, 800817a <main+0x5ae>
 8008178:	e7fe      	b.n	8008178 <main+0x5ac>
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800817a:	2202      	movs	r2, #2
 800817c:	4887      	ldr	r0, [pc, #540]	; (800839c <main+0x7d0>)
 800817e:	f7fa ff15 	bl	8002fac <HAL_RTCEx_SetTimeStamp>
 8008182:	4601      	mov	r1, r0
 8008184:	b100      	cbz	r0, 8008188 <main+0x5bc>
 8008186:	e7fe      	b.n	8008186 <main+0x5ba>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);
 8008188:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800818c:	4883      	ldr	r0, [pc, #524]	; (800839c <main+0x7d0>)
 800818e:	f7fa ff33 	bl	8002ff8 <HAL_RTCEx_BKUPWrite>
  hsai_BlockA2.Instance = SAI2_Block_A;
 8008192:	4883      	ldr	r0, [pc, #524]	; (80083a0 <main+0x7d4>)
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8008194:	2401      	movs	r4, #1
  hsai_BlockA2.Instance = SAI2_Block_A;
 8008196:	4b83      	ldr	r3, [pc, #524]	; (80083a4 <main+0x7d8>)
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_24;
 8008198:	27c0      	movs	r7, #192	; 0xc0
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800819a:	4a83      	ldr	r2, [pc, #524]	; (80083a8 <main+0x7dc>)
  hsai_BlockA2.FrameInit.FrameLength = 8;
 800819c:	2608      	movs	r6, #8
  hsai_BlockA2.Instance = SAI2_Block_A;
 800819e:	6003      	str	r3, [r0, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80081a0:	2300      	movs	r3, #0
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_24;
 80081a2:	6347      	str	r7, [r0, #52]	; 0x34
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80081a4:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80081a6:	6043      	str	r3, [r0, #4]
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80081a8:	6383      	str	r3, [r0, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80081aa:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80081ac:	6083      	str	r3, [r0, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80081ae:	6103      	str	r3, [r0, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80081b0:	6143      	str	r3, [r0, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80081b2:	6183      	str	r3, [r0, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80081b4:	61c2      	str	r2, [r0, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80081b6:	60c3      	str	r3, [r0, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80081b8:	6243      	str	r3, [r0, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80081ba:	6283      	str	r3, [r0, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80081bc:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 80081be:	6406      	str	r6, [r0, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80081c0:	6444      	str	r4, [r0, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80081c2:	6483      	str	r3, [r0, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80081c4:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80081c6:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80081c8:	6543      	str	r3, [r0, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80081ca:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 80081cc:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80081ce:	6603      	str	r3, [r0, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80081d0:	f7fa ff3c 	bl	800304c <HAL_SAI_Init>
 80081d4:	b100      	cbz	r0, 80081d8 <main+0x60c>
 80081d6:	e7fe      	b.n	80081d6 <main+0x60a>
  hsai_BlockB2.Instance = SAI2_Block_B;
 80081d8:	4b74      	ldr	r3, [pc, #464]	; (80083ac <main+0x7e0>)
 80081da:	4a75      	ldr	r2, [pc, #468]	; (80083b0 <main+0x7e4>)
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80081dc:	6318      	str	r0, [r3, #48]	; 0x30
  hsai_BlockB2.Instance = SAI2_Block_B;
 80081de:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80081e0:	2203      	movs	r2, #3
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80081e2:	6398      	str	r0, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80081e4:	63d8      	str	r0, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80081e6:	6118      	str	r0, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80081e8:	6198      	str	r0, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80081ea:	60d8      	str	r0, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80081ec:	6258      	str	r0, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80081ee:	6298      	str	r0, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80081f0:	62d8      	str	r0, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80081f2:	6498      	str	r0, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80081f4:	64d8      	str	r0, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80081f6:	6518      	str	r0, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80081f8:	6558      	str	r0, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80081fa:	6598      	str	r0, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80081fc:	6618      	str	r0, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80081fe:	4618      	mov	r0, r3
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8008200:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_24;
 8008202:	635f      	str	r7, [r3, #52]	; 0x34
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8008204:	609c      	str	r4, [r3, #8]
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8008206:	641e      	str	r6, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8008208:	645c      	str	r4, [r3, #68]	; 0x44
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 800820a:	65dc      	str	r4, [r3, #92]	; 0x5c
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800820c:	f7fa ff1e 	bl	800304c <HAL_SAI_Init>
 8008210:	4603      	mov	r3, r0
 8008212:	b100      	cbz	r0, 8008216 <main+0x64a>
 8008214:	e7fe      	b.n	8008214 <main+0x648>
  hsd1.Instance = SDMMC1;
 8008216:	4a67      	ldr	r2, [pc, #412]	; (80083b4 <main+0x7e8>)
 8008218:	4967      	ldr	r1, [pc, #412]	; (80083b8 <main+0x7ec>)
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800821a:	6090      	str	r0, [r2, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800821c:	60d0      	str	r0, [r2, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800821e:	6110      	str	r0, [r2, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008220:	6150      	str	r0, [r2, #20]
  hsd1.Init.ClockDiv = 0;
 8008222:	6190      	str	r0, [r2, #24]
  hspdif.Instance = SPDIFRX;
 8008224:	4865      	ldr	r0, [pc, #404]	; (80083bc <main+0x7f0>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8008226:	e882 000a 	stmia.w	r2, {r1, r3}
  hspdif.Instance = SPDIFRX;
 800822a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 800822e:	6083      	str	r3, [r0, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8008230:	60c3      	str	r3, [r0, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8008232:	6103      	str	r3, [r0, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8008234:	6143      	str	r3, [r0, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8008236:	6183      	str	r3, [r0, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8008238:	61c3      	str	r3, [r0, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 800823a:	6203      	str	r3, [r0, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 800823c:	6243      	str	r3, [r0, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 800823e:	6283      	str	r3, [r0, #40]	; 0x28
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8008240:	e880 000c 	stmia.w	r0, {r2, r3}
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8008244:	f7fb fc4a 	bl	8003adc <HAL_SPDIFRX_Init>
 8008248:	b100      	cbz	r0, 800824c <main+0x680>
 800824a:	e7fe      	b.n	800824a <main+0x67e>
  htim1.Instance = TIM1;
 800824c:	4c5c      	ldr	r4, [pc, #368]	; (80083c0 <main+0x7f4>)
 800824e:	4b5d      	ldr	r3, [pc, #372]	; (80083c4 <main+0x7f8>)
  htim1.Init.Prescaler = 0;
 8008250:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008252:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 8008254:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008256:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8008258:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800825a:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800825c:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 800825e:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008260:	f7fb fdbe 	bl	8003de0 <HAL_TIM_Base_Init>
 8008264:	b100      	cbz	r0, 8008268 <main+0x69c>
 8008266:	e7fe      	b.n	8008266 <main+0x69a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008268:	ae28      	add	r6, sp, #160	; 0xa0
 800826a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800826e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008270:	f846 3d60 	str.w	r3, [r6, #-96]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008274:	4631      	mov	r1, r6
 8008276:	f7fb fead 	bl	8003fd4 <HAL_TIM_ConfigClockSource>
 800827a:	b100      	cbz	r0, 800827e <main+0x6b2>
 800827c:	e7fe      	b.n	800827c <main+0x6b0>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800827e:	4620      	mov	r0, r4
 8008280:	f7fb fdc8 	bl	8003e14 <HAL_TIM_PWM_Init>
 8008284:	b100      	cbz	r0, 8008288 <main+0x6bc>
 8008286:	e7fe      	b.n	8008286 <main+0x6ba>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008288:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800828a:	a90d      	add	r1, sp, #52	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800828c:	900e      	str	r0, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800828e:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008290:	4620      	mov	r0, r4
 8008292:	f7fb ff7d 	bl	8004190 <HAL_TIMEx_MasterConfigSynchronization>
 8008296:	4602      	mov	r2, r0
 8008298:	b100      	cbz	r0, 800829c <main+0x6d0>
 800829a:	e7fe      	b.n	800829a <main+0x6ce>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800829c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800829e:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80082a0:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80082a2:	a914      	add	r1, sp, #80	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80082a4:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80082a6:	9018      	str	r0, [sp, #96]	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80082a8:	9019      	str	r0, [sp, #100]	; 0x64
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80082aa:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80082ac:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80082ae:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80082b0:	f7fb ffd8 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 80082b4:	b100      	cbz	r0, 80082b8 <main+0x6ec>
 80082b6:	e7fe      	b.n	80082b6 <main+0x6ea>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80082b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80082bc:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80082be:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80082c0:	4629      	mov	r1, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80082c2:	9320      	str	r3, [sp, #128]	; 0x80
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80082c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80082c8:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.DeadTime = 0;
 80082ca:	901e      	str	r0, [sp, #120]	; 0x78
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80082cc:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.BreakFilter = 0;
 80082ce:	9021      	str	r0, [sp, #132]	; 0x84
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80082d0:	9022      	str	r0, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.Break2Filter = 0;
 80082d2:	9024      	str	r0, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80082d4:	9025      	str	r0, [sp, #148]	; 0x94
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80082d6:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80082d8:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80082da:	f7fb ff7f 	bl	80041dc <HAL_TIMEx_ConfigBreakDeadTime>
 80082de:	4607      	mov	r7, r0
 80082e0:	b100      	cbz	r0, 80082e4 <main+0x718>
 80082e2:	e7fe      	b.n	80082e2 <main+0x716>
  HAL_TIM_MspPostInit(&htim1);
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 fd3d 	bl	8008d64 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80082ea:	4837      	ldr	r0, [pc, #220]	; (80083c8 <main+0x7fc>)
 80082ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80082f0:	6087      	str	r7, [r0, #8]
  htim2.Init.Period = 0;
 80082f2:	60c7      	str	r7, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80082f4:	6107      	str	r7, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80082f6:	6187      	str	r7, [r0, #24]
  htim2.Init.Prescaler = 0;
 80082f8:	e880 0088 	stmia.w	r0, {r3, r7}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80082fc:	f7fb fd70 	bl	8003de0 <HAL_TIM_Base_Init>
 8008300:	b100      	cbz	r0, 8008304 <main+0x738>
 8008302:	e7fe      	b.n	8008302 <main+0x736>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008304:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008308:	a914      	add	r1, sp, #80	; 0x50
 800830a:	482f      	ldr	r0, [pc, #188]	; (80083c8 <main+0x7fc>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800830c:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008310:	f7fb fe60 	bl	8003fd4 <HAL_TIM_ConfigClockSource>
 8008314:	b100      	cbz	r0, 8008318 <main+0x74c>
 8008316:	e7fe      	b.n	8008316 <main+0x74a>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008318:	482b      	ldr	r0, [pc, #172]	; (80083c8 <main+0x7fc>)
 800831a:	f7fb fd7b 	bl	8003e14 <HAL_TIM_PWM_Init>
 800831e:	b100      	cbz	r0, 8008322 <main+0x756>
 8008320:	e7fe      	b.n	8008320 <main+0x754>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008322:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008324:	4631      	mov	r1, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008326:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008328:	4827      	ldr	r0, [pc, #156]	; (80083c8 <main+0x7fc>)
 800832a:	f7fb ff31 	bl	8004190 <HAL_TIMEx_MasterConfigSynchronization>
 800832e:	4602      	mov	r2, r0
 8008330:	b100      	cbz	r0, 8008334 <main+0x768>
 8008332:	e7fe      	b.n	8008332 <main+0x766>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008334:	f04f 0860 	mov.w	r8, #96	; 0x60
  sConfigOC.Pulse = 0;
 8008338:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800833a:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800833c:	4629      	mov	r1, r5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800833e:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008340:	4821      	ldr	r0, [pc, #132]	; (80083c8 <main+0x7fc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008342:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008346:	f7fb ff8d 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 800834a:	4607      	mov	r7, r0
 800834c:	b100      	cbz	r0, 8008350 <main+0x784>
 800834e:	e7fe      	b.n	800834e <main+0x782>
  htim3.Instance = TIM3;
 8008350:	4c1e      	ldr	r4, [pc, #120]	; (80083cc <main+0x800>)
  HAL_TIM_MspPostInit(&htim2);
 8008352:	481d      	ldr	r0, [pc, #116]	; (80083c8 <main+0x7fc>)
 8008354:	f000 fd06 	bl	8008d64 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 8008358:	4b1d      	ldr	r3, [pc, #116]	; (80083d0 <main+0x804>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800835a:	4620      	mov	r0, r4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800835c:	60a7      	str	r7, [r4, #8]
  htim3.Init.Period = 0;
 800835e:	60e7      	str	r7, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008360:	6127      	str	r7, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008362:	61a7      	str	r7, [r4, #24]
  htim3.Init.Prescaler = 0;
 8008364:	e884 0088 	stmia.w	r4, {r3, r7}
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008368:	f7fb fd3a 	bl	8003de0 <HAL_TIM_Base_Init>
 800836c:	b100      	cbz	r0, 8008370 <main+0x7a4>
 800836e:	e7fe      	b.n	800836e <main+0x7a2>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008370:	a914      	add	r1, sp, #80	; 0x50
 8008372:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008374:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008378:	f7fb fe2c 	bl	8003fd4 <HAL_TIM_ConfigClockSource>
 800837c:	b100      	cbz	r0, 8008380 <main+0x7b4>
 800837e:	e7fe      	b.n	800837e <main+0x7b2>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008380:	4620      	mov	r0, r4
 8008382:	f7fb fd47 	bl	8003e14 <HAL_TIM_PWM_Init>
 8008386:	b100      	cbz	r0, 800838a <main+0x7be>
 8008388:	e7fe      	b.n	8008388 <main+0x7bc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800838a:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800838c:	4631      	mov	r1, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800838e:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008390:	4620      	mov	r0, r4
 8008392:	f7fb fefd 	bl	8004190 <HAL_TIMEx_MasterConfigSynchronization>
 8008396:	4602      	mov	r2, r0
 8008398:	b1e0      	cbz	r0, 80083d4 <main+0x808>
 800839a:	e7fe      	b.n	800839a <main+0x7ce>
 800839c:	20008e38 	.word	0x20008e38
 80083a0:	200087f8 	.word	0x200087f8
 80083a4:	40015c04 	.word	0x40015c04
 80083a8:	0002ee00 	.word	0x0002ee00
 80083ac:	20008698 	.word	0x20008698
 80083b0:	40015c24 	.word	0x40015c24
 80083b4:	200088ec 	.word	0x200088ec
 80083b8:	40012c00 	.word	0x40012c00
 80083bc:	200087ac 	.word	0x200087ac
 80083c0:	20008e58 	.word	0x20008e58
 80083c4:	40010000 	.word	0x40010000
 80083c8:	20008f48 	.word	0x20008f48
 80083cc:	200089b0 	.word	0x200089b0
 80083d0:	40000400 	.word	0x40000400
  sConfigOC.Pulse = 0;
 80083d4:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80083d6:	4629      	mov	r1, r5
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80083d8:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80083da:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80083dc:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80083de:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80083e2:	f7fb ff3f 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 80083e6:	4605      	mov	r5, r0
 80083e8:	b100      	cbz	r0, 80083ec <main+0x820>
 80083ea:	e7fe      	b.n	80083ea <main+0x81e>
  HAL_TIM_MspPostInit(&htim3);
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 fcb9 	bl	8008d64 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 80083f2:	486d      	ldr	r0, [pc, #436]	; (80085a8 <main+0x9dc>)
 80083f4:	4b6d      	ldr	r3, [pc, #436]	; (80085ac <main+0x9e0>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083f6:	6085      	str	r5, [r0, #8]
  htim5.Init.Period = 0;
 80083f8:	60c5      	str	r5, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083fa:	6105      	str	r5, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083fc:	6185      	str	r5, [r0, #24]
  htim5.Init.Prescaler = 0;
 80083fe:	e880 0028 	stmia.w	r0, {r3, r5}
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008402:	f7fb fced 	bl	8003de0 <HAL_TIM_Base_Init>
 8008406:	b100      	cbz	r0, 800840a <main+0x83e>
 8008408:	e7fe      	b.n	8008408 <main+0x83c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800840a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800840e:	a914      	add	r1, sp, #80	; 0x50
 8008410:	4865      	ldr	r0, [pc, #404]	; (80085a8 <main+0x9dc>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008412:	9714      	str	r7, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008414:	f7fb fdde 	bl	8003fd4 <HAL_TIM_ConfigClockSource>
 8008418:	b100      	cbz	r0, 800841c <main+0x850>
 800841a:	e7fe      	b.n	800841a <main+0x84e>
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800841c:	4862      	ldr	r0, [pc, #392]	; (80085a8 <main+0x9dc>)
 800841e:	f7fb fcf9 	bl	8003e14 <HAL_TIM_PWM_Init>
 8008422:	b100      	cbz	r0, 8008426 <main+0x85a>
 8008424:	e7fe      	b.n	8008424 <main+0x858>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008426:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008428:	4631      	mov	r1, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800842a:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800842c:	485e      	ldr	r0, [pc, #376]	; (80085a8 <main+0x9dc>)
 800842e:	f7fb feaf 	bl	8004190 <HAL_TIMEx_MasterConfigSynchronization>
 8008432:	b100      	cbz	r0, 8008436 <main+0x86a>
 8008434:	e7fe      	b.n	8008434 <main+0x868>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008436:	2660      	movs	r6, #96	; 0x60
  sConfigOC.Pulse = 0;
 8008438:	901c      	str	r0, [sp, #112]	; 0x70
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800843a:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800843c:	220c      	movs	r2, #12
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800843e:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008440:	a91b      	add	r1, sp, #108	; 0x6c
 8008442:	4859      	ldr	r0, [pc, #356]	; (80085a8 <main+0x9dc>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008444:	961b      	str	r6, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008446:	f7fb ff0d 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 800844a:	4605      	mov	r5, r0
 800844c:	b100      	cbz	r0, 8008450 <main+0x884>
 800844e:	e7fe      	b.n	800844e <main+0x882>
  htim8.Instance = TIM8;
 8008450:	4c57      	ldr	r4, [pc, #348]	; (80085b0 <main+0x9e4>)
  HAL_TIM_MspPostInit(&htim5);
 8008452:	4855      	ldr	r0, [pc, #340]	; (80085a8 <main+0x9dc>)
 8008454:	f000 fc86 	bl	8008d64 <HAL_TIM_MspPostInit>
  htim8.Instance = TIM8;
 8008458:	4b56      	ldr	r3, [pc, #344]	; (80085b4 <main+0x9e8>)
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800845a:	4620      	mov	r0, r4
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800845c:	60a5      	str	r5, [r4, #8]
  htim8.Init.Period = 0;
 800845e:	60e5      	str	r5, [r4, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008460:	6125      	str	r5, [r4, #16]
  htim8.Init.RepetitionCounter = 0;
 8008462:	6165      	str	r5, [r4, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008464:	61a5      	str	r5, [r4, #24]
  htim8.Init.Prescaler = 0;
 8008466:	e884 0028 	stmia.w	r4, {r3, r5}
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800846a:	f7fb fcb9 	bl	8003de0 <HAL_TIM_Base_Init>
 800846e:	b100      	cbz	r0, 8008472 <main+0x8a6>
 8008470:	e7fe      	b.n	8008470 <main+0x8a4>
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008472:	a91b      	add	r1, sp, #108	; 0x6c
 8008474:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008476:	971b      	str	r7, [sp, #108]	; 0x6c
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008478:	f7fb fdac 	bl	8003fd4 <HAL_TIM_ConfigClockSource>
 800847c:	b100      	cbz	r0, 8008480 <main+0x8b4>
 800847e:	e7fe      	b.n	800847e <main+0x8b2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008480:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008482:	a914      	add	r1, sp, #80	; 0x50
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008484:	9015      	str	r0, [sp, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008486:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008488:	4620      	mov	r0, r4
 800848a:	f7fb fe81 	bl	8004190 <HAL_TIMEx_MasterConfigSynchronization>
 800848e:	b100      	cbz	r0, 8008492 <main+0x8c6>
 8008490:	e7fe      	b.n	8008490 <main+0x8c4>
  htim12.Instance = TIM12;
 8008492:	4c49      	ldr	r4, [pc, #292]	; (80085b8 <main+0x9ec>)
 8008494:	4b49      	ldr	r3, [pc, #292]	; (80085bc <main+0x9f0>)
  htim12.Init.Prescaler = 0;
 8008496:	6060      	str	r0, [r4, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008498:	60a0      	str	r0, [r4, #8]
  htim12.Init.Period = 0;
 800849a:	60e0      	str	r0, [r4, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800849c:	6120      	str	r0, [r4, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800849e:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80084a0:	4620      	mov	r0, r4
  htim12.Instance = TIM12;
 80084a2:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80084a4:	f7fb fcb6 	bl	8003e14 <HAL_TIM_PWM_Init>
 80084a8:	4602      	mov	r2, r0
 80084aa:	b100      	cbz	r0, 80084ae <main+0x8e2>
 80084ac:	e7fe      	b.n	80084ac <main+0x8e0>
  sConfigOC.Pulse = 0;
 80084ae:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80084b0:	a91b      	add	r1, sp, #108	; 0x6c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80084b2:	901d      	str	r0, [sp, #116]	; 0x74
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80084b4:	901f      	str	r0, [sp, #124]	; 0x7c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80084b6:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80084b8:	961b      	str	r6, [sp, #108]	; 0x6c
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80084ba:	f7fb fed3 	bl	8004264 <HAL_TIM_PWM_ConfigChannel>
 80084be:	4605      	mov	r5, r0
 80084c0:	b100      	cbz	r0, 80084c4 <main+0x8f8>
 80084c2:	e7fe      	b.n	80084c2 <main+0x8f6>
  HAL_TIM_MspPostInit(&htim12);
 80084c4:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 80084c6:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
  HAL_TIM_MspPostInit(&htim12);
 80084ca:	f000 fc4b 	bl	8008d64 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 80084ce:	483c      	ldr	r0, [pc, #240]	; (80085c0 <main+0x9f4>)
  huart1.Init.BaudRate = 115200;
 80084d0:	4b3c      	ldr	r3, [pc, #240]	; (80085c4 <main+0x9f8>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 80084d2:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80084d4:	6105      	str	r5, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80084d6:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80084d8:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80084da:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80084dc:	6245      	str	r5, [r0, #36]	; 0x24
  huart1.Init.BaudRate = 115200;
 80084de:	e880 0018 	stmia.w	r0, {r3, r4}
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80084e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084e6:	6083      	str	r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80084e8:	230c      	movs	r3, #12
 80084ea:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80084ec:	f7fc f931 	bl	8004752 <HAL_UART_Init>
 80084f0:	b100      	cbz	r0, 80084f4 <main+0x928>
 80084f2:	e7fe      	b.n	80084f2 <main+0x926>
  huart6.Instance = USART6;
 80084f4:	4834      	ldr	r0, [pc, #208]	; (80085c8 <main+0x9fc>)
 80084f6:	4b35      	ldr	r3, [pc, #212]	; (80085cc <main+0xa00>)
  huart6.Init.BaudRate = 115200;
 80084f8:	e880 0018 	stmia.w	r0, {r3, r4}
  huart6.Init.WordLength = UART_WORDLENGTH_7B;
 80084fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008500:	240c      	movs	r4, #12
  huart6.Init.WordLength = UART_WORDLENGTH_7B;
 8008502:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008504:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008506:	6144      	str	r4, [r0, #20]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008508:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800850a:	6103      	str	r3, [r0, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800850c:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800850e:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008510:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008512:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008514:	f7fc f91d 	bl	8004752 <HAL_UART_Init>
 8008518:	b100      	cbz	r0, 800851c <main+0x950>
 800851a:	e7fe      	b.n	800851a <main+0x94e>
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800851c:	4b2c      	ldr	r3, [pc, #176]	; (80085d0 <main+0xa04>)
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800851e:	2501      	movs	r5, #1
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008520:	4a2c      	ldr	r2, [pc, #176]	; (80085d4 <main+0xa08>)
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_HIGH;
 8008522:	60d8      	str	r0, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008524:	6118      	str	r0, [r3, #16]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008526:	61d8      	str	r0, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008528:	6218      	str	r0, [r3, #32]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800852a:	4618      	mov	r0, r3
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800852c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800852e:	609c      	str	r4, [r3, #8]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8008530:	619d      	str	r5, [r3, #24]
  hhcd_USB_OTG_HS.Init.use_external_vbus = ENABLE;
 8008532:	635d      	str	r5, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8008534:	f7f8 feed 	bl	8001312 <HAL_HCD_Init>
 8008538:	b100      	cbz	r0, 800853c <main+0x970>
 800853a:	e7fe      	b.n	800853a <main+0x96e>
  hdma2d.Instance = DMA2D;
 800853c:	4c26      	ldr	r4, [pc, #152]	; (80085d8 <main+0xa0c>)
 800853e:	4b27      	ldr	r3, [pc, #156]	; (80085dc <main+0xa10>)
  hdma2d.Init.Mode = DMA2D_M2M;
 8008540:	6060      	str	r0, [r4, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8008542:	60a0      	str	r0, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 8008544:	60e0      	str	r0, [r4, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8008546:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8008548:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800854a:	6320      	str	r0, [r4, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800854c:	6360      	str	r0, [r4, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800854e:	4620      	mov	r0, r4
  hdma2d.Instance = DMA2D;
 8008550:	6023      	str	r3, [r4, #0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8008552:	f7f8 fab6 	bl	8000ac2 <HAL_DMA2D_Init>
 8008556:	b100      	cbz	r0, 800855a <main+0x98e>
 8008558:	e7fe      	b.n	8008558 <main+0x98c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800855a:	4629      	mov	r1, r5
 800855c:	4620      	mov	r0, r4
 800855e:	f7f8 fb69 	bl	8000c34 <HAL_DMA2D_ConfigLayer>
 8008562:	4606      	mov	r6, r0
 8008564:	b100      	cbz	r0, 8008568 <main+0x99c>
 8008566:	e7fe      	b.n	8008566 <main+0x99a>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8008568:	4d1d      	ldr	r5, [pc, #116]	; (80085e0 <main+0xa14>)
 800856a:	ac1b      	add	r4, sp, #108	; 0x6c
 800856c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800856e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008570:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008572:	4631      	mov	r1, r6
 8008574:	a81b      	add	r0, sp, #108	; 0x6c
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8008576:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008578:	f7fd ff05 	bl	8006386 <osThreadCreate>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800857c:	4c19      	ldr	r4, [pc, #100]	; (80085e4 <main+0xa18>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800857e:	4b1a      	ldr	r3, [pc, #104]	; (80085e8 <main+0xa1c>)
 8008580:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8008582:	f7fd feec 	bl	800635e <osKernelStart>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8008586:	2201      	movs	r2, #1
 8008588:	2102      	movs	r1, #2
 800858a:	4620      	mov	r0, r4
 800858c:	f7f8 fe74 	bl	8001278 <HAL_GPIO_WritePin>
	  	  HAL_Delay(100);
 8008590:	2064      	movs	r0, #100	; 0x64
 8008592:	f7f7 ffe3 	bl	800055c <HAL_Delay>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8008596:	4620      	mov	r0, r4
 8008598:	2200      	movs	r2, #0
 800859a:	2102      	movs	r1, #2
 800859c:	f7f8 fe6c 	bl	8001278 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80085a0:	2064      	movs	r0, #100	; 0x64
 80085a2:	f7f7 ffdb 	bl	800055c <HAL_Delay>
 80085a6:	e7ee      	b.n	8008586 <main+0x9ba>
 80085a8:	20008970 	.word	0x20008970
 80085ac:	40000c00 	.word	0x40000c00
 80085b0:	2000876c 	.word	0x2000876c
 80085b4:	40010400 	.word	0x40010400
 80085b8:	20008f88 	.word	0x20008f88
 80085bc:	40001800 	.word	0x40001800
 80085c0:	20008b30 	.word	0x20008b30
 80085c4:	40011000 	.word	0x40011000
 80085c8:	20008e98 	.word	0x20008e98
 80085cc:	40011400 	.word	0x40011400
 80085d0:	20008ba0 	.word	0x20008ba0
 80085d4:	40040000 	.word	0x40040000
 80085d8:	20008f08 	.word	0x20008f08
 80085dc:	4002b000 	.word	0x4002b000
 80085e0:	0800970c 	.word	0x0800970c
 80085e4:	40022000 	.word	0x40022000
 80085e8:	2000871c 	.word	0x2000871c

080085ec <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80085ec:	6802      	ldr	r2, [r0, #0]
 80085ee:	4b03      	ldr	r3, [pc, #12]	; (80085fc <HAL_TIM_PeriodElapsedCallback+0x10>)
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d101      	bne.n	80085f8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80085f4:	f7f7 bfa0 	b.w	8000538 <HAL_IncTick>
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	40001000 	.word	0x40001000

08008600 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8008600:	e7fe      	b.n	8008600 <_Error_Handler>
	...

08008604 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8008604:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 8008606:	2301      	movs	r3, #1
 8008608:	4c05      	ldr	r4, [pc, #20]	; (8008620 <SD_CheckStatus.isra.0+0x1c>)
 800860a:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800860c:	f7ff fa0a 	bl	8007a24 <BSP_SD_GetCardState>
 8008610:	4623      	mov	r3, r4
 8008612:	b918      	cbnz	r0, 800861c <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8008614:	7822      	ldrb	r2, [r4, #0]
 8008616:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800861a:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 800861c:	7818      	ldrb	r0, [r3, #0]
}
 800861e:	bd10      	pop	{r4, pc}
 8008620:	20000028 	.word	0x20000028

08008624 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008624:	b513      	push	{r0, r1, r4, lr}
  Stat = STA_NOINIT;
 8008626:	2301      	movs	r3, #1
 8008628:	4c0d      	ldr	r4, [pc, #52]	; (8008660 <SD_initialize+0x3c>)
 800862a:	7023      	strb	r3, [r4, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 800862c:	f7fd fe9c 	bl	8006368 <osKernelRunning>
 8008630:	b198      	cbz	r0, 800865a <SD_initialize+0x36>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008632:	f7ff fa15 	bl	8007a60 <BSP_SD_Init>
 8008636:	b910      	cbnz	r0, 800863e <SD_initialize+0x1a>
    {
      Stat = SD_CheckStatus(lun);
 8008638:	f7ff ffe4 	bl	8008604 <SD_CheckStatus.isra.0>
 800863c:	7020      	strb	r0, [r4, #0]

    /*
     * if the SD is correctly initialized, create the operation queue
     */

    if (Stat != STA_NOINIT)
 800863e:	7823      	ldrb	r3, [r4, #0]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d00a      	beq.n	800865a <SD_initialize+0x36>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8008644:	4a07      	ldr	r2, [pc, #28]	; (8008664 <SD_initialize+0x40>)
 8008646:	e892 0003 	ldmia.w	r2, {r0, r1}
 800864a:	e88d 0003 	stmia.w	sp, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800864e:	2100      	movs	r1, #0
 8008650:	4668      	mov	r0, sp
 8008652:	f7fd feb8 	bl	80063c6 <osMessageCreate>
 8008656:	4b04      	ldr	r3, [pc, #16]	; (8008668 <SD_initialize+0x44>)
 8008658:	6018      	str	r0, [r3, #0]
    }
  }
  return Stat;
 800865a:	7820      	ldrb	r0, [r4, #0]
}
 800865c:	b002      	add	sp, #8
 800865e:	bd10      	pop	{r4, pc}
 8008660:	20000028 	.word	0x20000028
 8008664:	08009720 	.word	0x08009720
 8008668:	2000820c 	.word	0x2000820c

0800866c <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 800866c:	f7ff bfca 	b.w	8008604 <SD_CheckStatus.isra.0>

08008670 <SD_read.part.1>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
 8008670:	b510      	push	{r4, lr}

    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
        timer = osKernelSysTick() + SD_TIMEOUT;
 8008672:	f7fd fe81 	bl	8006378 <osKernelSysTick>
 8008676:	f500 44ea 	add.w	r4, r0, #29952	; 0x7500
 800867a:	3430      	adds	r4, #48	; 0x30
        /* block until SDIO IP is ready or a timeout occur */
        while(timer > osKernelSysTick())
 800867c:	f7fd fe7c 	bl	8006378 <osKernelSysTick>
 8008680:	4284      	cmp	r4, r0
 8008682:	d801      	bhi.n	8008688 <SD_read.part.1+0x18>
  DRESULT res = RES_ERROR;
 8008684:	2001      	movs	r0, #1
 8008686:	e003      	b.n	8008690 <SD_read.part.1+0x20>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008688:	f7ff f9cc 	bl	8007a24 <BSP_SD_GetCardState>
 800868c:	2800      	cmp	r0, #0
 800868e:	d1f5      	bne.n	800867c <SD_read.part.1+0xc>
      }
    }
  }

  return res;
}
 8008690:	bd10      	pop	{r4, pc}
	...

08008694 <SD_read>:
{
 8008694:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008696:	4608      	mov	r0, r1
 8008698:	4611      	mov	r1, r2
  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800869a:	461a      	mov	r2, r3
 800869c:	f7ff f9a6 	bl	80079ec <BSP_SD_ReadBlocks_DMA>
 80086a0:	b988      	cbnz	r0, 80086c6 <SD_read+0x32>
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80086a2:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <SD_read+0x3c>)
 80086a4:	f247 5230 	movw	r2, #30000	; 0x7530
 80086a8:	a801      	add	r0, sp, #4
 80086aa:	6819      	ldr	r1, [r3, #0]
 80086ac:	f7fd feb8 	bl	8006420 <osMessageGet>
    if (event.status == osEventMessage)
 80086b0:	9b01      	ldr	r3, [sp, #4]
 80086b2:	2b10      	cmp	r3, #16
 80086b4:	d107      	bne.n	80086c6 <SD_read+0x32>
      if (event.value.v == READ_CPLT_MSG)
 80086b6:	9b02      	ldr	r3, [sp, #8]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d104      	bne.n	80086c6 <SD_read+0x32>
}
 80086bc:	b005      	add	sp, #20
 80086be:	f85d eb04 	ldr.w	lr, [sp], #4
 80086c2:	f7ff bfd5 	b.w	8008670 <SD_read.part.1>
 80086c6:	2001      	movs	r0, #1
 80086c8:	b005      	add	sp, #20
 80086ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80086ce:	bf00      	nop
 80086d0:	2000820c 	.word	0x2000820c

080086d4 <SD_write>:
{
 80086d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80086da:	461a      	mov	r2, r3
 80086dc:	f7ff f994 	bl	8007a08 <BSP_SD_WriteBlocks_DMA>
 80086e0:	b988      	cbnz	r0, 8008706 <SD_write+0x32>
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80086e2:	4b0b      	ldr	r3, [pc, #44]	; (8008710 <SD_write+0x3c>)
 80086e4:	f247 5230 	movw	r2, #30000	; 0x7530
 80086e8:	a801      	add	r0, sp, #4
 80086ea:	6819      	ldr	r1, [r3, #0]
 80086ec:	f7fd fe98 	bl	8006420 <osMessageGet>
    if (event.status == osEventMessage)
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	2b10      	cmp	r3, #16
 80086f4:	d107      	bne.n	8008706 <SD_write+0x32>
      if (event.value.v == WRITE_CPLT_MSG)
 80086f6:	9b02      	ldr	r3, [sp, #8]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d104      	bne.n	8008706 <SD_write+0x32>
}
 80086fc:	b005      	add	sp, #20
 80086fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8008702:	f7ff bfb5 	b.w	8008670 <SD_read.part.1>
 8008706:	2001      	movs	r0, #1
 8008708:	b005      	add	sp, #20
 800870a:	f85d fb04 	ldr.w	pc, [sp], #4
 800870e:	bf00      	nop
 8008710:	2000820c 	.word	0x2000820c

08008714 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008714:	4b12      	ldr	r3, [pc, #72]	; (8008760 <SD_ioctl+0x4c>)
{
 8008716:	b510      	push	{r4, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008718:	781b      	ldrb	r3, [r3, #0]
{
 800871a:	b088      	sub	sp, #32
 800871c:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800871e:	07db      	lsls	r3, r3, #31
 8008720:	d41b      	bmi.n	800875a <SD_ioctl+0x46>

  switch (cmd)
 8008722:	2903      	cmp	r1, #3
 8008724:	d803      	bhi.n	800872e <SD_ioctl+0x1a>
 8008726:	e8df f001 	tbb	[pc, r1]
 800872a:	0510      	.short	0x0510
 800872c:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 800872e:	2004      	movs	r0, #4
  }

  return res;
}
 8008730:	b008      	add	sp, #32
 8008732:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008734:	4668      	mov	r0, sp
 8008736:	f7ff f97f 	bl	8007a38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800873a:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	e004      	b.n	800874a <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8008740:	4668      	mov	r0, sp
 8008742:	f7ff f979 	bl	8007a38 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008746:	9b07      	ldr	r3, [sp, #28]
 8008748:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800874a:	2000      	movs	r0, #0
 800874c:	e7f0      	b.n	8008730 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800874e:	4668      	mov	r0, sp
 8008750:	f7ff f972 	bl	8007a38 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008754:	9b07      	ldr	r3, [sp, #28]
 8008756:	0a5b      	lsrs	r3, r3, #9
 8008758:	e7f0      	b.n	800873c <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800875a:	2003      	movs	r0, #3
 800875c:	e7e8      	b.n	8008730 <SD_ioctl+0x1c>
 800875e:	bf00      	nop
 8008760:	20000028 	.word	0x20000028

08008764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008764:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008766:	2003      	movs	r0, #3
 8008768:	f7f8 f84e 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800876c:	2200      	movs	r2, #0
 800876e:	f06f 000b 	mvn.w	r0, #11
 8008772:	4611      	mov	r1, r2
 8008774:	f7f8 f85a 	bl	800082c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8008778:	2200      	movs	r2, #0
 800877a:	f06f 000a 	mvn.w	r0, #10
 800877e:	4611      	mov	r1, r2
 8008780:	f7f8 f854 	bl	800082c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8008784:	2200      	movs	r2, #0
 8008786:	f06f 0009 	mvn.w	r0, #9
 800878a:	4611      	mov	r1, r2
 800878c:	f7f8 f84e 	bl	800082c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8008790:	2200      	movs	r2, #0
 8008792:	f06f 0004 	mvn.w	r0, #4
 8008796:	4611      	mov	r1, r2
 8008798:	f7f8 f848 	bl	800082c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800879c:	2200      	movs	r2, #0
 800879e:	f06f 0003 	mvn.w	r0, #3
 80087a2:	4611      	mov	r1, r2
 80087a4:	f7f8 f842 	bl	800082c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80087a8:	2200      	movs	r2, #0
 80087aa:	210f      	movs	r1, #15
 80087ac:	f06f 0001 	mvn.w	r0, #1
 80087b0:	f7f8 f83c 	bl	800082c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80087b4:	2200      	movs	r2, #0
 80087b6:	210f      	movs	r1, #15
 80087b8:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80087c0:	f7f8 b834 	b.w	800082c <HAL_NVIC_SetPriority>

080087c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC3)
 80087c4:	6802      	ldr	r2, [r0, #0]
 80087c6:	4b12      	ldr	r3, [pc, #72]	; (8008810 <HAL_ADC_MspInit+0x4c>)
 80087c8:	429a      	cmp	r2, r3
{
 80087ca:	b530      	push	{r4, r5, lr}
 80087cc:	b087      	sub	sp, #28
  if(hadc->Instance==ADC3)
 80087ce:	d11d      	bne.n	800880c <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80087d0:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80087d4:	2503      	movs	r5, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d6:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80087d8:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC3_CLK_ENABLE();
 80087da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80087dc:	480d      	ldr	r0, [pc, #52]	; (8008814 <HAL_ADC_MspInit+0x50>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 80087de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087e2:	645a      	str	r2, [r3, #68]	; 0x44
 80087e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80087e6:	9502      	str	r5, [sp, #8]
    __HAL_RCC_ADC3_CLK_ENABLE();
 80087e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ec:	9403      	str	r4, [sp, #12]
    __HAL_RCC_ADC3_CLK_ENABLE();
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80087f2:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80087f6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80087f8:	f7f8 fc4e 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80087fc:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80087fe:	a901      	add	r1, sp, #4
 8008800:	4805      	ldr	r0, [pc, #20]	; (8008818 <HAL_ADC_MspInit+0x54>)
    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8008802:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008804:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008806:	9403      	str	r4, [sp, #12]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8008808:	f7f8 fc46 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800880c:	b007      	add	sp, #28
 800880e:	bd30      	pop	{r4, r5, pc}
 8008810:	40012200 	.word	0x40012200
 8008814:	40021400 	.word	0x40021400
 8008818:	40020000 	.word	0x40020000

0800881c <HAL_CRC_MspInit>:
}

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{

  if(hcrc->Instance==CRC)
 800881c:	6802      	ldr	r2, [r0, #0]
{
 800881e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8008820:	4b08      	ldr	r3, [pc, #32]	; (8008844 <HAL_CRC_MspInit+0x28>)
 8008822:	429a      	cmp	r2, r3
 8008824:	d10b      	bne.n	800883e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8008826:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800882a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800882e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008832:	631a      	str	r2, [r3, #48]	; 0x30
 8008834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800883a:	9301      	str	r3, [sp, #4]
 800883c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800883e:	b002      	add	sp, #8
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	40023000 	.word	0x40023000

08008848 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hdcmi->Instance==DCMI)
 8008848:	6802      	ldr	r2, [r0, #0]
 800884a:	4b24      	ldr	r3, [pc, #144]	; (80088dc <HAL_DCMI_MspInit+0x94>)
 800884c:	429a      	cmp	r2, r3
{
 800884e:	b570      	push	{r4, r5, r6, lr}
 8008850:	b086      	sub	sp, #24
  if(hdcmi->Instance==DCMI)
 8008852:	d140      	bne.n	80088d6 <HAL_DCMI_MspInit+0x8e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8008854:	4b22      	ldr	r3, [pc, #136]	; (80088e0 <HAL_DCMI_MspInit+0x98>)
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008856:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008858:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800885a:	250d      	movs	r5, #13
    __HAL_RCC_DCMI_CLK_ENABLE();
 800885c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800885e:	a901      	add	r1, sp, #4
 8008860:	4820      	ldr	r0, [pc, #128]	; (80088e4 <HAL_DCMI_MspInit+0x9c>)
    __HAL_RCC_DCMI_CLK_ENABLE();
 8008862:	f042 0201 	orr.w	r2, r2, #1
 8008866:	635a      	str	r2, [r3, #52]	; 0x34
 8008868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800886a:	9602      	str	r6, [sp, #8]
    __HAL_RCC_DCMI_CLK_ENABLE();
 800886c:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008870:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008872:	9404      	str	r4, [sp, #16]
    __HAL_RCC_DCMI_CLK_ENABLE();
 8008874:	9300      	str	r3, [sp, #0]
 8008876:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8008878:	2360      	movs	r3, #96	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800887a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800887c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800887e:	f7f8 fc0b 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8008882:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8008884:	a901      	add	r1, sp, #4
 8008886:	4818      	ldr	r0, [pc, #96]	; (80088e8 <HAL_DCMI_MspInit+0xa0>)
    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8008888:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800888a:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800888c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800888e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8008890:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8008892:	f7f8 fc01 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8008896:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800889a:	a901      	add	r1, sp, #4
 800889c:	4813      	ldr	r0, [pc, #76]	; (80088ec <HAL_DCMI_MspInit+0xa4>)
    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800889e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a0:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088a2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088a4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80088a6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80088a8:	f7f8 fbf6 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80088ac:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80088b0:	a901      	add	r1, sp, #4
 80088b2:	480f      	ldr	r0, [pc, #60]	; (80088f0 <HAL_DCMI_MspInit+0xa8>)
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 80088b4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ba:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80088bc:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80088be:	f7f8 fbeb 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80088c2:	2350      	movs	r3, #80	; 0x50
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088c4:	a901      	add	r1, sp, #4
 80088c6:	480b      	ldr	r0, [pc, #44]	; (80088f4 <HAL_DCMI_MspInit+0xac>)
    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 80088c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088ca:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088cc:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088ce:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80088d0:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088d2:	f7f8 fbe1 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80088d6:	b006      	add	sp, #24
 80088d8:	bd70      	pop	{r4, r5, r6, pc}
 80088da:	bf00      	nop
 80088dc:	50050000 	.word	0x50050000
 80088e0:	40023800 	.word	0x40023800
 80088e4:	40021000 	.word	0x40021000
 80088e8:	40020c00 	.word	0x40020c00
 80088ec:	40021800 	.word	0x40021800
 80088f0:	40021c00 	.word	0x40021c00
 80088f4:	40020000 	.word	0x40020000

080088f8 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80088f8:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 80088fa:	4b0d      	ldr	r3, [pc, #52]	; (8008930 <HAL_DMA2D_MspInit+0x38>)
 80088fc:	6802      	ldr	r2, [r0, #0]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d112      	bne.n	8008928 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8008902:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8008906:	205a      	movs	r0, #90	; 0x5a
 8008908:	2105      	movs	r1, #5
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800890a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800890c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008910:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8008912:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800891a:	9301      	str	r3, [sp, #4]
 800891c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800891e:	f7f7 ff85 	bl	800082c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8008922:	205a      	movs	r0, #90	; 0x5a
 8008924:	f7f7 ffba 	bl	800089c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8008928:	b003      	add	sp, #12
 800892a:	f85d fb04 	ldr.w	pc, [sp], #4
 800892e:	bf00      	nop
 8008930:	4002b000 	.word	0x4002b000

08008934 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(heth->Instance==ETH)
 8008934:	6802      	ldr	r2, [r0, #0]
 8008936:	4b23      	ldr	r3, [pc, #140]	; (80089c4 <HAL_ETH_MspInit+0x90>)
 8008938:	429a      	cmp	r2, r3
{
 800893a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800893c:	b089      	sub	sp, #36	; 0x24
  if(heth->Instance==ETH)
 800893e:	d13f      	bne.n	80089c0 <HAL_ETH_MspInit+0x8c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008940:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008944:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008946:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008948:	2503      	movs	r5, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 800894a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800894c:	240b      	movs	r4, #11
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800894e:	a903      	add	r1, sp, #12
 8008950:	481d      	ldr	r0, [pc, #116]	; (80089c8 <HAL_ETH_MspInit+0x94>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8008952:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8008956:	631a      	str	r2, [r3, #48]	; 0x30
 8008958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800895a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800895e:	9200      	str	r2, [sp, #0]
 8008960:	9a00      	ldr	r2, [sp, #0]
 8008962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008964:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008968:	631a      	str	r2, [r3, #48]	; 0x30
 800896a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800896c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8008970:	9201      	str	r2, [sp, #4]
 8008972:	9a01      	ldr	r2, [sp, #4]
 8008974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008976:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800897a:	631a      	str	r2, [r3, #48]	; 0x30
 800897c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800897e:	9704      	str	r7, [sp, #16]
    __HAL_RCC_ETH_CLK_ENABLE();
 8008980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008984:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008986:	9506      	str	r5, [sp, #24]
    __HAL_RCC_ETH_CLK_ENABLE();
 8008988:	9302      	str	r3, [sp, #8]
 800898a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800898c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008990:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8008992:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008994:	f7f8 fb80 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008998:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800899a:	a903      	add	r1, sp, #12
 800899c:	480b      	ldr	r0, [pc, #44]	; (80089cc <HAL_ETH_MspInit+0x98>)
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800899e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089a0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a2:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089a4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80089a6:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089a8:	f7f8 fb76 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80089ac:	2386      	movs	r3, #134	; 0x86
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089ae:	a903      	add	r1, sp, #12
 80089b0:	4807      	ldr	r0, [pc, #28]	; (80089d0 <HAL_ETH_MspInit+0x9c>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80089b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089b4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b6:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089b8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80089ba:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089bc:	f7f8 fb6c 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80089c0:	b009      	add	sp, #36	; 0x24
 80089c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c4:	40028000 	.word	0x40028000
 80089c8:	40021800 	.word	0x40021800
 80089cc:	40020800 	.word	0x40020800
 80089d0:	40020000 	.word	0x40020000

080089d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80089d4:	6803      	ldr	r3, [r0, #0]
 80089d6:	4a1f      	ldr	r2, [pc, #124]	; (8008a54 <HAL_I2C_MspInit+0x80>)
 80089d8:	4293      	cmp	r3, r2
{
 80089da:	b500      	push	{lr}
 80089dc:	b089      	sub	sp, #36	; 0x24
  if(hi2c->Instance==I2C1)
 80089de:	d11b      	bne.n	8008a18 <HAL_I2C_MspInit+0x44>
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80089e0:	f44f 7340 	mov.w	r3, #768	; 0x300
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089e4:	a903      	add	r1, sp, #12
 80089e6:	481c      	ldr	r0, [pc, #112]	; (8008a58 <HAL_I2C_MspInit+0x84>)
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80089e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80089ea:	2312      	movs	r3, #18
 80089ec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089ee:	2301      	movs	r3, #1
 80089f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089f2:	2300      	movs	r3, #0
 80089f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80089f6:	2304      	movs	r3, #4
 80089f8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089fa:	f7f8 fb4d 	bl	8001098 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80089fe:	4b17      	ldr	r3, [pc, #92]	; (8008a5c <HAL_I2C_MspInit+0x88>)
 8008a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a02:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8008a06:	641a      	str	r2, [r3, #64]	; 0x40
 8008a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8008a12:	b009      	add	sp, #36	; 0x24
 8008a14:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(hi2c->Instance==I2C3)
 8008a18:	4a11      	ldr	r2, [pc, #68]	; (8008a60 <HAL_I2C_MspInit+0x8c>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d1f9      	bne.n	8008a12 <HAL_I2C_MspInit+0x3e>
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8008a1e:	f44f 73c0 	mov.w	r3, #384	; 0x180
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008a22:	a903      	add	r1, sp, #12
 8008a24:	480f      	ldr	r0, [pc, #60]	; (8008a64 <HAL_I2C_MspInit+0x90>)
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8008a26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008a28:	2312      	movs	r3, #18
 8008a2a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a30:	2303      	movs	r3, #3
 8008a32:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8008a34:	2304      	movs	r3, #4
 8008a36:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008a38:	f7f8 fb2e 	bl	8001098 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8008a3c:	4b07      	ldr	r3, [pc, #28]	; (8008a5c <HAL_I2C_MspInit+0x88>)
 8008a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008a44:	641a      	str	r2, [r3, #64]	; 0x40
 8008a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a4c:	9302      	str	r3, [sp, #8]
 8008a4e:	9b02      	ldr	r3, [sp, #8]
}
 8008a50:	e7df      	b.n	8008a12 <HAL_I2C_MspInit+0x3e>
 8008a52:	bf00      	nop
 8008a54:	40005400 	.word	0x40005400
 8008a58:	40020400 	.word	0x40020400
 8008a5c:	40023800 	.word	0x40023800
 8008a60:	40005c00 	.word	0x40005c00
 8008a64:	40021c00 	.word	0x40021c00

08008a68 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8008a68:	6802      	ldr	r2, [r0, #0]
 8008a6a:	4b29      	ldr	r3, [pc, #164]	; (8008b10 <HAL_LTDC_MspInit+0xa8>)
 8008a6c:	429a      	cmp	r2, r3
{
 8008a6e:	b570      	push	{r4, r5, r6, lr}
 8008a70:	b086      	sub	sp, #24
  if(hltdc->Instance==LTDC)
 8008a72:	d14b      	bne.n	8008b0c <HAL_LTDC_MspInit+0xa4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8008a74:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a78:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a7a:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008a7c:	260e      	movs	r6, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
 8008a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8008a80:	a901      	add	r1, sp, #4
 8008a82:	4824      	ldr	r0, [pc, #144]	; (8008b14 <HAL_LTDC_MspInit+0xac>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8008a84:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008a88:	645a      	str	r2, [r3, #68]	; 0x44
 8008a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a8c:	9502      	str	r5, [sp, #8]
    __HAL_RCC_LTDC_CLK_ENABLE();
 8008a8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a92:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a94:	9404      	str	r4, [sp, #16]
    __HAL_RCC_LTDC_CLK_ENABLE();
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8008a9a:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008a9c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8008a9e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8008aa0:	f7f8 fafa 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8008aa4:	f64e 73ff 	movw	r3, #61439	; 0xefff
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8008aa8:	a901      	add	r1, sp, #4
 8008aaa:	481b      	ldr	r0, [pc, #108]	; (8008b18 <HAL_LTDC_MspInit+0xb0>)
    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8008aac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aae:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ab0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ab2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008ab4:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8008ab6:	f7f8 faef 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8008aba:	23f7      	movs	r3, #247	; 0xf7
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8008abc:	a901      	add	r1, sp, #4
 8008abe:	4817      	ldr	r0, [pc, #92]	; (8008b1c <HAL_LTDC_MspInit+0xb4>)
    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8008ac0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ac2:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac4:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ac6:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008ac8:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8008aca:	f7f8 fae5 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8008ace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8008ad2:	a901      	add	r1, sp, #4
 8008ad4:	4812      	ldr	r0, [pc, #72]	; (8008b20 <HAL_LTDC_MspInit+0xb8>)
    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8008ad6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008ad8:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ada:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8008adc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ade:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ae0:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8008ae2:	f7f8 fad9 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8008ae6:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008aea:	a901      	add	r1, sp, #4
 8008aec:	480d      	ldr	r0, [pc, #52]	; (8008b24 <HAL_LTDC_MspInit+0xbc>)
    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8008aee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008af0:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008af2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008af4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8008af6:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008af8:	f7f8 face 	bl	8001098 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8008afc:	2058      	movs	r0, #88	; 0x58
 8008afe:	4622      	mov	r2, r4
 8008b00:	2105      	movs	r1, #5
 8008b02:	f7f7 fe93 	bl	800082c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8008b06:	2058      	movs	r0, #88	; 0x58
 8008b08:	f7f7 fec8 	bl	800089c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8008b0c:	b006      	add	sp, #24
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}
 8008b10:	40016800 	.word	0x40016800
 8008b14:	40021000 	.word	0x40021000
 8008b18:	40022400 	.word	0x40022400
 8008b1c:	40022800 	.word	0x40022800
 8008b20:	40021800 	.word	0x40021800
 8008b24:	40022000 	.word	0x40022000

08008b28 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hqspi->Instance==QUADSPI)
 8008b28:	6802      	ldr	r2, [r0, #0]
 8008b2a:	4b23      	ldr	r3, [pc, #140]	; (8008bb8 <HAL_QSPI_MspInit+0x90>)
 8008b2c:	429a      	cmp	r2, r3
{
 8008b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b32:	b086      	sub	sp, #24
  if(hqspi->Instance==QUADSPI)
 8008b34:	d13d      	bne.n	8008bb2 <HAL_QSPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8008b36:	4b21      	ldr	r3, [pc, #132]	; (8008bbc <HAL_QSPI_MspInit+0x94>)
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8008b38:	f04f 0804 	mov.w	r8, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b3c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b3e:	2500      	movs	r5, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8008b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b42:	2403      	movs	r4, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8008b44:	2709      	movs	r7, #9
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8008b46:	eb0d 0108 	add.w	r1, sp, r8
    __HAL_RCC_QSPI_CLK_ENABLE();
 8008b4a:	f042 0202 	orr.w	r2, r2, #2
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8008b4e:	481c      	ldr	r0, [pc, #112]	; (8008bc0 <HAL_QSPI_MspInit+0x98>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 8008b50:	639a      	str	r2, [r3, #56]	; 0x38
 8008b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8008b54:	f8cd 8004 	str.w	r8, [sp, #4]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8008b58:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b5c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b5e:	9503      	str	r5, [sp, #12]
    __HAL_RCC_QSPI_CLK_ENABLE();
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b64:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8008b66:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8008b68:	f7f8 fa96 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8008b6c:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8008b6e:	eb0d 0108 	add.w	r1, sp, r8
 8008b72:	4814      	ldr	r0, [pc, #80]	; (8008bc4 <HAL_QSPI_MspInit+0x9c>)
    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8008b74:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8008b76:	230a      	movs	r3, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b78:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8008b7a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b7c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b7e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8008b80:	f7f8 fa8a 	bl	8001098 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b84:	eb0d 0108 	add.w	r1, sp, r8
 8008b88:	480e      	ldr	r0, [pc, #56]	; (8008bc4 <HAL_QSPI_MspInit+0x9c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008b8a:	f8cd 8004 	str.w	r8, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b8e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b90:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b92:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8008b94:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b96:	f7f8 fa7f 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8008b9a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008b9e:	eb0d 0108 	add.w	r1, sp, r8
 8008ba2:	4809      	ldr	r0, [pc, #36]	; (8008bc8 <HAL_QSPI_MspInit+0xa0>)
    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8008ba4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ba6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ba8:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008baa:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8008bac:	9705      	str	r7, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008bae:	f7f8 fa73 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8008bb2:	b006      	add	sp, #24
 8008bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb8:	a0001000 	.word	0xa0001000
 8008bbc:	40023800 	.word	0x40023800
 8008bc0:	40021000 	.word	0x40021000
 8008bc4:	40020400 	.word	0x40020400
 8008bc8:	40020c00 	.word	0x40020c00

08008bcc <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8008bcc:	6802      	ldr	r2, [r0, #0]
 8008bce:	4b04      	ldr	r3, [pc, #16]	; (8008be0 <HAL_RTC_MspInit+0x14>)
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d104      	bne.n	8008bde <HAL_RTC_MspInit+0x12>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008bd4:	4a03      	ldr	r2, [pc, #12]	; (8008be4 <HAL_RTC_MspInit+0x18>)
 8008bd6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8008bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8008bde:	4770      	bx	lr
 8008be0:	40002800 	.word	0x40002800
 8008be4:	40023800 	.word	0x40023800

08008be8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 8008be8:	6802      	ldr	r2, [r0, #0]
 8008bea:	4b16      	ldr	r3, [pc, #88]	; (8008c44 <HAL_SD_MspInit+0x5c>)
 8008bec:	429a      	cmp	r2, r3
{
 8008bee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bf0:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 8008bf2:	d124      	bne.n	8008c3e <HAL_SD_MspInit+0x56>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008bf4:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bf8:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bfa:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bfc:	2503      	movs	r5, #3
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008bfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8008c00:	240c      	movs	r4, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c02:	a901      	add	r1, sp, #4
 8008c04:	4810      	ldr	r0, [pc, #64]	; (8008c48 <HAL_SD_MspInit+0x60>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c0a:	645a      	str	r2, [r3, #68]	; 0x44
 8008c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c0e:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008c10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c14:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c16:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8008c1c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8008c20:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8008c22:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008c24:	f7f8 fa38 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8008c28:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8008c2a:	4808      	ldr	r0, [pc, #32]	; (8008c4c <HAL_SD_MspInit+0x64>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c2c:	9702      	str	r7, [sp, #8]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8008c2e:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8008c32:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c34:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c36:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8008c38:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8008c3a:	f7f8 fa2d 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8008c3e:	b007      	add	sp, #28
 8008c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c42:	bf00      	nop
 8008c44:	40012c00 	.word	0x40012c00
 8008c48:	40020800 	.word	0x40020800
 8008c4c:	40020c00 	.word	0x40020c00

08008c50 <HAL_SPDIFRX_MspInit>:
  }

}

void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8008c50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspdifrx->Instance==SPDIFRX)
 8008c52:	6803      	ldr	r3, [r0, #0]
 8008c54:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8008c58:	d117      	bne.n	8008c8a <HAL_SPDIFRX_MspInit+0x3a>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8008c5a:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8008c5e:	a901      	add	r1, sp, #4
 8008c60:	480b      	ldr	r0, [pc, #44]	; (8008c90 <HAL_SPDIFRX_MspInit+0x40>)
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8008c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008c68:	641a      	str	r2, [r3, #64]	; 0x40
 8008c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8008c74:	2380      	movs	r3, #128	; 0x80
 8008c76:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c80:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8008c82:	2308      	movs	r3, #8
 8008c84:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8008c86:	f7f8 fa07 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8008c8a:	b007      	add	sp, #28
 8008c8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c90:	40020c00 	.word	0x40020c00

08008c94 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 8008c94:	6803      	ldr	r3, [r0, #0]
{
 8008c96:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM1)
 8008c98:	4a23      	ldr	r2, [pc, #140]	; (8008d28 <HAL_TIM_Base_MspInit+0x94>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d10b      	bne.n	8008cb6 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008c9e:	4b23      	ldr	r3, [pc, #140]	; (8008d2c <HAL_TIM_Base_MspInit+0x98>)
 8008ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ca2:	f042 0201 	orr.w	r2, r2, #1
 8008ca6:	645a      	str	r2, [r3, #68]	; 0x44
 8008ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	9301      	str	r3, [sp, #4]
 8008cb0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8008cb2:	b006      	add	sp, #24
 8008cb4:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 8008cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cba:	d10b      	bne.n	8008cd4 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008cbc:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8008cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cc2:	f042 0201 	orr.w	r2, r2, #1
 8008cc6:	641a      	str	r2, [r3, #64]	; 0x40
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	9302      	str	r3, [sp, #8]
 8008cd0:	9b02      	ldr	r3, [sp, #8]
 8008cd2:	e7ee      	b.n	8008cb2 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 8008cd4:	4a16      	ldr	r2, [pc, #88]	; (8008d30 <HAL_TIM_Base_MspInit+0x9c>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d10a      	bne.n	8008cf0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008cda:	4b14      	ldr	r3, [pc, #80]	; (8008d2c <HAL_TIM_Base_MspInit+0x98>)
 8008cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cde:	f042 0202 	orr.w	r2, r2, #2
 8008ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	f003 0302 	and.w	r3, r3, #2
 8008cea:	9303      	str	r3, [sp, #12]
 8008cec:	9b03      	ldr	r3, [sp, #12]
 8008cee:	e7e0      	b.n	8008cb2 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM5)
 8008cf0:	4a10      	ldr	r2, [pc, #64]	; (8008d34 <HAL_TIM_Base_MspInit+0xa0>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d10a      	bne.n	8008d0c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008cf6:	4b0d      	ldr	r3, [pc, #52]	; (8008d2c <HAL_TIM_Base_MspInit+0x98>)
 8008cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cfa:	f042 0208 	orr.w	r2, r2, #8
 8008cfe:	641a      	str	r2, [r3, #64]	; 0x40
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	f003 0308 	and.w	r3, r3, #8
 8008d06:	9304      	str	r3, [sp, #16]
 8008d08:	9b04      	ldr	r3, [sp, #16]
 8008d0a:	e7d2      	b.n	8008cb2 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM8)
 8008d0c:	4a0a      	ldr	r2, [pc, #40]	; (8008d38 <HAL_TIM_Base_MspInit+0xa4>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d1cf      	bne.n	8008cb2 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008d12:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <HAL_TIM_Base_MspInit+0x98>)
 8008d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d16:	f042 0202 	orr.w	r2, r2, #2
 8008d1a:	645a      	str	r2, [r3, #68]	; 0x44
 8008d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	9305      	str	r3, [sp, #20]
 8008d24:	9b05      	ldr	r3, [sp, #20]
}
 8008d26:	e7c4      	b.n	8008cb2 <HAL_TIM_Base_MspInit+0x1e>
 8008d28:	40010000 	.word	0x40010000
 8008d2c:	40023800 	.word	0x40023800
 8008d30:	40000400 	.word	0x40000400
 8008d34:	40000c00 	.word	0x40000c00
 8008d38:	40010400 	.word	0x40010400

08008d3c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM12)
 8008d3c:	6802      	ldr	r2, [r0, #0]
{
 8008d3e:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM12)
 8008d40:	4b07      	ldr	r3, [pc, #28]	; (8008d60 <HAL_TIM_PWM_MspInit+0x24>)
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d10a      	bne.n	8008d5c <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8008d46:	f503 3308 	add.w	r3, r3, #139264	; 0x22000
 8008d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d50:	641a      	str	r2, [r3, #64]	; 0x40
 8008d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8008d5c:	b002      	add	sp, #8
 8008d5e:	4770      	bx	lr
 8008d60:	40001800 	.word	0x40001800

08008d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008d64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8008d66:	6803      	ldr	r3, [r0, #0]
 8008d68:	4a22      	ldr	r2, [pc, #136]	; (8008df4 <HAL_TIM_MspPostInit+0x90>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d110      	bne.n	8008d90 <HAL_TIM_MspPostInit+0x2c>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D5_Pin;
 8008d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
  /* USER CODE END TIM2_MspPostInit 0 */
  
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8008d72:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d74:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8008d76:	a901      	add	r1, sp, #4
 8008d78:	481f      	ldr	r0, [pc, #124]	; (8008df8 <HAL_TIM_MspPostInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d7a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d80:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008d82:	2301      	movs	r3, #1
 8008d84:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8008d86:	f7f8 f987 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8008d8a:	b007      	add	sp, #28
 8008d8c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim->Instance==TIM2)
 8008d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d94:	d102      	bne.n	8008d9c <HAL_TIM_MspPostInit+0x38>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8008d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d9a:	e7ea      	b.n	8008d72 <HAL_TIM_MspPostInit+0xe>
  else if(htim->Instance==TIM3)
 8008d9c:	4a17      	ldr	r2, [pc, #92]	; (8008dfc <HAL_TIM_MspPostInit+0x98>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d10a      	bne.n	8008db8 <HAL_TIM_MspPostInit+0x54>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8008da2:	2310      	movs	r3, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008da4:	2200      	movs	r2, #0
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8008da6:	a901      	add	r1, sp, #4
 8008da8:	4815      	ldr	r0, [pc, #84]	; (8008e00 <HAL_TIM_MspPostInit+0x9c>)
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8008daa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dac:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dae:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008db0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008db2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008db4:	9305      	str	r3, [sp, #20]
 8008db6:	e7e6      	b.n	8008d86 <HAL_TIM_MspPostInit+0x22>
  else if(htim->Instance==TIM5)
 8008db8:	4a12      	ldr	r2, [pc, #72]	; (8008e04 <HAL_TIM_MspPostInit+0xa0>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d10a      	bne.n	8008dd4 <HAL_TIM_MspPostInit+0x70>
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 8008dbe:	2301      	movs	r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dc0:	2200      	movs	r2, #0
    HAL_GPIO_Init(ARDUINO_PWM_CS_D10_GPIO_Port, &GPIO_InitStruct);
 8008dc2:	a901      	add	r1, sp, #4
 8008dc4:	4810      	ldr	r0, [pc, #64]	; (8008e08 <HAL_TIM_MspPostInit+0xa4>)
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D10_Pin;
 8008dc6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dc8:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dca:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dcc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dce:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8008dd0:	9305      	str	r3, [sp, #20]
 8008dd2:	e7d8      	b.n	8008d86 <HAL_TIM_MspPostInit+0x22>
  else if(htim->Instance==TIM12)
 8008dd4:	4a0d      	ldr	r2, [pc, #52]	; (8008e0c <HAL_TIM_MspPostInit+0xa8>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d1d7      	bne.n	8008d8a <HAL_TIM_MspPostInit+0x26>
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8008dda:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8008ddc:	a901      	add	r1, sp, #4
 8008dde:	480c      	ldr	r0, [pc, #48]	; (8008e10 <HAL_TIM_MspPostInit+0xac>)
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8008de0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008de2:	2302      	movs	r3, #2
 8008de4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8008dec:	2309      	movs	r3, #9
 8008dee:	9305      	str	r3, [sp, #20]
 8008df0:	e7c9      	b.n	8008d86 <HAL_TIM_MspPostInit+0x22>
 8008df2:	bf00      	nop
 8008df4:	40010000 	.word	0x40010000
 8008df8:	40020000 	.word	0x40020000
 8008dfc:	40000400 	.word	0x40000400
 8008e00:	40020400 	.word	0x40020400
 8008e04:	40000c00 	.word	0x40000c00
 8008e08:	40022000 	.word	0x40022000
 8008e0c:	40001800 	.word	0x40001800
 8008e10:	40021c00 	.word	0x40021c00

08008e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8008e14:	6803      	ldr	r3, [r0, #0]
 8008e16:	4a21      	ldr	r2, [pc, #132]	; (8008e9c <HAL_UART_MspInit+0x88>)
 8008e18:	4293      	cmp	r3, r2
{
 8008e1a:	b570      	push	{r4, r5, r6, lr}
 8008e1c:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 8008e1e:	d123      	bne.n	8008e68 <HAL_UART_MspInit+0x54>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e20:	4b1f      	ldr	r3, [pc, #124]	; (8008ea0 <HAL_UART_MspInit+0x8c>)
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e22:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e24:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008e26:	2507      	movs	r5, #7
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8008e2a:	a903      	add	r1, sp, #12
 8008e2c:	481d      	ldr	r0, [pc, #116]	; (8008ea4 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e2e:	f042 0210 	orr.w	r2, r2, #16
 8008e32:	645a      	str	r2, [r3, #68]	; 0x44
 8008e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e36:	9604      	str	r6, [sp, #16]
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e38:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e3c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e3e:	9406      	str	r4, [sp, #24]
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e40:	9301      	str	r3, [sp, #4]
 8008e42:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8008e44:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008e46:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8008e48:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8008e4a:	f7f8 f925 	bl	8001098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8008e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8008e52:	a903      	add	r1, sp, #12
 8008e54:	4814      	ldr	r0, [pc, #80]	; (8008ea8 <HAL_UART_MspInit+0x94>)
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8008e56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e58:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e5a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e5c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008e5e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e60:	f7f8 f91a 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8008e64:	b008      	add	sp, #32
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
  else if(huart->Instance==USART6)
 8008e68:	4a10      	ldr	r2, [pc, #64]	; (8008eac <HAL_UART_MspInit+0x98>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d1fa      	bne.n	8008e64 <HAL_UART_MspInit+0x50>
    __HAL_RCC_USART6_CLK_ENABLE();
 8008e6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ea0 <HAL_UART_MspInit+0x8c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e70:	a903      	add	r1, sp, #12
 8008e72:	480f      	ldr	r0, [pc, #60]	; (8008eb0 <HAL_UART_MspInit+0x9c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8008e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e76:	f042 0220 	orr.w	r2, r2, #32
 8008e7a:	645a      	str	r2, [r3, #68]	; 0x44
 8008e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	9302      	str	r3, [sp, #8]
 8008e84:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8008e86:	23c0      	movs	r3, #192	; 0xc0
 8008e88:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008e92:	2303      	movs	r3, #3
 8008e94:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8008e96:	2308      	movs	r3, #8
 8008e98:	9307      	str	r3, [sp, #28]
 8008e9a:	e7e1      	b.n	8008e60 <HAL_UART_MspInit+0x4c>
 8008e9c:	40011000 	.word	0x40011000
 8008ea0:	40023800 	.word	0x40023800
 8008ea4:	40020400 	.word	0x40020400
 8008ea8:	40020000 	.word	0x40020000
 8008eac:	40011400 	.word	0x40011400
 8008eb0:	40020800 	.word	0x40020800

08008eb4 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 8008eb4:	4b2b      	ldr	r3, [pc, #172]	; (8008f64 <HAL_SDRAM_MspInit+0xb0>)
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8008eb6:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (FMC_Initialized) {
 8008eb8:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8008eba:	b087      	sub	sp, #28
  if (FMC_Initialized) {
 8008ebc:	2c00      	cmp	r4, #0
 8008ebe:	d14e      	bne.n	8008f5e <HAL_SDRAM_MspInit+0xaa>
  FMC_Initialized = 1;
 8008ec0:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ec2:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ec4:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008ec6:	250c      	movs	r5, #12
  FMC_Initialized = 1;
 8008ec8:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008eca:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 8008ecc:	4b26      	ldr	r3, [pc, #152]	; (8008f68 <HAL_SDRAM_MspInit+0xb4>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008ece:	4827      	ldr	r0, [pc, #156]	; (8008f6c <HAL_SDRAM_MspInit+0xb8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8008ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ed2:	f042 0201 	orr.w	r2, r2, #1
 8008ed6:	639a      	str	r2, [r3, #56]	; 0x38
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008eda:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8008edc:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee0:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ee2:	9604      	str	r6, [sp, #16]
  __HAL_RCC_FMC_CLK_ENABLE();
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8008ee8:	f64f 7383 	movw	r3, #65411	; 0xff83
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008eec:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8008eee:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008ef0:	f7f8 f8d2 	bl	8001098 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8008ef4:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008ef8:	a901      	add	r1, sp, #4
 8008efa:	481d      	ldr	r0, [pc, #116]	; (8008f70 <HAL_SDRAM_MspInit+0xbc>)
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8008efc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008efe:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f00:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f02:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008f04:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008f06:	f7f8 f8c7 	bl	8001098 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8008f0a:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f0e:	a901      	add	r1, sp, #4
 8008f10:	4818      	ldr	r0, [pc, #96]	; (8008f74 <HAL_SDRAM_MspInit+0xc0>)
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8008f12:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f14:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f16:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f18:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008f1a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008f1c:	f7f8 f8bc 	bl	8001098 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8008f20:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008f24:	a901      	add	r1, sp, #4
 8008f26:	4814      	ldr	r0, [pc, #80]	; (8008f78 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8008f28:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f2a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f2c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f2e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008f30:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008f32:	f7f8 f8b1 	bl	8001098 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8008f36:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008f38:	a901      	add	r1, sp, #4
 8008f3a:	4810      	ldr	r0, [pc, #64]	; (8008f7c <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8008f3c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f3e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f40:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f42:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008f44:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008f46:	f7f8 f8a7 	bl	8001098 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8008f4a:	2308      	movs	r3, #8
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8008f4c:	a901      	add	r1, sp, #4
 8008f4e:	480c      	ldr	r0, [pc, #48]	; (8008f80 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8008f50:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f52:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f54:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f56:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8008f58:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8008f5a:	f7f8 f89d 	bl	8001098 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8008f5e:	b007      	add	sp, #28
 8008f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20008210 	.word	0x20008210
 8008f68:	40023800 	.word	0x40023800
 8008f6c:	40021000 	.word	0x40021000
 8008f70:	40021800 	.word	0x40021800
 8008f74:	40020c00 	.word	0x40020c00
 8008f78:	40021400 	.word	0x40021400
 8008f7c:	40021c00 	.word	0x40021c00
 8008f80:	40020800 	.word	0x40020800

08008f84 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8008f84:	6802      	ldr	r2, [r0, #0]
 8008f86:	4b22      	ldr	r3, [pc, #136]	; (8009010 <HAL_SAI_MspInit+0x8c>)
 8008f88:	429a      	cmp	r2, r3
{
 8008f8a:	b510      	push	{r4, lr}
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	b088      	sub	sp, #32
    if(hsai->Instance==SAI2_Block_A)
 8008f90:	d11b      	bne.n	8008fca <HAL_SAI_MspInit+0x46>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8008f92:	4b20      	ldr	r3, [pc, #128]	; (8009014 <HAL_SAI_MspInit+0x90>)
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	b94a      	cbnz	r2, 8008fac <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8008f98:	491f      	ldr	r1, [pc, #124]	; (8009018 <HAL_SAI_MspInit+0x94>)
 8008f9a:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8008f9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008fa0:	6448      	str	r0, [r1, #68]	; 0x44
 8008fa2:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8008fa4:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8008fa8:	9101      	str	r1, [sp, #4]
 8008faa:	9901      	ldr	r1, [sp, #4]
    }
    SAI2_client ++;
 8008fac:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008fae:	a903      	add	r1, sp, #12
 8008fb0:	481a      	ldr	r0, [pc, #104]	; (800901c <HAL_SAI_MspInit+0x98>)
    SAI2_client ++;
 8008fb2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8008fb4:	23f0      	movs	r3, #240	; 0xf0
 8008fb6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fb8:	2302      	movs	r3, #2
 8008fba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008fc0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8008fc2:	230a      	movs	r3, #10
 8008fc4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8008fc6:	f7f8 f867 	bl	8001098 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8008fca:	6822      	ldr	r2, [r4, #0]
 8008fcc:	4b14      	ldr	r3, [pc, #80]	; (8009020 <HAL_SAI_MspInit+0x9c>)
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d11c      	bne.n	800900c <HAL_SAI_MspInit+0x88>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8008fd2:	4b10      	ldr	r3, [pc, #64]	; (8009014 <HAL_SAI_MspInit+0x90>)
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	b94a      	cbnz	r2, 8008fec <HAL_SAI_MspInit+0x68>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8008fd8:	490f      	ldr	r1, [pc, #60]	; (8009018 <HAL_SAI_MspInit+0x94>)
 8008fda:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8008fdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008fe0:	6448      	str	r0, [r1, #68]	; 0x44
 8008fe2:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8008fe4:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8008fe8:	9102      	str	r1, [sp, #8]
 8008fea:	9902      	ldr	r1, [sp, #8]
      }
    SAI2_client ++;
 8008fec:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8008fee:	a903      	add	r1, sp, #12
 8008ff0:	480c      	ldr	r0, [pc, #48]	; (8009024 <HAL_SAI_MspInit+0xa0>)
    SAI2_client ++;
 8008ff2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8008ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ff8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ffa:	2302      	movs	r3, #2
 8008ffc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009002:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8009004:	230a      	movs	r3, #10
 8009006:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8009008:	f7f8 f846 	bl	8001098 <HAL_GPIO_Init>

    }
}
 800900c:	b008      	add	sp, #32
 800900e:	bd10      	pop	{r4, pc}
 8009010:	40015c04 	.word	0x40015c04
 8009014:	20008214 	.word	0x20008214
 8009018:	40023800 	.word	0x40023800
 800901c:	40022000 	.word	0x40022000
 8009020:	40015c24 	.word	0x40015c24
 8009024:	40021800 	.word	0x40021800

08009028 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009028:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800902a:	4601      	mov	r1, r0
{
 800902c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800902e:	2200      	movs	r2, #0
 8009030:	2036      	movs	r0, #54	; 0x36
 8009032:	f7f7 fbfb 	bl	800082c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8009036:	2036      	movs	r0, #54	; 0x36
 8009038:	f7f7 fc30 	bl	800089c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800903c:	4b14      	ldr	r3, [pc, #80]	; (8009090 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800903e:	a901      	add	r1, sp, #4
 8009040:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8009042:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8009044:	4c13      	ldr	r4, [pc, #76]	; (8009094 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8009046:	f042 0210 	orr.w	r2, r2, #16
 800904a:	641a      	str	r2, [r3, #64]	; 0x40
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	f003 0310 	and.w	r3, r3, #16
 8009052:	9302      	str	r3, [sp, #8]
 8009054:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009056:	f7f9 fab3 	bl	80025c0 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800905a:	f7f9 fa91 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800905e:	4b0e      	ldr	r3, [pc, #56]	; (8009098 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009060:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 8009062:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8009064:	f240 33e7 	movw	r3, #999	; 0x3e7
 8009068:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800906a:	4b0c      	ldr	r3, [pc, #48]	; (800909c <HAL_InitTick+0x74>)
 800906c:	fbb0 f0f3 	udiv	r0, r0, r3
 8009070:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8009072:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8009074:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8009076:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8009078:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800907a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800907c:	f7fa feb0 	bl	8003de0 <HAL_TIM_Base_Init>
 8009080:	b920      	cbnz	r0, 800908c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8009082:	4620      	mov	r0, r4
 8009084:	f7fa fd84 	bl	8003b90 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8009088:	b008      	add	sp, #32
 800908a:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800908c:	2001      	movs	r0, #1
 800908e:	e7fb      	b.n	8009088 <HAL_InitTick+0x60>
 8009090:	40023800 	.word	0x40023800
 8009094:	20009090 	.word	0x20009090
 8009098:	40001000 	.word	0x40001000
 800909c:	000f4240 	.word	0x000f4240

080090a0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80090a0:	f7fd b9f8 	b.w	8006494 <osSystickHandler>

080090a4 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80090a4:	4801      	ldr	r0, [pc, #4]	; (80090ac <TIM6_DAC_IRQHandler+0x8>)
 80090a6:	f7fa bd82 	b.w	8003bae <HAL_TIM_IRQHandler>
 80090aa:	bf00      	nop
 80090ac:	20009090 	.word	0x20009090

080090b0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80090b0:	4801      	ldr	r0, [pc, #4]	; (80090b8 <OTG_FS_IRQHandler+0x8>)
 80090b2:	f7f8 b9cf 	b.w	8001454 <HAL_HCD_IRQHandler>
 80090b6:	bf00      	nop
 80090b8:	200094a0 	.word	0x200094a0

080090bc <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80090bc:	4801      	ldr	r0, [pc, #4]	; (80090c4 <OTG_HS_IRQHandler+0x8>)
 80090be:	f7f8 b9c9 	b.w	8001454 <HAL_HCD_IRQHandler>
 80090c2:	bf00      	nop
 80090c4:	20008ba0 	.word	0x20008ba0

080090c8 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80090c8:	4801      	ldr	r0, [pc, #4]	; (80090d0 <LTDC_IRQHandler+0x8>)
 80090ca:	f7f8 beac 	b.w	8001e26 <HAL_LTDC_IRQHandler>
 80090ce:	bf00      	nop
 80090d0:	200089f0 	.word	0x200089f0

080090d4 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80090d4:	4801      	ldr	r0, [pc, #4]	; (80090dc <DMA2D_IRQHandler+0x8>)
 80090d6:	f7f7 bd22 	b.w	8000b1e <HAL_DMA2D_IRQHandler>
 80090da:	bf00      	nop
 80090dc:	20008f08 	.word	0x20008f08

080090e0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80090e0:	490f      	ldr	r1, [pc, #60]	; (8009120 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80090e2:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80090e4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80090e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80090ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80090f0:	4b0c      	ldr	r3, [pc, #48]	; (8009124 <SystemInit+0x44>)
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	f042 0201 	orr.w	r2, r2, #1
 80090f8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80090fa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8009102:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009106:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009108:	4a07      	ldr	r2, [pc, #28]	; (8009128 <SystemInit+0x48>)
 800910a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009112:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009114:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009116:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800911a:	608b      	str	r3, [r1, #8]
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	e000ed00 	.word	0xe000ed00
 8009124:	40023800 	.word	0x40023800
 8009128:	24003010 	.word	0x24003010

0800912c <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800912c:	2904      	cmp	r1, #4
 800912e:	d00a      	beq.n	8009146 <USBH_UserProcess+0x1a>
 8009130:	2905      	cmp	r1, #5
 8009132:	d004      	beq.n	800913e <USBH_UserProcess+0x12>
 8009134:	2902      	cmp	r1, #2
 8009136:	d105      	bne.n	8009144 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009138:	4b04      	ldr	r3, [pc, #16]	; (800914c <USBH_UserProcess+0x20>)
 800913a:	7019      	strb	r1, [r3, #0]
  break;
 800913c:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 800913e:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009140:	4b02      	ldr	r3, [pc, #8]	; (800914c <USBH_UserProcess+0x20>)
 8009142:	701a      	strb	r2, [r3, #0]
 8009144:	4770      	bx	lr
 8009146:	2201      	movs	r2, #1
 8009148:	e7fa      	b.n	8009140 <USBH_UserProcess+0x14>
 800914a:	bf00      	nop
 800914c:	20008218 	.word	0x20008218

08009150 <MX_USB_HOST_Init>:
{
 8009150:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8009152:	4c07      	ldr	r4, [pc, #28]	; (8009170 <MX_USB_HOST_Init+0x20>)
 8009154:	2201      	movs	r2, #1
 8009156:	4907      	ldr	r1, [pc, #28]	; (8009174 <MX_USB_HOST_Init+0x24>)
 8009158:	4620      	mov	r0, r4
 800915a:	f7fc fbf5 	bl	8005948 <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS);
 800915e:	4620      	mov	r0, r4
 8009160:	4905      	ldr	r1, [pc, #20]	; (8009178 <MX_USB_HOST_Init+0x28>)
 8009162:	f7fc fc25 	bl	80059b0 <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 8009166:	4620      	mov	r0, r4
}
 8009168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 800916c:	f7fc bc52 	b.w	8005a14 <USBH_Start>
 8009170:	200090d0 	.word	0x200090d0
 8009174:	0800912d 	.word	0x0800912d
 8009178:	20000004 	.word	0x20000004

0800917c <HAL_HCD_MspInit>:
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 800917c:	6803      	ldr	r3, [r0, #0]
 800917e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8009182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009186:	b08a      	sub	sp, #40	; 0x28
  if(hcdHandle->Instance==USB_OTG_FS)
 8009188:	d12c      	bne.n	80091e4 <HAL_HCD_MspInit+0x68>
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800918a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800918e:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009190:	a905      	add	r1, sp, #20
 8009192:	483a      	ldr	r0, [pc, #232]	; (800927c <HAL_HCD_MspInit+0x100>)
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8009194:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009196:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009198:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800919a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800919c:	2303      	movs	r3, #3
 800919e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80091a0:	230a      	movs	r3, #10
 80091a2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091a4:	f7f7 ff78 	bl	8001098 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091a8:	4b35      	ldr	r3, [pc, #212]	; (8009280 <HAL_HCD_MspInit+0x104>)

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80091aa:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091ae:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80091b2:	6359      	str	r1, [r3, #52]	; 0x34
 80091b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091b6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80091ba:	9101      	str	r1, [sp, #4]
 80091bc:	9a01      	ldr	r2, [sp, #4]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80091be:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091c0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80091c2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80091c6:	6459      	str	r1, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80091c8:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80091ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091d0:	9302      	str	r3, [sp, #8]
 80091d2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80091d4:	f7f7 fb2a 	bl	800082c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80091d8:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80091da:	f7f7 fb5f 	bl	800089c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80091de:	b00a      	add	sp, #40	; 0x28
 80091e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hcdHandle->Instance==USB_OTG_HS)
 80091e4:	4a27      	ldr	r2, [pc, #156]	; (8009284 <HAL_HCD_MspInit+0x108>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d1f9      	bne.n	80091de <HAL_HCD_MspInit+0x62>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091ea:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091ec:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091ee:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80091f0:	250a      	movs	r5, #10
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80091f2:	f643 4323 	movw	r3, #15395	; 0x3c23
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80091f6:	a905      	add	r1, sp, #20
 80091f8:	4823      	ldr	r0, [pc, #140]	; (8009288 <HAL_HCD_MspInit+0x10c>)
    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 80091fa:	f04f 0805 	mov.w	r8, #5
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80091fe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009200:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009202:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009204:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009206:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009208:	f7f7 ff46 	bl	8001098 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800920c:	2310      	movs	r3, #16
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800920e:	a905      	add	r1, sp, #20
 8009210:	481e      	ldr	r0, [pc, #120]	; (800928c <HAL_HCD_MspInit+0x110>)
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8009212:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009214:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009216:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009218:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800921a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800921c:	f7f7 ff3c 	bl	8001098 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009220:	a905      	add	r1, sp, #20
 8009222:	481b      	ldr	r0, [pc, #108]	; (8009290 <HAL_HCD_MspInit+0x114>)
    GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8009224:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009228:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800922a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800922c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800922e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009230:	f7f7 ff32 	bl	8001098 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8009234:	2328      	movs	r3, #40	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009236:	a905      	add	r1, sp, #20
 8009238:	4810      	ldr	r0, [pc, #64]	; (800927c <HAL_HCD_MspInit+0x100>)
    GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800923a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800923c:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800923e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009240:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009242:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009244:	f7f7 ff28 	bl	8001098 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009248:	4b0d      	ldr	r3, [pc, #52]	; (8009280 <HAL_HCD_MspInit+0x104>)
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800924a:	204d      	movs	r0, #77	; 0x4d
 800924c:	4641      	mov	r1, r8
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800924e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009250:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009254:	631a      	str	r2, [r3, #48]	; 0x30
 8009256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009258:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800925c:	9203      	str	r2, [sp, #12]
 800925e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8009260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009262:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009266:	631a      	str	r2, [r3, #48]	; 0x30
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8009268:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800926a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009270:	9304      	str	r3, [sp, #16]
 8009272:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8009274:	f7f7 fada 	bl	800082c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009278:	204d      	movs	r0, #77	; 0x4d
 800927a:	e7ae      	b.n	80091da <HAL_HCD_MspInit+0x5e>
 800927c:	40020000 	.word	0x40020000
 8009280:	40023800 	.word	0x40023800
 8009284:	40040000 	.word	0x40040000
 8009288:	40020400 	.word	0x40020400
 800928c:	40021c00 	.word	0x40021c00
 8009290:	40020800 	.word	0x40020800

08009294 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8009294:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 8009298:	f7fc bd27 	b.w	8005cea <USBH_LL_IncTimer>

0800929c <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 800929c:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 80092a0:	f7fc bd31 	b.w	8005d06 <USBH_LL_Connect>

080092a4 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 80092a4:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 80092a8:	f7fc bd47 	b.w	8005d3a <USBH_LL_Disconnect>

080092ac <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80092ac:	f8d0 0294 	ldr.w	r0, [r0, #660]	; 0x294
 80092b0:	f7fc bd65 	b.w	8005d7e <USBH_LL_NotifyURBChange>

080092b4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80092b4:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80092b6:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 80092ba:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d11f      	bne.n	8009300 <USBH_LL_Init+0x4c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80092c0:	4810      	ldr	r0, [pc, #64]	; (8009304 <USBH_LL_Init+0x50>)
  phost->pData = &hhcd_USB_OTG_FS;

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80092c6:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80092c8:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80092ca:	2308      	movs	r3, #8
  phost->pData = &hhcd_USB_OTG_FS;
 80092cc:	f8c4 03c0 	str.w	r0, [r4, #960]	; 0x3c0
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80092d0:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80092d2:	2303      	movs	r3, #3
  hhcd_USB_OTG_FS.pData = phost;
 80092d4:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80092d8:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092da:	2300      	movs	r3, #0
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80092dc:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80092de:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80092e0:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80092e2:	f7f8 f816 	bl	8001312 <HAL_HCD_Init>
 80092e6:	b120      	cbz	r0, 80092f2 <USBH_LL_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80092e8:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80092ec:	4806      	ldr	r0, [pc, #24]	; (8009308 <USBH_LL_Init+0x54>)
 80092ee:	f7ff f987 	bl	8008600 <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80092f2:	4804      	ldr	r0, [pc, #16]	; (8009304 <USBH_LL_Init+0x50>)
 80092f4:	f7f8 fbfc 	bl	8001af0 <HAL_HCD_GetCurrentFrame>
 80092f8:	4601      	mov	r1, r0
 80092fa:	4620      	mov	r0, r4
 80092fc:	f7fc fcf2 	bl	8005ce4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8009300:	2000      	movs	r0, #0
 8009302:	bd10      	pop	{r4, pc}
 8009304:	200094a0 	.word	0x200094a0
 8009308:	0800978f 	.word	0x0800978f

0800930c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800930c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800930e:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8009312:	f7f8 fbb7 	bl	8001a84 <HAL_HCD_Start>
 8009316:	2803      	cmp	r0, #3
 8009318:	bf9a      	itte	ls
 800931a:	4b02      	ldrls	r3, [pc, #8]	; (8009324 <USBH_LL_Start+0x18>)
 800931c:	5c18      	ldrbls	r0, [r3, r0]
 800931e:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8009320:	bd08      	pop	{r3, pc}
 8009322:	bf00      	nop
 8009324:	0800978b 	.word	0x0800978b

08009328 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009328:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 800932a:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800932e:	f7f8 fbbf 	bl	8001ab0 <HAL_HCD_Stop>
 8009332:	2803      	cmp	r0, #3
 8009334:	bf9a      	itte	ls
 8009336:	4b02      	ldrls	r3, [pc, #8]	; (8009340 <USBH_LL_Stop+0x18>)
 8009338:	5c18      	ldrbls	r0, [r3, r0]
 800933a:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800933c:	bd08      	pop	{r3, pc}
 800933e:	bf00      	nop
 8009340:	0800978b 	.word	0x0800978b

08009344 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009344:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009346:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800934a:	f7f8 fbd4 	bl	8001af6 <HAL_HCD_GetCurrentSpeed>
 800934e:	2802      	cmp	r0, #2
 8009350:	bf9a      	itte	ls
 8009352:	4b02      	ldrls	r3, [pc, #8]	; (800935c <USBH_LL_GetSpeed+0x18>)
 8009354:	5c18      	ldrbls	r0, [r3, r0]
 8009356:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8009358:	bd08      	pop	{r3, pc}
 800935a:	bf00      	nop
 800935c:	08009788 	.word	0x08009788

08009360 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009360:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009362:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8009366:	f7f8 fbb5 	bl	8001ad4 <HAL_HCD_ResetPort>
 800936a:	2803      	cmp	r0, #3
 800936c:	bf9a      	itte	ls
 800936e:	4b02      	ldrls	r3, [pc, #8]	; (8009378 <USBH_LL_ResetPort+0x18>)
 8009370:	5c18      	ldrbls	r0, [r3, r0]
 8009372:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8009374:	bd08      	pop	{r3, pc}
 8009376:	bf00      	nop
 8009378:	0800978b 	.word	0x0800978b

0800937c <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800937c:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8009380:	f7f8 bbb1 	b.w	8001ae6 <HAL_HCD_HC_GetXferCount>

08009384 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009386:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800938a:	9402      	str	r4, [sp, #8]
 800938c:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8009390:	9401      	str	r4, [sp, #4]
 8009392:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8009396:	9400      	str	r4, [sp, #0]
 8009398:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 800939c:	f7f7 ff71 	bl	8001282 <HAL_HCD_HC_Init>
 80093a0:	2803      	cmp	r0, #3
 80093a2:	bf96      	itet	ls
 80093a4:	4b02      	ldrls	r3, [pc, #8]	; (80093b0 <USBH_LL_OpenPipe+0x2c>)
 80093a6:	2002      	movhi	r0, #2
 80093a8:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80093aa:	b004      	add	sp, #16
 80093ac:	bd10      	pop	{r4, pc}
 80093ae:	bf00      	nop
 80093b0:	0800978b 	.word	0x0800978b

080093b4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80093b4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80093b6:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 80093ba:	f7f7 ff98 	bl	80012ee <HAL_HCD_HC_Halt>
 80093be:	2803      	cmp	r0, #3
 80093c0:	bf9a      	itte	ls
 80093c2:	4b02      	ldrls	r3, [pc, #8]	; (80093cc <USBH_LL_ClosePipe+0x18>)
 80093c4:	5c18      	ldrbls	r0, [r3, r0]
 80093c6:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80093c8:	bd08      	pop	{r3, pc}
 80093ca:	bf00      	nop
 80093cc:	0800978b 	.word	0x0800978b

080093d0 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80093d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80093d2:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80093d6:	9403      	str	r4, [sp, #12]
 80093d8:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80093dc:	9402      	str	r4, [sp, #8]
 80093de:	9c07      	ldr	r4, [sp, #28]
 80093e0:	9401      	str	r4, [sp, #4]
 80093e2:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80093e6:	9400      	str	r4, [sp, #0]
 80093e8:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 80093ec:	f7f7 ffce 	bl	800138c <HAL_HCD_HC_SubmitRequest>
 80093f0:	2803      	cmp	r0, #3
 80093f2:	bf96      	itet	ls
 80093f4:	4b02      	ldrls	r3, [pc, #8]	; (8009400 <USBH_LL_SubmitURB+0x30>)
 80093f6:	2002      	movhi	r0, #2
 80093f8:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80093fa:	b004      	add	sp, #16
 80093fc:	bd10      	pop	{r4, pc}
 80093fe:	bf00      	nop
 8009400:	0800978b 	.word	0x0800978b

08009404 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009404:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
 8009408:	f7f8 bb67 	b.w	8001ada <HAL_HCD_HC_GetURBState>

0800940c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800940c:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800940e:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8009412:	2b01      	cmp	r3, #1
 8009414:	d102      	bne.n	800941c <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 8009416:	4608      	mov	r0, r1
 8009418:	f000 f816 	bl	8009448 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800941c:	20c8      	movs	r0, #200	; 0xc8
 800941e:	f7f7 f89d 	bl	800055c <HAL_Delay>
  return USBH_OK;
}
 8009422:	2000      	movs	r0, #0
 8009424:	bd08      	pop	{r3, pc}

08009426 <USBH_LL_SetToggle>:
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;

  if(pHandle->hc[pipe].ep_is_in)
 8009426:	2328      	movs	r3, #40	; 0x28
  pHandle = phost->pData;
 8009428:	f8d0 03c0 	ldr.w	r0, [r0, #960]	; 0x3c0
  if(pHandle->hc[pipe].ep_is_in)
 800942c:	fb03 0101 	mla	r1, r3, r1, r0
 8009430:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8009434:	b11b      	cbz	r3, 800943e <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009436:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 800943a:	2000      	movs	r0, #0
 800943c:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 800943e:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8009442:	e7fa      	b.n	800943a <USBH_LL_SetToggle+0x14>

08009444 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8009444:	f7f7 b88a 	b.w	800055c <HAL_Delay>

08009448 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8009448:	fab0 f280 	clz	r2, r0
 800944c:	2120      	movs	r1, #32
 800944e:	4802      	ldr	r0, [pc, #8]	; (8009458 <MX_DriverVbusFS+0x10>)
 8009450:	0952      	lsrs	r2, r2, #5
 8009452:	f7f7 bf11 	b.w	8001278 <HAL_GPIO_WritePin>
 8009456:	bf00      	nop
 8009458:	40020c00 	.word	0x40020c00

0800945c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800945c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009494 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009460:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009462:	e003      	b.n	800946c <LoopCopyDataInit>

08009464 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009464:	4b0c      	ldr	r3, [pc, #48]	; (8009498 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009466:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009468:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800946a:	3104      	adds	r1, #4

0800946c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800946c:	480b      	ldr	r0, [pc, #44]	; (800949c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800946e:	4b0c      	ldr	r3, [pc, #48]	; (80094a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009470:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009472:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009474:	d3f6      	bcc.n	8009464 <CopyDataInit>
  ldr  r2, =_sbss
 8009476:	4a0b      	ldr	r2, [pc, #44]	; (80094a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009478:	e002      	b.n	8009480 <LoopFillZerobss>

0800947a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800947a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800947c:	f842 3b04 	str.w	r3, [r2], #4

08009480 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009480:	4b09      	ldr	r3, [pc, #36]	; (80094a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009482:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009484:	d3f9      	bcc.n	800947a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009486:	f7ff fe2b 	bl	80090e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800948a:	f000 f811 	bl	80094b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800948e:	f7fe fb9d 	bl	8007bcc <main>
  bx  lr    
 8009492:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009494:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009498:	080097b4 	.word	0x080097b4
  ldr  r0, =_sdata
 800949c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80094a0:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 80094a4:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 80094a8:	2000973c 	.word	0x2000973c

080094ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80094ac:	e7fe      	b.n	80094ac <ADC_IRQHandler>
	...

080094b0 <__libc_init_array>:
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	4e0d      	ldr	r6, [pc, #52]	; (80094e8 <__libc_init_array+0x38>)
 80094b4:	4c0d      	ldr	r4, [pc, #52]	; (80094ec <__libc_init_array+0x3c>)
 80094b6:	1ba4      	subs	r4, r4, r6
 80094b8:	10a4      	asrs	r4, r4, #2
 80094ba:	2500      	movs	r5, #0
 80094bc:	42a5      	cmp	r5, r4
 80094be:	d109      	bne.n	80094d4 <__libc_init_array+0x24>
 80094c0:	4e0b      	ldr	r6, [pc, #44]	; (80094f0 <__libc_init_array+0x40>)
 80094c2:	4c0c      	ldr	r4, [pc, #48]	; (80094f4 <__libc_init_array+0x44>)
 80094c4:	f000 f908 	bl	80096d8 <_init>
 80094c8:	1ba4      	subs	r4, r4, r6
 80094ca:	10a4      	asrs	r4, r4, #2
 80094cc:	2500      	movs	r5, #0
 80094ce:	42a5      	cmp	r5, r4
 80094d0:	d105      	bne.n	80094de <__libc_init_array+0x2e>
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094d8:	4798      	blx	r3
 80094da:	3501      	adds	r5, #1
 80094dc:	e7ee      	b.n	80094bc <__libc_init_array+0xc>
 80094de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094e2:	4798      	blx	r3
 80094e4:	3501      	adds	r5, #1
 80094e6:	e7f2      	b.n	80094ce <__libc_init_array+0x1e>
 80094e8:	080097ac 	.word	0x080097ac
 80094ec:	080097ac 	.word	0x080097ac
 80094f0:	080097ac 	.word	0x080097ac
 80094f4:	080097b0 	.word	0x080097b0

080094f8 <malloc>:
 80094f8:	4b02      	ldr	r3, [pc, #8]	; (8009504 <malloc+0xc>)
 80094fa:	4601      	mov	r1, r0
 80094fc:	6818      	ldr	r0, [r3, #0]
 80094fe:	f000 b86d 	b.w	80095dc <_malloc_r>
 8009502:	bf00      	nop
 8009504:	20000030 	.word	0x20000030

08009508 <free>:
 8009508:	4b02      	ldr	r3, [pc, #8]	; (8009514 <free+0xc>)
 800950a:	4601      	mov	r1, r0
 800950c:	6818      	ldr	r0, [r3, #0]
 800950e:	f000 b817 	b.w	8009540 <_free_r>
 8009512:	bf00      	nop
 8009514:	20000030 	.word	0x20000030

08009518 <memcpy>:
 8009518:	b510      	push	{r4, lr}
 800951a:	1e43      	subs	r3, r0, #1
 800951c:	440a      	add	r2, r1
 800951e:	4291      	cmp	r1, r2
 8009520:	d100      	bne.n	8009524 <memcpy+0xc>
 8009522:	bd10      	pop	{r4, pc}
 8009524:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800952c:	e7f7      	b.n	800951e <memcpy+0x6>

0800952e <memset>:
 800952e:	4402      	add	r2, r0
 8009530:	4603      	mov	r3, r0
 8009532:	4293      	cmp	r3, r2
 8009534:	d100      	bne.n	8009538 <memset+0xa>
 8009536:	4770      	bx	lr
 8009538:	f803 1b01 	strb.w	r1, [r3], #1
 800953c:	e7f9      	b.n	8009532 <memset+0x4>
	...

08009540 <_free_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4605      	mov	r5, r0
 8009544:	2900      	cmp	r1, #0
 8009546:	d045      	beq.n	80095d4 <_free_r+0x94>
 8009548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800954c:	1f0c      	subs	r4, r1, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	bfb8      	it	lt
 8009552:	18e4      	addlt	r4, r4, r3
 8009554:	f000 f8b0 	bl	80096b8 <__malloc_lock>
 8009558:	4a1f      	ldr	r2, [pc, #124]	; (80095d8 <_free_r+0x98>)
 800955a:	6813      	ldr	r3, [r2, #0]
 800955c:	4610      	mov	r0, r2
 800955e:	b933      	cbnz	r3, 800956e <_free_r+0x2e>
 8009560:	6063      	str	r3, [r4, #4]
 8009562:	6014      	str	r4, [r2, #0]
 8009564:	4628      	mov	r0, r5
 8009566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800956a:	f000 b8a6 	b.w	80096ba <__malloc_unlock>
 800956e:	42a3      	cmp	r3, r4
 8009570:	d90c      	bls.n	800958c <_free_r+0x4c>
 8009572:	6821      	ldr	r1, [r4, #0]
 8009574:	1862      	adds	r2, r4, r1
 8009576:	4293      	cmp	r3, r2
 8009578:	bf04      	itt	eq
 800957a:	681a      	ldreq	r2, [r3, #0]
 800957c:	685b      	ldreq	r3, [r3, #4]
 800957e:	6063      	str	r3, [r4, #4]
 8009580:	bf04      	itt	eq
 8009582:	1852      	addeq	r2, r2, r1
 8009584:	6022      	streq	r2, [r4, #0]
 8009586:	6004      	str	r4, [r0, #0]
 8009588:	e7ec      	b.n	8009564 <_free_r+0x24>
 800958a:	4613      	mov	r3, r2
 800958c:	685a      	ldr	r2, [r3, #4]
 800958e:	b10a      	cbz	r2, 8009594 <_free_r+0x54>
 8009590:	42a2      	cmp	r2, r4
 8009592:	d9fa      	bls.n	800958a <_free_r+0x4a>
 8009594:	6819      	ldr	r1, [r3, #0]
 8009596:	1858      	adds	r0, r3, r1
 8009598:	42a0      	cmp	r0, r4
 800959a:	d10b      	bne.n	80095b4 <_free_r+0x74>
 800959c:	6820      	ldr	r0, [r4, #0]
 800959e:	4401      	add	r1, r0
 80095a0:	1858      	adds	r0, r3, r1
 80095a2:	4282      	cmp	r2, r0
 80095a4:	6019      	str	r1, [r3, #0]
 80095a6:	d1dd      	bne.n	8009564 <_free_r+0x24>
 80095a8:	6810      	ldr	r0, [r2, #0]
 80095aa:	6852      	ldr	r2, [r2, #4]
 80095ac:	605a      	str	r2, [r3, #4]
 80095ae:	4401      	add	r1, r0
 80095b0:	6019      	str	r1, [r3, #0]
 80095b2:	e7d7      	b.n	8009564 <_free_r+0x24>
 80095b4:	d902      	bls.n	80095bc <_free_r+0x7c>
 80095b6:	230c      	movs	r3, #12
 80095b8:	602b      	str	r3, [r5, #0]
 80095ba:	e7d3      	b.n	8009564 <_free_r+0x24>
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	1821      	adds	r1, r4, r0
 80095c0:	428a      	cmp	r2, r1
 80095c2:	bf04      	itt	eq
 80095c4:	6811      	ldreq	r1, [r2, #0]
 80095c6:	6852      	ldreq	r2, [r2, #4]
 80095c8:	6062      	str	r2, [r4, #4]
 80095ca:	bf04      	itt	eq
 80095cc:	1809      	addeq	r1, r1, r0
 80095ce:	6021      	streq	r1, [r4, #0]
 80095d0:	605c      	str	r4, [r3, #4]
 80095d2:	e7c7      	b.n	8009564 <_free_r+0x24>
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	bf00      	nop
 80095d8:	2000821c 	.word	0x2000821c

080095dc <_malloc_r>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	1ccd      	adds	r5, r1, #3
 80095e0:	f025 0503 	bic.w	r5, r5, #3
 80095e4:	3508      	adds	r5, #8
 80095e6:	2d0c      	cmp	r5, #12
 80095e8:	bf38      	it	cc
 80095ea:	250c      	movcc	r5, #12
 80095ec:	2d00      	cmp	r5, #0
 80095ee:	4606      	mov	r6, r0
 80095f0:	db01      	blt.n	80095f6 <_malloc_r+0x1a>
 80095f2:	42a9      	cmp	r1, r5
 80095f4:	d903      	bls.n	80095fe <_malloc_r+0x22>
 80095f6:	230c      	movs	r3, #12
 80095f8:	6033      	str	r3, [r6, #0]
 80095fa:	2000      	movs	r0, #0
 80095fc:	bd70      	pop	{r4, r5, r6, pc}
 80095fe:	f000 f85b 	bl	80096b8 <__malloc_lock>
 8009602:	4a23      	ldr	r2, [pc, #140]	; (8009690 <_malloc_r+0xb4>)
 8009604:	6814      	ldr	r4, [r2, #0]
 8009606:	4621      	mov	r1, r4
 8009608:	b991      	cbnz	r1, 8009630 <_malloc_r+0x54>
 800960a:	4c22      	ldr	r4, [pc, #136]	; (8009694 <_malloc_r+0xb8>)
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	b91b      	cbnz	r3, 8009618 <_malloc_r+0x3c>
 8009610:	4630      	mov	r0, r6
 8009612:	f000 f841 	bl	8009698 <_sbrk_r>
 8009616:	6020      	str	r0, [r4, #0]
 8009618:	4629      	mov	r1, r5
 800961a:	4630      	mov	r0, r6
 800961c:	f000 f83c 	bl	8009698 <_sbrk_r>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	d126      	bne.n	8009672 <_malloc_r+0x96>
 8009624:	230c      	movs	r3, #12
 8009626:	6033      	str	r3, [r6, #0]
 8009628:	4630      	mov	r0, r6
 800962a:	f000 f846 	bl	80096ba <__malloc_unlock>
 800962e:	e7e4      	b.n	80095fa <_malloc_r+0x1e>
 8009630:	680b      	ldr	r3, [r1, #0]
 8009632:	1b5b      	subs	r3, r3, r5
 8009634:	d41a      	bmi.n	800966c <_malloc_r+0x90>
 8009636:	2b0b      	cmp	r3, #11
 8009638:	d90f      	bls.n	800965a <_malloc_r+0x7e>
 800963a:	600b      	str	r3, [r1, #0]
 800963c:	50cd      	str	r5, [r1, r3]
 800963e:	18cc      	adds	r4, r1, r3
 8009640:	4630      	mov	r0, r6
 8009642:	f000 f83a 	bl	80096ba <__malloc_unlock>
 8009646:	f104 000b 	add.w	r0, r4, #11
 800964a:	1d23      	adds	r3, r4, #4
 800964c:	f020 0007 	bic.w	r0, r0, #7
 8009650:	1ac3      	subs	r3, r0, r3
 8009652:	d01b      	beq.n	800968c <_malloc_r+0xb0>
 8009654:	425a      	negs	r2, r3
 8009656:	50e2      	str	r2, [r4, r3]
 8009658:	bd70      	pop	{r4, r5, r6, pc}
 800965a:	428c      	cmp	r4, r1
 800965c:	bf0d      	iteet	eq
 800965e:	6863      	ldreq	r3, [r4, #4]
 8009660:	684b      	ldrne	r3, [r1, #4]
 8009662:	6063      	strne	r3, [r4, #4]
 8009664:	6013      	streq	r3, [r2, #0]
 8009666:	bf18      	it	ne
 8009668:	460c      	movne	r4, r1
 800966a:	e7e9      	b.n	8009640 <_malloc_r+0x64>
 800966c:	460c      	mov	r4, r1
 800966e:	6849      	ldr	r1, [r1, #4]
 8009670:	e7ca      	b.n	8009608 <_malloc_r+0x2c>
 8009672:	1cc4      	adds	r4, r0, #3
 8009674:	f024 0403 	bic.w	r4, r4, #3
 8009678:	42a0      	cmp	r0, r4
 800967a:	d005      	beq.n	8009688 <_malloc_r+0xac>
 800967c:	1a21      	subs	r1, r4, r0
 800967e:	4630      	mov	r0, r6
 8009680:	f000 f80a 	bl	8009698 <_sbrk_r>
 8009684:	3001      	adds	r0, #1
 8009686:	d0cd      	beq.n	8009624 <_malloc_r+0x48>
 8009688:	6025      	str	r5, [r4, #0]
 800968a:	e7d9      	b.n	8009640 <_malloc_r+0x64>
 800968c:	bd70      	pop	{r4, r5, r6, pc}
 800968e:	bf00      	nop
 8009690:	2000821c 	.word	0x2000821c
 8009694:	20008220 	.word	0x20008220

08009698 <_sbrk_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4c06      	ldr	r4, [pc, #24]	; (80096b4 <_sbrk_r+0x1c>)
 800969c:	2300      	movs	r3, #0
 800969e:	4605      	mov	r5, r0
 80096a0:	4608      	mov	r0, r1
 80096a2:	6023      	str	r3, [r4, #0]
 80096a4:	f000 f80a 	bl	80096bc <_sbrk>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_sbrk_r+0x1a>
 80096ac:	6823      	ldr	r3, [r4, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_sbrk_r+0x1a>
 80096b0:	602b      	str	r3, [r5, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	20009738 	.word	0x20009738

080096b8 <__malloc_lock>:
 80096b8:	4770      	bx	lr

080096ba <__malloc_unlock>:
 80096ba:	4770      	bx	lr

080096bc <_sbrk>:
 80096bc:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <_sbrk+0x14>)
 80096be:	6819      	ldr	r1, [r3, #0]
 80096c0:	4602      	mov	r2, r0
 80096c2:	b909      	cbnz	r1, 80096c8 <_sbrk+0xc>
 80096c4:	4903      	ldr	r1, [pc, #12]	; (80096d4 <_sbrk+0x18>)
 80096c6:	6019      	str	r1, [r3, #0]
 80096c8:	6818      	ldr	r0, [r3, #0]
 80096ca:	4402      	add	r2, r0
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	4770      	bx	lr
 80096d0:	20008224 	.word	0x20008224
 80096d4:	2000973c 	.word	0x2000973c

080096d8 <_init>:
 80096d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096da:	bf00      	nop
 80096dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096de:	bc08      	pop	{r3}
 80096e0:	469e      	mov	lr, r3
 80096e2:	4770      	bx	lr

080096e4 <_fini>:
 80096e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096e6:	bf00      	nop
 80096e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ea:	bc08      	pop	{r3}
 80096ec:	469e      	mov	lr, r3
 80096ee:	4770      	bx	lr
