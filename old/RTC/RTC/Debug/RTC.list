
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014e4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080015f0  080015f0  000115f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001628  08001628  00011628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800162c  0800162c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000005c  20000004  08001634  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000060  08001634  00020060  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c956  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000020a5  00000000  00000000  0002c983  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002410  00000000  00000000  0002ea28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000568  00000000  00000000  00030e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006d0  00000000  00000000  000313a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003497  00000000  00000000  00031a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001f02  00000000  00000000  00034f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00036e09  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000c6c  00000000  00000000  00036e88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080015d8 	.word	0x080015d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080015d8 	.word	0x080015d8

0800014c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800014c:	4b08      	ldr	r3, [pc, #32]	; (8000170 <HAL_InitTick+0x24>)
{
 800014e:	b510      	push	{r4, lr}
 8000150:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000152:	6818      	ldr	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f88c 	bl	8000278 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f846 	bl	80001f8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}
 8000170:	20000000 	.word	0x20000000

08000174 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <HAL_Init+0x20>)
{
 8000176:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800017c:	f043 0310 	orr.w	r3, r3, #16
 8000180:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000182:	f000 f827 	bl	80001d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f7ff ffe0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 800018c:	f001 f930 	bl	80013f0 <HAL_MspInit>
}
 8000190:	2000      	movs	r0, #0
 8000192:	bd08      	pop	{r3, pc}
 8000194:	40022000 	.word	0x40022000

08000198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000198:	4a02      	ldr	r2, [pc, #8]	; (80001a4 <HAL_IncTick+0xc>)
 800019a:	6813      	ldr	r3, [r2, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	20000020 	.word	0x20000020

080001a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a8:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <HAL_GetTick+0x8>)
 80001aa:	6818      	ldr	r0, [r3, #0]
}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000020 	.word	0x20000020

080001b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80001b6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80001b8:	f7ff fff6 	bl	80001a8 <HAL_GetTick>
 80001bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80001be:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c0:	1c63      	adds	r3, r4, #1
  {
     wait++;
 80001c2:	bf18      	it	ne
 80001c4:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80001c6:	f7ff ffef 	bl	80001a8 <HAL_GetTick>
 80001ca:	1b40      	subs	r0, r0, r5
 80001cc:	42a0      	cmp	r0, r4
 80001ce:	d3fa      	bcc.n	80001c6 <HAL_Delay+0x12>
  {
  }
}
 80001d0:	b003      	add	sp, #12
 80001d2:	bd30      	pop	{r4, r5, pc}

080001d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d4:	4a07      	ldr	r2, [pc, #28]	; (80001f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001d6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e2:	041b      	lsls	r3, r3, #16
 80001e4:	0c1b      	lsrs	r3, r3, #16
 80001e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f0:	60d3      	str	r3, [r2, #12]
 80001f2:	4770      	bx	lr
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001fa:	b530      	push	{r4, r5, lr}
 80001fc:	68dc      	ldr	r4, [r3, #12]
 80001fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000202:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000206:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000208:	2b04      	cmp	r3, #4
 800020a:	bf28      	it	cs
 800020c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000210:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000214:	bf98      	it	ls
 8000216:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	fa05 f303 	lsl.w	r3, r5, r3
 800021c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000220:	bf88      	it	hi
 8000222:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000224:	4019      	ands	r1, r3
 8000226:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000228:	fa05 f404 	lsl.w	r4, r5, r4
 800022c:	3c01      	subs	r4, #1
 800022e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000230:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000232:	ea42 0201 	orr.w	r2, r2, r1
 8000236:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	bfaf      	iteee	ge
 800023c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	4b06      	ldrlt	r3, [pc, #24]	; (800025c <HAL_NVIC_SetPriority+0x64>)
 8000242:	f000 000f 	andlt.w	r0, r0, #15
 8000246:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	bfa5      	ittet	ge
 800024a:	b2d2      	uxtbge	r2, r2
 800024c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000256:	bd30      	pop	{r4, r5, pc}
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	e000ed14 	.word	0xe000ed14

08000260 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000260:	2301      	movs	r3, #1
 8000262:	0942      	lsrs	r2, r0, #5
 8000264:	f000 001f 	and.w	r0, r0, #31
 8000268:	fa03 f000 	lsl.w	r0, r3, r0
 800026c:	4b01      	ldr	r3, [pc, #4]	; (8000274 <HAL_NVIC_EnableIRQ+0x14>)
 800026e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000272:	4770      	bx	lr
 8000274:	e000e100 	.word	0xe000e100

08000278 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000278:	3801      	subs	r0, #1
 800027a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800027e:	d20a      	bcs.n	8000296 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000286:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800028c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800028e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000290:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000296:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000e010 	.word	0xe000e010
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002a6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	bf0c      	ite	eq
 80002ac:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002b0:	f022 0204 	bicne.w	r2, r2, #4
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	4770      	bx	lr
 80002b8:	e000e010 	.word	0xe000e010

080002bc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002bc:	4770      	bx	lr

080002be <HAL_SYSTICK_IRQHandler>:
{
 80002be:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002c0:	f7ff fffc 	bl	80002bc <HAL_SYSTICK_Callback>
 80002c4:	bd08      	pop	{r3, pc}
	...

080002c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002cc:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002ce:	4616      	mov	r6, r2
 80002d0:	4b65      	ldr	r3, [pc, #404]	; (8000468 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002d2:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000478 <HAL_GPIO_Init+0x1b0>
 80002d6:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800047c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002da:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002de:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002e0:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002e4:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002e8:	45a0      	cmp	r8, r4
 80002ea:	d17f      	bne.n	80003ec <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002ec:	684d      	ldr	r5, [r1, #4]
 80002ee:	2d12      	cmp	r5, #18
 80002f0:	f000 80af 	beq.w	8000452 <HAL_GPIO_Init+0x18a>
 80002f4:	f200 8088 	bhi.w	8000408 <HAL_GPIO_Init+0x140>
 80002f8:	2d02      	cmp	r5, #2
 80002fa:	f000 80a7 	beq.w	800044c <HAL_GPIO_Init+0x184>
 80002fe:	d87c      	bhi.n	80003fa <HAL_GPIO_Init+0x132>
 8000300:	2d00      	cmp	r5, #0
 8000302:	f000 808e 	beq.w	8000422 <HAL_GPIO_Init+0x15a>
 8000306:	2d01      	cmp	r5, #1
 8000308:	f000 809e 	beq.w	8000448 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800030c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000310:	2cff      	cmp	r4, #255	; 0xff
 8000312:	bf93      	iteet	ls
 8000314:	4682      	movls	sl, r0
 8000316:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800031a:	3d08      	subhi	r5, #8
 800031c:	f8d0 b000 	ldrls.w	fp, [r0]
 8000320:	bf92      	itee	ls
 8000322:	00b5      	lslls	r5, r6, #2
 8000324:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000328:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800032a:	fa09 f805 	lsl.w	r8, r9, r5
 800032e:	ea2b 0808 	bic.w	r8, fp, r8
 8000332:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000336:	bf88      	it	hi
 8000338:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800033c:	ea48 0505 	orr.w	r5, r8, r5
 8000340:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000344:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000348:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800034c:	d04e      	beq.n	80003ec <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800034e:	4d47      	ldr	r5, [pc, #284]	; (800046c <HAL_GPIO_Init+0x1a4>)
 8000350:	4f46      	ldr	r7, [pc, #280]	; (800046c <HAL_GPIO_Init+0x1a4>)
 8000352:	69ad      	ldr	r5, [r5, #24]
 8000354:	f026 0803 	bic.w	r8, r6, #3
 8000358:	f045 0501 	orr.w	r5, r5, #1
 800035c:	61bd      	str	r5, [r7, #24]
 800035e:	69bd      	ldr	r5, [r7, #24]
 8000360:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000364:	f005 0501 	and.w	r5, r5, #1
 8000368:	9501      	str	r5, [sp, #4]
 800036a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800036e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000372:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000374:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000378:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800037c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000380:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000384:	4d3a      	ldr	r5, [pc, #232]	; (8000470 <HAL_GPIO_Init+0x1a8>)
 8000386:	42a8      	cmp	r0, r5
 8000388:	d068      	beq.n	800045c <HAL_GPIO_Init+0x194>
 800038a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800038e:	42a8      	cmp	r0, r5
 8000390:	d066      	beq.n	8000460 <HAL_GPIO_Init+0x198>
 8000392:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000396:	42a8      	cmp	r0, r5
 8000398:	d064      	beq.n	8000464 <HAL_GPIO_Init+0x19c>
 800039a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800039e:	42a8      	cmp	r0, r5
 80003a0:	bf0c      	ite	eq
 80003a2:	2503      	moveq	r5, #3
 80003a4:	2504      	movne	r5, #4
 80003a6:	fa05 f50b 	lsl.w	r5, r5, fp
 80003aa:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 80003ae:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80003b2:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003b4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 80003b8:	bf14      	ite	ne
 80003ba:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80003bc:	43a5      	biceq	r5, r4
 80003be:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80003c0:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003c2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 80003c6:	bf14      	ite	ne
 80003c8:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80003ca:	43a5      	biceq	r5, r4
 80003cc:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003ce:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003d0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 80003d4:	bf14      	ite	ne
 80003d6:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80003d8:	43a5      	biceq	r5, r4
 80003da:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003dc:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003de:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 80003e2:	bf14      	ite	ne
 80003e4:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80003e6:	ea25 0404 	biceq.w	r4, r5, r4
 80003ea:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003ec:	3601      	adds	r6, #1
 80003ee:	2e10      	cmp	r6, #16
 80003f0:	f47f af73 	bne.w	80002da <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003f4:	b003      	add	sp, #12
 80003f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003fa:	2d03      	cmp	r5, #3
 80003fc:	d022      	beq.n	8000444 <HAL_GPIO_Init+0x17c>
 80003fe:	2d11      	cmp	r5, #17
 8000400:	d184      	bne.n	800030c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000402:	68ca      	ldr	r2, [r1, #12]
 8000404:	3204      	adds	r2, #4
          break;
 8000406:	e781      	b.n	800030c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000408:	4f1a      	ldr	r7, [pc, #104]	; (8000474 <HAL_GPIO_Init+0x1ac>)
 800040a:	42bd      	cmp	r5, r7
 800040c:	d009      	beq.n	8000422 <HAL_GPIO_Init+0x15a>
 800040e:	d812      	bhi.n	8000436 <HAL_GPIO_Init+0x16e>
 8000410:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000480 <HAL_GPIO_Init+0x1b8>
 8000414:	454d      	cmp	r5, r9
 8000416:	d004      	beq.n	8000422 <HAL_GPIO_Init+0x15a>
 8000418:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 800041c:	454d      	cmp	r5, r9
 800041e:	f47f af75 	bne.w	800030c <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 8000422:	688a      	ldr	r2, [r1, #8]
 8000424:	b1c2      	cbz	r2, 8000458 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000426:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000428:	bf0c      	ite	eq
 800042a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800042e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000432:	2208      	movs	r2, #8
 8000434:	e76a      	b.n	800030c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000436:	4575      	cmp	r5, lr
 8000438:	d0f3      	beq.n	8000422 <HAL_GPIO_Init+0x15a>
 800043a:	4565      	cmp	r5, ip
 800043c:	d0f1      	beq.n	8000422 <HAL_GPIO_Init+0x15a>
 800043e:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000484 <HAL_GPIO_Init+0x1bc>
 8000442:	e7eb      	b.n	800041c <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000444:	2200      	movs	r2, #0
 8000446:	e761      	b.n	800030c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000448:	68ca      	ldr	r2, [r1, #12]
          break;
 800044a:	e75f      	b.n	800030c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800044c:	68ca      	ldr	r2, [r1, #12]
 800044e:	3208      	adds	r2, #8
          break;
 8000450:	e75c      	b.n	800030c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000452:	68ca      	ldr	r2, [r1, #12]
 8000454:	320c      	adds	r2, #12
          break;
 8000456:	e759      	b.n	800030c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000458:	2204      	movs	r2, #4
 800045a:	e757      	b.n	800030c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800045c:	2500      	movs	r5, #0
 800045e:	e7a2      	b.n	80003a6 <HAL_GPIO_Init+0xde>
 8000460:	2501      	movs	r5, #1
 8000462:	e7a0      	b.n	80003a6 <HAL_GPIO_Init+0xde>
 8000464:	2502      	movs	r5, #2
 8000466:	e79e      	b.n	80003a6 <HAL_GPIO_Init+0xde>
 8000468:	40010400 	.word	0x40010400
 800046c:	40021000 	.word	0x40021000
 8000470:	40010800 	.word	0x40010800
 8000474:	10210000 	.word	0x10210000
 8000478:	10310000 	.word	0x10310000
 800047c:	10320000 	.word	0x10320000
 8000480:	10110000 	.word	0x10110000
 8000484:	10220000 	.word	0x10220000

08000488 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000488:	b10a      	cbz	r2, 800048e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800048a:	6101      	str	r1, [r0, #16]
 800048c:	4770      	bx	lr
 800048e:	0409      	lsls	r1, r1, #16
 8000490:	e7fb      	b.n	800048a <HAL_GPIO_WritePin+0x2>
	...

08000494 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000494:	2201      	movs	r2, #1
 8000496:	4b01      	ldr	r3, [pc, #4]	; (800049c <HAL_PWR_EnableBkUpAccess+0x8>)
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	4770      	bx	lr
 800049c:	420e0020 	.word	0x420e0020

080004a0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a0:	6803      	ldr	r3, [r0, #0]
{
 80004a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a6:	07db      	lsls	r3, r3, #31
{
 80004a8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004aa:	d410      	bmi.n	80004ce <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004ac:	682b      	ldr	r3, [r5, #0]
 80004ae:	079f      	lsls	r7, r3, #30
 80004b0:	d45e      	bmi.n	8000570 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004b2:	682b      	ldr	r3, [r5, #0]
 80004b4:	0719      	lsls	r1, r3, #28
 80004b6:	f100 8095 	bmi.w	80005e4 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004ba:	682b      	ldr	r3, [r5, #0]
 80004bc:	075a      	lsls	r2, r3, #29
 80004be:	f100 80bf 	bmi.w	8000640 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004c2:	69ea      	ldr	r2, [r5, #28]
 80004c4:	2a00      	cmp	r2, #0
 80004c6:	f040 812d 	bne.w	8000724 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80004ca:	2000      	movs	r0, #0
 80004cc:	e014      	b.n	80004f8 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004ce:	4c90      	ldr	r4, [pc, #576]	; (8000710 <HAL_RCC_OscConfig+0x270>)
 80004d0:	6863      	ldr	r3, [r4, #4]
 80004d2:	f003 030c 	and.w	r3, r3, #12
 80004d6:	2b04      	cmp	r3, #4
 80004d8:	d007      	beq.n	80004ea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004da:	6863      	ldr	r3, [r4, #4]
 80004dc:	f003 030c 	and.w	r3, r3, #12
 80004e0:	2b08      	cmp	r3, #8
 80004e2:	d10c      	bne.n	80004fe <HAL_RCC_OscConfig+0x5e>
 80004e4:	6863      	ldr	r3, [r4, #4]
 80004e6:	03de      	lsls	r6, r3, #15
 80004e8:	d509      	bpl.n	80004fe <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004ea:	6823      	ldr	r3, [r4, #0]
 80004ec:	039c      	lsls	r4, r3, #14
 80004ee:	d5dd      	bpl.n	80004ac <HAL_RCC_OscConfig+0xc>
 80004f0:	686b      	ldr	r3, [r5, #4]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d1da      	bne.n	80004ac <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80004f6:	2001      	movs	r0, #1
}
 80004f8:	b002      	add	sp, #8
 80004fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004fe:	686b      	ldr	r3, [r5, #4]
 8000500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000504:	d110      	bne.n	8000528 <HAL_RCC_OscConfig+0x88>
 8000506:	6823      	ldr	r3, [r4, #0]
 8000508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800050c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800050e:	f7ff fe4b 	bl	80001a8 <HAL_GetTick>
 8000512:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000514:	6823      	ldr	r3, [r4, #0]
 8000516:	0398      	lsls	r0, r3, #14
 8000518:	d4c8      	bmi.n	80004ac <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800051a:	f7ff fe45 	bl	80001a8 <HAL_GetTick>
 800051e:	1b80      	subs	r0, r0, r6
 8000520:	2864      	cmp	r0, #100	; 0x64
 8000522:	d9f7      	bls.n	8000514 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000524:	2003      	movs	r0, #3
 8000526:	e7e7      	b.n	80004f8 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000528:	b99b      	cbnz	r3, 8000552 <HAL_RCC_OscConfig+0xb2>
 800052a:	6823      	ldr	r3, [r4, #0]
 800052c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000530:	6023      	str	r3, [r4, #0]
 8000532:	6823      	ldr	r3, [r4, #0]
 8000534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000538:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800053a:	f7ff fe35 	bl	80001a8 <HAL_GetTick>
 800053e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000540:	6823      	ldr	r3, [r4, #0]
 8000542:	0399      	lsls	r1, r3, #14
 8000544:	d5b2      	bpl.n	80004ac <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000546:	f7ff fe2f 	bl	80001a8 <HAL_GetTick>
 800054a:	1b80      	subs	r0, r0, r6
 800054c:	2864      	cmp	r0, #100	; 0x64
 800054e:	d9f7      	bls.n	8000540 <HAL_RCC_OscConfig+0xa0>
 8000550:	e7e8      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000552:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	d103      	bne.n	8000562 <HAL_RCC_OscConfig+0xc2>
 800055a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800055e:	6023      	str	r3, [r4, #0]
 8000560:	e7d1      	b.n	8000506 <HAL_RCC_OscConfig+0x66>
 8000562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000566:	6023      	str	r3, [r4, #0]
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800056e:	e7cd      	b.n	800050c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000570:	4c67      	ldr	r4, [pc, #412]	; (8000710 <HAL_RCC_OscConfig+0x270>)
 8000572:	6863      	ldr	r3, [r4, #4]
 8000574:	f013 0f0c 	tst.w	r3, #12
 8000578:	d007      	beq.n	800058a <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800057a:	6863      	ldr	r3, [r4, #4]
 800057c:	f003 030c 	and.w	r3, r3, #12
 8000580:	2b08      	cmp	r3, #8
 8000582:	d110      	bne.n	80005a6 <HAL_RCC_OscConfig+0x106>
 8000584:	6863      	ldr	r3, [r4, #4]
 8000586:	03da      	lsls	r2, r3, #15
 8000588:	d40d      	bmi.n	80005a6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800058a:	6823      	ldr	r3, [r4, #0]
 800058c:	079b      	lsls	r3, r3, #30
 800058e:	d502      	bpl.n	8000596 <HAL_RCC_OscConfig+0xf6>
 8000590:	692b      	ldr	r3, [r5, #16]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d1af      	bne.n	80004f6 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000596:	6823      	ldr	r3, [r4, #0]
 8000598:	696a      	ldr	r2, [r5, #20]
 800059a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800059e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80005a2:	6023      	str	r3, [r4, #0]
 80005a4:	e785      	b.n	80004b2 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005a6:	692a      	ldr	r2, [r5, #16]
 80005a8:	4b5a      	ldr	r3, [pc, #360]	; (8000714 <HAL_RCC_OscConfig+0x274>)
 80005aa:	b16a      	cbz	r2, 80005c8 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 80005ac:	2201      	movs	r2, #1
 80005ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005b0:	f7ff fdfa 	bl	80001a8 <HAL_GetTick>
 80005b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005b6:	6823      	ldr	r3, [r4, #0]
 80005b8:	079f      	lsls	r7, r3, #30
 80005ba:	d4ec      	bmi.n	8000596 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005bc:	f7ff fdf4 	bl	80001a8 <HAL_GetTick>
 80005c0:	1b80      	subs	r0, r0, r6
 80005c2:	2802      	cmp	r0, #2
 80005c4:	d9f7      	bls.n	80005b6 <HAL_RCC_OscConfig+0x116>
 80005c6:	e7ad      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80005c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80005ca:	f7ff fded 	bl	80001a8 <HAL_GetTick>
 80005ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80005d0:	6823      	ldr	r3, [r4, #0]
 80005d2:	0798      	lsls	r0, r3, #30
 80005d4:	f57f af6d 	bpl.w	80004b2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005d8:	f7ff fde6 	bl	80001a8 <HAL_GetTick>
 80005dc:	1b80      	subs	r0, r0, r6
 80005de:	2802      	cmp	r0, #2
 80005e0:	d9f6      	bls.n	80005d0 <HAL_RCC_OscConfig+0x130>
 80005e2:	e79f      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80005e4:	69aa      	ldr	r2, [r5, #24]
 80005e6:	4c4a      	ldr	r4, [pc, #296]	; (8000710 <HAL_RCC_OscConfig+0x270>)
 80005e8:	4b4b      	ldr	r3, [pc, #300]	; (8000718 <HAL_RCC_OscConfig+0x278>)
 80005ea:	b1da      	cbz	r2, 8000624 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 80005ec:	2201      	movs	r2, #1
 80005ee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80005f0:	f7ff fdda 	bl	80001a8 <HAL_GetTick>
 80005f4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80005f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005f8:	079b      	lsls	r3, r3, #30
 80005fa:	d50d      	bpl.n	8000618 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80005fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000600:	4b46      	ldr	r3, [pc, #280]	; (800071c <HAL_RCC_OscConfig+0x27c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	fbb3 f3f2 	udiv	r3, r3, r2
 8000608:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800060a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800060c:	9b01      	ldr	r3, [sp, #4]
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	9201      	str	r2, [sp, #4]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1f9      	bne.n	800060a <HAL_RCC_OscConfig+0x16a>
 8000616:	e750      	b.n	80004ba <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000618:	f7ff fdc6 	bl	80001a8 <HAL_GetTick>
 800061c:	1b80      	subs	r0, r0, r6
 800061e:	2802      	cmp	r0, #2
 8000620:	d9e9      	bls.n	80005f6 <HAL_RCC_OscConfig+0x156>
 8000622:	e77f      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000624:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000626:	f7ff fdbf 	bl	80001a8 <HAL_GetTick>
 800062a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800062c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800062e:	079f      	lsls	r7, r3, #30
 8000630:	f57f af43 	bpl.w	80004ba <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000634:	f7ff fdb8 	bl	80001a8 <HAL_GetTick>
 8000638:	1b80      	subs	r0, r0, r6
 800063a:	2802      	cmp	r0, #2
 800063c:	d9f6      	bls.n	800062c <HAL_RCC_OscConfig+0x18c>
 800063e:	e771      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000640:	4c33      	ldr	r4, [pc, #204]	; (8000710 <HAL_RCC_OscConfig+0x270>)
 8000642:	69e3      	ldr	r3, [r4, #28]
 8000644:	00d8      	lsls	r0, r3, #3
 8000646:	d424      	bmi.n	8000692 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000648:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	69e3      	ldr	r3, [r4, #28]
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	61e3      	str	r3, [r4, #28]
 8000652:	69e3      	ldr	r3, [r4, #28]
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800065c:	4e30      	ldr	r6, [pc, #192]	; (8000720 <HAL_RCC_OscConfig+0x280>)
 800065e:	6833      	ldr	r3, [r6, #0]
 8000660:	05d9      	lsls	r1, r3, #23
 8000662:	d518      	bpl.n	8000696 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000664:	68eb      	ldr	r3, [r5, #12]
 8000666:	2b01      	cmp	r3, #1
 8000668:	d126      	bne.n	80006b8 <HAL_RCC_OscConfig+0x218>
 800066a:	6a23      	ldr	r3, [r4, #32]
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000672:	f7ff fd99 	bl	80001a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000676:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800067a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800067c:	6a23      	ldr	r3, [r4, #32]
 800067e:	079b      	lsls	r3, r3, #30
 8000680:	d53f      	bpl.n	8000702 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000682:	2f00      	cmp	r7, #0
 8000684:	f43f af1d 	beq.w	80004c2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000688:	69e3      	ldr	r3, [r4, #28]
 800068a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800068e:	61e3      	str	r3, [r4, #28]
 8000690:	e717      	b.n	80004c2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000692:	2700      	movs	r7, #0
 8000694:	e7e2      	b.n	800065c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000696:	6833      	ldr	r3, [r6, #0]
 8000698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800069c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800069e:	f7ff fd83 	bl	80001a8 <HAL_GetTick>
 80006a2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006a4:	6833      	ldr	r3, [r6, #0]
 80006a6:	05da      	lsls	r2, r3, #23
 80006a8:	d4dc      	bmi.n	8000664 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006aa:	f7ff fd7d 	bl	80001a8 <HAL_GetTick>
 80006ae:	eba0 0008 	sub.w	r0, r0, r8
 80006b2:	2864      	cmp	r0, #100	; 0x64
 80006b4:	d9f6      	bls.n	80006a4 <HAL_RCC_OscConfig+0x204>
 80006b6:	e735      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006b8:	b9ab      	cbnz	r3, 80006e6 <HAL_RCC_OscConfig+0x246>
 80006ba:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c0:	f023 0301 	bic.w	r3, r3, #1
 80006c4:	6223      	str	r3, [r4, #32]
 80006c6:	6a23      	ldr	r3, [r4, #32]
 80006c8:	f023 0304 	bic.w	r3, r3, #4
 80006cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006ce:	f7ff fd6b 	bl	80001a8 <HAL_GetTick>
 80006d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006d4:	6a23      	ldr	r3, [r4, #32]
 80006d6:	0798      	lsls	r0, r3, #30
 80006d8:	d5d3      	bpl.n	8000682 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006da:	f7ff fd65 	bl	80001a8 <HAL_GetTick>
 80006de:	1b80      	subs	r0, r0, r6
 80006e0:	4540      	cmp	r0, r8
 80006e2:	d9f7      	bls.n	80006d4 <HAL_RCC_OscConfig+0x234>
 80006e4:	e71e      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006e6:	2b05      	cmp	r3, #5
 80006e8:	6a23      	ldr	r3, [r4, #32]
 80006ea:	d103      	bne.n	80006f4 <HAL_RCC_OscConfig+0x254>
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6223      	str	r3, [r4, #32]
 80006f2:	e7ba      	b.n	800066a <HAL_RCC_OscConfig+0x1ca>
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	6223      	str	r3, [r4, #32]
 80006fa:	6a23      	ldr	r3, [r4, #32]
 80006fc:	f023 0304 	bic.w	r3, r3, #4
 8000700:	e7b6      	b.n	8000670 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000702:	f7ff fd51 	bl	80001a8 <HAL_GetTick>
 8000706:	eba0 0008 	sub.w	r0, r0, r8
 800070a:	42b0      	cmp	r0, r6
 800070c:	d9b6      	bls.n	800067c <HAL_RCC_OscConfig+0x1dc>
 800070e:	e709      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
 8000710:	40021000 	.word	0x40021000
 8000714:	42420000 	.word	0x42420000
 8000718:	42420480 	.word	0x42420480
 800071c:	20000000 	.word	0x20000000
 8000720:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000724:	4c22      	ldr	r4, [pc, #136]	; (80007b0 <HAL_RCC_OscConfig+0x310>)
 8000726:	6863      	ldr	r3, [r4, #4]
 8000728:	f003 030c 	and.w	r3, r3, #12
 800072c:	2b08      	cmp	r3, #8
 800072e:	f43f aee2 	beq.w	80004f6 <HAL_RCC_OscConfig+0x56>
 8000732:	2300      	movs	r3, #0
 8000734:	4e1f      	ldr	r6, [pc, #124]	; (80007b4 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000736:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000738:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800073a:	d12b      	bne.n	8000794 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800073c:	f7ff fd34 	bl	80001a8 <HAL_GetTick>
 8000740:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000742:	6823      	ldr	r3, [r4, #0]
 8000744:	0199      	lsls	r1, r3, #6
 8000746:	d41f      	bmi.n	8000788 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000748:	6a2b      	ldr	r3, [r5, #32]
 800074a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800074e:	d105      	bne.n	800075c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000750:	6862      	ldr	r2, [r4, #4]
 8000752:	68a9      	ldr	r1, [r5, #8]
 8000754:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000758:	430a      	orrs	r2, r1
 800075a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800075c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800075e:	6862      	ldr	r2, [r4, #4]
 8000760:	430b      	orrs	r3, r1
 8000762:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000766:	4313      	orrs	r3, r2
 8000768:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800076a:	2301      	movs	r3, #1
 800076c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800076e:	f7ff fd1b 	bl	80001a8 <HAL_GetTick>
 8000772:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000774:	6823      	ldr	r3, [r4, #0]
 8000776:	019a      	lsls	r2, r3, #6
 8000778:	f53f aea7 	bmi.w	80004ca <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800077c:	f7ff fd14 	bl	80001a8 <HAL_GetTick>
 8000780:	1b40      	subs	r0, r0, r5
 8000782:	2802      	cmp	r0, #2
 8000784:	d9f6      	bls.n	8000774 <HAL_RCC_OscConfig+0x2d4>
 8000786:	e6cd      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000788:	f7ff fd0e 	bl	80001a8 <HAL_GetTick>
 800078c:	1bc0      	subs	r0, r0, r7
 800078e:	2802      	cmp	r0, #2
 8000790:	d9d7      	bls.n	8000742 <HAL_RCC_OscConfig+0x2a2>
 8000792:	e6c7      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000794:	f7ff fd08 	bl	80001a8 <HAL_GetTick>
 8000798:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800079a:	6823      	ldr	r3, [r4, #0]
 800079c:	019b      	lsls	r3, r3, #6
 800079e:	f57f ae94 	bpl.w	80004ca <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007a2:	f7ff fd01 	bl	80001a8 <HAL_GetTick>
 80007a6:	1b40      	subs	r0, r0, r5
 80007a8:	2802      	cmp	r0, #2
 80007aa:	d9f6      	bls.n	800079a <HAL_RCC_OscConfig+0x2fa>
 80007ac:	e6ba      	b.n	8000524 <HAL_RCC_OscConfig+0x84>
 80007ae:	bf00      	nop
 80007b0:	40021000 	.word	0x40021000
 80007b4:	42420060 	.word	0x42420060

080007b8 <HAL_RCC_GetSysClockFreq>:
{
 80007b8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007ba:	4b1a      	ldr	r3, [pc, #104]	; (8000824 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 80007bc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80007be:	ac02      	add	r4, sp, #8
 80007c0:	f103 0510 	add.w	r5, r3, #16
 80007c4:	4622      	mov	r2, r4
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	6859      	ldr	r1, [r3, #4]
 80007ca:	3308      	adds	r3, #8
 80007cc:	c203      	stmia	r2!, {r0, r1}
 80007ce:	42ab      	cmp	r3, r5
 80007d0:	4614      	mov	r4, r2
 80007d2:	d1f7      	bne.n	80007c4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007d4:	2301      	movs	r3, #1
 80007d6:	f88d 3004 	strb.w	r3, [sp, #4]
 80007da:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80007dc:	4912      	ldr	r1, [pc, #72]	; (8000828 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80007de:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80007e2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80007e4:	f003 020c 	and.w	r2, r3, #12
 80007e8:	2a08      	cmp	r2, #8
 80007ea:	d118      	bne.n	800081e <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007ec:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80007f0:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007f2:	bf48      	it	mi
 80007f4:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80007f6:	a806      	add	r0, sp, #24
 80007f8:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80007fa:	bf48      	it	mi
 80007fc:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000800:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000804:	bf41      	itttt	mi
 8000806:	aa06      	addmi	r2, sp, #24
 8000808:	189b      	addmi	r3, r3, r2
 800080a:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 800080e:	4b07      	ldrmi	r3, [pc, #28]	; (800082c <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000810:	bf54      	ite	pl
 8000812:	4b07      	ldrpl	r3, [pc, #28]	; (8000830 <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000814:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000818:	4358      	muls	r0, r3
}
 800081a:	b007      	add	sp, #28
 800081c:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 800081e:	4803      	ldr	r0, [pc, #12]	; (800082c <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000820:	e7fb      	b.n	800081a <HAL_RCC_GetSysClockFreq+0x62>
 8000822:	bf00      	nop
 8000824:	080015f0 	.word	0x080015f0
 8000828:	40021000 	.word	0x40021000
 800082c:	007a1200 	.word	0x007a1200
 8000830:	003d0900 	.word	0x003d0900

08000834 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000834:	4a4d      	ldr	r2, [pc, #308]	; (800096c <HAL_RCC_ClockConfig+0x138>)
{
 8000836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800083a:	6813      	ldr	r3, [r2, #0]
{
 800083c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	428b      	cmp	r3, r1
{
 8000844:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000846:	d328      	bcc.n	800089a <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000848:	682a      	ldr	r2, [r5, #0]
 800084a:	0791      	lsls	r1, r2, #30
 800084c:	d432      	bmi.n	80008b4 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800084e:	07d2      	lsls	r2, r2, #31
 8000850:	d438      	bmi.n	80008c4 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000852:	4a46      	ldr	r2, [pc, #280]	; (800096c <HAL_RCC_ClockConfig+0x138>)
 8000854:	6813      	ldr	r3, [r2, #0]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	429e      	cmp	r6, r3
 800085c:	d373      	bcc.n	8000946 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800085e:	682a      	ldr	r2, [r5, #0]
 8000860:	4c43      	ldr	r4, [pc, #268]	; (8000970 <HAL_RCC_ClockConfig+0x13c>)
 8000862:	f012 0f04 	tst.w	r2, #4
 8000866:	d179      	bne.n	800095c <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000868:	0713      	lsls	r3, r2, #28
 800086a:	d506      	bpl.n	800087a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800086c:	6863      	ldr	r3, [r4, #4]
 800086e:	692a      	ldr	r2, [r5, #16]
 8000870:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000874:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000878:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800087a:	f7ff ff9d 	bl	80007b8 <HAL_RCC_GetSysClockFreq>
 800087e:	6863      	ldr	r3, [r4, #4]
 8000880:	4a3c      	ldr	r2, [pc, #240]	; (8000974 <HAL_RCC_ClockConfig+0x140>)
 8000882:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000886:	5cd3      	ldrb	r3, [r2, r3]
 8000888:	40d8      	lsrs	r0, r3
 800088a:	4b3b      	ldr	r3, [pc, #236]	; (8000978 <HAL_RCC_ClockConfig+0x144>)
 800088c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff fc5c 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000894:	2000      	movs	r0, #0
}
 8000896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800089a:	6813      	ldr	r3, [r2, #0]
 800089c:	f023 0307 	bic.w	r3, r3, #7
 80008a0:	430b      	orrs	r3, r1
 80008a2:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008a4:	6813      	ldr	r3, [r2, #0]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	4299      	cmp	r1, r3
 80008ac:	d0cc      	beq.n	8000848 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80008ae:	2001      	movs	r0, #1
 80008b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80008b4:	492e      	ldr	r1, [pc, #184]	; (8000970 <HAL_RCC_ClockConfig+0x13c>)
 80008b6:	68a8      	ldr	r0, [r5, #8]
 80008b8:	684b      	ldr	r3, [r1, #4]
 80008ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008be:	4303      	orrs	r3, r0
 80008c0:	604b      	str	r3, [r1, #4]
 80008c2:	e7c4      	b.n	800084e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c4:	686a      	ldr	r2, [r5, #4]
 80008c6:	4c2a      	ldr	r4, [pc, #168]	; (8000970 <HAL_RCC_ClockConfig+0x13c>)
 80008c8:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ca:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008cc:	d11c      	bne.n	8000908 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ce:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d2:	d0ec      	beq.n	80008ae <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008d4:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008d6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008da:	f023 0303 	bic.w	r3, r3, #3
 80008de:	4313      	orrs	r3, r2
 80008e0:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80008e2:	f7ff fc61 	bl	80001a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008e6:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80008e8:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d114      	bne.n	8000918 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008ee:	6863      	ldr	r3, [r4, #4]
 80008f0:	f003 030c 	and.w	r3, r3, #12
 80008f4:	2b04      	cmp	r3, #4
 80008f6:	d0ac      	beq.n	8000852 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f8:	f7ff fc56 	bl	80001a8 <HAL_GetTick>
 80008fc:	1bc0      	subs	r0, r0, r7
 80008fe:	4540      	cmp	r0, r8
 8000900:	d9f5      	bls.n	80008ee <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 8000902:	2003      	movs	r0, #3
 8000904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000908:	2a02      	cmp	r2, #2
 800090a:	d102      	bne.n	8000912 <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800090c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000910:	e7df      	b.n	80008d2 <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000912:	f013 0f02 	tst.w	r3, #2
 8000916:	e7dc      	b.n	80008d2 <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000918:	2b02      	cmp	r3, #2
 800091a:	d10f      	bne.n	800093c <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800091c:	6863      	ldr	r3, [r4, #4]
 800091e:	f003 030c 	and.w	r3, r3, #12
 8000922:	2b08      	cmp	r3, #8
 8000924:	d095      	beq.n	8000852 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000926:	f7ff fc3f 	bl	80001a8 <HAL_GetTick>
 800092a:	1bc0      	subs	r0, r0, r7
 800092c:	4540      	cmp	r0, r8
 800092e:	d9f5      	bls.n	800091c <HAL_RCC_ClockConfig+0xe8>
 8000930:	e7e7      	b.n	8000902 <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000932:	f7ff fc39 	bl	80001a8 <HAL_GetTick>
 8000936:	1bc0      	subs	r0, r0, r7
 8000938:	4540      	cmp	r0, r8
 800093a:	d8e2      	bhi.n	8000902 <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800093c:	6863      	ldr	r3, [r4, #4]
 800093e:	f013 0f0c 	tst.w	r3, #12
 8000942:	d1f6      	bne.n	8000932 <HAL_RCC_ClockConfig+0xfe>
 8000944:	e785      	b.n	8000852 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000946:	6813      	ldr	r3, [r2, #0]
 8000948:	f023 0307 	bic.w	r3, r3, #7
 800094c:	4333      	orrs	r3, r6
 800094e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000950:	6813      	ldr	r3, [r2, #0]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	429e      	cmp	r6, r3
 8000958:	d1a9      	bne.n	80008ae <HAL_RCC_ClockConfig+0x7a>
 800095a:	e780      	b.n	800085e <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800095c:	6863      	ldr	r3, [r4, #4]
 800095e:	68e9      	ldr	r1, [r5, #12]
 8000960:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000964:	430b      	orrs	r3, r1
 8000966:	6063      	str	r3, [r4, #4]
 8000968:	e77e      	b.n	8000868 <HAL_RCC_ClockConfig+0x34>
 800096a:	bf00      	nop
 800096c:	40022000 	.word	0x40022000
 8000970:	40021000 	.word	0x40021000
 8000974:	08001610 	.word	0x08001610
 8000978:	20000000 	.word	0x20000000

0800097c <HAL_RCC_GetHCLKFreq>:
}
 800097c:	4b01      	ldr	r3, [pc, #4]	; (8000984 <HAL_RCC_GetHCLKFreq+0x8>)
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000000 	.word	0x20000000

08000988 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000988:	4b04      	ldr	r3, [pc, #16]	; (800099c <HAL_RCC_GetPCLK2Freq+0x14>)
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000992:	5cd3      	ldrb	r3, [r2, r3]
 8000994:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000996:	6810      	ldr	r0, [r2, #0]
} 
 8000998:	40d8      	lsrs	r0, r3
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000
 80009a0:	08001620 	.word	0x08001620
 80009a4:	20000000 	.word	0x20000000

080009a8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80009a8:	6803      	ldr	r3, [r0, #0]
{
 80009aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80009ae:	07d9      	lsls	r1, r3, #31
{
 80009b0:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80009b2:	d520      	bpl.n	80009f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009b4:	4c35      	ldr	r4, [pc, #212]	; (8000a8c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80009b6:	69e3      	ldr	r3, [r4, #28]
 80009b8:	00da      	lsls	r2, r3, #3
 80009ba:	d432      	bmi.n	8000a22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80009bc:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	69e3      	ldr	r3, [r4, #28]
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	61e3      	str	r3, [r4, #28]
 80009c6:	69e3      	ldr	r3, [r4, #28]
 80009c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009cc:	9301      	str	r3, [sp, #4]
 80009ce:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009d0:	4e2f      	ldr	r6, [pc, #188]	; (8000a90 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80009d2:	6833      	ldr	r3, [r6, #0]
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	d526      	bpl.n	8000a26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80009d8:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80009da:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80009de:	d136      	bne.n	8000a4e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80009e0:	6a23      	ldr	r3, [r4, #32]
 80009e2:	686a      	ldr	r2, [r5, #4]
 80009e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009e8:	4313      	orrs	r3, r2
 80009ea:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80009ec:	b11f      	cbz	r7, 80009f6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80009ee:	69e3      	ldr	r3, [r4, #28]
 80009f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009f4:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80009f6:	6828      	ldr	r0, [r5, #0]
 80009f8:	0783      	lsls	r3, r0, #30
 80009fa:	d506      	bpl.n	8000a0a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80009fc:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80009fe:	68a9      	ldr	r1, [r5, #8]
 8000a00:	6853      	ldr	r3, [r2, #4]
 8000a02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a06:	430b      	orrs	r3, r1
 8000a08:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000a0a:	f010 0010 	ands.w	r0, r0, #16
 8000a0e:	d01b      	beq.n	8000a48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000a10:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000a12:	68e9      	ldr	r1, [r5, #12]
 8000a14:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000a16:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000a18:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	6053      	str	r3, [r2, #4]
 8000a20:	e012      	b.n	8000a48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000a22:	2700      	movs	r7, #0
 8000a24:	e7d4      	b.n	80009d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a26:	6833      	ldr	r3, [r6, #0]
 8000a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a2c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000a2e:	f7ff fbbb 	bl	80001a8 <HAL_GetTick>
 8000a32:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a34:	6833      	ldr	r3, [r6, #0]
 8000a36:	05d8      	lsls	r0, r3, #23
 8000a38:	d4ce      	bmi.n	80009d8 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a3a:	f7ff fbb5 	bl	80001a8 <HAL_GetTick>
 8000a3e:	eba0 0008 	sub.w	r0, r0, r8
 8000a42:	2864      	cmp	r0, #100	; 0x64
 8000a44:	d9f6      	bls.n	8000a34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000a46:	2003      	movs	r0, #3
}
 8000a48:	b002      	add	sp, #8
 8000a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000a4e:	686a      	ldr	r2, [r5, #4]
 8000a50:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d0c3      	beq.n	80009e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000a58:	2001      	movs	r0, #1
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000a5c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000a5e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000a60:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000a62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000a66:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000a68:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000a6a:	07d9      	lsls	r1, r3, #31
 8000a6c:	d5b8      	bpl.n	80009e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000a6e:	f7ff fb9b 	bl	80001a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a72:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000a76:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a78:	6a23      	ldr	r3, [r4, #32]
 8000a7a:	079a      	lsls	r2, r3, #30
 8000a7c:	d4b0      	bmi.n	80009e0 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a7e:	f7ff fb93 	bl	80001a8 <HAL_GetTick>
 8000a82:	1b80      	subs	r0, r0, r6
 8000a84:	4540      	cmp	r0, r8
 8000a86:	d9f7      	bls.n	8000a78 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000a88:	e7dd      	b.n	8000a46 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40007000 	.word	0x40007000
 8000a94:	42420440 	.word	0x42420440

08000a98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a9c:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8000a9e:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000aa0:	ad02      	add	r5, sp, #8
 8000aa2:	f103 0610 	add.w	r6, r3, #16
 8000aa6:	462a      	mov	r2, r5
 8000aa8:	6818      	ldr	r0, [r3, #0]
 8000aaa:	6859      	ldr	r1, [r3, #4]
 8000aac:	3308      	adds	r3, #8
 8000aae:	c203      	stmia	r2!, {r0, r1}
 8000ab0:	42b3      	cmp	r3, r6
 8000ab2:	4615      	mov	r5, r2
 8000ab4:	d1f7      	bne.n	8000aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	f88d 3004 	strb.w	r3, [sp, #4]
 8000abc:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8000abe:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ac0:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8000ac4:	d047      	beq.n	8000b56 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8000ac6:	2c10      	cmp	r4, #16
 8000ac8:	d017      	beq.n	8000afa <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8000aca:	2c01      	cmp	r4, #1
 8000acc:	d14f      	bne.n	8000b6e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000ace:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8000ad2:	4a29      	ldr	r2, [pc, #164]	; (8000b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000ad4:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000ad6:	4019      	ands	r1, r3
 8000ad8:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8000adc:	d044      	beq.n	8000b68 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ae6:	d12d      	bne.n	8000b44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8000ae8:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000aec:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8000aee:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8000af2:	bf08      	it	eq
 8000af4:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8000af6:	b006      	add	sp, #24
 8000af8:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000afc:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8000afe:	6818      	ldr	r0, [r3, #0]
 8000b00:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8000b04:	d0f7      	beq.n	8000af6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000b06:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8000b0a:	a806      	add	r0, sp, #24
 8000b0c:	4402      	add	r2, r0
 8000b0e:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000b12:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000b14:	bf41      	itttt	mi
 8000b16:	685a      	ldrmi	r2, [r3, #4]
 8000b18:	a906      	addmi	r1, sp, #24
 8000b1a:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8000b1e:	1852      	addmi	r2, r2, r1
 8000b20:	bf44      	itt	mi
 8000b22:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000b26:	4a15      	ldrmi	r2, [pc, #84]	; (8000b7c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b28:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000b2a:	bf4c      	ite	mi
 8000b2c:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b30:	4a13      	ldrpl	r2, [pc, #76]	; (8000b80 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b32:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000b34:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000b38:	d4dd      	bmi.n	8000af6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000b3e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000b42:	e7d8      	b.n	8000af6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8000b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000b48:	d111      	bne.n	8000b6e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8000b4a:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8000b4c:	f24f 4024 	movw	r0, #62500	; 0xf424
 8000b50:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b54:	e7cd      	b.n	8000af2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000b56:	f7ff ff17 	bl	8000988 <HAL_RCC_GetPCLK2Freq>
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8000b62:	3301      	adds	r3, #1
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	e7ea      	b.n	8000b3e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8000b68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b6c:	e7c3      	b.n	8000af6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8000b6e:	2000      	movs	r0, #0
 8000b70:	e7c1      	b.n	8000af6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8000b72:	bf00      	nop
 8000b74:	08001600 	.word	0x08001600
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	007a1200 	.word	0x007a1200
 8000b80:	003d0900 	.word	0x003d0900

08000b84 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b84:	6803      	ldr	r3, [r0, #0]
{
 8000b86:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b88:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8000b8a:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b8c:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8000b8e:	b295      	uxth	r5, r2
 8000b90:	b28c      	uxth	r4, r1
 8000b92:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8000b94:	bf1d      	ittte	ne
 8000b96:	69d8      	ldrne	r0, [r3, #28]
 8000b98:	b280      	uxthne	r0, r0
 8000b9a:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8000b9e:	b280      	uxtheq	r0, r0
 8000ba0:	bf08      	it	eq
 8000ba2:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8000ba6:	bd30      	pop	{r4, r5, pc}

08000ba8 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8000ba8:	6803      	ldr	r3, [r0, #0]
 8000baa:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8000bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8000bae:	b29b      	uxth	r3, r3
}
 8000bb0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bb4:	4770      	bx	lr

08000bb6 <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8000bb6:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8000bb8:	2809      	cmp	r0, #9
 8000bba:	d803      	bhi.n	8000bc4 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8000bbc:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8000bc0:	b2c0      	uxtb	r0, r0
 8000bc2:	4770      	bx	lr
    Value -= 10U;
 8000bc4:	380a      	subs	r0, #10
    bcdhigh++;
 8000bc6:	3301      	adds	r3, #1
    Value -= 10U;
 8000bc8:	b2c0      	uxtb	r0, r0
 8000bca:	e7f5      	b.n	8000bb8 <RTC_ByteToBcd2+0x2>

08000bcc <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8000bcc:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8000bce:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8000bd0:	f000 000f 	and.w	r0, r0, #15
 8000bd4:	fb02 0003 	mla	r0, r2, r3, r0
}
 8000bd8:	b2c0      	uxtb	r0, r0
 8000bda:	4770      	bx	lr

08000bdc <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
  
  if(nMonth < 3U)
 8000bdc:	2902      	cmp	r1, #2
{
 8000bde:	b570      	push	{r4, r5, r6, lr}
 8000be0:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 8000be4:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 8000be8:	f04f 0609 	mov.w	r6, #9
  if(nMonth < 3U)
 8000bec:	d81a      	bhi.n	8000c24 <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 8000bee:	434b      	muls	r3, r1
 8000bf0:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 8000bf4:	fbb3 f0f6 	udiv	r0, r3, r6
 8000bf8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bfc:	fbb4 f3f3 	udiv	r3, r4, r3
 8000c00:	3204      	adds	r2, #4
 8000c02:	442a      	add	r2, r5
 8000c04:	4410      	add	r0, r2
 8000c06:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8000c0a:	4418      	add	r0, r3
 8000c0c:	2364      	movs	r3, #100	; 0x64
 8000c0e:	fbb4 f4f3 	udiv	r4, r4, r3
 8000c12:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8000c14:	2307      	movs	r3, #7
 8000c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000c1e:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8000c20:	b2c0      	uxtb	r0, r0
 8000c22:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8000c24:	fb03 f001 	mul.w	r0, r3, r1
 8000c28:	fbb0 f0f6 	udiv	r0, r0, r6
 8000c2c:	3202      	adds	r2, #2
 8000c2e:	442a      	add	r2, r5
 8000c30:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c34:	4410      	add	r0, r2
 8000c36:	2264      	movs	r2, #100	; 0x64
 8000c38:	fbb5 f3f3 	udiv	r3, r5, r3
 8000c3c:	fbb5 f2f2 	udiv	r2, r5, r2
 8000c40:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 8000c44:	4418      	add	r0, r3
 8000c46:	1a80      	subs	r0, r0, r2
 8000c48:	e7e4      	b.n	8000c14 <RTC_WeekDayNum+0x38>

08000c4a <RTC_EnterInitMode>:
{
 8000c4a:	b538      	push	{r3, r4, r5, lr}
 8000c4c:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8000c4e:	f7ff faab 	bl	80001a8 <HAL_GetTick>
 8000c52:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c54:	6823      	ldr	r3, [r4, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	0692      	lsls	r2, r2, #26
 8000c5a:	d505      	bpl.n	8000c68 <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c5c:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 8000c5e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c60:	f042 0210 	orr.w	r2, r2, #16
 8000c64:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 8000c66:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c68:	f7ff fa9e 	bl	80001a8 <HAL_GetTick>
 8000c6c:	1b40      	subs	r0, r0, r5
 8000c6e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c72:	d9ef      	bls.n	8000c54 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8000c74:	2003      	movs	r0, #3
}
 8000c76:	bd38      	pop	{r3, r4, r5, pc}

08000c78 <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c78:	6802      	ldr	r2, [r0, #0]
{
 8000c7a:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c7c:	6853      	ldr	r3, [r2, #4]
{
 8000c7e:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c80:	f023 0310 	bic.w	r3, r3, #16
 8000c84:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8000c86:	f7ff fa8f 	bl	80001a8 <HAL_GetTick>
 8000c8a:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c8c:	6823      	ldr	r3, [r4, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	069b      	lsls	r3, r3, #26
 8000c92:	d501      	bpl.n	8000c98 <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 8000c94:	2000      	movs	r0, #0
 8000c96:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c98:	f7ff fa86 	bl	80001a8 <HAL_GetTick>
 8000c9c:	1b40      	subs	r0, r0, r5
 8000c9e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000ca2:	d9f3      	bls.n	8000c8c <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8000ca4:	2003      	movs	r0, #3
}
 8000ca6:	bd38      	pop	{r3, r4, r5, pc}

08000ca8 <RTC_WriteTimeCounter>:
{
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	4605      	mov	r5, r0
 8000cac:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000cae:	f7ff ffcc 	bl	8000c4a <RTC_EnterInitMode>
 8000cb2:	b958      	cbnz	r0, 8000ccc <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000cb8:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8000cba:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cbc:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000cbe:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000cc0:	f7ff ffda 	bl	8000c78 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000cc4:	3000      	adds	r0, #0
 8000cc6:	bf18      	it	ne
 8000cc8:	2001      	movne	r0, #1
 8000cca:	bd38      	pop	{r3, r4, r5, pc}
 8000ccc:	2001      	movs	r0, #1
}
 8000cce:	bd38      	pop	{r3, r4, r5, pc}

08000cd0 <RTC_WriteAlarmCounter>:
{
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4605      	mov	r5, r0
 8000cd4:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000cd6:	f7ff ffb8 	bl	8000c4a <RTC_EnterInitMode>
 8000cda:	b958      	cbnz	r0, 8000cf4 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8000cdc:	682b      	ldr	r3, [r5, #0]
 8000cde:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000ce0:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8000ce2:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000ce4:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000ce6:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000ce8:	f7ff ffc6 	bl	8000c78 <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000cec:	3000      	adds	r0, #0
 8000cee:	bf18      	it	ne
 8000cf0:	2001      	movne	r0, #1
 8000cf2:	bd38      	pop	{r3, r4, r5, pc}
 8000cf4:	2001      	movs	r0, #1
}
 8000cf6:	bd38      	pop	{r3, r4, r5, pc}

08000cf8 <HAL_RTC_SetTime>:
{
 8000cf8:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	b1e0      	cbz	r0, 8000d38 <HAL_RTC_SetTime+0x40>
 8000cfe:	b1d9      	cbz	r1, 8000d38 <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8000d00:	7c03      	ldrb	r3, [r0, #16]
 8000d02:	2602      	movs	r6, #2
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d046      	beq.n	8000d96 <HAL_RTC_SetTime+0x9e>
 8000d08:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8000d0a:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8000d0c:	7403      	strb	r3, [r0, #16]
 8000d0e:	7808      	ldrb	r0, [r1, #0]
 8000d10:	784e      	ldrb	r6, [r1, #1]
 8000d12:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8000d14:	b992      	cbnz	r2, 8000d3c <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60U) + \
 8000d16:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8000d18:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60U) + \
 8000d1c:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8000d1e:	fb03 5000 	mla	r0, r3, r0, r5
 8000d22:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000d24:	4629      	mov	r1, r5
 8000d26:	4620      	mov	r0, r4
 8000d28:	f7ff ffbe 	bl	8000ca8 <RTC_WriteTimeCounter>
 8000d2c:	4606      	mov	r6, r0
 8000d2e:	b1b0      	cbz	r0, 8000d5e <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8000d30:	2304      	movs	r3, #4
 8000d32:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8000d34:	2300      	movs	r3, #0
 8000d36:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8000d38:	2601      	movs	r6, #1
 8000d3a:	e02c      	b.n	8000d96 <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d3c:	f7ff ff46 	bl	8000bcc <RTC_Bcd2ToByte>
 8000d40:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8000d42:	4630      	mov	r0, r6
 8000d44:	f7ff ff42 	bl	8000bcc <RTC_Bcd2ToByte>
 8000d48:	233c      	movs	r3, #60	; 0x3c
 8000d4a:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d4c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000d50:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8000d54:	4608      	mov	r0, r1
 8000d56:	f7ff ff39 	bl	8000bcc <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d5a:	4405      	add	r5, r0
 8000d5c:	e7e2      	b.n	8000d24 <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8000d5e:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000d60:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8000d62:	6853      	ldr	r3, [r2, #4]
 8000d64:	f023 0305 	bic.w	r3, r3, #5
 8000d68:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000d6a:	f7ff ff1d 	bl	8000ba8 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000d6e:	1c43      	adds	r3, r0, #1
 8000d70:	d00d      	beq.n	8000d8e <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 8000d72:	4285      	cmp	r5, r0
 8000d74:	d90b      	bls.n	8000d8e <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000d76:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8000d7a:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000d7e:	4620      	mov	r0, r4
 8000d80:	f7ff ffa6 	bl	8000cd0 <RTC_WriteAlarmCounter>
 8000d84:	b118      	cbz	r0, 8000d8e <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000d86:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8000d88:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000d8a:	7463      	strb	r3, [r4, #17]
 8000d8c:	e7d4      	b.n	8000d38 <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 8000d92:	2300      	movs	r3, #0
 8000d94:	7423      	strb	r3, [r4, #16]
}
 8000d96:	4630      	mov	r0, r6
 8000d98:	bd70      	pop	{r4, r5, r6, pc}
	...

08000d9c <HAL_RTC_GetTime>:
{
 8000d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000da0:	460d      	mov	r5, r1
 8000da2:	4690      	mov	r8, r2
  if((hrtc == NULL) || (sTime == NULL))
 8000da4:	4604      	mov	r4, r0
 8000da6:	b910      	cbnz	r0, 8000dae <HAL_RTC_GetTime+0x12>
     return HAL_ERROR;
 8000da8:	2001      	movs	r0, #1
 8000daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if((hrtc == NULL) || (sTime == NULL))
 8000dae:	2900      	cmp	r1, #0
 8000db0:	d0fa      	beq.n	8000da8 <HAL_RTC_GetTime+0xc>
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8000db2:	6803      	ldr	r3, [r0, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	075e      	lsls	r6, r3, #29
 8000db8:	d4f6      	bmi.n	8000da8 <HAL_RTC_GetTime+0xc>
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000dba:	f7ff fee3 	bl	8000b84 <RTC_ReadTimeCounter>
  hours = counter_time / 3600U;
 8000dbe:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000dc2:	fbb0 f3f2 	udiv	r3, r0, r2
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000dc6:	4607      	mov	r7, r0
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8000dc8:	fb02 0213 	mls	r2, r2, r3, r0
 8000dcc:	203c      	movs	r0, #60	; 0x3c
 8000dce:	fbb2 f1f0 	udiv	r1, r2, r0
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8000dd2:	fb00 2211 	mls	r2, r0, r1, r2
  if (hours >= 24U)
 8000dd6:	2b17      	cmp	r3, #23
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8000dd8:	7069      	strb	r1, [r5, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8000dda:	70aa      	strb	r2, [r5, #2]
  if (hours >= 24U)
 8000ddc:	f240 8085 	bls.w	8000eea <HAL_RTC_GetTime+0x14e>
    sTime->Hours = (hours % 24U);    
 8000de0:	2118      	movs	r1, #24
 8000de2:	fbb3 f2f1 	udiv	r2, r3, r1
 8000de6:	fb01 3312 	mls	r3, r1, r2, r3
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000dea:	4620      	mov	r0, r4
    sTime->Hours = (hours % 24U);    
 8000dec:	702b      	strb	r3, [r5, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000dee:	f7ff fedb 	bl	8000ba8 <RTC_ReadAlarmCounter>
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8000df2:	1c41      	adds	r1, r0, #1
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000df4:	4606      	mov	r6, r0
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8000df6:	d004      	beq.n	8000e02 <HAL_RTC_GetTime+0x66>
 8000df8:	4287      	cmp	r7, r0
      counter_alarm = RTC_ALARM_RESETVALUE;
 8000dfa:	bf2c      	ite	cs
 8000dfc:	f04f 36ff 	movcs.w	r6, #4294967295
      counter_alarm -= counter_time;
 8000e00:	1bc6      	subcc	r6, r0, r7
 8000e02:	4b40      	ldr	r3, [pc, #256]	; (8000f04 <HAL_RTC_GetTime+0x168>)
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000e04:	4620      	mov	r0, r4
 8000e06:	fbb7 f9f3 	udiv	r9, r7, r3
 8000e0a:	fb03 7919 	mls	r9, r3, r9, r7
 8000e0e:	4649      	mov	r1, r9
 8000e10:	f7ff ff4a 	bl	8000ca8 <RTC_WriteTimeCounter>
 8000e14:	2800      	cmp	r0, #0
 8000e16:	d1c7      	bne.n	8000da8 <HAL_RTC_GetTime+0xc>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000e18:	1c72      	adds	r2, r6, #1
 8000e1a:	d02f      	beq.n	8000e7c <HAL_RTC_GetTime+0xe0>
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e1c:	eb09 0106 	add.w	r1, r9, r6
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e20:	4620      	mov	r0, r4
 8000e22:	f7ff ff55 	bl	8000cd0 <RTC_WriteAlarmCounter>
 8000e26:	2800      	cmp	r0, #0
 8000e28:	d1be      	bne.n	8000da8 <HAL_RTC_GetTime+0xc>
    days_elapsed = (hours / 24U);
 8000e2a:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <HAL_RTC_GetTime+0x168>)
  for (loop = 0U; loop < DayElapsed; loop++)
 8000e2c:	2600      	movs	r6, #0
    days_elapsed = (hours / 24U);
 8000e2e:	fbb7 f7f3 	udiv	r7, r7, r3
  if((nYear % 100U) != 0U) 
 8000e32:	f04f 0e64 	mov.w	lr, #100	; 0x64
  if((nYear % 400U) == 0U)
 8000e36:	f44f 7cc8 	mov.w	ip, #400	; 0x190
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8000e3a:	f240 29d5 	movw	r9, #725	; 0x2d5
  year = hrtc->DateToUpdate.Year;
 8000e3e:	7be0      	ldrb	r0, [r4, #15]
  month = hrtc->DateToUpdate.Month;
 8000e40:	7b61      	ldrb	r1, [r4, #13]
  day = hrtc->DateToUpdate.Date;
 8000e42:	7ba2      	ldrb	r2, [r4, #14]
  for (loop = 0U; loop < DayElapsed; loop++)
 8000e44:	42b7      	cmp	r7, r6
 8000e46:	d11b      	bne.n	8000e80 <HAL_RTC_GetTime+0xe4>
  hrtc->DateToUpdate.Month = month;
 8000e48:	b2c9      	uxtb	r1, r1
  hrtc->DateToUpdate.Date = day;
 8000e4a:	b2d2      	uxtb	r2, r2
  hrtc->DateToUpdate.Year = year;
 8000e4c:	73e0      	strb	r0, [r4, #15]
  hrtc->DateToUpdate.Month = month;
 8000e4e:	7361      	strb	r1, [r4, #13]
  hrtc->DateToUpdate.Date = day;
 8000e50:	73a2      	strb	r2, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8000e52:	f7ff fec3 	bl	8000bdc <RTC_WeekDayNum>
 8000e56:	7320      	strb	r0, [r4, #12]
  if(Format != RTC_FORMAT_BIN)
 8000e58:	f1b8 0f00 	cmp.w	r8, #0
 8000e5c:	d00b      	beq.n	8000e76 <HAL_RTC_GetTime+0xda>
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8000e5e:	7828      	ldrb	r0, [r5, #0]
 8000e60:	f7ff fea9 	bl	8000bb6 <RTC_ByteToBcd2>
 8000e64:	7028      	strb	r0, [r5, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8000e66:	7868      	ldrb	r0, [r5, #1]
 8000e68:	f7ff fea5 	bl	8000bb6 <RTC_ByteToBcd2>
 8000e6c:	7068      	strb	r0, [r5, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);  
 8000e6e:	78a8      	ldrb	r0, [r5, #2]
 8000e70:	f7ff fea1 	bl	8000bb6 <RTC_ByteToBcd2>
 8000e74:	70a8      	strb	r0, [r5, #2]
  return HAL_OK;
 8000e76:	2000      	movs	r0, #0
 8000e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000e7c:	4631      	mov	r1, r6
 8000e7e:	e7cf      	b.n	8000e20 <HAL_RTC_GetTime+0x84>
    if((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8000e80:	1e4b      	subs	r3, r1, #1
 8000e82:	2b09      	cmp	r3, #9
 8000e84:	d835      	bhi.n	8000ef2 <HAL_RTC_GetTime+0x156>
 8000e86:	fa29 f303 	lsr.w	r3, r9, r3
 8000e8a:	07db      	lsls	r3, r3, #31
 8000e8c:	d42f      	bmi.n	8000eee <HAL_RTC_GetTime+0x152>
    else if((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8000e8e:	f021 0302 	bic.w	r3, r1, #2
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d001      	beq.n	8000e9a <HAL_RTC_GetTime+0xfe>
 8000e96:	2b09      	cmp	r3, #9
 8000e98:	d104      	bne.n	8000ea4 <HAL_RTC_GetTime+0x108>
      if(day < 30U)
 8000e9a:	2a1d      	cmp	r2, #29
      if(day < 31U)
 8000e9c:	d906      	bls.n	8000eac <HAL_RTC_GetTime+0x110>
        month++;
 8000e9e:	3101      	adds	r1, #1
        day = 1U;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	e02d      	b.n	8000f00 <HAL_RTC_GetTime+0x164>
    else if(month == 2U)
 8000ea4:	2902      	cmp	r1, #2
 8000ea6:	d12b      	bne.n	8000f00 <HAL_RTC_GetTime+0x164>
      if(day < 28U)
 8000ea8:	2a1b      	cmp	r2, #27
 8000eaa:	d801      	bhi.n	8000eb0 <HAL_RTC_GetTime+0x114>
        day++;
 8000eac:	3201      	adds	r2, #1
 8000eae:	e027      	b.n	8000f00 <HAL_RTC_GetTime+0x164>
      else if(day == 28U)
 8000eb0:	2a1c      	cmp	r2, #28
 8000eb2:	d113      	bne.n	8000edc <HAL_RTC_GetTime+0x140>
        if(RTC_IsLeapYear(year))
 8000eb4:	b282      	uxth	r2, r0
  if((nYear % 4U) != 0U) 
 8000eb6:	0793      	lsls	r3, r2, #30
 8000eb8:	d112      	bne.n	8000ee0 <HAL_RTC_GetTime+0x144>
  if((nYear % 100U) != 0U) 
 8000eba:	fbb2 f3fe 	udiv	r3, r2, lr
 8000ebe:	fb0e 2313 	mls	r3, lr, r3, r2
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	b97b      	cbnz	r3, 8000ee6 <HAL_RTC_GetTime+0x14a>
  if((nYear % 400U) == 0U)
 8000ec6:	fbb2 f3fc 	udiv	r3, r2, ip
 8000eca:	fb0c 2313 	mls	r3, ip, r3, r2
 8000ece:	b29b      	uxth	r3, r3
          day++;
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	bf16      	itet	ne
 8000ed4:	2201      	movne	r2, #1
 8000ed6:	221d      	moveq	r2, #29
 8000ed8:	2103      	movne	r1, #3
 8000eda:	e011      	b.n	8000f00 <HAL_RTC_GetTime+0x164>
      else if(day == 29U)
 8000edc:	2a1d      	cmp	r2, #29
 8000ede:	d10f      	bne.n	8000f00 <HAL_RTC_GetTime+0x164>
          day = 1U;
 8000ee0:	2201      	movs	r2, #1
          month++;
 8000ee2:	2103      	movs	r1, #3
 8000ee4:	e00c      	b.n	8000f00 <HAL_RTC_GetTime+0x164>
          day++;
 8000ee6:	221d      	movs	r2, #29
 8000ee8:	e00a      	b.n	8000f00 <HAL_RTC_GetTime+0x164>
    sTime->Hours = hours;    
 8000eea:	702b      	strb	r3, [r5, #0]
 8000eec:	e7b4      	b.n	8000e58 <HAL_RTC_GetTime+0xbc>
      if(day < 31U)
 8000eee:	2a1e      	cmp	r2, #30
 8000ef0:	e7d4      	b.n	8000e9c <HAL_RTC_GetTime+0x100>
       (month == 8U) || (month == 10U) || (month == 12U))
 8000ef2:	290c      	cmp	r1, #12
 8000ef4:	d1cb      	bne.n	8000e8e <HAL_RTC_GetTime+0xf2>
      if(day < 31U)
 8000ef6:	2a1e      	cmp	r2, #30
 8000ef8:	d9d8      	bls.n	8000eac <HAL_RTC_GetTime+0x110>
          day = 1U;
 8000efa:	2201      	movs	r2, #1
          month = 1U;
 8000efc:	4611      	mov	r1, r2
          year++;
 8000efe:	3001      	adds	r0, #1
  for (loop = 0U; loop < DayElapsed; loop++)
 8000f00:	3601      	adds	r6, #1
 8000f02:	e79f      	b.n	8000e44 <HAL_RTC_GetTime+0xa8>
 8000f04:	00015180 	.word	0x00015180

08000f08 <HAL_RTC_SetDate>:
{
 8000f08:	b570      	push	{r4, r5, r6, lr}
 8000f0a:	460d      	mov	r5, r1
  if((hrtc == NULL) || (sDate == NULL))
 8000f0c:	4604      	mov	r4, r0
 8000f0e:	b358      	cbz	r0, 8000f68 <HAL_RTC_SetDate+0x60>
 8000f10:	b351      	cbz	r1, 8000f68 <HAL_RTC_SetDate+0x60>
 __HAL_LOCK(hrtc);
 8000f12:	7c03      	ldrb	r3, [r0, #16]
 8000f14:	2002      	movs	r0, #2
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d027      	beq.n	8000f6a <HAL_RTC_SetDate+0x62>
 8000f1a:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8000f1c:	7460      	strb	r0, [r4, #17]
 __HAL_LOCK(hrtc);
 8000f1e:	7423      	strb	r3, [r4, #16]
 8000f20:	78c8      	ldrb	r0, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8000f22:	bb1a      	cbnz	r2, 8000f6c <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8000f24:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8000f26:	784b      	ldrb	r3, [r1, #1]
 8000f28:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8000f2a:	788b      	ldrb	r3, [r1, #2]
 8000f2c:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8000f2e:	7ba2      	ldrb	r2, [r4, #14]
 8000f30:	7b61      	ldrb	r1, [r4, #13]
 8000f32:	7be0      	ldrb	r0, [r4, #15]
 8000f34:	f7ff fe52 	bl	8000bdc <RTC_WeekDayNum>
 8000f38:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8000f3a:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	f7ff fe21 	bl	8000b84 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8000f42:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <HAL_RTC_SetDate+0xac>)
 8000f44:	4298      	cmp	r0, r3
 8000f46:	d930      	bls.n	8000faa <HAL_RTC_SetDate+0xa2>
 8000f48:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8000f4c:	fbb0 f5f3 	udiv	r5, r0, r3
 8000f50:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000f54:	4620      	mov	r0, r4
 8000f56:	4629      	mov	r1, r5
 8000f58:	f7ff fea6 	bl	8000ca8 <RTC_WriteTimeCounter>
 8000f5c:	4606      	mov	r6, r0
 8000f5e:	b188      	cbz	r0, 8000f84 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8000f60:	2304      	movs	r3, #4
 8000f62:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8000f64:	2300      	movs	r3, #0
 8000f66:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8000f68:	2001      	movs	r0, #1
}
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8000f6c:	f7ff fe2e 	bl	8000bcc <RTC_Bcd2ToByte>
 8000f70:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8000f72:	7848      	ldrb	r0, [r1, #1]
 8000f74:	f7ff fe2a 	bl	8000bcc <RTC_Bcd2ToByte>
 8000f78:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8000f7a:	7888      	ldrb	r0, [r1, #2]
 8000f7c:	f7ff fe26 	bl	8000bcc <RTC_Bcd2ToByte>
 8000f80:	73a0      	strb	r0, [r4, #14]
 8000f82:	e7d4      	b.n	8000f2e <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000f84:	4620      	mov	r0, r4
 8000f86:	f7ff fe0f 	bl	8000ba8 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000f8a:	1c43      	adds	r3, r0, #1
 8000f8c:	d00d      	beq.n	8000faa <HAL_RTC_SetDate+0xa2>
      if(counter_alarm < counter_time)
 8000f8e:	4285      	cmp	r5, r0
 8000f90:	d90b      	bls.n	8000faa <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000f92:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8000f96:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	f7ff fe98 	bl	8000cd0 <RTC_WriteAlarmCounter>
 8000fa0:	b118      	cbz	r0, 8000faa <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000fa2:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8000fa4:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000fa6:	7463      	strb	r3, [r4, #17]
 8000fa8:	e7de      	b.n	8000f68 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8000faa:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8000fac:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8000fae:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8000fb0:	7420      	strb	r0, [r4, #16]
  return HAL_OK;    
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
 8000fb4:	00015f8f 	.word	0x00015f8f

08000fb8 <HAL_RTC_SetAlarm_IT>:
{
 8000fb8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000fbc:	4692      	mov	sl, r2
  RTC_TimeTypeDef stime = {0U};
 8000fbe:	2200      	movs	r2, #0
{
 8000fc0:	4688      	mov	r8, r1
  RTC_TimeTypeDef stime = {0U};
 8000fc2:	f8ad 2004 	strh.w	r2, [sp, #4]
 8000fc6:	f88d 2006 	strb.w	r2, [sp, #6]
  if((hrtc == NULL) || (sAlarm == NULL))
 8000fca:	4604      	mov	r4, r0
 8000fcc:	b918      	cbnz	r0, 8000fd6 <HAL_RTC_SetAlarm_IT+0x1e>
    return HAL_ERROR;
 8000fce:	2001      	movs	r0, #1
}
 8000fd0:	b002      	add	sp, #8
 8000fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if((hrtc == NULL) || (sAlarm == NULL))
 8000fd6:	2900      	cmp	r1, #0
 8000fd8:	d0f9      	beq.n	8000fce <HAL_RTC_SetAlarm_IT+0x16>
  __HAL_LOCK(hrtc);
 8000fda:	7c03      	ldrb	r3, [r0, #16]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	f04f 0302 	mov.w	r3, #2
 8000fe2:	d054      	beq.n	800108e <HAL_RTC_SetAlarm_IT+0xd6>
 8000fe4:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8000fe6:	7443      	strb	r3, [r0, #17]
  __HAL_LOCK(hrtc);
 8000fe8:	7401      	strb	r1, [r0, #16]
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8000fea:	a901      	add	r1, sp, #4
 8000fec:	f7ff fed6 	bl	8000d9c <HAL_RTC_GetTime>
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d1ec      	bne.n	8000fce <HAL_RTC_SetAlarm_IT+0x16>
                      ((uint32_t)stime.Minutes * 60U) + \
 8000ff4:	263c      	movs	r6, #60	; 0x3c
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8000ff6:	f44f 6961 	mov.w	r9, #3600	; 0xe10
                      ((uint32_t)stime.Minutes * 60U) + \
 8000ffa:	f89d 3005 	ldrb.w	r3, [sp, #5]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8000ffe:	f89d 5004 	ldrb.w	r5, [sp, #4]
                      ((uint32_t)stime.Minutes * 60U) + \
 8001002:	4373      	muls	r3, r6
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001004:	fb09 3505 	mla	r5, r9, r5, r3
                      ((uint32_t)stime.Seconds));  
 8001008:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800100c:	f898 0000 	ldrb.w	r0, [r8]
 8001010:	f898 7001 	ldrb.w	r7, [r8, #1]
  counter_time = (uint32_t)(((uint32_t)stime.Hours * 3600U) + \
 8001014:	441d      	add	r5, r3
 8001016:	f898 8002 	ldrb.w	r8, [r8, #2]
  if(Format == RTC_FORMAT_BIN)
 800101a:	f1ba 0f00 	cmp.w	sl, #0
 800101e:	d113      	bne.n	8001048 <HAL_RTC_SetAlarm_IT+0x90>
      ((uint32_t)sAlarm->AlarmTime.Minutes * 60U) + \
 8001020:	437e      	muls	r6, r7
    counter_alarm = (uint32_t)(((uint32_t)sAlarm->AlarmTime.Hours * 3600U) + \
 8001022:	fb09 6000 	mla	r0, r9, r0, r6
 8001026:	eb00 0108 	add.w	r1, r0, r8
  if (counter_alarm < counter_time)
 800102a:	42a9      	cmp	r1, r5
    counter_alarm += (uint32_t)(24U * 3600U);
 800102c:	bf3c      	itt	cc
 800102e:	f501 31a8 	addcc.w	r1, r1, #86016	; 0x15000
 8001032:	f501 71c0 	addcc.w	r1, r1, #384	; 0x180
  if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001036:	4620      	mov	r0, r4
 8001038:	f7ff fe4a 	bl	8000cd0 <RTC_WriteAlarmCounter>
 800103c:	b190      	cbz	r0, 8001064 <HAL_RTC_SetAlarm_IT+0xac>
    hrtc->State = HAL_RTC_STATE_ERROR;
 800103e:	2304      	movs	r3, #4
 8001040:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8001042:	2300      	movs	r3, #0
 8001044:	7423      	strb	r3, [r4, #16]
 8001046:	e7c2      	b.n	8000fce <HAL_RTC_SetAlarm_IT+0x16>
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001048:	f7ff fdc0 	bl	8000bcc <RTC_Bcd2ToByte>
 800104c:	4601      	mov	r1, r0
                     ((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)) * 60U) + \
 800104e:	4638      	mov	r0, r7
 8001050:	f7ff fdbc 	bl	8000bcc <RTC_Bcd2ToByte>
 8001054:	4370      	muls	r0, r6
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001056:	fb09 0101 	mla	r1, r9, r1, r0
                     ((uint32_t)RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));   
 800105a:	4640      	mov	r0, r8
 800105c:	f7ff fdb6 	bl	8000bcc <RTC_Bcd2ToByte>
    counter_alarm = (((uint32_t)(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)) * 3600U) + \
 8001060:	4401      	add	r1, r0
 8001062:	e7e2      	b.n	800102a <HAL_RTC_SetAlarm_IT+0x72>
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001064:	f06f 0202 	mvn.w	r2, #2
 8001068:	6823      	ldr	r3, [r4, #0]
 800106a:	605a      	str	r2, [r3, #4]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	f042 0202 	orr.w	r2, r2, #2
 8001072:	601a      	str	r2, [r3, #0]
    __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <HAL_RTC_SetAlarm_IT+0xdc>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800107c:	601a      	str	r2, [r3, #0]
    __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001084:	609a      	str	r2, [r3, #8]
    hrtc->State = HAL_RTC_STATE_READY;
 8001086:	2301      	movs	r3, #1
   __HAL_UNLOCK(hrtc); 
 8001088:	7420      	strb	r0, [r4, #16]
    hrtc->State = HAL_RTC_STATE_READY;
 800108a:	7463      	strb	r3, [r4, #17]
   return HAL_OK;
 800108c:	e7a0      	b.n	8000fd0 <HAL_RTC_SetAlarm_IT+0x18>
  __HAL_LOCK(hrtc);
 800108e:	4618      	mov	r0, r3
 8001090:	e79e      	b.n	8000fd0 <HAL_RTC_SetAlarm_IT+0x18>
 8001092:	bf00      	nop
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_RTC_AlarmAEventCallback>:
{
 8001098:	4770      	bx	lr
	...

0800109c <HAL_RTC_AlarmIRQHandler>:
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 800109c:	6803      	ldr	r3, [r0, #0]
{  
 800109e:	b510      	push	{r4, lr}
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80010a0:	681a      	ldr	r2, [r3, #0]
{  
 80010a2:	4604      	mov	r4, r0
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA))
 80010a4:	0792      	lsls	r2, r2, #30
 80010a6:	d508      	bpl.n	80010ba <HAL_RTC_AlarmIRQHandler+0x1e>
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	079b      	lsls	r3, r3, #30
 80010ac:	d505      	bpl.n	80010ba <HAL_RTC_AlarmIRQHandler+0x1e>
      HAL_RTC_AlarmAEventCallback(hrtc);
 80010ae:	f7ff fff3 	bl	8001098 <HAL_RTC_AlarmAEventCallback>
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80010b2:	f06f 0202 	mvn.w	r2, #2
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	605a      	str	r2, [r3, #4]
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80010ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010be:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <HAL_RTC_AlarmIRQHandler+0x2c>)
 80010c0:	615a      	str	r2, [r3, #20]
  hrtc->State = HAL_RTC_STATE_READY; 
 80010c2:	2301      	movs	r3, #1
 80010c4:	7463      	strb	r3, [r4, #17]
 80010c6:	bd10      	pop	{r4, pc}
 80010c8:	40010400 	.word	0x40010400

080010cc <HAL_RTC_WaitForSynchro>:
{
 80010cc:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 80010ce:	4604      	mov	r4, r0
 80010d0:	b1a8      	cbz	r0, 80010fe <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80010d2:	6802      	ldr	r2, [r0, #0]
 80010d4:	6853      	ldr	r3, [r2, #4]
 80010d6:	f023 0308 	bic.w	r3, r3, #8
 80010da:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 80010dc:	f7ff f864 	bl	80001a8 <HAL_GetTick>
 80010e0:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	071b      	lsls	r3, r3, #28
 80010e8:	d501      	bpl.n	80010ee <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 80010ea:	2000      	movs	r0, #0
 80010ec:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 80010ee:	f7ff f85b 	bl	80001a8 <HAL_GetTick>
 80010f2:	1b40      	subs	r0, r0, r5
 80010f4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80010f8:	d9f3      	bls.n	80010e2 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 80010fa:	2003      	movs	r0, #3
}
 80010fc:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 80010fe:	2001      	movs	r0, #1
 8001100:	bd38      	pop	{r3, r4, r5, pc}
	...

08001104 <HAL_RTC_Init>:
{
 8001104:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 8001106:	4604      	mov	r4, r0
 8001108:	b170      	cbz	r0, 8001128 <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800110a:	7c43      	ldrb	r3, [r0, #17]
 800110c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001110:	b913      	cbnz	r3, 8001118 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001112:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001114:	f000 f9b4 	bl	8001480 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8001118:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800111a:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 800111c:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800111e:	f7ff ffd5 	bl	80010cc <HAL_RTC_WaitForSynchro>
 8001122:	b118      	cbz	r0, 800112c <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001124:	2304      	movs	r3, #4
 8001126:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 8001128:	2001      	movs	r0, #1
}
 800112a:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800112c:	4620      	mov	r0, r4
 800112e:	f7ff fd8c 	bl	8000c4a <RTC_EnterInitMode>
 8001132:	2800      	cmp	r0, #0
 8001134:	d1f6      	bne.n	8001124 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001136:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001138:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800113a:	6853      	ldr	r3, [r2, #4]
 800113c:	f023 0307 	bic.w	r3, r3, #7
 8001140:	6053      	str	r3, [r2, #4]
 8001142:	4a17      	ldr	r2, [pc, #92]	; (80011a0 <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001144:	b118      	cbz	r0, 800114e <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001146:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001148:	f021 0101 	bic.w	r1, r1, #1
 800114c:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800114e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001150:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001154:	4303      	orrs	r3, r0
 8001156:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001158:	6860      	ldr	r0, [r4, #4]
 800115a:	1c43      	adds	r3, r0, #1
 800115c:	d105      	bne.n	800116a <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff fc9a 	bl	8000a98 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8001164:	2800      	cmp	r0, #0
 8001166:	d0dd      	beq.n	8001124 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8001168:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800116a:	6822      	ldr	r2, [r4, #0]
 800116c:	6893      	ldr	r3, [r2, #8]
 800116e:	f023 030f 	bic.w	r3, r3, #15
 8001172:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001176:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001178:	68d3      	ldr	r3, [r2, #12]
 800117a:	b280      	uxth	r0, r0
 800117c:	0c1b      	lsrs	r3, r3, #16
 800117e:	041b      	lsls	r3, r3, #16
 8001180:	4318      	orrs	r0, r3
 8001182:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff fd77 	bl	8000c78 <RTC_ExitInitMode>
 800118a:	2301      	movs	r3, #1
 800118c:	b110      	cbz	r0, 8001194 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 800118e:	2204      	movs	r2, #4
 8001190:	7462      	strb	r2, [r4, #17]
 8001192:	e7c9      	b.n	8001128 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8001194:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001196:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001198:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 800119a:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 800119c:	bd10      	pop	{r4, pc}
 800119e:	bf00      	nop
 80011a0:	40006c00 	.word	0x40006c00

080011a4 <HAL_RTCEx_BKUPWrite>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));
  
  tmp = (uint32_t)BKP_BASE; 
  tmp += (BackupRegister * 4U);
 80011a4:	0089      	lsls	r1, r1, #2
 80011a6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80011aa:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00

  *(__IO uint32_t *) tmp = (Data & BKP_DR1_D);
 80011ae:	b292      	uxth	r2, r2
 80011b0:	600a      	str	r2, [r1, #0]
 80011b2:	4770      	bx	lr

080011b4 <HAL_RTCEx_BKUPRead>:

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  backupregister = (uint32_t)BKP_BASE; 
  backupregister += (BackupRegister * 4U);
 80011b4:	0089      	lsls	r1, r1, #2
 80011b6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80011ba:	f501 41d8 	add.w	r1, r1, #27648	; 0x6c00
  
  pvalue = (*(__IO uint32_t *)(backupregister)) & BKP_DR1_D;
 80011be:	6808      	ldr	r0, [r1, #0]

  /* Read the specified register */
  return pvalue;
}
 80011c0:	b280      	uxth	r0, r0
 80011c2:	4770      	bx	lr

080011c4 <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80011c4:	2306      	movs	r3, #6
{
 80011c6:	b510      	push	{r4, lr}
 80011c8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80011ca:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80011cc:	2310      	movs	r3, #16
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011ce:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80011d0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011d2:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d4:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011d6:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011da:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011dc:	f7ff f960 	bl	80004a0 <HAL_RCC_OscConfig>
 80011e0:	4601      	mov	r1, r0
 80011e2:	b100      	cbz	r0, 80011e6 <SystemClock_Config+0x22>
 80011e4:	e7fe      	b.n	80011e4 <SystemClock_Config+0x20>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	230f      	movs	r3, #15
 80011e8:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80011ea:	2390      	movs	r3, #144	; 0x90
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ec:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ee:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f0:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f2:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80011f4:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f6:	f7ff fb1d 	bl	8000834 <HAL_RCC_ClockConfig>
 80011fa:	b100      	cbz	r0, 80011fe <SystemClock_Config+0x3a>
 80011fc:	e7fe      	b.n	80011fc <SystemClock_Config+0x38>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011fe:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001202:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001204:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001206:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001208:	f7ff fbce 	bl	80009a8 <HAL_RCCEx_PeriphCLKConfig>
 800120c:	4604      	mov	r4, r0
 800120e:	b100      	cbz	r0, 8001212 <SystemClock_Config+0x4e>
 8001210:	e7fe      	b.n	8001210 <SystemClock_Config+0x4c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001212:	f7ff fbb3 	bl	800097c <HAL_RCC_GetHCLKFreq>
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	fbb0 f0f3 	udiv	r0, r0, r3
 800121e:	f7ff f82b 	bl	8000278 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001222:	2004      	movs	r0, #4
 8001224:	f7ff f83e 	bl	80002a4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001228:	4622      	mov	r2, r4
 800122a:	4621      	mov	r1, r4
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f7fe ffe2 	bl	80001f8 <HAL_NVIC_SetPriority>
}
 8001234:	b014      	add	sp, #80	; 0x50
 8001236:	bd10      	pop	{r4, pc}

08001238 <main>:
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
  HAL_Init();
 800123c:	f7fe ff9a 	bl	8000174 <HAL_Init>
  SystemClock_Config();
 8001240:	f7ff ffc0 	bl	80011c4 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001244:	4b62      	ldr	r3, [pc, #392]	; (80013d0 <main+0x198>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin, GPIO_PIN_RESET);
 8001246:	f240 410b 	movw	r1, #1035	; 0x40b
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin, GPIO_PIN_RESET);
 800124c:	4861      	ldr	r0, [pc, #388]	; (80013d4 <main+0x19c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	f042 0210 	orr.w	r2, r2, #16
 8001252:	619a      	str	r2, [r3, #24]
 8001254:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, SIG_Pin|D7_Pin|D6_Pin|D5_Pin 
                          |D4_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD1_Pin LD2_Pin LD3_Pin RS_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	f002 0210 	and.w	r2, r2, #16
 800125c:	9201      	str	r2, [sp, #4]
 800125e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2402      	movs	r4, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001264:	f042 0208 	orr.w	r2, r2, #8
 8001268:	619a      	str	r2, [r3, #24]
 800126a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : SW1_Pin SW3_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126c:	2700      	movs	r7, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	f002 0208 	and.w	r2, r2, #8
 8001272:	9202      	str	r2, [sp, #8]
 8001274:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	699a      	ldr	r2, [r3, #24]
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 8001278:	f243 26f2 	movw	r6, #13042	; 0x32f2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	f042 0204 	orr.w	r2, r2, #4
 8001280:	619a      	str	r2, [r3, #24]
 8001282:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	9303      	str	r3, [sp, #12]
 800128c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin, GPIO_PIN_RESET);
 800128e:	f7ff f8fb 	bl	8000488 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SIG_Pin|D7_Pin|D6_Pin|D5_Pin 
 8001292:	2200      	movs	r2, #0
 8001294:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8001298:	484f      	ldr	r0, [pc, #316]	; (80013d8 <main+0x1a0>)
 800129a:	f7ff f8f5 	bl	8000488 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin;
 800129e:	f240 430b 	movw	r3, #1035	; 0x40b
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	a904      	add	r1, sp, #16
 80012a4:	484b      	ldr	r0, [pc, #300]	; (80013d4 <main+0x19c>)
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin|RS_Pin;
 80012a6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ac:	f7ff f80c 	bl	80002c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SW1_Pin|SW3_Pin;
 80012b0:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	a904      	add	r1, sp, #16
 80012b6:	4847      	ldr	r0, [pc, #284]	; (80013d4 <main+0x19c>)
  GPIO_InitStruct.Pin = SW1_Pin|SW3_Pin;
 80012b8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ba:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012bc:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f7ff f803 	bl	80002c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIG_Pin D7_Pin D6_Pin D5_Pin 
                           D4_Pin EN_Pin */
  GPIO_InitStruct.Pin = SIG_Pin|D7_Pin|D6_Pin|D5_Pin 
 80012c2:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
                          |D4_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	a904      	add	r1, sp, #16
 80012ca:	4843      	ldr	r0, [pc, #268]	; (80013d8 <main+0x1a0>)
  hrtc.Instance = RTC;
 80012cc:	4c43      	ldr	r4, [pc, #268]	; (80013dc <main+0x1a4>)
  GPIO_InitStruct.Pin = SIG_Pin|D7_Pin|D6_Pin|D5_Pin 
 80012ce:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d2:	f7fe fff9 	bl	80002c8 <HAL_GPIO_Init>
  hrtc.Instance = RTC;
 80012d6:	4b42      	ldr	r3, [pc, #264]	; (80013e0 <main+0x1a8>)
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 80012d8:	4629      	mov	r1, r5
 80012da:	4620      	mov	r0, r4
  hrtc.Instance = RTC;
 80012dc:	6023      	str	r3, [r4, #0]
  if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) != 0x32F2){
 80012de:	f7ff ff69 	bl	80011b4 <HAL_RTCEx_BKUPRead>
 80012e2:	42b0      	cmp	r0, r6
 80012e4:	d02d      	beq.n	8001342 <main+0x10a>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012ea:	4620      	mov	r0, r4
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80012ec:	6063      	str	r3, [r4, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80012ee:	60a7      	str	r7, [r4, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012f0:	f7ff ff08 	bl	8001104 <HAL_RTC_Init>
 80012f4:	b100      	cbz	r0, 80012f8 <main+0xc0>
 80012f6:	e7fe      	b.n	80012f6 <main+0xbe>
  sTime.Hours = 0x12;
 80012f8:	2312      	movs	r3, #18
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012fa:	462a      	mov	r2, r5
 80012fc:	4669      	mov	r1, sp
 80012fe:	4620      	mov	r0, r4
  sTime.Hours = 0x12;
 8001300:	f88d 3000 	strb.w	r3, [sp]
  sTime.Minutes = 0x12;
 8001304:	f88d 3001 	strb.w	r3, [sp, #1]
  sTime.Seconds = 0x12;
 8001308:	f88d 3002 	strb.w	r3, [sp, #2]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800130c:	f7ff fcf4 	bl	8000cf8 <HAL_RTC_SetTime>
 8001310:	b100      	cbz	r0, 8001314 <main+0xdc>
 8001312:	e7fe      	b.n	8001312 <main+0xda>
  DateToUpdate.Month = RTC_MONTH_MARCH;
 8001314:	2303      	movs	r3, #3
 8001316:	f88d 3011 	strb.w	r3, [sp, #17]
  DateToUpdate.Date = 0x28;
 800131a:	2328      	movs	r3, #40	; 0x28
 800131c:	f88d 3012 	strb.w	r3, [sp, #18]
  DateToUpdate.Year = 0x18;
 8001320:	2318      	movs	r3, #24
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001322:	462a      	mov	r2, r5
 8001324:	a904      	add	r1, sp, #16
 8001326:	4620      	mov	r0, r4
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001328:	f88d 5010 	strb.w	r5, [sp, #16]
  DateToUpdate.Year = 0x18;
 800132c:	f88d 3013 	strb.w	r3, [sp, #19]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001330:	f7ff fdea 	bl	8000f08 <HAL_RTC_SetDate>
 8001334:	b100      	cbz	r0, 8001338 <main+0x100>
 8001336:	e7fe      	b.n	8001336 <main+0xfe>
    HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR1,0x32F2);
 8001338:	4632      	mov	r2, r6
 800133a:	4629      	mov	r1, r5
 800133c:	4620      	mov	r0, r4
 800133e:	f7ff ff31 	bl	80011a4 <HAL_RTCEx_BKUPWrite>
  HAL_GPIO_WritePin(SIG_GPIO_Port, SIG_Pin, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001348:	4823      	ldr	r0, [pc, #140]	; (80013d8 <main+0x1a0>)
 800134a:	f7ff f89d 	bl	8000488 <HAL_GPIO_WritePin>
  HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BCD);
 800134e:	4669      	mov	r1, sp
 8001350:	2201      	movs	r2, #1
 8001352:	4822      	ldr	r0, [pc, #136]	; (80013dc <main+0x1a4>)
 8001354:	f7ff fd22 	bl	8000d9c <HAL_RTC_GetTime>
  Hour = RTC_Time.Hours;
 8001358:	4e22      	ldr	r6, [pc, #136]	; (80013e4 <main+0x1ac>)
 800135a:	f89d 3000 	ldrb.w	r3, [sp]
  Min  = RTC_Time.Minutes;
 800135e:	4d22      	ldr	r5, [pc, #136]	; (80013e8 <main+0x1b0>)
  Hour = RTC_Time.Hours;
 8001360:	7033      	strb	r3, [r6, #0]
  Min  = RTC_Time.Minutes;
 8001362:	f89d 3001 	ldrb.w	r3, [sp, #1]
  Sec  = RTC_Time.Seconds;
 8001366:	4c21      	ldr	r4, [pc, #132]	; (80013ec <main+0x1b4>)
  Min  = RTC_Time.Minutes;
 8001368:	702b      	strb	r3, [r5, #0]
  Sec  = RTC_Time.Seconds;
 800136a:	f89d 3002 	ldrb.w	r3, [sp, #2]
  RTC_Alarm_Time.Alarm = 1;
 800136e:	2701      	movs	r7, #1
  Sec  = RTC_Time.Seconds;
 8001370:	7023      	strb	r3, [r4, #0]
  RTC_Time.Hours = 0x05;
 8001372:	2305      	movs	r3, #5
  RTC_Time.Seconds = 0x00;
 8001374:	2200      	movs	r2, #0
  RTC_Time.Hours = 0x05;
 8001376:	f88d 3000 	strb.w	r3, [sp]
  RTC_Time.Minutes = 0x05;
 800137a:	f88d 3001 	strb.w	r3, [sp, #1]
  RTC_Alarm_Time.AlarmTime.Hours = 0x05;
 800137e:	f88d 3010 	strb.w	r3, [sp, #16]
  RTC_Alarm_Time.AlarmTime.Minutes = 0x05;
 8001382:	f88d 3011 	strb.w	r3, [sp, #17]
  RTC_Alarm_Time.AlarmTime.Seconds = 0x30;
 8001386:	2330      	movs	r3, #48	; 0x30
  HAL_Delay(5000);
 8001388:	f241 3088 	movw	r0, #5000	; 0x1388
  RTC_Alarm_Time.AlarmTime.Seconds = 0x30;
 800138c:	f88d 3012 	strb.w	r3, [sp, #18]
  RTC_Time.Seconds = 0x00;
 8001390:	f88d 2002 	strb.w	r2, [sp, #2]
  RTC_Alarm_Time.Alarm = 1;
 8001394:	9705      	str	r7, [sp, #20]
  HAL_Delay(5000);
 8001396:	f7fe ff0d 	bl	80001b4 <HAL_Delay>
  HAL_RTC_SetTime(&hrtc, &RTC_Time, RTC_FORMAT_BCD);
 800139a:	463a      	mov	r2, r7
 800139c:	4669      	mov	r1, sp
 800139e:	480f      	ldr	r0, [pc, #60]	; (80013dc <main+0x1a4>)
 80013a0:	f7ff fcaa 	bl	8000cf8 <HAL_RTC_SetTime>
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_Alarm_Time, RTC_FORMAT_BCD);
 80013a4:	463a      	mov	r2, r7
 80013a6:	a904      	add	r1, sp, #16
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <main+0x1a4>)
 80013aa:	f7ff fe05 	bl	8000fb8 <HAL_RTC_SetAlarm_IT>
	  HAL_RTC_GetTime(&hrtc, &RTC_Time, RTC_FORMAT_BCD);
 80013ae:	4f0b      	ldr	r7, [pc, #44]	; (80013dc <main+0x1a4>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	4669      	mov	r1, sp
 80013b4:	4638      	mov	r0, r7
 80013b6:	f7ff fcf1 	bl	8000d9c <HAL_RTC_GetTime>
	  Hour = RTC_Time.Hours;
 80013ba:	f89d 3000 	ldrb.w	r3, [sp]
 80013be:	7033      	strb	r3, [r6, #0]
	  Min  = RTC_Time.Minutes;
 80013c0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80013c4:	702b      	strb	r3, [r5, #0]
	  Sec  = RTC_Time.Seconds;
 80013c6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80013ca:	7023      	strb	r3, [r4, #0]
 80013cc:	e7f0      	b.n	80013b0 <main+0x178>
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010c00 	.word	0x40010c00
 80013d8:	40010800 	.word	0x40010800
 80013dc:	2000004c 	.word	0x2000004c
 80013e0:	40002800 	.word	0x40002800
 80013e4:	20000025 	.word	0x20000025
 80013e8:	20000024 	.word	0x20000024
 80013ec:	20000026 	.word	0x20000026

080013f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f0:	4b21      	ldr	r3, [pc, #132]	; (8001478 <HAL_MspInit+0x88>)
{
 80013f2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f4:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f6:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 80013f8:	f042 0201 	orr.w	r2, r2, #1
 80013fc:	619a      	str	r2, [r3, #24]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0301 	and.w	r3, r3, #1
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	f7fe fee4 	bl	80001d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	f06f 000b 	mvn.w	r0, #11
 8001412:	4611      	mov	r1, r2
 8001414:	f7fe fef0 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	f06f 000a 	mvn.w	r0, #10
 800141e:	4611      	mov	r1, r2
 8001420:	f7fe feea 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	f06f 0009 	mvn.w	r0, #9
 800142a:	4611      	mov	r1, r2
 800142c:	f7fe fee4 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	f06f 0004 	mvn.w	r0, #4
 8001436:	4611      	mov	r1, r2
 8001438:	f7fe fede 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	f06f 0003 	mvn.w	r0, #3
 8001442:	4611      	mov	r1, r2
 8001444:	f7fe fed8 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	f06f 0001 	mvn.w	r0, #1
 800144e:	4611      	mov	r1, r2
 8001450:	f7fe fed2 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	f04f 30ff 	mov.w	r0, #4294967295
 800145a:	4611      	mov	r1, r2
 800145c:	f7fe fecc 	bl	80001f8 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_MspInit+0x8c>)
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
 800146c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001470:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	b003      	add	sp, #12
 8001474:	f85d fb04 	ldr.w	pc, [sp], #4
 8001478:	40021000 	.word	0x40021000
 800147c:	40010000 	.word	0x40010000

08001480 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001480:	b507      	push	{r0, r1, r2, lr}

  if(hrtc->Instance==RTC)
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_RTC_MspInit+0x40>)
 8001484:	6802      	ldr	r2, [r0, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	d116      	bne.n	80014b8 <HAL_RTC_MspInit+0x38>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800148a:	f7ff f803 	bl	8000494 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800148e:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <HAL_RTC_MspInit+0x44>)
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001490:	2029      	movs	r0, #41	; 0x29
    __HAL_RCC_BKP_CLK_ENABLE();
 8001492:	69da      	ldr	r2, [r3, #28]
 8001494:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001498:	61da      	str	r2, [r3, #28]
    __HAL_RCC_RTC_ENABLE();
 800149a:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_RTC_MspInit+0x48>)
 80014a8:	601a      	str	r2, [r3, #0]
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	4611      	mov	r1, r2
 80014ae:	f7fe fea3 	bl	80001f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80014b2:	2029      	movs	r0, #41	; 0x29
 80014b4:	f7fe fed4 	bl	8000260 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014b8:	b003      	add	sp, #12
 80014ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80014be:	bf00      	nop
 80014c0:	40002800 	.word	0x40002800
 80014c4:	40021000 	.word	0x40021000
 80014c8:	4242043c 	.word	0x4242043c

080014cc <NMI_Handler>:
 80014cc:	4770      	bx	lr

080014ce <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler>

080014d0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80014d0:	e7fe      	b.n	80014d0 <MemManage_Handler>

080014d2 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80014d2:	e7fe      	b.n	80014d2 <BusFault_Handler>

080014d4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80014d4:	e7fe      	b.n	80014d4 <UsageFault_Handler>

080014d6 <SVC_Handler>:
 80014d6:	4770      	bx	lr

080014d8 <DebugMon_Handler>:
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 80014da:	4770      	bx	lr

080014dc <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80014dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014de:	f7fe fe5b 	bl	8000198 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80014e6:	f7fe beea 	b.w	80002be <HAL_SYSTICK_IRQHandler>
	...

080014ec <RTC_Alarm_IRQHandler>:
void RTC_Alarm_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80014ec:	4801      	ldr	r0, [pc, #4]	; (80014f4 <RTC_Alarm_IRQHandler+0x8>)
 80014ee:	f7ff bdd5 	b.w	800109c <HAL_RTC_AlarmIRQHandler>
 80014f2:	bf00      	nop
 80014f4:	2000004c 	.word	0x2000004c

080014f8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80014f8:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <SystemInit+0x40>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	f042 0201 	orr.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001502:	6859      	ldr	r1, [r3, #4]
 8001504:	4a0d      	ldr	r2, [pc, #52]	; (800153c <SystemInit+0x44>)
 8001506:	400a      	ands	r2, r1
 8001508:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001510:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001514:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800151c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001524:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001526:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800152a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800152c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <SystemInit+0x48>)
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	f8ff0000 	.word	0xf8ff0000
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001544:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001546:	e003      	b.n	8001550 <LoopCopyDataInit>

08001548 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800154a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800154c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800154e:	3104      	adds	r1, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001550:	480a      	ldr	r0, [pc, #40]	; (800157c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001554:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001556:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001558:	d3f6      	bcc.n	8001548 <CopyDataInit>
  ldr r2, =_sbss
 800155a:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800155c:	e002      	b.n	8001564 <LoopFillZerobss>

0800155e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001560:	f842 3b04 	str.w	r3, [r2], #4

08001564 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001566:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001568:	d3f9      	bcc.n	800155e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800156a:	f7ff ffc5 	bl	80014f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800156e:	f000 f80f 	bl	8001590 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001572:	f7ff fe61 	bl	8001238 <main>
  bx lr
 8001576:	4770      	bx	lr
  ldr r3, =_sidata
 8001578:	08001630 	.word	0x08001630
  ldr r0, =_sdata
 800157c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001580:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001584:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001588:	20000060 	.word	0x20000060

0800158c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800158c:	e7fe      	b.n	800158c <ADC1_2_IRQHandler>
	...

08001590 <__libc_init_array>:
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	2500      	movs	r5, #0
 8001594:	4e0c      	ldr	r6, [pc, #48]	; (80015c8 <__libc_init_array+0x38>)
 8001596:	4c0d      	ldr	r4, [pc, #52]	; (80015cc <__libc_init_array+0x3c>)
 8001598:	1ba4      	subs	r4, r4, r6
 800159a:	10a4      	asrs	r4, r4, #2
 800159c:	42a5      	cmp	r5, r4
 800159e:	d109      	bne.n	80015b4 <__libc_init_array+0x24>
 80015a0:	f000 f81a 	bl	80015d8 <_init>
 80015a4:	2500      	movs	r5, #0
 80015a6:	4e0a      	ldr	r6, [pc, #40]	; (80015d0 <__libc_init_array+0x40>)
 80015a8:	4c0a      	ldr	r4, [pc, #40]	; (80015d4 <__libc_init_array+0x44>)
 80015aa:	1ba4      	subs	r4, r4, r6
 80015ac:	10a4      	asrs	r4, r4, #2
 80015ae:	42a5      	cmp	r5, r4
 80015b0:	d105      	bne.n	80015be <__libc_init_array+0x2e>
 80015b2:	bd70      	pop	{r4, r5, r6, pc}
 80015b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015b8:	4798      	blx	r3
 80015ba:	3501      	adds	r5, #1
 80015bc:	e7ee      	b.n	800159c <__libc_init_array+0xc>
 80015be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015c2:	4798      	blx	r3
 80015c4:	3501      	adds	r5, #1
 80015c6:	e7f2      	b.n	80015ae <__libc_init_array+0x1e>
 80015c8:	08001628 	.word	0x08001628
 80015cc:	08001628 	.word	0x08001628
 80015d0:	08001628 	.word	0x08001628
 80015d4:	0800162c 	.word	0x0800162c

080015d8 <_init>:
 80015d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015da:	bf00      	nop
 80015dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015de:	bc08      	pop	{r3}
 80015e0:	469e      	mov	lr, r3
 80015e2:	4770      	bx	lr

080015e4 <_fini>:
 80015e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015e6:	bf00      	nop
 80015e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015ea:	bc08      	pop	{r3}
 80015ec:	469e      	mov	lr, r3
 80015ee:	4770      	bx	lr
